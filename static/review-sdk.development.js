(function(l, r) {
    if (!l || l.getElementById("livereloadscript")) return;
    r = l.createElement("script");
    r.async = 1;
    r.src = "//" + (self.location.host || "localhost").split(":")[0] + ":35729/livereload.js?snipver=1";
    r.id = "livereloadscript";
    l.getElementsByTagName("head")[0].appendChild(r);
})(self.document);

(function(global, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("@jk/api")) : typeof define === "function" && define.amd ? define([ "exports", "@jk/api" ], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, 
    factory(global["review-sdk"] = {}));
})(this, (function(exports) {
    "use strict";
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
    }
    var reactExports = {};
    var react = {
        get exports() {
            return reactExports;
        },
        set exports(v) {
            reactExports = v;
        }
    };
    var react_developmentExports = {};
    var react_development = {
        get exports() {
            return react_developmentExports;
        },
        set exports(v) {
            react_developmentExports = v;
        }
    };
    /**
	 * @license React
	 * react.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */    var hasRequiredReact_development;
    function requireReact_development() {
        if (hasRequiredReact_development) return react_developmentExports;
        hasRequiredReact_development = 1;
        (function(module, exports) {
            {
                (function() {
                    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
                        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
                    }
                    var ReactVersion = "18.2.0";
                    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
                    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
                    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
                    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
                    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
                    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
                    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
                    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
                    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
                    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
                    var REACT_MEMO_TYPE = Symbol.for("react.memo");
                    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
                    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
                    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
                    var FAUX_ITERATOR_SYMBOL = "@@iterator";
                    function getIteratorFn(maybeIterable) {
                        if (maybeIterable === null || typeof maybeIterable !== "object") {
                            return null;
                        }
                        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
                        if (typeof maybeIterator === "function") {
                            return maybeIterator;
                        }
                        return null;
                    }
                    var ReactCurrentDispatcher = {
                        current: null
                    };
                    var ReactCurrentBatchConfig = {
                        transition: null
                    };
                    var ReactCurrentActQueue = {
                        current: null,
                        isBatchingLegacy: false,
                        didScheduleLegacyUpdate: false
                    };
                    var ReactCurrentOwner = {
                        current: null
                    };
                    var ReactDebugCurrentFrame = {};
                    var currentExtraStackFrame = null;
                    function setExtraStackFrame(stack) {
                        {
                            currentExtraStackFrame = stack;
                        }
                    }
                    {
                        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
                            {
                                currentExtraStackFrame = stack;
                            }
                        };
                        ReactDebugCurrentFrame.getCurrentStack = null;
                        ReactDebugCurrentFrame.getStackAddendum = function() {
                            var stack = "";
                            if (currentExtraStackFrame) {
                                stack += currentExtraStackFrame;
                            }
                            var impl = ReactDebugCurrentFrame.getCurrentStack;
                            if (impl) {
                                stack += impl() || "";
                            }
                            return stack;
                        };
                    }
                    var enableScopeAPI = false;
                    var enableCacheElement = false;
                    var enableTransitionTracing = false;
                    var enableLegacyHidden = false;
                    var enableDebugTracing = false;
                    var ReactSharedInternals = {
                        ReactCurrentDispatcher: ReactCurrentDispatcher,
                        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
                        ReactCurrentOwner: ReactCurrentOwner
                    };
                    {
                        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
                        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
                    }
                    function warn(format) {
                        {
                            {
                                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                                    args[_key - 1] = arguments[_key];
                                }
                                printWarning("warn", format, args);
                            }
                        }
                    }
                    function error(format) {
                        {
                            {
                                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                                    args[_key2 - 1] = arguments[_key2];
                                }
                                printWarning("error", format, args);
                            }
                        }
                    }
                    function printWarning(level, format, args) {
                        {
                            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                            var stack = ReactDebugCurrentFrame.getStackAddendum();
                            if (stack !== "") {
                                format += "%s";
                                args = args.concat([ stack ]);
                            }
                            var argsWithFormat = args.map((function(item) {
                                return String(item);
                            }));
                            argsWithFormat.unshift("Warning: " + format);
                            Function.prototype.apply.call(console[level], console, argsWithFormat);
                        }
                    }
                    var didWarnStateUpdateForUnmountedComponent = {};
                    function warnNoop(publicInstance, callerName) {
                        {
                            var _constructor = publicInstance.constructor;
                            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
                            var warningKey = componentName + "." + callerName;
                            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                                return;
                            }
                            error("Can't call %s on a component that is not yet mounted. " + "This is a no-op, but it might indicate a bug in your application. " + "Instead, assign to `this.state` directly or define a `state = {};` " + "class property with the desired state in the %s component.", callerName, componentName);
                            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
                        }
                    }
                    var ReactNoopUpdateQueue = {
                        isMounted: function(publicInstance) {
                            return false;
                        },
                        enqueueForceUpdate: function(publicInstance, callback, callerName) {
                            warnNoop(publicInstance, "forceUpdate");
                        },
                        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
                            warnNoop(publicInstance, "replaceState");
                        },
                        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
                            warnNoop(publicInstance, "setState");
                        }
                    };
                    var assign = Object.assign;
                    var emptyObject = {};
                    {
                        Object.freeze(emptyObject);
                    }
                    function Component(props, context, updater) {
                        this.props = props;
                        this.context = context;
                        this.refs = emptyObject;
                        this.updater = updater || ReactNoopUpdateQueue;
                    }
                    Component.prototype.isReactComponent = {};
                    Component.prototype.setState = function(partialState, callback) {
                        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
                            throw new Error("setState(...): takes an object of state variables to update or a " + "function which returns an object of state variables.");
                        }
                        this.updater.enqueueSetState(this, partialState, callback, "setState");
                    };
                    Component.prototype.forceUpdate = function(callback) {
                        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
                    };
                    {
                        var deprecatedAPIs = {
                            isMounted: [ "isMounted", "Instead, make sure to clean up subscriptions and pending requests in " + "componentWillUnmount to prevent memory leaks." ],
                            replaceState: [ "replaceState", "Refactor your code to use setState instead (see " + "https://github.com/facebook/react/issues/3236)." ]
                        };
                        var defineDeprecationWarning = function(methodName, info) {
                            Object.defineProperty(Component.prototype, methodName, {
                                get: function() {
                                    warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                                    return undefined;
                                }
                            });
                        };
                        for (var fnName in deprecatedAPIs) {
                            if (deprecatedAPIs.hasOwnProperty(fnName)) {
                                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                            }
                        }
                    }
                    function ComponentDummy() {}
                    ComponentDummy.prototype = Component.prototype;
                    function PureComponent(props, context, updater) {
                        this.props = props;
                        this.context = context;
                        this.refs = emptyObject;
                        this.updater = updater || ReactNoopUpdateQueue;
                    }
                    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy;
                    pureComponentPrototype.constructor = PureComponent;
                    assign(pureComponentPrototype, Component.prototype);
                    pureComponentPrototype.isPureReactComponent = true;
                    function createRef() {
                        var refObject = {
                            current: null
                        };
                        {
                            Object.seal(refObject);
                        }
                        return refObject;
                    }
                    var isArrayImpl = Array.isArray;
                    function isArray(a) {
                        return isArrayImpl(a);
                    }
                    function typeName(value) {
                        {
                            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
                            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
                            return type;
                        }
                    }
                    function willCoercionThrow(value) {
                        {
                            try {
                                testStringCoercion(value);
                                return false;
                            } catch (e) {
                                return true;
                            }
                        }
                    }
                    function testStringCoercion(value) {
                        return "" + value;
                    }
                    function checkKeyStringCoercion(value) {
                        {
                            if (willCoercionThrow(value)) {
                                error("The provided key is an unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
                                return testStringCoercion(value);
                            }
                        }
                    }
                    function getWrappedName(outerType, innerType, wrapperName) {
                        var displayName = outerType.displayName;
                        if (displayName) {
                            return displayName;
                        }
                        var functionName = innerType.displayName || innerType.name || "";
                        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
                    }
                    function getContextName(type) {
                        return type.displayName || "Context";
                    }
                    function getComponentNameFromType(type) {
                        if (type == null) {
                            return null;
                        }
                        {
                            if (typeof type.tag === "number") {
                                error("Received an unexpected object in getComponentNameFromType(). " + "This is likely a bug in React. Please file an issue.");
                            }
                        }
                        if (typeof type === "function") {
                            return type.displayName || type.name || null;
                        }
                        if (typeof type === "string") {
                            return type;
                        }
                        switch (type) {
                          case REACT_FRAGMENT_TYPE:
                            return "Fragment";

                          case REACT_PORTAL_TYPE:
                            return "Portal";

                          case REACT_PROFILER_TYPE:
                            return "Profiler";

                          case REACT_STRICT_MODE_TYPE:
                            return "StrictMode";

                          case REACT_SUSPENSE_TYPE:
                            return "Suspense";

                          case REACT_SUSPENSE_LIST_TYPE:
                            return "SuspenseList";
                        }
                        if (typeof type === "object") {
                            switch (type.$$typeof) {
                              case REACT_CONTEXT_TYPE:
                                var context = type;
                                return getContextName(context) + ".Consumer";

                              case REACT_PROVIDER_TYPE:
                                var provider = type;
                                return getContextName(provider._context) + ".Provider";

                              case REACT_FORWARD_REF_TYPE:
                                return getWrappedName(type, type.render, "ForwardRef");

                              case REACT_MEMO_TYPE:
                                var outerName = type.displayName || null;
                                if (outerName !== null) {
                                    return outerName;
                                }
                                return getComponentNameFromType(type.type) || "Memo";

                              case REACT_LAZY_TYPE:
                                {
                                    var lazyComponent = type;
                                    var payload = lazyComponent._payload;
                                    var init = lazyComponent._init;
                                    try {
                                        return getComponentNameFromType(init(payload));
                                    } catch (x) {
                                        return null;
                                    }
                                }
                            }
                        }
                        return null;
                    }
                    var hasOwnProperty = Object.prototype.hasOwnProperty;
                    var RESERVED_PROPS = {
                        key: true,
                        ref: true,
                        __self: true,
                        __source: true
                    };
                    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
                    {
                        didWarnAboutStringRefs = {};
                    }
                    function hasValidRef(config) {
                        {
                            if (hasOwnProperty.call(config, "ref")) {
                                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                                if (getter && getter.isReactWarning) {
                                    return false;
                                }
                            }
                        }
                        return config.ref !== undefined;
                    }
                    function hasValidKey(config) {
                        {
                            if (hasOwnProperty.call(config, "key")) {
                                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                                if (getter && getter.isReactWarning) {
                                    return false;
                                }
                            }
                        }
                        return config.key !== undefined;
                    }
                    function defineKeyPropWarningGetter(props, displayName) {
                        var warnAboutAccessingKey = function() {
                            {
                                if (!specialPropKeyWarningShown) {
                                    specialPropKeyWarningShown = true;
                                    error("%s: `key` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
                                }
                            }
                        };
                        warnAboutAccessingKey.isReactWarning = true;
                        Object.defineProperty(props, "key", {
                            get: warnAboutAccessingKey,
                            configurable: true
                        });
                    }
                    function defineRefPropWarningGetter(props, displayName) {
                        var warnAboutAccessingRef = function() {
                            {
                                if (!specialPropRefWarningShown) {
                                    specialPropRefWarningShown = true;
                                    error("%s: `ref` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
                                }
                            }
                        };
                        warnAboutAccessingRef.isReactWarning = true;
                        Object.defineProperty(props, "ref", {
                            get: warnAboutAccessingRef,
                            configurable: true
                        });
                    }
                    function warnIfStringRefCannotBeAutoConverted(config) {
                        {
                            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                                if (!didWarnAboutStringRefs[componentName]) {
                                    error('Component "%s" contains the string ref "%s". ' + "Support for string refs will be removed in a future major release. " + "This case cannot be automatically converted to an arrow function. " + "We ask you to manually fix this case by using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                                    didWarnAboutStringRefs[componentName] = true;
                                }
                            }
                        }
                    }
                    var ReactElement = function(type, key, ref, self, source, owner, props) {
                        var element = {
                            $$typeof: REACT_ELEMENT_TYPE,
                            type: type,
                            key: key,
                            ref: ref,
                            props: props,
                            _owner: owner
                        };
                        {
                            element._store = {};
                            Object.defineProperty(element._store, "validated", {
                                configurable: false,
                                enumerable: false,
                                writable: true,
                                value: false
                            });
                            Object.defineProperty(element, "_self", {
                                configurable: false,
                                enumerable: false,
                                writable: false,
                                value: self
                            });
                            Object.defineProperty(element, "_source", {
                                configurable: false,
                                enumerable: false,
                                writable: false,
                                value: source
                            });
                            if (Object.freeze) {
                                Object.freeze(element.props);
                                Object.freeze(element);
                            }
                        }
                        return element;
                    };
                    function createElement(type, config, children) {
                        var propName;
                        var props = {};
                        var key = null;
                        var ref = null;
                        var self = null;
                        var source = null;
                        if (config != null) {
                            if (hasValidRef(config)) {
                                ref = config.ref;
                                {
                                    warnIfStringRefCannotBeAutoConverted(config);
                                }
                            }
                            if (hasValidKey(config)) {
                                {
                                    checkKeyStringCoercion(config.key);
                                }
                                key = "" + config.key;
                            }
                            self = config.__self === undefined ? null : config.__self;
                            source = config.__source === undefined ? null : config.__source;
                            for (propName in config) {
                                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                                    props[propName] = config[propName];
                                }
                            }
                        }
                        var childrenLength = arguments.length - 2;
                        if (childrenLength === 1) {
                            props.children = children;
                        } else if (childrenLength > 1) {
                            var childArray = Array(childrenLength);
                            for (var i = 0; i < childrenLength; i++) {
                                childArray[i] = arguments[i + 2];
                            }
                            {
                                if (Object.freeze) {
                                    Object.freeze(childArray);
                                }
                            }
                            props.children = childArray;
                        }
                        if (type && type.defaultProps) {
                            var defaultProps = type.defaultProps;
                            for (propName in defaultProps) {
                                if (props[propName] === undefined) {
                                    props[propName] = defaultProps[propName];
                                }
                            }
                        }
                        {
                            if (key || ref) {
                                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                                if (key) {
                                    defineKeyPropWarningGetter(props, displayName);
                                }
                                if (ref) {
                                    defineRefPropWarningGetter(props, displayName);
                                }
                            }
                        }
                        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
                    }
                    function cloneAndReplaceKey(oldElement, newKey) {
                        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
                        return newElement;
                    }
                    function cloneElement(element, config, children) {
                        if (element === null || element === undefined) {
                            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
                        }
                        var propName;
                        var props = assign({}, element.props);
                        var key = element.key;
                        var ref = element.ref;
                        var self = element._self;
                        var source = element._source;
                        var owner = element._owner;
                        if (config != null) {
                            if (hasValidRef(config)) {
                                ref = config.ref;
                                owner = ReactCurrentOwner.current;
                            }
                            if (hasValidKey(config)) {
                                {
                                    checkKeyStringCoercion(config.key);
                                }
                                key = "" + config.key;
                            }
                            var defaultProps;
                            if (element.type && element.type.defaultProps) {
                                defaultProps = element.type.defaultProps;
                            }
                            for (propName in config) {
                                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                                    if (config[propName] === undefined && defaultProps !== undefined) {
                                        props[propName] = defaultProps[propName];
                                    } else {
                                        props[propName] = config[propName];
                                    }
                                }
                            }
                        }
                        var childrenLength = arguments.length - 2;
                        if (childrenLength === 1) {
                            props.children = children;
                        } else if (childrenLength > 1) {
                            var childArray = Array(childrenLength);
                            for (var i = 0; i < childrenLength; i++) {
                                childArray[i] = arguments[i + 2];
                            }
                            props.children = childArray;
                        }
                        return ReactElement(element.type, key, ref, self, source, owner, props);
                    }
                    function isValidElement(object) {
                        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                    }
                    var SEPARATOR = ".";
                    var SUBSEPARATOR = ":";
                    function escape(key) {
                        var escapeRegex = /[=:]/g;
                        var escaperLookup = {
                            "=": "=0",
                            ":": "=2"
                        };
                        var escapedString = key.replace(escapeRegex, (function(match) {
                            return escaperLookup[match];
                        }));
                        return "$" + escapedString;
                    }
                    var didWarnAboutMaps = false;
                    var userProvidedKeyEscapeRegex = /\/+/g;
                    function escapeUserProvidedKey(text) {
                        return text.replace(userProvidedKeyEscapeRegex, "$&/");
                    }
                    function getElementKey(element, index) {
                        if (typeof element === "object" && element !== null && element.key != null) {
                            {
                                checkKeyStringCoercion(element.key);
                            }
                            return escape("" + element.key);
                        }
                        return index.toString(36);
                    }
                    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
                        var type = typeof children;
                        if (type === "undefined" || type === "boolean") {
                            children = null;
                        }
                        var invokeCallback = false;
                        if (children === null) {
                            invokeCallback = true;
                        } else {
                            switch (type) {
                              case "string":
                              case "number":
                                invokeCallback = true;
                                break;

                              case "object":
                                switch (children.$$typeof) {
                                  case REACT_ELEMENT_TYPE:
                                  case REACT_PORTAL_TYPE:
                                    invokeCallback = true;
                                }
                            }
                        }
                        if (invokeCallback) {
                            var _child = children;
                            var mappedChild = callback(_child);
                            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
                            if (isArray(mappedChild)) {
                                var escapedChildKey = "";
                                if (childKey != null) {
                                    escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                                }
                                mapIntoArray(mappedChild, array, escapedChildKey, "", (function(c) {
                                    return c;
                                }));
                            } else if (mappedChild != null) {
                                if (isValidElement(mappedChild)) {
                                    {
                                        if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                                            checkKeyStringCoercion(mappedChild.key);
                                        }
                                    }
                                    mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                                }
                                array.push(mappedChild);
                            }
                            return 1;
                        }
                        var child;
                        var nextName;
                        var subtreeCount = 0;
                        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
                        if (isArray(children)) {
                            for (var i = 0; i < children.length; i++) {
                                child = children[i];
                                nextName = nextNamePrefix + getElementKey(child, i);
                                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                            }
                        } else {
                            var iteratorFn = getIteratorFn(children);
                            if (typeof iteratorFn === "function") {
                                var iterableChildren = children;
                                {
                                    if (iteratorFn === iterableChildren.entries) {
                                        if (!didWarnAboutMaps) {
                                            warn("Using Maps as children is not supported. " + "Use an array of keyed ReactElements instead.");
                                        }
                                        didWarnAboutMaps = true;
                                    }
                                }
                                var iterator = iteratorFn.call(iterableChildren);
                                var step;
                                var ii = 0;
                                while (!(step = iterator.next()).done) {
                                    child = step.value;
                                    nextName = nextNamePrefix + getElementKey(child, ii++);
                                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                                }
                            } else if (type === "object") {
                                var childrenString = String(children);
                                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
                            }
                        }
                        return subtreeCount;
                    }
                    function mapChildren(children, func, context) {
                        if (children == null) {
                            return children;
                        }
                        var result = [];
                        var count = 0;
                        mapIntoArray(children, result, "", "", (function(child) {
                            return func.call(context, child, count++);
                        }));
                        return result;
                    }
                    function countChildren(children) {
                        var n = 0;
                        mapChildren(children, (function() {
                            n++;
                        }));
                        return n;
                    }
                    function forEachChildren(children, forEachFunc, forEachContext) {
                        mapChildren(children, (function() {
                            forEachFunc.apply(this, arguments);
                        }), forEachContext);
                    }
                    function toArray(children) {
                        return mapChildren(children, (function(child) {
                            return child;
                        })) || [];
                    }
                    function onlyChild(children) {
                        if (!isValidElement(children)) {
                            throw new Error("React.Children.only expected to receive a single React element child.");
                        }
                        return children;
                    }
                    function createContext(defaultValue) {
                        var context = {
                            $$typeof: REACT_CONTEXT_TYPE,
                            _currentValue: defaultValue,
                            _currentValue2: defaultValue,
                            _threadCount: 0,
                            Provider: null,
                            Consumer: null,
                            _defaultValue: null,
                            _globalName: null
                        };
                        context.Provider = {
                            $$typeof: REACT_PROVIDER_TYPE,
                            _context: context
                        };
                        var hasWarnedAboutUsingNestedContextConsumers = false;
                        var hasWarnedAboutUsingConsumerProvider = false;
                        var hasWarnedAboutDisplayNameOnConsumer = false;
                        {
                            var Consumer = {
                                $$typeof: REACT_CONTEXT_TYPE,
                                _context: context
                            };
                            Object.defineProperties(Consumer, {
                                Provider: {
                                    get: function() {
                                        if (!hasWarnedAboutUsingConsumerProvider) {
                                            hasWarnedAboutUsingConsumerProvider = true;
                                            error("Rendering <Context.Consumer.Provider> is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Provider> instead?");
                                        }
                                        return context.Provider;
                                    },
                                    set: function(_Provider) {
                                        context.Provider = _Provider;
                                    }
                                },
                                _currentValue: {
                                    get: function() {
                                        return context._currentValue;
                                    },
                                    set: function(_currentValue) {
                                        context._currentValue = _currentValue;
                                    }
                                },
                                _currentValue2: {
                                    get: function() {
                                        return context._currentValue2;
                                    },
                                    set: function(_currentValue2) {
                                        context._currentValue2 = _currentValue2;
                                    }
                                },
                                _threadCount: {
                                    get: function() {
                                        return context._threadCount;
                                    },
                                    set: function(_threadCount) {
                                        context._threadCount = _threadCount;
                                    }
                                },
                                Consumer: {
                                    get: function() {
                                        if (!hasWarnedAboutUsingNestedContextConsumers) {
                                            hasWarnedAboutUsingNestedContextConsumers = true;
                                            error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
                                        }
                                        return context.Consumer;
                                    }
                                },
                                displayName: {
                                    get: function() {
                                        return context.displayName;
                                    },
                                    set: function(displayName) {
                                        if (!hasWarnedAboutDisplayNameOnConsumer) {
                                            warn("Setting `displayName` on Context.Consumer has no effect. " + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
                                            hasWarnedAboutDisplayNameOnConsumer = true;
                                        }
                                    }
                                }
                            });
                            context.Consumer = Consumer;
                        }
                        {
                            context._currentRenderer = null;
                            context._currentRenderer2 = null;
                        }
                        return context;
                    }
                    var Uninitialized = -1;
                    var Pending = 0;
                    var Resolved = 1;
                    var Rejected = 2;
                    function lazyInitializer(payload) {
                        if (payload._status === Uninitialized) {
                            var ctor = payload._result;
                            var thenable = ctor();
                            thenable.then((function(moduleObject) {
                                if (payload._status === Pending || payload._status === Uninitialized) {
                                    var resolved = payload;
                                    resolved._status = Resolved;
                                    resolved._result = moduleObject;
                                }
                            }), (function(error) {
                                if (payload._status === Pending || payload._status === Uninitialized) {
                                    var rejected = payload;
                                    rejected._status = Rejected;
                                    rejected._result = error;
                                }
                            }));
                            if (payload._status === Uninitialized) {
                                var pending = payload;
                                pending._status = Pending;
                                pending._result = thenable;
                            }
                        }
                        if (payload._status === Resolved) {
                            var moduleObject = payload._result;
                            {
                                if (moduleObject === undefined) {
                                    error("lazy: Expected the result of a dynamic imp" + "ort() call. " + "Instead received: %s\n\nYour code should look like: \n  " + "const MyComponent = lazy(() => imp" + "ort('./MyComponent'))\n\n" + "Did you accidentally put curly braces around the import?", moduleObject);
                                }
                            }
                            {
                                if (!("default" in moduleObject)) {
                                    error("lazy: Expected the result of a dynamic imp" + "ort() call. " + "Instead received: %s\n\nYour code should look like: \n  " + "const MyComponent = lazy(() => imp" + "ort('./MyComponent'))", moduleObject);
                                }
                            }
                            return moduleObject.default;
                        } else {
                            throw payload._result;
                        }
                    }
                    function lazy(ctor) {
                        var payload = {
                            _status: Uninitialized,
                            _result: ctor
                        };
                        var lazyType = {
                            $$typeof: REACT_LAZY_TYPE,
                            _payload: payload,
                            _init: lazyInitializer
                        };
                        {
                            var defaultProps;
                            var propTypes;
                            Object.defineProperties(lazyType, {
                                defaultProps: {
                                    configurable: true,
                                    get: function() {
                                        return defaultProps;
                                    },
                                    set: function(newDefaultProps) {
                                        error("React.lazy(...): It is not supported to assign `defaultProps` to " + "a lazy component import. Either specify them where the component " + "is defined, or create a wrapping component around it.");
                                        defaultProps = newDefaultProps;
                                        Object.defineProperty(lazyType, "defaultProps", {
                                            enumerable: true
                                        });
                                    }
                                },
                                propTypes: {
                                    configurable: true,
                                    get: function() {
                                        return propTypes;
                                    },
                                    set: function(newPropTypes) {
                                        error("React.lazy(...): It is not supported to assign `propTypes` to " + "a lazy component import. Either specify them where the component " + "is defined, or create a wrapping component around it.");
                                        propTypes = newPropTypes;
                                        Object.defineProperty(lazyType, "propTypes", {
                                            enumerable: true
                                        });
                                    }
                                }
                            });
                        }
                        return lazyType;
                    }
                    function forwardRef(render) {
                        {
                            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                                error("forwardRef requires a render function but received a `memo` " + "component. Instead of forwardRef(memo(...)), use " + "memo(forwardRef(...)).");
                            } else if (typeof render !== "function") {
                                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
                            } else {
                                if (render.length !== 0 && render.length !== 2) {
                                    error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                                }
                            }
                            if (render != null) {
                                if (render.defaultProps != null || render.propTypes != null) {
                                    error("forwardRef render functions do not support propTypes or defaultProps. " + "Did you accidentally pass a React component?");
                                }
                            }
                        }
                        var elementType = {
                            $$typeof: REACT_FORWARD_REF_TYPE,
                            render: render
                        };
                        {
                            var ownName;
                            Object.defineProperty(elementType, "displayName", {
                                enumerable: false,
                                configurable: true,
                                get: function() {
                                    return ownName;
                                },
                                set: function(name) {
                                    ownName = name;
                                    if (!render.name && !render.displayName) {
                                        render.displayName = name;
                                    }
                                }
                            });
                        }
                        return elementType;
                    }
                    var REACT_MODULE_REFERENCE;
                    {
                        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
                    }
                    function isValidElementType(type) {
                        if (typeof type === "string" || typeof type === "function") {
                            return true;
                        }
                        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
                            return true;
                        }
                        if (typeof type === "object" && type !== null) {
                            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
                                return true;
                            }
                        }
                        return false;
                    }
                    function memo(type, compare) {
                        {
                            if (!isValidElementType(type)) {
                                error("memo: The first argument must be a component. Instead " + "received: %s", type === null ? "null" : typeof type);
                            }
                        }
                        var elementType = {
                            $$typeof: REACT_MEMO_TYPE,
                            type: type,
                            compare: compare === undefined ? null : compare
                        };
                        {
                            var ownName;
                            Object.defineProperty(elementType, "displayName", {
                                enumerable: false,
                                configurable: true,
                                get: function() {
                                    return ownName;
                                },
                                set: function(name) {
                                    ownName = name;
                                    if (!type.name && !type.displayName) {
                                        type.displayName = name;
                                    }
                                }
                            });
                        }
                        return elementType;
                    }
                    function resolveDispatcher() {
                        var dispatcher = ReactCurrentDispatcher.current;
                        {
                            if (dispatcher === null) {
                                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for" + " one of the following reasons:\n" + "1. You might have mismatching versions of React and the renderer (such as React DOM)\n" + "2. You might be breaking the Rules of Hooks\n" + "3. You might have more than one copy of React in the same app\n" + "See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
                            }
                        }
                        return dispatcher;
                    }
                    function useContext(Context) {
                        var dispatcher = resolveDispatcher();
                        {
                            if (Context._context !== undefined) {
                                var realContext = Context._context;
                                if (realContext.Consumer === Context) {
                                    error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be " + "removed in a future major release. Did you mean to call useContext(Context) instead?");
                                } else if (realContext.Provider === Context) {
                                    error("Calling useContext(Context.Provider) is not supported. " + "Did you mean to call useContext(Context) instead?");
                                }
                            }
                        }
                        return dispatcher.useContext(Context);
                    }
                    function useState(initialState) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useState(initialState);
                    }
                    function useReducer(reducer, initialArg, init) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useReducer(reducer, initialArg, init);
                    }
                    function useRef(initialValue) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useRef(initialValue);
                    }
                    function useEffect(create, deps) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useEffect(create, deps);
                    }
                    function useInsertionEffect(create, deps) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useInsertionEffect(create, deps);
                    }
                    function useLayoutEffect(create, deps) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useLayoutEffect(create, deps);
                    }
                    function useCallback(callback, deps) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useCallback(callback, deps);
                    }
                    function useMemo(create, deps) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useMemo(create, deps);
                    }
                    function useImperativeHandle(ref, create, deps) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useImperativeHandle(ref, create, deps);
                    }
                    function useDebugValue(value, formatterFn) {
                        {
                            var dispatcher = resolveDispatcher();
                            return dispatcher.useDebugValue(value, formatterFn);
                        }
                    }
                    function useTransition() {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useTransition();
                    }
                    function useDeferredValue(value) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useDeferredValue(value);
                    }
                    function useId() {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useId();
                    }
                    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
                    }
                    var disabledDepth = 0;
                    var prevLog;
                    var prevInfo;
                    var prevWarn;
                    var prevError;
                    var prevGroup;
                    var prevGroupCollapsed;
                    var prevGroupEnd;
                    function disabledLog() {}
                    disabledLog.__reactDisabledLog = true;
                    function disableLogs() {
                        {
                            if (disabledDepth === 0) {
                                prevLog = console.log;
                                prevInfo = console.info;
                                prevWarn = console.warn;
                                prevError = console.error;
                                prevGroup = console.group;
                                prevGroupCollapsed = console.groupCollapsed;
                                prevGroupEnd = console.groupEnd;
                                var props = {
                                    configurable: true,
                                    enumerable: true,
                                    value: disabledLog,
                                    writable: true
                                };
                                Object.defineProperties(console, {
                                    info: props,
                                    log: props,
                                    warn: props,
                                    error: props,
                                    group: props,
                                    groupCollapsed: props,
                                    groupEnd: props
                                });
                            }
                            disabledDepth++;
                        }
                    }
                    function reenableLogs() {
                        {
                            disabledDepth--;
                            if (disabledDepth === 0) {
                                var props = {
                                    configurable: true,
                                    enumerable: true,
                                    writable: true
                                };
                                Object.defineProperties(console, {
                                    log: assign({}, props, {
                                        value: prevLog
                                    }),
                                    info: assign({}, props, {
                                        value: prevInfo
                                    }),
                                    warn: assign({}, props, {
                                        value: prevWarn
                                    }),
                                    error: assign({}, props, {
                                        value: prevError
                                    }),
                                    group: assign({}, props, {
                                        value: prevGroup
                                    }),
                                    groupCollapsed: assign({}, props, {
                                        value: prevGroupCollapsed
                                    }),
                                    groupEnd: assign({}, props, {
                                        value: prevGroupEnd
                                    })
                                });
                            }
                            if (disabledDepth < 0) {
                                error("disabledDepth fell below zero. " + "This is a bug in React. Please file an issue.");
                            }
                        }
                    }
                    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
                    var prefix;
                    function describeBuiltInComponentFrame(name, source, ownerFn) {
                        {
                            if (prefix === undefined) {
                                try {
                                    throw Error();
                                } catch (x) {
                                    var match = x.stack.trim().match(/\n( *(at )?)/);
                                    prefix = match && match[1] || "";
                                }
                            }
                            return "\n" + prefix + name;
                        }
                    }
                    var reentry = false;
                    var componentFrameCache;
                    {
                        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
                        componentFrameCache = new PossiblyWeakMap;
                    }
                    function describeNativeComponentFrame(fn, construct) {
                        if (!fn || reentry) {
                            return "";
                        }
                        {
                            var frame = componentFrameCache.get(fn);
                            if (frame !== undefined) {
                                return frame;
                            }
                        }
                        var control;
                        reentry = true;
                        var previousPrepareStackTrace = Error.prepareStackTrace;
                        Error.prepareStackTrace = undefined;
                        var previousDispatcher;
                        {
                            previousDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = null;
                            disableLogs();
                        }
                        try {
                            if (construct) {
                                var Fake = function() {
                                    throw Error();
                                };
                                Object.defineProperty(Fake.prototype, "props", {
                                    set: function() {
                                        throw Error();
                                    }
                                });
                                if (typeof Reflect === "object" && Reflect.construct) {
                                    try {
                                        Reflect.construct(Fake, []);
                                    } catch (x) {
                                        control = x;
                                    }
                                    Reflect.construct(fn, [], Fake);
                                } else {
                                    try {
                                        Fake.call();
                                    } catch (x) {
                                        control = x;
                                    }
                                    fn.call(Fake.prototype);
                                }
                            } else {
                                try {
                                    throw Error();
                                } catch (x) {
                                    control = x;
                                }
                                fn();
                            }
                        } catch (sample) {
                            if (sample && control && typeof sample.stack === "string") {
                                var sampleLines = sample.stack.split("\n");
                                var controlLines = control.stack.split("\n");
                                var s = sampleLines.length - 1;
                                var c = controlLines.length - 1;
                                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                                    c--;
                                }
                                for (;s >= 1 && c >= 0; s--, c--) {
                                    if (sampleLines[s] !== controlLines[c]) {
                                        if (s !== 1 || c !== 1) {
                                            do {
                                                s--;
                                                c--;
                                                if (c < 0 || sampleLines[s] !== controlLines[c]) {
                                                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                                                    if (fn.displayName && _frame.includes("<anonymous>")) {
                                                        _frame = _frame.replace("<anonymous>", fn.displayName);
                                                    }
                                                    {
                                                        if (typeof fn === "function") {
                                                            componentFrameCache.set(fn, _frame);
                                                        }
                                                    }
                                                    return _frame;
                                                }
                                            } while (s >= 1 && c >= 0);
                                        }
                                        break;
                                    }
                                }
                            }
                        } finally {
                            reentry = false;
                            {
                                ReactCurrentDispatcher$1.current = previousDispatcher;
                                reenableLogs();
                            }
                            Error.prepareStackTrace = previousPrepareStackTrace;
                        }
                        var name = fn ? fn.displayName || fn.name : "";
                        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
                        {
                            if (typeof fn === "function") {
                                componentFrameCache.set(fn, syntheticFrame);
                            }
                        }
                        return syntheticFrame;
                    }
                    function describeFunctionComponentFrame(fn, source, ownerFn) {
                        {
                            return describeNativeComponentFrame(fn, false);
                        }
                    }
                    function shouldConstruct(Component) {
                        var prototype = Component.prototype;
                        return !!(prototype && prototype.isReactComponent);
                    }
                    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
                        if (type == null) {
                            return "";
                        }
                        if (typeof type === "function") {
                            {
                                return describeNativeComponentFrame(type, shouldConstruct(type));
                            }
                        }
                        if (typeof type === "string") {
                            return describeBuiltInComponentFrame(type);
                        }
                        switch (type) {
                          case REACT_SUSPENSE_TYPE:
                            return describeBuiltInComponentFrame("Suspense");

                          case REACT_SUSPENSE_LIST_TYPE:
                            return describeBuiltInComponentFrame("SuspenseList");
                        }
                        if (typeof type === "object") {
                            switch (type.$$typeof) {
                              case REACT_FORWARD_REF_TYPE:
                                return describeFunctionComponentFrame(type.render);

                              case REACT_MEMO_TYPE:
                                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

                              case REACT_LAZY_TYPE:
                                {
                                    var lazyComponent = type;
                                    var payload = lazyComponent._payload;
                                    var init = lazyComponent._init;
                                    try {
                                        return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                                    } catch (x) {}
                                }
                            }
                        }
                        return "";
                    }
                    var loggedTypeFailures = {};
                    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
                    function setCurrentlyValidatingElement(element) {
                        {
                            if (element) {
                                var owner = element._owner;
                                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                            } else {
                                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                            }
                        }
                    }
                    function checkPropTypes(typeSpecs, values, location, componentName, element) {
                        {
                            var has = Function.call.bind(hasOwnProperty);
                            for (var typeSpecName in typeSpecs) {
                                if (has(typeSpecs, typeSpecName)) {
                                    var error$1 = void 0;
                                    try {
                                        if (typeof typeSpecs[typeSpecName] !== "function") {
                                            var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                                            err.name = "Invariant Violation";
                                            throw err;
                                        }
                                        error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                                    } catch (ex) {
                                        error$1 = ex;
                                    }
                                    if (error$1 && !(error$1 instanceof Error)) {
                                        setCurrentlyValidatingElement(element);
                                        error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                                        setCurrentlyValidatingElement(null);
                                    }
                                    if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                                        loggedTypeFailures[error$1.message] = true;
                                        setCurrentlyValidatingElement(element);
                                        error("Failed %s type: %s", location, error$1.message);
                                        setCurrentlyValidatingElement(null);
                                    }
                                }
                            }
                        }
                    }
                    function setCurrentlyValidatingElement$1(element) {
                        {
                            if (element) {
                                var owner = element._owner;
                                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                                setExtraStackFrame(stack);
                            } else {
                                setExtraStackFrame(null);
                            }
                        }
                    }
                    var propTypesMisspellWarningShown;
                    {
                        propTypesMisspellWarningShown = false;
                    }
                    function getDeclarationErrorAddendum() {
                        if (ReactCurrentOwner.current) {
                            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
                            if (name) {
                                return "\n\nCheck the render method of `" + name + "`.";
                            }
                        }
                        return "";
                    }
                    function getSourceInfoErrorAddendum(source) {
                        if (source !== undefined) {
                            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                            var lineNumber = source.lineNumber;
                            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
                        }
                        return "";
                    }
                    function getSourceInfoErrorAddendumForProps(elementProps) {
                        if (elementProps !== null && elementProps !== undefined) {
                            return getSourceInfoErrorAddendum(elementProps.__source);
                        }
                        return "";
                    }
                    var ownerHasKeyUseWarning = {};
                    function getCurrentComponentErrorInfo(parentType) {
                        var info = getDeclarationErrorAddendum();
                        if (!info) {
                            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                            if (parentName) {
                                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                            }
                        }
                        return info;
                    }
                    function validateExplicitKey(element, parentType) {
                        if (!element._store || element._store.validated || element.key != null) {
                            return;
                        }
                        element._store.validated = true;
                        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
                        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                            return;
                        }
                        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                        var childOwner = "";
                        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
                            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
                        }
                        {
                            setCurrentlyValidatingElement$1(element);
                            error('Each child in a list should have a unique "key" prop.' + "%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
                            setCurrentlyValidatingElement$1(null);
                        }
                    }
                    function validateChildKeys(node, parentType) {
                        if (typeof node !== "object") {
                            return;
                        }
                        if (isArray(node)) {
                            for (var i = 0; i < node.length; i++) {
                                var child = node[i];
                                if (isValidElement(child)) {
                                    validateExplicitKey(child, parentType);
                                }
                            }
                        } else if (isValidElement(node)) {
                            if (node._store) {
                                node._store.validated = true;
                            }
                        } else if (node) {
                            var iteratorFn = getIteratorFn(node);
                            if (typeof iteratorFn === "function") {
                                if (iteratorFn !== node.entries) {
                                    var iterator = iteratorFn.call(node);
                                    var step;
                                    while (!(step = iterator.next()).done) {
                                        if (isValidElement(step.value)) {
                                            validateExplicitKey(step.value, parentType);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    function validatePropTypes(element) {
                        {
                            var type = element.type;
                            if (type === null || type === undefined || typeof type === "string") {
                                return;
                            }
                            var propTypes;
                            if (typeof type === "function") {
                                propTypes = type.propTypes;
                            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                                propTypes = type.propTypes;
                            } else {
                                return;
                            }
                            if (propTypes) {
                                var name = getComponentNameFromType(type);
                                checkPropTypes(propTypes, element.props, "prop", name, element);
                            } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
                                propTypesMisspellWarningShown = true;
                                var _name = getComponentNameFromType(type);
                                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
                            }
                            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                                error("getDefaultProps is only used on classic React.createClass " + "definitions. Use a static property named `defaultProps` instead.");
                            }
                        }
                    }
                    function validateFragmentProps(fragment) {
                        {
                            var keys = Object.keys(fragment.props);
                            for (var i = 0; i < keys.length; i++) {
                                var key = keys[i];
                                if (key !== "children" && key !== "key") {
                                    setCurrentlyValidatingElement$1(fragment);
                                    error("Invalid prop `%s` supplied to `React.Fragment`. " + "React.Fragment can only have `key` and `children` props.", key);
                                    setCurrentlyValidatingElement$1(null);
                                    break;
                                }
                            }
                            if (fragment.ref !== null) {
                                setCurrentlyValidatingElement$1(fragment);
                                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                                setCurrentlyValidatingElement$1(null);
                            }
                        }
                    }
                    function createElementWithValidation(type, props, children) {
                        var validType = isValidElementType(type);
                        if (!validType) {
                            var info = "";
                            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                                info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and named imports.";
                            }
                            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
                            if (sourceInfo) {
                                info += sourceInfo;
                            } else {
                                info += getDeclarationErrorAddendum();
                            }
                            var typeString;
                            if (type === null) {
                                typeString = "null";
                            } else if (isArray(type)) {
                                typeString = "array";
                            } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                                info = " Did you accidentally export a JSX literal instead of a component?";
                            } else {
                                typeString = typeof type;
                            }
                            {
                                error("React.createElement: type is invalid -- expected a string (for " + "built-in components) or a class/function (for composite " + "components) but got: %s.%s", typeString, info);
                            }
                        }
                        var element = createElement.apply(this, arguments);
                        if (element == null) {
                            return element;
                        }
                        if (validType) {
                            for (var i = 2; i < arguments.length; i++) {
                                validateChildKeys(arguments[i], type);
                            }
                        }
                        if (type === REACT_FRAGMENT_TYPE) {
                            validateFragmentProps(element);
                        } else {
                            validatePropTypes(element);
                        }
                        return element;
                    }
                    var didWarnAboutDeprecatedCreateFactory = false;
                    function createFactoryWithValidation(type) {
                        var validatedFactory = createElementWithValidation.bind(null, type);
                        validatedFactory.type = type;
                        {
                            if (!didWarnAboutDeprecatedCreateFactory) {
                                didWarnAboutDeprecatedCreateFactory = true;
                                warn("React.createFactory() is deprecated and will be removed in " + "a future major release. Consider using JSX " + "or use React.createElement() directly instead.");
                            }
                            Object.defineProperty(validatedFactory, "type", {
                                enumerable: false,
                                get: function() {
                                    warn("Factory.type is deprecated. Access the class directly " + "before passing it to createFactory.");
                                    Object.defineProperty(this, "type", {
                                        value: type
                                    });
                                    return type;
                                }
                            });
                        }
                        return validatedFactory;
                    }
                    function cloneElementWithValidation(element, props, children) {
                        var newElement = cloneElement.apply(this, arguments);
                        for (var i = 2; i < arguments.length; i++) {
                            validateChildKeys(arguments[i], newElement.type);
                        }
                        validatePropTypes(newElement);
                        return newElement;
                    }
                    function startTransition(scope, options) {
                        var prevTransition = ReactCurrentBatchConfig.transition;
                        ReactCurrentBatchConfig.transition = {};
                        var currentTransition = ReactCurrentBatchConfig.transition;
                        {
                            ReactCurrentBatchConfig.transition._updatedFibers = new Set;
                        }
                        try {
                            scope();
                        } finally {
                            ReactCurrentBatchConfig.transition = prevTransition;
                            {
                                if (prevTransition === null && currentTransition._updatedFibers) {
                                    var updatedFibersCount = currentTransition._updatedFibers.size;
                                    if (updatedFibersCount > 10) {
                                        warn("Detected a large number of updates inside startTransition. " + "If this is due to a subscription please re-write it to use React provided hooks. " + "Otherwise concurrent mode guarantees are off the table.");
                                    }
                                    currentTransition._updatedFibers.clear();
                                }
                            }
                        }
                    }
                    var didWarnAboutMessageChannel = false;
                    var enqueueTaskImpl = null;
                    function enqueueTask(task) {
                        if (enqueueTaskImpl === null) {
                            try {
                                var requireString = ("require" + Math.random()).slice(0, 7);
                                var nodeRequire = module && module[requireString];
                                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
                            } catch (_err) {
                                enqueueTaskImpl = function(callback) {
                                    {
                                        if (didWarnAboutMessageChannel === false) {
                                            didWarnAboutMessageChannel = true;
                                            if (typeof MessageChannel === "undefined") {
                                                error("This browser does not have a MessageChannel implementation, " + "so enqueuing tasks via await act(async () => ...) will fail. " + "Please file an issue at https://github.com/facebook/react/issues " + "if you encounter this warning.");
                                            }
                                        }
                                    }
                                    var channel = new MessageChannel;
                                    channel.port1.onmessage = callback;
                                    channel.port2.postMessage(undefined);
                                };
                            }
                        }
                        return enqueueTaskImpl(task);
                    }
                    var actScopeDepth = 0;
                    var didWarnNoAwaitAct = false;
                    function act(callback) {
                        {
                            var prevActScopeDepth = actScopeDepth;
                            actScopeDepth++;
                            if (ReactCurrentActQueue.current === null) {
                                ReactCurrentActQueue.current = [];
                            }
                            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
                            var result;
                            try {
                                ReactCurrentActQueue.isBatchingLegacy = true;
                                result = callback();
                                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                                    var queue = ReactCurrentActQueue.current;
                                    if (queue !== null) {
                                        ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                                        flushActQueue(queue);
                                    }
                                }
                            } catch (error) {
                                popActScope(prevActScopeDepth);
                                throw error;
                            } finally {
                                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
                            }
                            if (result !== null && typeof result === "object" && typeof result.then === "function") {
                                var thenableResult = result;
                                var wasAwaited = false;
                                var thenable = {
                                    then: function(resolve, reject) {
                                        wasAwaited = true;
                                        thenableResult.then((function(returnValue) {
                                            popActScope(prevActScopeDepth);
                                            if (actScopeDepth === 0) {
                                                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                                            } else {
                                                resolve(returnValue);
                                            }
                                        }), (function(error) {
                                            popActScope(prevActScopeDepth);
                                            reject(error);
                                        }));
                                    }
                                };
                                {
                                    if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                                        Promise.resolve().then((function() {})).then((function() {
                                            if (!wasAwaited) {
                                                didWarnNoAwaitAct = true;
                                                error("You called act(async () => ...) without await. " + "This could lead to unexpected testing behaviour, " + "interleaving multiple act calls and mixing their " + "scopes. " + "You should - await act(async () => ...);");
                                            }
                                        }));
                                    }
                                }
                                return thenable;
                            } else {
                                var returnValue = result;
                                popActScope(prevActScopeDepth);
                                if (actScopeDepth === 0) {
                                    var _queue = ReactCurrentActQueue.current;
                                    if (_queue !== null) {
                                        flushActQueue(_queue);
                                        ReactCurrentActQueue.current = null;
                                    }
                                    var _thenable = {
                                        then: function(resolve, reject) {
                                            if (ReactCurrentActQueue.current === null) {
                                                ReactCurrentActQueue.current = [];
                                                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                                            } else {
                                                resolve(returnValue);
                                            }
                                        }
                                    };
                                    return _thenable;
                                } else {
                                    var _thenable2 = {
                                        then: function(resolve, reject) {
                                            resolve(returnValue);
                                        }
                                    };
                                    return _thenable2;
                                }
                            }
                        }
                    }
                    function popActScope(prevActScopeDepth) {
                        {
                            if (prevActScopeDepth !== actScopeDepth - 1) {
                                error("You seem to have overlapping act() calls, this is not supported. " + "Be sure to await previous act() calls before making a new one. ");
                            }
                            actScopeDepth = prevActScopeDepth;
                        }
                    }
                    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
                        {
                            var queue = ReactCurrentActQueue.current;
                            if (queue !== null) {
                                try {
                                    flushActQueue(queue);
                                    enqueueTask((function() {
                                        if (queue.length === 0) {
                                            ReactCurrentActQueue.current = null;
                                            resolve(returnValue);
                                        } else {
                                            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                                        }
                                    }));
                                } catch (error) {
                                    reject(error);
                                }
                            } else {
                                resolve(returnValue);
                            }
                        }
                    }
                    var isFlushing = false;
                    function flushActQueue(queue) {
                        {
                            if (!isFlushing) {
                                isFlushing = true;
                                var i = 0;
                                try {
                                    for (;i < queue.length; i++) {
                                        var callback = queue[i];
                                        do {
                                            callback = callback(true);
                                        } while (callback !== null);
                                    }
                                    queue.length = 0;
                                } catch (error) {
                                    queue = queue.slice(i + 1);
                                    throw error;
                                } finally {
                                    isFlushing = false;
                                }
                            }
                        }
                    }
                    var createElement$1 = createElementWithValidation;
                    var cloneElement$1 = cloneElementWithValidation;
                    var createFactory = createFactoryWithValidation;
                    var Children = {
                        map: mapChildren,
                        forEach: forEachChildren,
                        count: countChildren,
                        toArray: toArray,
                        only: onlyChild
                    };
                    exports.Children = Children;
                    exports.Component = Component;
                    exports.Fragment = REACT_FRAGMENT_TYPE;
                    exports.Profiler = REACT_PROFILER_TYPE;
                    exports.PureComponent = PureComponent;
                    exports.StrictMode = REACT_STRICT_MODE_TYPE;
                    exports.Suspense = REACT_SUSPENSE_TYPE;
                    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
                    exports.cloneElement = cloneElement$1;
                    exports.createContext = createContext;
                    exports.createElement = createElement$1;
                    exports.createFactory = createFactory;
                    exports.createRef = createRef;
                    exports.forwardRef = forwardRef;
                    exports.isValidElement = isValidElement;
                    exports.lazy = lazy;
                    exports.memo = memo;
                    exports.startTransition = startTransition;
                    exports.unstable_act = act;
                    exports.useCallback = useCallback;
                    exports.useContext = useContext;
                    exports.useDebugValue = useDebugValue;
                    exports.useDeferredValue = useDeferredValue;
                    exports.useEffect = useEffect;
                    exports.useId = useId;
                    exports.useImperativeHandle = useImperativeHandle;
                    exports.useInsertionEffect = useInsertionEffect;
                    exports.useLayoutEffect = useLayoutEffect;
                    exports.useMemo = useMemo;
                    exports.useReducer = useReducer;
                    exports.useRef = useRef;
                    exports.useState = useState;
                    exports.useSyncExternalStore = useSyncExternalStore;
                    exports.useTransition = useTransition;
                    exports.version = ReactVersion;
                    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
                        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
                    }
                })();
            }
        })(react_development, react_developmentExports);
        return react_developmentExports;
    }
    (function(module) {
        {
            module.exports = requireReact_development();
        }
    })(react);
    var React = getDefaultExportFromCjs(reactExports);
    var client = {};
    var reactDomExports = {};
    var reactDom = {
        get exports() {
            return reactDomExports;
        },
        set exports(v) {
            reactDomExports = v;
        }
    };
    var schedulerExports = {};
    var scheduler = {
        get exports() {
            return schedulerExports;
        },
        set exports(v) {
            schedulerExports = v;
        }
    };
    var scheduler_development = {};
    /**
	 * @license React
	 * scheduler.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */    var hasRequiredScheduler_development;
    function requireScheduler_development() {
        if (hasRequiredScheduler_development) return scheduler_development;
        hasRequiredScheduler_development = 1;
        (function(exports) {
            {
                (function() {
                    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
                        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
                    }
                    var enableSchedulerDebugging = false;
                    var enableProfiling = false;
                    var frameYieldMs = 5;
                    function push(heap, node) {
                        var index = heap.length;
                        heap.push(node);
                        siftUp(heap, node, index);
                    }
                    function peek(heap) {
                        return heap.length === 0 ? null : heap[0];
                    }
                    function pop(heap) {
                        if (heap.length === 0) {
                            return null;
                        }
                        var first = heap[0];
                        var last = heap.pop();
                        if (last !== first) {
                            heap[0] = last;
                            siftDown(heap, last, 0);
                        }
                        return first;
                    }
                    function siftUp(heap, node, i) {
                        var index = i;
                        while (index > 0) {
                            var parentIndex = index - 1 >>> 1;
                            var parent = heap[parentIndex];
                            if (compare(parent, node) > 0) {
                                heap[parentIndex] = node;
                                heap[index] = parent;
                                index = parentIndex;
                            } else {
                                return;
                            }
                        }
                    }
                    function siftDown(heap, node, i) {
                        var index = i;
                        var length = heap.length;
                        var halfLength = length >>> 1;
                        while (index < halfLength) {
                            var leftIndex = (index + 1) * 2 - 1;
                            var left = heap[leftIndex];
                            var rightIndex = leftIndex + 1;
                            var right = heap[rightIndex];
                            if (compare(left, node) < 0) {
                                if (rightIndex < length && compare(right, left) < 0) {
                                    heap[index] = right;
                                    heap[rightIndex] = node;
                                    index = rightIndex;
                                } else {
                                    heap[index] = left;
                                    heap[leftIndex] = node;
                                    index = leftIndex;
                                }
                            } else if (rightIndex < length && compare(right, node) < 0) {
                                heap[index] = right;
                                heap[rightIndex] = node;
                                index = rightIndex;
                            } else {
                                return;
                            }
                        }
                    }
                    function compare(a, b) {
                        var diff = a.sortIndex - b.sortIndex;
                        return diff !== 0 ? diff : a.id - b.id;
                    }
                    var ImmediatePriority = 1;
                    var UserBlockingPriority = 2;
                    var NormalPriority = 3;
                    var LowPriority = 4;
                    var IdlePriority = 5;
                    function markTaskErrored(task, ms) {}
                    var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
                    if (hasPerformanceNow) {
                        var localPerformance = performance;
                        exports.unstable_now = function() {
                            return localPerformance.now();
                        };
                    } else {
                        var localDate = Date;
                        var initialTime = localDate.now();
                        exports.unstable_now = function() {
                            return localDate.now() - initialTime;
                        };
                    }
                    var maxSigned31BitInt = 1073741823;
                    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
                    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
                    var NORMAL_PRIORITY_TIMEOUT = 5e3;
                    var LOW_PRIORITY_TIMEOUT = 1e4;
                    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
                    var taskQueue = [];
                    var timerQueue = [];
                    var taskIdCounter = 1;
                    var currentTask = null;
                    var currentPriorityLevel = NormalPriority;
                    var isPerformingWork = false;
                    var isHostCallbackScheduled = false;
                    var isHostTimeoutScheduled = false;
                    var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
                    var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
                    var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
                    typeof navigator !== "undefined" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
                    function advanceTimers(currentTime) {
                        var timer = peek(timerQueue);
                        while (timer !== null) {
                            if (timer.callback === null) {
                                pop(timerQueue);
                            } else if (timer.startTime <= currentTime) {
                                pop(timerQueue);
                                timer.sortIndex = timer.expirationTime;
                                push(taskQueue, timer);
                            } else {
                                return;
                            }
                            timer = peek(timerQueue);
                        }
                    }
                    function handleTimeout(currentTime) {
                        isHostTimeoutScheduled = false;
                        advanceTimers(currentTime);
                        if (!isHostCallbackScheduled) {
                            if (peek(taskQueue) !== null) {
                                isHostCallbackScheduled = true;
                                requestHostCallback(flushWork);
                            } else {
                                var firstTimer = peek(timerQueue);
                                if (firstTimer !== null) {
                                    requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                                }
                            }
                        }
                    }
                    function flushWork(hasTimeRemaining, initialTime) {
                        isHostCallbackScheduled = false;
                        if (isHostTimeoutScheduled) {
                            isHostTimeoutScheduled = false;
                            cancelHostTimeout();
                        }
                        isPerformingWork = true;
                        var previousPriorityLevel = currentPriorityLevel;
                        try {
                            var currentTime;
                            if (enableProfiling) ; else {
                                return workLoop(hasTimeRemaining, initialTime);
                            }
                        } finally {
                            currentTask = null;
                            currentPriorityLevel = previousPriorityLevel;
                            isPerformingWork = false;
                        }
                    }
                    function workLoop(hasTimeRemaining, initialTime) {
                        var currentTime = initialTime;
                        advanceTimers(currentTime);
                        currentTask = peek(taskQueue);
                        while (currentTask !== null && !enableSchedulerDebugging) {
                            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                                break;
                            }
                            var callback = currentTask.callback;
                            if (typeof callback === "function") {
                                currentTask.callback = null;
                                currentPriorityLevel = currentTask.priorityLevel;
                                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                                var continuationCallback = callback(didUserCallbackTimeout);
                                currentTime = exports.unstable_now();
                                if (typeof continuationCallback === "function") {
                                    currentTask.callback = continuationCallback;
                                } else {
                                    if (currentTask === peek(taskQueue)) {
                                        pop(taskQueue);
                                    }
                                }
                                advanceTimers(currentTime);
                            } else {
                                pop(taskQueue);
                            }
                            currentTask = peek(taskQueue);
                        }
                        if (currentTask !== null) {
                            return true;
                        } else {
                            var firstTimer = peek(timerQueue);
                            if (firstTimer !== null) {
                                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                            }
                            return false;
                        }
                    }
                    function unstable_runWithPriority(priorityLevel, eventHandler) {
                        switch (priorityLevel) {
                          case ImmediatePriority:
                          case UserBlockingPriority:
                          case NormalPriority:
                          case LowPriority:
                          case IdlePriority:
                            break;

                          default:
                            priorityLevel = NormalPriority;
                        }
                        var previousPriorityLevel = currentPriorityLevel;
                        currentPriorityLevel = priorityLevel;
                        try {
                            return eventHandler();
                        } finally {
                            currentPriorityLevel = previousPriorityLevel;
                        }
                    }
                    function unstable_next(eventHandler) {
                        var priorityLevel;
                        switch (currentPriorityLevel) {
                          case ImmediatePriority:
                          case UserBlockingPriority:
                          case NormalPriority:
                            priorityLevel = NormalPriority;
                            break;

                          default:
                            priorityLevel = currentPriorityLevel;
                            break;
                        }
                        var previousPriorityLevel = currentPriorityLevel;
                        currentPriorityLevel = priorityLevel;
                        try {
                            return eventHandler();
                        } finally {
                            currentPriorityLevel = previousPriorityLevel;
                        }
                    }
                    function unstable_wrapCallback(callback) {
                        var parentPriorityLevel = currentPriorityLevel;
                        return function() {
                            var previousPriorityLevel = currentPriorityLevel;
                            currentPriorityLevel = parentPriorityLevel;
                            try {
                                return callback.apply(this, arguments);
                            } finally {
                                currentPriorityLevel = previousPriorityLevel;
                            }
                        };
                    }
                    function unstable_scheduleCallback(priorityLevel, callback, options) {
                        var currentTime = exports.unstable_now();
                        var startTime;
                        if (typeof options === "object" && options !== null) {
                            var delay = options.delay;
                            if (typeof delay === "number" && delay > 0) {
                                startTime = currentTime + delay;
                            } else {
                                startTime = currentTime;
                            }
                        } else {
                            startTime = currentTime;
                        }
                        var timeout;
                        switch (priorityLevel) {
                          case ImmediatePriority:
                            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                            break;

                          case UserBlockingPriority:
                            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                            break;

                          case IdlePriority:
                            timeout = IDLE_PRIORITY_TIMEOUT;
                            break;

                          case LowPriority:
                            timeout = LOW_PRIORITY_TIMEOUT;
                            break;

                          case NormalPriority:
                          default:
                            timeout = NORMAL_PRIORITY_TIMEOUT;
                            break;
                        }
                        var expirationTime = startTime + timeout;
                        var newTask = {
                            id: taskIdCounter++,
                            callback: callback,
                            priorityLevel: priorityLevel,
                            startTime: startTime,
                            expirationTime: expirationTime,
                            sortIndex: -1
                        };
                        if (startTime > currentTime) {
                            newTask.sortIndex = startTime;
                            push(timerQueue, newTask);
                            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                                if (isHostTimeoutScheduled) {
                                    cancelHostTimeout();
                                } else {
                                    isHostTimeoutScheduled = true;
                                }
                                requestHostTimeout(handleTimeout, startTime - currentTime);
                            }
                        } else {
                            newTask.sortIndex = expirationTime;
                            push(taskQueue, newTask);
                            if (!isHostCallbackScheduled && !isPerformingWork) {
                                isHostCallbackScheduled = true;
                                requestHostCallback(flushWork);
                            }
                        }
                        return newTask;
                    }
                    function unstable_pauseExecution() {}
                    function unstable_continueExecution() {
                        if (!isHostCallbackScheduled && !isPerformingWork) {
                            isHostCallbackScheduled = true;
                            requestHostCallback(flushWork);
                        }
                    }
                    function unstable_getFirstCallbackNode() {
                        return peek(taskQueue);
                    }
                    function unstable_cancelCallback(task) {
                        task.callback = null;
                    }
                    function unstable_getCurrentPriorityLevel() {
                        return currentPriorityLevel;
                    }
                    var isMessageLoopRunning = false;
                    var scheduledHostCallback = null;
                    var taskTimeoutID = -1;
                    var frameInterval = frameYieldMs;
                    var startTime = -1;
                    function shouldYieldToHost() {
                        var timeElapsed = exports.unstable_now() - startTime;
                        if (timeElapsed < frameInterval) {
                            return false;
                        }
                        return true;
                    }
                    function requestPaint() {}
                    function forceFrameRate(fps) {
                        if (fps < 0 || fps > 125) {
                            console["error"]("forceFrameRate takes a positive int between 0 and 125, " + "forcing frame rates higher than 125 fps is not supported");
                            return;
                        }
                        if (fps > 0) {
                            frameInterval = Math.floor(1e3 / fps);
                        } else {
                            frameInterval = frameYieldMs;
                        }
                    }
                    var performWorkUntilDeadline = function() {
                        if (scheduledHostCallback !== null) {
                            var currentTime = exports.unstable_now();
                            startTime = currentTime;
                            var hasTimeRemaining = true;
                            var hasMoreWork = true;
                            try {
                                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                            } finally {
                                if (hasMoreWork) {
                                    schedulePerformWorkUntilDeadline();
                                } else {
                                    isMessageLoopRunning = false;
                                    scheduledHostCallback = null;
                                }
                            }
                        } else {
                            isMessageLoopRunning = false;
                        }
                    };
                    var schedulePerformWorkUntilDeadline;
                    if (typeof localSetImmediate === "function") {
                        schedulePerformWorkUntilDeadline = function() {
                            localSetImmediate(performWorkUntilDeadline);
                        };
                    } else if (typeof MessageChannel !== "undefined") {
                        var channel = new MessageChannel;
                        var port = channel.port2;
                        channel.port1.onmessage = performWorkUntilDeadline;
                        schedulePerformWorkUntilDeadline = function() {
                            port.postMessage(null);
                        };
                    } else {
                        schedulePerformWorkUntilDeadline = function() {
                            localSetTimeout(performWorkUntilDeadline, 0);
                        };
                    }
                    function requestHostCallback(callback) {
                        scheduledHostCallback = callback;
                        if (!isMessageLoopRunning) {
                            isMessageLoopRunning = true;
                            schedulePerformWorkUntilDeadline();
                        }
                    }
                    function requestHostTimeout(callback, ms) {
                        taskTimeoutID = localSetTimeout((function() {
                            callback(exports.unstable_now());
                        }), ms);
                    }
                    function cancelHostTimeout() {
                        localClearTimeout(taskTimeoutID);
                        taskTimeoutID = -1;
                    }
                    var unstable_requestPaint = requestPaint;
                    var unstable_Profiling = null;
                    exports.unstable_IdlePriority = IdlePriority;
                    exports.unstable_ImmediatePriority = ImmediatePriority;
                    exports.unstable_LowPriority = LowPriority;
                    exports.unstable_NormalPriority = NormalPriority;
                    exports.unstable_Profiling = unstable_Profiling;
                    exports.unstable_UserBlockingPriority = UserBlockingPriority;
                    exports.unstable_cancelCallback = unstable_cancelCallback;
                    exports.unstable_continueExecution = unstable_continueExecution;
                    exports.unstable_forceFrameRate = forceFrameRate;
                    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
                    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
                    exports.unstable_next = unstable_next;
                    exports.unstable_pauseExecution = unstable_pauseExecution;
                    exports.unstable_requestPaint = unstable_requestPaint;
                    exports.unstable_runWithPriority = unstable_runWithPriority;
                    exports.unstable_scheduleCallback = unstable_scheduleCallback;
                    exports.unstable_shouldYield = shouldYieldToHost;
                    exports.unstable_wrapCallback = unstable_wrapCallback;
                    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
                        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
                    }
                })();
            }
        })(scheduler_development);
        return scheduler_development;
    }
    var hasRequiredScheduler;
    function requireScheduler() {
        if (hasRequiredScheduler) return schedulerExports;
        hasRequiredScheduler = 1;
        (function(module) {
            {
                module.exports = requireScheduler_development();
            }
        })(scheduler);
        return schedulerExports;
    }
    var reactDom_development = {};
    /**
	 * @license React
	 * react-dom.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */    var hasRequiredReactDom_development;
    function requireReactDom_development() {
        if (hasRequiredReactDom_development) return reactDom_development;
        hasRequiredReactDom_development = 1;
        {
            (function() {
                if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
                }
                var React = reactExports;
                var Scheduler = requireScheduler();
                var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
                var suppressWarning = false;
                function setSuppressWarning(newSuppressWarning) {
                    {
                        suppressWarning = newSuppressWarning;
                    }
                }
                function warn(format) {
                    {
                        if (!suppressWarning) {
                            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                                args[_key - 1] = arguments[_key];
                            }
                            printWarning("warn", format, args);
                        }
                    }
                }
                function error(format) {
                    {
                        if (!suppressWarning) {
                            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                                args[_key2 - 1] = arguments[_key2];
                            }
                            printWarning("error", format, args);
                        }
                    }
                }
                function printWarning(level, format, args) {
                    {
                        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                        var stack = ReactDebugCurrentFrame.getStackAddendum();
                        if (stack !== "") {
                            format += "%s";
                            args = args.concat([ stack ]);
                        }
                        var argsWithFormat = args.map((function(item) {
                            return String(item);
                        }));
                        argsWithFormat.unshift("Warning: " + format);
                        Function.prototype.apply.call(console[level], console, argsWithFormat);
                    }
                }
                var FunctionComponent = 0;
                var ClassComponent = 1;
                var IndeterminateComponent = 2;
                var HostRoot = 3;
                var HostPortal = 4;
                var HostComponent = 5;
                var HostText = 6;
                var Fragment = 7;
                var Mode = 8;
                var ContextConsumer = 9;
                var ContextProvider = 10;
                var ForwardRef = 11;
                var Profiler = 12;
                var SuspenseComponent = 13;
                var MemoComponent = 14;
                var SimpleMemoComponent = 15;
                var LazyComponent = 16;
                var IncompleteClassComponent = 17;
                var DehydratedFragment = 18;
                var SuspenseListComponent = 19;
                var ScopeComponent = 21;
                var OffscreenComponent = 22;
                var LegacyHiddenComponent = 23;
                var CacheComponent = 24;
                var TracingMarkerComponent = 25;
                var enableClientRenderFallbackOnTextMismatch = true;
                var enableNewReconciler = false;
                var enableLazyContextPropagation = false;
                var enableLegacyHidden = false;
                var enableSuspenseAvoidThisFallback = false;
                var disableCommentsAsDOMContainers = true;
                var enableCustomElementPropertySupport = false;
                var warnAboutStringRefs = false;
                var enableSchedulingProfiler = true;
                var enableProfilerTimer = true;
                var enableProfilerCommitHooks = true;
                var allNativeEvents = new Set;
                var registrationNameDependencies = {};
                var possibleRegistrationNames = {};
                function registerTwoPhaseEvent(registrationName, dependencies) {
                    registerDirectEvent(registrationName, dependencies);
                    registerDirectEvent(registrationName + "Capture", dependencies);
                }
                function registerDirectEvent(registrationName, dependencies) {
                    {
                        if (registrationNameDependencies[registrationName]) {
                            error("EventRegistry: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName);
                        }
                    }
                    registrationNameDependencies[registrationName] = dependencies;
                    {
                        var lowerCasedName = registrationName.toLowerCase();
                        possibleRegistrationNames[lowerCasedName] = registrationName;
                        if (registrationName === "onDoubleClick") {
                            possibleRegistrationNames.ondblclick = registrationName;
                        }
                    }
                    for (var i = 0; i < dependencies.length; i++) {
                        allNativeEvents.add(dependencies[i]);
                    }
                }
                var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                function typeName(value) {
                    {
                        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
                        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
                        return type;
                    }
                }
                function willCoercionThrow(value) {
                    {
                        try {
                            testStringCoercion(value);
                            return false;
                        } catch (e) {
                            return true;
                        }
                    }
                }
                function testStringCoercion(value) {
                    return "" + value;
                }
                function checkAttributeStringCoercion(value, attributeName) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided `%s` attribute is an unsupported type %s." + " This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                function checkKeyStringCoercion(value) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided key is an unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                function checkPropStringCoercion(value, propName) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided `%s` prop is an unsupported type %s." + " This value must be coerced to a string before before using it here.", propName, typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                function checkCSSPropertyStringCoercion(value, propName) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided `%s` CSS property is an unsupported type %s." + " This value must be coerced to a string before before using it here.", propName, typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                function checkHtmlStringCoercion(value) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided HTML markup uses a value of unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                function checkFormFieldValueStringCoercion(value) {
                    {
                        if (willCoercionThrow(value)) {
                            error("Form field values (value, checked, defaultValue, or defaultChecked props)" + " must be strings, not %s." + " This value must be coerced to a string before before using it here.", typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                var RESERVED = 0;
                var STRING = 1;
                var BOOLEANISH_STRING = 2;
                var BOOLEAN = 3;
                var OVERLOADED_BOOLEAN = 4;
                var NUMERIC = 5;
                var POSITIVE_NUMERIC = 6;
                var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
                var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
                var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
                var illegalAttributeNameCache = {};
                var validatedAttributeNameCache = {};
                function isAttributeNameSafe(attributeName) {
                    if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
                        return true;
                    }
                    if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
                        return false;
                    }
                    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                        validatedAttributeNameCache[attributeName] = true;
                        return true;
                    }
                    illegalAttributeNameCache[attributeName] = true;
                    {
                        error("Invalid attribute name: `%s`", attributeName);
                    }
                    return false;
                }
                function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
                    if (propertyInfo !== null) {
                        return propertyInfo.type === RESERVED;
                    }
                    if (isCustomComponentTag) {
                        return false;
                    }
                    if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
                        return true;
                    }
                    return false;
                }
                function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
                    if (propertyInfo !== null && propertyInfo.type === RESERVED) {
                        return false;
                    }
                    switch (typeof value) {
                      case "function":
                      case "symbol":
                        return true;

                      case "boolean":
                        {
                            if (isCustomComponentTag) {
                                return false;
                            }
                            if (propertyInfo !== null) {
                                return !propertyInfo.acceptsBooleans;
                            } else {
                                var prefix = name.toLowerCase().slice(0, 5);
                                return prefix !== "data-" && prefix !== "aria-";
                            }
                        }

                      default:
                        return false;
                    }
                }
                function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
                    if (value === null || typeof value === "undefined") {
                        return true;
                    }
                    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
                        return true;
                    }
                    if (isCustomComponentTag) {
                        return false;
                    }
                    if (propertyInfo !== null) {
                        switch (propertyInfo.type) {
                          case BOOLEAN:
                            return !value;

                          case OVERLOADED_BOOLEAN:
                            return value === false;

                          case NUMERIC:
                            return isNaN(value);

                          case POSITIVE_NUMERIC:
                            return isNaN(value) || value < 1;
                        }
                    }
                    return false;
                }
                function getPropertyInfo(name) {
                    return properties.hasOwnProperty(name) ? properties[name] : null;
                }
                function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
                    this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
                    this.attributeName = attributeName;
                    this.attributeNamespace = attributeNamespace;
                    this.mustUseProperty = mustUseProperty;
                    this.propertyName = name;
                    this.type = type;
                    this.sanitizeURL = sanitizeURL;
                    this.removeEmptyString = removeEmptyString;
                }
                var properties = {};
                var reservedProps = [ "children", "dangerouslySetInnerHTML", "defaultValue", "defaultChecked", "innerHTML", "suppressContentEditableWarning", "suppressHydrationWarning", "style" ];
                reservedProps.forEach((function(name) {
                    properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
                }));
                [ [ "acceptCharset", "accept-charset" ], [ "className", "class" ], [ "htmlFor", "for" ], [ "httpEquiv", "http-equiv" ] ].forEach((function(_ref) {
                    var name = _ref[0], attributeName = _ref[1];
                    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
                }));
                [ "contentEditable", "draggable", "spellCheck", "value" ].forEach((function(name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
                }));
                [ "autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha" ].forEach((function(name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
                }));
                [ "allowFullScreen", "async", "autoFocus", "autoPlay", "controls", "default", "defer", "disabled", "disablePictureInPicture", "disableRemotePlayback", "formNoValidate", "hidden", "loop", "noModule", "noValidate", "open", "playsInline", "readOnly", "required", "reversed", "scoped", "seamless", "itemScope" ].forEach((function(name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
                }));
                [ "checked", "multiple", "muted", "selected" ].forEach((function(name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
                }));
                [ "capture", "download" ].forEach((function(name) {
                    properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
                }));
                [ "cols", "rows", "size", "span" ].forEach((function(name) {
                    properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
                }));
                [ "rowSpan", "start" ].forEach((function(name) {
                    properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
                }));
                var CAMELIZE = /[\-\:]([a-z])/g;
                var capitalize = function(token) {
                    return token[1].toUpperCase();
                };
                [ "accent-height", "alignment-baseline", "arabic-form", "baseline-shift", "cap-height", "clip-path", "clip-rule", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "dominant-baseline", "enable-background", "fill-opacity", "fill-rule", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "glyph-name", "glyph-orientation-horizontal", "glyph-orientation-vertical", "horiz-adv-x", "horiz-origin-x", "image-rendering", "letter-spacing", "lighting-color", "marker-end", "marker-mid", "marker-start", "overline-position", "overline-thickness", "paint-order", "panose-1", "pointer-events", "rendering-intent", "shape-rendering", "stop-color", "stop-opacity", "strikethrough-position", "strikethrough-thickness", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-anchor", "text-decoration", "text-rendering", "underline-position", "underline-thickness", "unicode-bidi", "unicode-range", "units-per-em", "v-alphabetic", "v-hanging", "v-ideographic", "v-mathematical", "vector-effect", "vert-adv-y", "vert-origin-x", "vert-origin-y", "word-spacing", "writing-mode", "xmlns:xlink", "x-height" ].forEach((function(attributeName) {
                    var name = attributeName.replace(CAMELIZE, capitalize);
                    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
                }));
                [ "xlink:actuate", "xlink:arcrole", "xlink:role", "xlink:show", "xlink:title", "xlink:type" ].forEach((function(attributeName) {
                    var name = attributeName.replace(CAMELIZE, capitalize);
                    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
                }));
                [ "xml:base", "xml:lang", "xml:space" ].forEach((function(attributeName) {
                    var name = attributeName.replace(CAMELIZE, capitalize);
                    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
                }));
                [ "tabIndex", "crossOrigin" ].forEach((function(attributeName) {
                    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
                }));
                var xlinkHref = "xlinkHref";
                properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
                [ "src", "href", "action", "formAction" ].forEach((function(attributeName) {
                    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
                }));
                var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
                var didWarn = false;
                function sanitizeURL(url) {
                    {
                        if (!didWarn && isJavaScriptProtocol.test(url)) {
                            didWarn = true;
                            error("A future version of React will block javascript: URLs as a security precaution. " + "Use event handlers instead if you can. If you need to generate unsafe HTML try " + "using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
                        }
                    }
                }
                function getValueForProperty(node, name, expected, propertyInfo) {
                    {
                        if (propertyInfo.mustUseProperty) {
                            var propertyName = propertyInfo.propertyName;
                            return node[propertyName];
                        } else {
                            {
                                checkAttributeStringCoercion(expected, name);
                            }
                            if (propertyInfo.sanitizeURL) {
                                sanitizeURL("" + expected);
                            }
                            var attributeName = propertyInfo.attributeName;
                            var stringValue = null;
                            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                                if (node.hasAttribute(attributeName)) {
                                    var value = node.getAttribute(attributeName);
                                    if (value === "") {
                                        return true;
                                    }
                                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                                        return value;
                                    }
                                    if (value === "" + expected) {
                                        return expected;
                                    }
                                    return value;
                                }
                            } else if (node.hasAttribute(attributeName)) {
                                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                                    return node.getAttribute(attributeName);
                                }
                                if (propertyInfo.type === BOOLEAN) {
                                    return expected;
                                }
                                stringValue = node.getAttribute(attributeName);
                            }
                            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                                return stringValue === null ? expected : stringValue;
                            } else if (stringValue === "" + expected) {
                                return expected;
                            } else {
                                return stringValue;
                            }
                        }
                    }
                }
                function getValueForAttribute(node, name, expected, isCustomComponentTag) {
                    {
                        if (!isAttributeNameSafe(name)) {
                            return;
                        }
                        if (!node.hasAttribute(name)) {
                            return expected === undefined ? undefined : null;
                        }
                        var value = node.getAttribute(name);
                        {
                            checkAttributeStringCoercion(expected, name);
                        }
                        if (value === "" + expected) {
                            return expected;
                        }
                        return value;
                    }
                }
                function setValueForProperty(node, name, value, isCustomComponentTag) {
                    var propertyInfo = getPropertyInfo(name);
                    if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
                        return;
                    }
                    if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
                        value = null;
                    }
                    if (isCustomComponentTag || propertyInfo === null) {
                        if (isAttributeNameSafe(name)) {
                            var _attributeName = name;
                            if (value === null) {
                                node.removeAttribute(_attributeName);
                            } else {
                                {
                                    checkAttributeStringCoercion(value, name);
                                }
                                node.setAttribute(_attributeName, "" + value);
                            }
                        }
                        return;
                    }
                    var mustUseProperty = propertyInfo.mustUseProperty;
                    if (mustUseProperty) {
                        var propertyName = propertyInfo.propertyName;
                        if (value === null) {
                            var type = propertyInfo.type;
                            node[propertyName] = type === BOOLEAN ? false : "";
                        } else {
                            node[propertyName] = value;
                        }
                        return;
                    }
                    var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
                    if (value === null) {
                        node.removeAttribute(attributeName);
                    } else {
                        var _type = propertyInfo.type;
                        var attributeValue;
                        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                            attributeValue = "";
                        } else {
                            {
                                {
                                    checkAttributeStringCoercion(value, attributeName);
                                }
                                attributeValue = "" + value;
                            }
                            if (propertyInfo.sanitizeURL) {
                                sanitizeURL(attributeValue.toString());
                            }
                        }
                        if (attributeNamespace) {
                            node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
                        } else {
                            node.setAttribute(attributeName, attributeValue);
                        }
                    }
                }
                var REACT_ELEMENT_TYPE = Symbol.for("react.element");
                var REACT_PORTAL_TYPE = Symbol.for("react.portal");
                var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
                var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
                var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
                var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
                var REACT_CONTEXT_TYPE = Symbol.for("react.context");
                var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
                var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
                var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
                var REACT_MEMO_TYPE = Symbol.for("react.memo");
                var REACT_LAZY_TYPE = Symbol.for("react.lazy");
                var REACT_SCOPE_TYPE = Symbol.for("react.scope");
                var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
                var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
                var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
                var REACT_CACHE_TYPE = Symbol.for("react.cache");
                var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
                var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = "@@iterator";
                function getIteratorFn(maybeIterable) {
                    if (maybeIterable === null || typeof maybeIterable !== "object") {
                        return null;
                    }
                    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
                    if (typeof maybeIterator === "function") {
                        return maybeIterator;
                    }
                    return null;
                }
                var assign = Object.assign;
                var disabledDepth = 0;
                var prevLog;
                var prevInfo;
                var prevWarn;
                var prevError;
                var prevGroup;
                var prevGroupCollapsed;
                var prevGroupEnd;
                function disabledLog() {}
                disabledLog.__reactDisabledLog = true;
                function disableLogs() {
                    {
                        if (disabledDepth === 0) {
                            prevLog = console.log;
                            prevInfo = console.info;
                            prevWarn = console.warn;
                            prevError = console.error;
                            prevGroup = console.group;
                            prevGroupCollapsed = console.groupCollapsed;
                            prevGroupEnd = console.groupEnd;
                            var props = {
                                configurable: true,
                                enumerable: true,
                                value: disabledLog,
                                writable: true
                            };
                            Object.defineProperties(console, {
                                info: props,
                                log: props,
                                warn: props,
                                error: props,
                                group: props,
                                groupCollapsed: props,
                                groupEnd: props
                            });
                        }
                        disabledDepth++;
                    }
                }
                function reenableLogs() {
                    {
                        disabledDepth--;
                        if (disabledDepth === 0) {
                            var props = {
                                configurable: true,
                                enumerable: true,
                                writable: true
                            };
                            Object.defineProperties(console, {
                                log: assign({}, props, {
                                    value: prevLog
                                }),
                                info: assign({}, props, {
                                    value: prevInfo
                                }),
                                warn: assign({}, props, {
                                    value: prevWarn
                                }),
                                error: assign({}, props, {
                                    value: prevError
                                }),
                                group: assign({}, props, {
                                    value: prevGroup
                                }),
                                groupCollapsed: assign({}, props, {
                                    value: prevGroupCollapsed
                                }),
                                groupEnd: assign({}, props, {
                                    value: prevGroupEnd
                                })
                            });
                        }
                        if (disabledDepth < 0) {
                            error("disabledDepth fell below zero. " + "This is a bug in React. Please file an issue.");
                        }
                    }
                }
                var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
                var prefix;
                function describeBuiltInComponentFrame(name, source, ownerFn) {
                    {
                        if (prefix === undefined) {
                            try {
                                throw Error();
                            } catch (x) {
                                var match = x.stack.trim().match(/\n( *(at )?)/);
                                prefix = match && match[1] || "";
                            }
                        }
                        return "\n" + prefix + name;
                    }
                }
                var reentry = false;
                var componentFrameCache;
                {
                    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
                    componentFrameCache = new PossiblyWeakMap;
                }
                function describeNativeComponentFrame(fn, construct) {
                    if (!fn || reentry) {
                        return "";
                    }
                    {
                        var frame = componentFrameCache.get(fn);
                        if (frame !== undefined) {
                            return frame;
                        }
                    }
                    var control;
                    reentry = true;
                    var previousPrepareStackTrace = Error.prepareStackTrace;
                    Error.prepareStackTrace = undefined;
                    var previousDispatcher;
                    {
                        previousDispatcher = ReactCurrentDispatcher.current;
                        ReactCurrentDispatcher.current = null;
                        disableLogs();
                    }
                    try {
                        if (construct) {
                            var Fake = function() {
                                throw Error();
                            };
                            Object.defineProperty(Fake.prototype, "props", {
                                set: function() {
                                    throw Error();
                                }
                            });
                            if (typeof Reflect === "object" && Reflect.construct) {
                                try {
                                    Reflect.construct(Fake, []);
                                } catch (x) {
                                    control = x;
                                }
                                Reflect.construct(fn, [], Fake);
                            } else {
                                try {
                                    Fake.call();
                                } catch (x) {
                                    control = x;
                                }
                                fn.call(Fake.prototype);
                            }
                        } else {
                            try {
                                throw Error();
                            } catch (x) {
                                control = x;
                            }
                            fn();
                        }
                    } catch (sample) {
                        if (sample && control && typeof sample.stack === "string") {
                            var sampleLines = sample.stack.split("\n");
                            var controlLines = control.stack.split("\n");
                            var s = sampleLines.length - 1;
                            var c = controlLines.length - 1;
                            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                                c--;
                            }
                            for (;s >= 1 && c >= 0; s--, c--) {
                                if (sampleLines[s] !== controlLines[c]) {
                                    if (s !== 1 || c !== 1) {
                                        do {
                                            s--;
                                            c--;
                                            if (c < 0 || sampleLines[s] !== controlLines[c]) {
                                                var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                                                if (fn.displayName && _frame.includes("<anonymous>")) {
                                                    _frame = _frame.replace("<anonymous>", fn.displayName);
                                                }
                                                {
                                                    if (typeof fn === "function") {
                                                        componentFrameCache.set(fn, _frame);
                                                    }
                                                }
                                                return _frame;
                                            }
                                        } while (s >= 1 && c >= 0);
                                    }
                                    break;
                                }
                            }
                        }
                    } finally {
                        reentry = false;
                        {
                            ReactCurrentDispatcher.current = previousDispatcher;
                            reenableLogs();
                        }
                        Error.prepareStackTrace = previousPrepareStackTrace;
                    }
                    var name = fn ? fn.displayName || fn.name : "";
                    var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
                    {
                        if (typeof fn === "function") {
                            componentFrameCache.set(fn, syntheticFrame);
                        }
                    }
                    return syntheticFrame;
                }
                function describeClassComponentFrame(ctor, source, ownerFn) {
                    {
                        return describeNativeComponentFrame(ctor, true);
                    }
                }
                function describeFunctionComponentFrame(fn, source, ownerFn) {
                    {
                        return describeNativeComponentFrame(fn, false);
                    }
                }
                function shouldConstruct(Component) {
                    var prototype = Component.prototype;
                    return !!(prototype && prototype.isReactComponent);
                }
                function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
                    if (type == null) {
                        return "";
                    }
                    if (typeof type === "function") {
                        {
                            return describeNativeComponentFrame(type, shouldConstruct(type));
                        }
                    }
                    if (typeof type === "string") {
                        return describeBuiltInComponentFrame(type);
                    }
                    switch (type) {
                      case REACT_SUSPENSE_TYPE:
                        return describeBuiltInComponentFrame("Suspense");

                      case REACT_SUSPENSE_LIST_TYPE:
                        return describeBuiltInComponentFrame("SuspenseList");
                    }
                    if (typeof type === "object") {
                        switch (type.$$typeof) {
                          case REACT_FORWARD_REF_TYPE:
                            return describeFunctionComponentFrame(type.render);

                          case REACT_MEMO_TYPE:
                            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

                          case REACT_LAZY_TYPE:
                            {
                                var lazyComponent = type;
                                var payload = lazyComponent._payload;
                                var init = lazyComponent._init;
                                try {
                                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                                } catch (x) {}
                            }
                        }
                    }
                    return "";
                }
                function describeFiber(fiber) {
                    fiber._debugOwner ? fiber._debugOwner.type : null;
                    fiber._debugSource;
                    switch (fiber.tag) {
                      case HostComponent:
                        return describeBuiltInComponentFrame(fiber.type);

                      case LazyComponent:
                        return describeBuiltInComponentFrame("Lazy");

                      case SuspenseComponent:
                        return describeBuiltInComponentFrame("Suspense");

                      case SuspenseListComponent:
                        return describeBuiltInComponentFrame("SuspenseList");

                      case FunctionComponent:
                      case IndeterminateComponent:
                      case SimpleMemoComponent:
                        return describeFunctionComponentFrame(fiber.type);

                      case ForwardRef:
                        return describeFunctionComponentFrame(fiber.type.render);

                      case ClassComponent:
                        return describeClassComponentFrame(fiber.type);

                      default:
                        return "";
                    }
                }
                function getStackByFiberInDevAndProd(workInProgress) {
                    try {
                        var info = "";
                        var node = workInProgress;
                        do {
                            info += describeFiber(node);
                            node = node.return;
                        } while (node);
                        return info;
                    } catch (x) {
                        return "\nError generating stack: " + x.message + "\n" + x.stack;
                    }
                }
                function getWrappedName(outerType, innerType, wrapperName) {
                    var displayName = outerType.displayName;
                    if (displayName) {
                        return displayName;
                    }
                    var functionName = innerType.displayName || innerType.name || "";
                    return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
                }
                function getContextName(type) {
                    return type.displayName || "Context";
                }
                function getComponentNameFromType(type) {
                    if (type == null) {
                        return null;
                    }
                    {
                        if (typeof type.tag === "number") {
                            error("Received an unexpected object in getComponentNameFromType(). " + "This is likely a bug in React. Please file an issue.");
                        }
                    }
                    if (typeof type === "function") {
                        return type.displayName || type.name || null;
                    }
                    if (typeof type === "string") {
                        return type;
                    }
                    switch (type) {
                      case REACT_FRAGMENT_TYPE:
                        return "Fragment";

                      case REACT_PORTAL_TYPE:
                        return "Portal";

                      case REACT_PROFILER_TYPE:
                        return "Profiler";

                      case REACT_STRICT_MODE_TYPE:
                        return "StrictMode";

                      case REACT_SUSPENSE_TYPE:
                        return "Suspense";

                      case REACT_SUSPENSE_LIST_TYPE:
                        return "SuspenseList";
                    }
                    if (typeof type === "object") {
                        switch (type.$$typeof) {
                          case REACT_CONTEXT_TYPE:
                            var context = type;
                            return getContextName(context) + ".Consumer";

                          case REACT_PROVIDER_TYPE:
                            var provider = type;
                            return getContextName(provider._context) + ".Provider";

                          case REACT_FORWARD_REF_TYPE:
                            return getWrappedName(type, type.render, "ForwardRef");

                          case REACT_MEMO_TYPE:
                            var outerName = type.displayName || null;
                            if (outerName !== null) {
                                return outerName;
                            }
                            return getComponentNameFromType(type.type) || "Memo";

                          case REACT_LAZY_TYPE:
                            {
                                var lazyComponent = type;
                                var payload = lazyComponent._payload;
                                var init = lazyComponent._init;
                                try {
                                    return getComponentNameFromType(init(payload));
                                } catch (x) {
                                    return null;
                                }
                            }
                        }
                    }
                    return null;
                }
                function getWrappedName$1(outerType, innerType, wrapperName) {
                    var functionName = innerType.displayName || innerType.name || "";
                    return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
                }
                function getContextName$1(type) {
                    return type.displayName || "Context";
                }
                function getComponentNameFromFiber(fiber) {
                    var tag = fiber.tag, type = fiber.type;
                    switch (tag) {
                      case CacheComponent:
                        return "Cache";

                      case ContextConsumer:
                        var context = type;
                        return getContextName$1(context) + ".Consumer";

                      case ContextProvider:
                        var provider = type;
                        return getContextName$1(provider._context) + ".Provider";

                      case DehydratedFragment:
                        return "DehydratedFragment";

                      case ForwardRef:
                        return getWrappedName$1(type, type.render, "ForwardRef");

                      case Fragment:
                        return "Fragment";

                      case HostComponent:
                        return type;

                      case HostPortal:
                        return "Portal";

                      case HostRoot:
                        return "Root";

                      case HostText:
                        return "Text";

                      case LazyComponent:
                        return getComponentNameFromType(type);

                      case Mode:
                        if (type === REACT_STRICT_MODE_TYPE) {
                            return "StrictMode";
                        }
                        return "Mode";

                      case OffscreenComponent:
                        return "Offscreen";

                      case Profiler:
                        return "Profiler";

                      case ScopeComponent:
                        return "Scope";

                      case SuspenseComponent:
                        return "Suspense";

                      case SuspenseListComponent:
                        return "SuspenseList";

                      case TracingMarkerComponent:
                        return "TracingMarker";

                      case ClassComponent:
                      case FunctionComponent:
                      case IncompleteClassComponent:
                      case IndeterminateComponent:
                      case MemoComponent:
                      case SimpleMemoComponent:
                        if (typeof type === "function") {
                            return type.displayName || type.name || null;
                        }
                        if (typeof type === "string") {
                            return type;
                        }
                        break;
                    }
                    return null;
                }
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var current = null;
                var isRendering = false;
                function getCurrentFiberOwnerNameInDevOrNull() {
                    {
                        if (current === null) {
                            return null;
                        }
                        var owner = current._debugOwner;
                        if (owner !== null && typeof owner !== "undefined") {
                            return getComponentNameFromFiber(owner);
                        }
                    }
                    return null;
                }
                function getCurrentFiberStackInDev() {
                    {
                        if (current === null) {
                            return "";
                        }
                        return getStackByFiberInDevAndProd(current);
                    }
                }
                function resetCurrentFiber() {
                    {
                        ReactDebugCurrentFrame.getCurrentStack = null;
                        current = null;
                        isRendering = false;
                    }
                }
                function setCurrentFiber(fiber) {
                    {
                        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
                        current = fiber;
                        isRendering = false;
                    }
                }
                function getCurrentFiber() {
                    {
                        return current;
                    }
                }
                function setIsRendering(rendering) {
                    {
                        isRendering = rendering;
                    }
                }
                function toString(value) {
                    return "" + value;
                }
                function getToStringValue(value) {
                    switch (typeof value) {
                      case "boolean":
                      case "number":
                      case "string":
                      case "undefined":
                        return value;

                      case "object":
                        {
                            checkFormFieldValueStringCoercion(value);
                        }
                        return value;

                      default:
                        return "";
                    }
                }
                var hasReadOnlyValue = {
                    button: true,
                    checkbox: true,
                    image: true,
                    hidden: true,
                    radio: true,
                    reset: true,
                    submit: true
                };
                function checkControlledValueProps(tagName, props) {
                    {
                        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                            error("You provided a `value` prop to a form field without an " + "`onChange` handler. This will render a read-only field. If " + "the field should be mutable use `defaultValue`. Otherwise, " + "set either `onChange` or `readOnly`.");
                        }
                        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                            error("You provided a `checked` prop to a form field without an " + "`onChange` handler. This will render a read-only field. If " + "the field should be mutable use `defaultChecked`. Otherwise, " + "set either `onChange` or `readOnly`.");
                        }
                    }
                }
                function isCheckable(elem) {
                    var type = elem.type;
                    var nodeName = elem.nodeName;
                    return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
                }
                function getTracker(node) {
                    return node._valueTracker;
                }
                function detachTracker(node) {
                    node._valueTracker = null;
                }
                function getValueFromNode(node) {
                    var value = "";
                    if (!node) {
                        return value;
                    }
                    if (isCheckable(node)) {
                        value = node.checked ? "true" : "false";
                    } else {
                        value = node.value;
                    }
                    return value;
                }
                function trackValueOnNode(node) {
                    var valueField = isCheckable(node) ? "checked" : "value";
                    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
                    {
                        checkFormFieldValueStringCoercion(node[valueField]);
                    }
                    var currentValue = "" + node[valueField];
                    if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
                        return;
                    }
                    var get = descriptor.get, set = descriptor.set;
                    Object.defineProperty(node, valueField, {
                        configurable: true,
                        get: function() {
                            return get.call(this);
                        },
                        set: function(value) {
                            {
                                checkFormFieldValueStringCoercion(value);
                            }
                            currentValue = "" + value;
                            set.call(this, value);
                        }
                    });
                    Object.defineProperty(node, valueField, {
                        enumerable: descriptor.enumerable
                    });
                    var tracker = {
                        getValue: function() {
                            return currentValue;
                        },
                        setValue: function(value) {
                            {
                                checkFormFieldValueStringCoercion(value);
                            }
                            currentValue = "" + value;
                        },
                        stopTracking: function() {
                            detachTracker(node);
                            delete node[valueField];
                        }
                    };
                    return tracker;
                }
                function track(node) {
                    if (getTracker(node)) {
                        return;
                    }
                    node._valueTracker = trackValueOnNode(node);
                }
                function updateValueIfChanged(node) {
                    if (!node) {
                        return false;
                    }
                    var tracker = getTracker(node);
                    if (!tracker) {
                        return true;
                    }
                    var lastValue = tracker.getValue();
                    var nextValue = getValueFromNode(node);
                    if (nextValue !== lastValue) {
                        tracker.setValue(nextValue);
                        return true;
                    }
                    return false;
                }
                function getActiveElement(doc) {
                    doc = doc || (typeof document !== "undefined" ? document : undefined);
                    if (typeof doc === "undefined") {
                        return null;
                    }
                    try {
                        return doc.activeElement || doc.body;
                    } catch (e) {
                        return doc.body;
                    }
                }
                var didWarnValueDefaultValue = false;
                var didWarnCheckedDefaultChecked = false;
                var didWarnControlledToUncontrolled = false;
                var didWarnUncontrolledToControlled = false;
                function isControlled(props) {
                    var usesChecked = props.type === "checkbox" || props.type === "radio";
                    return usesChecked ? props.checked != null : props.value != null;
                }
                function getHostProps(element, props) {
                    var node = element;
                    var checked = props.checked;
                    var hostProps = assign({}, props, {
                        defaultChecked: undefined,
                        defaultValue: undefined,
                        value: undefined,
                        checked: checked != null ? checked : node._wrapperState.initialChecked
                    });
                    return hostProps;
                }
                function initWrapperState(element, props) {
                    {
                        checkControlledValueProps("input", props);
                        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
                            error("%s contains an input of type %s with both checked and defaultChecked props. " + "Input elements must be either controlled or uncontrolled " + "(specify either the checked prop, or the defaultChecked prop, but not " + "both). Decide between using a controlled or uncontrolled input " + "element and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                            didWarnCheckedDefaultChecked = true;
                        }
                        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
                            error("%s contains an input of type %s with both value and defaultValue props. " + "Input elements must be either controlled or uncontrolled " + "(specify either the value prop, or the defaultValue prop, but not " + "both). Decide between using a controlled or uncontrolled input " + "element and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                            didWarnValueDefaultValue = true;
                        }
                    }
                    var node = element;
                    var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
                    node._wrapperState = {
                        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
                        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
                        controlled: isControlled(props)
                    };
                }
                function updateChecked(element, props) {
                    var node = element;
                    var checked = props.checked;
                    if (checked != null) {
                        setValueForProperty(node, "checked", checked, false);
                    }
                }
                function updateWrapper(element, props) {
                    var node = element;
                    {
                        var controlled = isControlled(props);
                        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                            error("A component is changing an uncontrolled input to be controlled. " + "This is likely caused by the value changing from undefined to " + "a defined value, which should not happen. " + "Decide between using a controlled or uncontrolled input " + "element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                            didWarnUncontrolledToControlled = true;
                        }
                        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                            error("A component is changing a controlled input to be uncontrolled. " + "This is likely caused by the value changing from a defined to " + "undefined, which should not happen. " + "Decide between using a controlled or uncontrolled input " + "element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                            didWarnControlledToUncontrolled = true;
                        }
                    }
                    updateChecked(element, props);
                    var value = getToStringValue(props.value);
                    var type = props.type;
                    if (value != null) {
                        if (type === "number") {
                            if (value === 0 && node.value === "" || node.value != value) {
                                node.value = toString(value);
                            }
                        } else if (node.value !== toString(value)) {
                            node.value = toString(value);
                        }
                    } else if (type === "submit" || type === "reset") {
                        node.removeAttribute("value");
                        return;
                    }
                    {
                        if (props.hasOwnProperty("value")) {
                            setDefaultValue(node, props.type, value);
                        } else if (props.hasOwnProperty("defaultValue")) {
                            setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
                        }
                    }
                    {
                        if (props.checked == null && props.defaultChecked != null) {
                            node.defaultChecked = !!props.defaultChecked;
                        }
                    }
                }
                function postMountWrapper(element, props, isHydrating) {
                    var node = element;
                    if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
                        var type = props.type;
                        var isButton = type === "submit" || type === "reset";
                        if (isButton && (props.value === undefined || props.value === null)) {
                            return;
                        }
                        var initialValue = toString(node._wrapperState.initialValue);
                        if (!isHydrating) {
                            {
                                if (initialValue !== node.value) {
                                    node.value = initialValue;
                                }
                            }
                        }
                        {
                            node.defaultValue = initialValue;
                        }
                    }
                    var name = node.name;
                    if (name !== "") {
                        node.name = "";
                    }
                    {
                        node.defaultChecked = !node.defaultChecked;
                        node.defaultChecked = !!node._wrapperState.initialChecked;
                    }
                    if (name !== "") {
                        node.name = name;
                    }
                }
                function restoreControlledState(element, props) {
                    var node = element;
                    updateWrapper(node, props);
                    updateNamedCousins(node, props);
                }
                function updateNamedCousins(rootNode, props) {
                    var name = props.name;
                    if (props.type === "radio" && name != null) {
                        var queryRoot = rootNode;
                        while (queryRoot.parentNode) {
                            queryRoot = queryRoot.parentNode;
                        }
                        {
                            checkAttributeStringCoercion(name, "name");
                        }
                        var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
                        for (var i = 0; i < group.length; i++) {
                            var otherNode = group[i];
                            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                                continue;
                            }
                            var otherProps = getFiberCurrentPropsFromNode(otherNode);
                            if (!otherProps) {
                                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the " + "same `name` is not supported.");
                            }
                            updateValueIfChanged(otherNode);
                            updateWrapper(otherNode, otherProps);
                        }
                    }
                }
                function setDefaultValue(node, type, value) {
                    if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
                        if (value == null) {
                            node.defaultValue = toString(node._wrapperState.initialValue);
                        } else if (node.defaultValue !== toString(value)) {
                            node.defaultValue = toString(value);
                        }
                    }
                }
                var didWarnSelectedSetOnOption = false;
                var didWarnInvalidChild = false;
                var didWarnInvalidInnerHTML = false;
                function validateProps(element, props) {
                    {
                        if (props.value == null) {
                            if (typeof props.children === "object" && props.children !== null) {
                                React.Children.forEach(props.children, (function(child) {
                                    if (child == null) {
                                        return;
                                    }
                                    if (typeof child === "string" || typeof child === "number") {
                                        return;
                                    }
                                    if (!didWarnInvalidChild) {
                                        didWarnInvalidChild = true;
                                        error("Cannot infer the option value of complex children. " + "Pass a `value` prop or use a plain string as children to <option>.");
                                    }
                                }));
                            } else if (props.dangerouslySetInnerHTML != null) {
                                if (!didWarnInvalidInnerHTML) {
                                    didWarnInvalidInnerHTML = true;
                                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows " + "which value should be selected.");
                                }
                            }
                        }
                        if (props.selected != null && !didWarnSelectedSetOnOption) {
                            error("Use the `defaultValue` or `value` props on <select> instead of " + "setting `selected` on <option>.");
                            didWarnSelectedSetOnOption = true;
                        }
                    }
                }
                function postMountWrapper$1(element, props) {
                    if (props.value != null) {
                        element.setAttribute("value", toString(getToStringValue(props.value)));
                    }
                }
                var isArrayImpl = Array.isArray;
                function isArray(a) {
                    return isArrayImpl(a);
                }
                var didWarnValueDefaultValue$1;
                {
                    didWarnValueDefaultValue$1 = false;
                }
                function getDeclarationErrorAddendum() {
                    var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                    if (ownerName) {
                        return "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                    return "";
                }
                var valuePropNames = [ "value", "defaultValue" ];
                function checkSelectPropTypes(props) {
                    {
                        checkControlledValueProps("select", props);
                        for (var i = 0; i < valuePropNames.length; i++) {
                            var propName = valuePropNames[i];
                            if (props[propName] == null) {
                                continue;
                            }
                            var propNameIsArray = isArray(props[propName]);
                            if (props.multiple && !propNameIsArray) {
                                error("The `%s` prop supplied to <select> must be an array if " + "`multiple` is true.%s", propName, getDeclarationErrorAddendum());
                            } else if (!props.multiple && propNameIsArray) {
                                error("The `%s` prop supplied to <select> must be a scalar " + "value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                            }
                        }
                    }
                }
                function updateOptions(node, multiple, propValue, setDefaultSelected) {
                    var options = node.options;
                    if (multiple) {
                        var selectedValues = propValue;
                        var selectedValue = {};
                        for (var i = 0; i < selectedValues.length; i++) {
                            selectedValue["$" + selectedValues[i]] = true;
                        }
                        for (var _i = 0; _i < options.length; _i++) {
                            var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
                            if (options[_i].selected !== selected) {
                                options[_i].selected = selected;
                            }
                            if (selected && setDefaultSelected) {
                                options[_i].defaultSelected = true;
                            }
                        }
                    } else {
                        var _selectedValue = toString(getToStringValue(propValue));
                        var defaultSelected = null;
                        for (var _i2 = 0; _i2 < options.length; _i2++) {
                            if (options[_i2].value === _selectedValue) {
                                options[_i2].selected = true;
                                if (setDefaultSelected) {
                                    options[_i2].defaultSelected = true;
                                }
                                return;
                            }
                            if (defaultSelected === null && !options[_i2].disabled) {
                                defaultSelected = options[_i2];
                            }
                        }
                        if (defaultSelected !== null) {
                            defaultSelected.selected = true;
                        }
                    }
                }
                function getHostProps$1(element, props) {
                    return assign({}, props, {
                        value: undefined
                    });
                }
                function initWrapperState$1(element, props) {
                    var node = element;
                    {
                        checkSelectPropTypes(props);
                    }
                    node._wrapperState = {
                        wasMultiple: !!props.multiple
                    };
                    {
                        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
                            error("Select elements must be either controlled or uncontrolled " + "(specify either the value prop, or the defaultValue prop, but not " + "both). Decide between using a controlled or uncontrolled select " + "element and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components");
                            didWarnValueDefaultValue$1 = true;
                        }
                    }
                }
                function postMountWrapper$2(element, props) {
                    var node = element;
                    node.multiple = !!props.multiple;
                    var value = props.value;
                    if (value != null) {
                        updateOptions(node, !!props.multiple, value, false);
                    } else if (props.defaultValue != null) {
                        updateOptions(node, !!props.multiple, props.defaultValue, true);
                    }
                }
                function postUpdateWrapper(element, props) {
                    var node = element;
                    var wasMultiple = node._wrapperState.wasMultiple;
                    node._wrapperState.wasMultiple = !!props.multiple;
                    var value = props.value;
                    if (value != null) {
                        updateOptions(node, !!props.multiple, value, false);
                    } else if (wasMultiple !== !!props.multiple) {
                        if (props.defaultValue != null) {
                            updateOptions(node, !!props.multiple, props.defaultValue, true);
                        } else {
                            updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
                        }
                    }
                }
                function restoreControlledState$1(element, props) {
                    var node = element;
                    var value = props.value;
                    if (value != null) {
                        updateOptions(node, !!props.multiple, value, false);
                    }
                }
                var didWarnValDefaultVal = false;
                function getHostProps$2(element, props) {
                    var node = element;
                    if (props.dangerouslySetInnerHTML != null) {
                        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                    }
                    var hostProps = assign({}, props, {
                        value: undefined,
                        defaultValue: undefined,
                        children: toString(node._wrapperState.initialValue)
                    });
                    return hostProps;
                }
                function initWrapperState$2(element, props) {
                    var node = element;
                    {
                        checkControlledValueProps("textarea", props);
                        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
                            error("%s contains a textarea with both value and defaultValue props. " + "Textarea elements must be either controlled or uncontrolled " + "(specify either the value prop, or the defaultValue prop, but not " + "both). Decide between using a controlled or uncontrolled textarea " + "and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                            didWarnValDefaultVal = true;
                        }
                    }
                    var initialValue = props.value;
                    if (initialValue == null) {
                        var children = props.children, defaultValue = props.defaultValue;
                        if (children != null) {
                            {
                                error("Use the `defaultValue` or `value` props instead of setting " + "children on <textarea>.");
                            }
                            {
                                if (defaultValue != null) {
                                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                                }
                                if (isArray(children)) {
                                    if (children.length > 1) {
                                        throw new Error("<textarea> can only have at most one child.");
                                    }
                                    children = children[0];
                                }
                                defaultValue = children;
                            }
                        }
                        if (defaultValue == null) {
                            defaultValue = "";
                        }
                        initialValue = defaultValue;
                    }
                    node._wrapperState = {
                        initialValue: getToStringValue(initialValue)
                    };
                }
                function updateWrapper$1(element, props) {
                    var node = element;
                    var value = getToStringValue(props.value);
                    var defaultValue = getToStringValue(props.defaultValue);
                    if (value != null) {
                        var newValue = toString(value);
                        if (newValue !== node.value) {
                            node.value = newValue;
                        }
                        if (props.defaultValue == null && node.defaultValue !== newValue) {
                            node.defaultValue = newValue;
                        }
                    }
                    if (defaultValue != null) {
                        node.defaultValue = toString(defaultValue);
                    }
                }
                function postMountWrapper$3(element, props) {
                    var node = element;
                    var textContent = node.textContent;
                    if (textContent === node._wrapperState.initialValue) {
                        if (textContent !== "" && textContent !== null) {
                            node.value = textContent;
                        }
                    }
                }
                function restoreControlledState$2(element, props) {
                    updateWrapper$1(element, props);
                }
                var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
                var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
                var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
                function getIntrinsicNamespace(type) {
                    switch (type) {
                      case "svg":
                        return SVG_NAMESPACE;

                      case "math":
                        return MATH_NAMESPACE;

                      default:
                        return HTML_NAMESPACE;
                    }
                }
                function getChildNamespace(parentNamespace, type) {
                    if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
                        return getIntrinsicNamespace(type);
                    }
                    if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
                        return HTML_NAMESPACE;
                    }
                    return parentNamespace;
                }
                var createMicrosoftUnsafeLocalFunction = function(func) {
                    if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
                        return function(arg0, arg1, arg2, arg3) {
                            MSApp.execUnsafeLocalFunction((function() {
                                return func(arg0, arg1, arg2, arg3);
                            }));
                        };
                    } else {
                        return func;
                    }
                };
                var reusableSVGContainer;
                var setInnerHTML = createMicrosoftUnsafeLocalFunction((function(node, html) {
                    if (node.namespaceURI === SVG_NAMESPACE) {
                        if (!("innerHTML" in node)) {
                            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                            var svgNode = reusableSVGContainer.firstChild;
                            while (node.firstChild) {
                                node.removeChild(node.firstChild);
                            }
                            while (svgNode.firstChild) {
                                node.appendChild(svgNode.firstChild);
                            }
                            return;
                        }
                    }
                    node.innerHTML = html;
                }));
                var ELEMENT_NODE = 1;
                var TEXT_NODE = 3;
                var COMMENT_NODE = 8;
                var DOCUMENT_NODE = 9;
                var DOCUMENT_FRAGMENT_NODE = 11;
                var setTextContent = function(node, text) {
                    if (text) {
                        var firstChild = node.firstChild;
                        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                            firstChild.nodeValue = text;
                            return;
                        }
                    }
                    node.textContent = text;
                };
                var shorthandToLonghand = {
                    animation: [ "animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction" ],
                    background: [ "backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize" ],
                    backgroundPosition: [ "backgroundPositionX", "backgroundPositionY" ],
                    border: [ "borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth" ],
                    borderBlockEnd: [ "borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth" ],
                    borderBlockStart: [ "borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth" ],
                    borderBottom: [ "borderBottomColor", "borderBottomStyle", "borderBottomWidth" ],
                    borderColor: [ "borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor" ],
                    borderImage: [ "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth" ],
                    borderInlineEnd: [ "borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth" ],
                    borderInlineStart: [ "borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth" ],
                    borderLeft: [ "borderLeftColor", "borderLeftStyle", "borderLeftWidth" ],
                    borderRadius: [ "borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius" ],
                    borderRight: [ "borderRightColor", "borderRightStyle", "borderRightWidth" ],
                    borderStyle: [ "borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle" ],
                    borderTop: [ "borderTopColor", "borderTopStyle", "borderTopWidth" ],
                    borderWidth: [ "borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth" ],
                    columnRule: [ "columnRuleColor", "columnRuleStyle", "columnRuleWidth" ],
                    columns: [ "columnCount", "columnWidth" ],
                    flex: [ "flexBasis", "flexGrow", "flexShrink" ],
                    flexFlow: [ "flexDirection", "flexWrap" ],
                    font: [ "fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight" ],
                    fontVariant: [ "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition" ],
                    gap: [ "columnGap", "rowGap" ],
                    grid: [ "gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows" ],
                    gridArea: [ "gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart" ],
                    gridColumn: [ "gridColumnEnd", "gridColumnStart" ],
                    gridColumnGap: [ "columnGap" ],
                    gridGap: [ "columnGap", "rowGap" ],
                    gridRow: [ "gridRowEnd", "gridRowStart" ],
                    gridRowGap: [ "rowGap" ],
                    gridTemplate: [ "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows" ],
                    listStyle: [ "listStyleImage", "listStylePosition", "listStyleType" ],
                    margin: [ "marginBottom", "marginLeft", "marginRight", "marginTop" ],
                    marker: [ "markerEnd", "markerMid", "markerStart" ],
                    mask: [ "maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize" ],
                    maskPosition: [ "maskPositionX", "maskPositionY" ],
                    outline: [ "outlineColor", "outlineStyle", "outlineWidth" ],
                    overflow: [ "overflowX", "overflowY" ],
                    padding: [ "paddingBottom", "paddingLeft", "paddingRight", "paddingTop" ],
                    placeContent: [ "alignContent", "justifyContent" ],
                    placeItems: [ "alignItems", "justifyItems" ],
                    placeSelf: [ "alignSelf", "justifySelf" ],
                    textDecoration: [ "textDecorationColor", "textDecorationLine", "textDecorationStyle" ],
                    textEmphasis: [ "textEmphasisColor", "textEmphasisStyle" ],
                    transition: [ "transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction" ],
                    wordWrap: [ "overflowWrap" ]
                };
                var isUnitlessNumber = {
                    animationIterationCount: true,
                    aspectRatio: true,
                    borderImageOutset: true,
                    borderImageSlice: true,
                    borderImageWidth: true,
                    boxFlex: true,
                    boxFlexGroup: true,
                    boxOrdinalGroup: true,
                    columnCount: true,
                    columns: true,
                    flex: true,
                    flexGrow: true,
                    flexPositive: true,
                    flexShrink: true,
                    flexNegative: true,
                    flexOrder: true,
                    gridArea: true,
                    gridRow: true,
                    gridRowEnd: true,
                    gridRowSpan: true,
                    gridRowStart: true,
                    gridColumn: true,
                    gridColumnEnd: true,
                    gridColumnSpan: true,
                    gridColumnStart: true,
                    fontWeight: true,
                    lineClamp: true,
                    lineHeight: true,
                    opacity: true,
                    order: true,
                    orphans: true,
                    tabSize: true,
                    widows: true,
                    zIndex: true,
                    zoom: true,
                    fillOpacity: true,
                    floodOpacity: true,
                    stopOpacity: true,
                    strokeDasharray: true,
                    strokeDashoffset: true,
                    strokeMiterlimit: true,
                    strokeOpacity: true,
                    strokeWidth: true
                };
                function prefixKey(prefix, key) {
                    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
                }
                var prefixes = [ "Webkit", "ms", "Moz", "O" ];
                Object.keys(isUnitlessNumber).forEach((function(prop) {
                    prefixes.forEach((function(prefix) {
                        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
                    }));
                }));
                function dangerousStyleValue(name, value, isCustomProperty) {
                    var isEmpty = value == null || typeof value === "boolean" || value === "";
                    if (isEmpty) {
                        return "";
                    }
                    if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
                        return value + "px";
                    }
                    {
                        checkCSSPropertyStringCoercion(value, name);
                    }
                    return ("" + value).trim();
                }
                var uppercasePattern = /([A-Z])/g;
                var msPattern = /^ms-/;
                function hyphenateStyleName(name) {
                    return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
                }
                var warnValidStyle = function() {};
                {
                    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
                    var msPattern$1 = /^-ms-/;
                    var hyphenPattern = /-(.)/g;
                    var badStyleValueWithSemicolonPattern = /;\s*$/;
                    var warnedStyleNames = {};
                    var warnedStyleValues = {};
                    var warnedForNaNValue = false;
                    var warnedForInfinityValue = false;
                    var camelize = function(string) {
                        return string.replace(hyphenPattern, (function(_, character) {
                            return character.toUpperCase();
                        }));
                    };
                    var warnHyphenatedStyleName = function(name) {
                        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                            return;
                        }
                        warnedStyleNames[name] = true;
                        error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
                    };
                    var warnBadVendoredStyleName = function(name) {
                        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                            return;
                        }
                        warnedStyleNames[name] = true;
                        error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
                    };
                    var warnStyleValueWithSemicolon = function(name, value) {
                        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                            return;
                        }
                        warnedStyleValues[value] = true;
                        error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ""));
                    };
                    var warnStyleValueIsNaN = function(name, value) {
                        if (warnedForNaNValue) {
                            return;
                        }
                        warnedForNaNValue = true;
                        error("`NaN` is an invalid value for the `%s` css style property.", name);
                    };
                    var warnStyleValueIsInfinity = function(name, value) {
                        if (warnedForInfinityValue) {
                            return;
                        }
                        warnedForInfinityValue = true;
                        error("`Infinity` is an invalid value for the `%s` css style property.", name);
                    };
                    warnValidStyle = function(name, value) {
                        if (name.indexOf("-") > -1) {
                            warnHyphenatedStyleName(name);
                        } else if (badVendoredStyleNamePattern.test(name)) {
                            warnBadVendoredStyleName(name);
                        } else if (badStyleValueWithSemicolonPattern.test(value)) {
                            warnStyleValueWithSemicolon(name, value);
                        }
                        if (typeof value === "number") {
                            if (isNaN(value)) {
                                warnStyleValueIsNaN(name, value);
                            } else if (!isFinite(value)) {
                                warnStyleValueIsInfinity(name, value);
                            }
                        }
                    };
                }
                var warnValidStyle$1 = warnValidStyle;
                function createDangerousStringForStyles(styles) {
                    {
                        var serialized = "";
                        var delimiter = "";
                        for (var styleName in styles) {
                            if (!styles.hasOwnProperty(styleName)) {
                                continue;
                            }
                            var styleValue = styles[styleName];
                            if (styleValue != null) {
                                var isCustomProperty = styleName.indexOf("--") === 0;
                                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                                delimiter = ";";
                            }
                        }
                        return serialized || null;
                    }
                }
                function setValueForStyles(node, styles) {
                    var style = node.style;
                    for (var styleName in styles) {
                        if (!styles.hasOwnProperty(styleName)) {
                            continue;
                        }
                        var isCustomProperty = styleName.indexOf("--") === 0;
                        {
                            if (!isCustomProperty) {
                                warnValidStyle$1(styleName, styles[styleName]);
                            }
                        }
                        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
                        if (styleName === "float") {
                            styleName = "cssFloat";
                        }
                        if (isCustomProperty) {
                            style.setProperty(styleName, styleValue);
                        } else {
                            style[styleName] = styleValue;
                        }
                    }
                }
                function isValueEmpty(value) {
                    return value == null || typeof value === "boolean" || value === "";
                }
                function expandShorthandMap(styles) {
                    var expanded = {};
                    for (var key in styles) {
                        var longhands = shorthandToLonghand[key] || [ key ];
                        for (var i = 0; i < longhands.length; i++) {
                            expanded[longhands[i]] = key;
                        }
                    }
                    return expanded;
                }
                function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
                    {
                        if (!nextStyles) {
                            return;
                        }
                        var expandedUpdates = expandShorthandMap(styleUpdates);
                        var expandedStyles = expandShorthandMap(nextStyles);
                        var warnedAbout = {};
                        for (var key in expandedUpdates) {
                            var originalKey = expandedUpdates[key];
                            var correctOriginalKey = expandedStyles[key];
                            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                                var warningKey = originalKey + "," + correctOriginalKey;
                                if (warnedAbout[warningKey]) {
                                    continue;
                                }
                                warnedAbout[warningKey] = true;
                                error("%s a style property during rerender (%s) when a " + "conflicting property is set (%s) can lead to styling bugs. To " + "avoid this, don't mix shorthand and non-shorthand properties " + "for the same value; instead, replace the shorthand with " + "separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                            }
                        }
                    }
                }
                var omittedCloseTags = {
                    area: true,
                    base: true,
                    br: true,
                    col: true,
                    embed: true,
                    hr: true,
                    img: true,
                    input: true,
                    keygen: true,
                    link: true,
                    meta: true,
                    param: true,
                    source: true,
                    track: true,
                    wbr: true
                };
                var voidElementTags = assign({
                    menuitem: true
                }, omittedCloseTags);
                var HTML = "__html";
                function assertValidProps(tag, props) {
                    if (!props) {
                        return;
                    }
                    if (voidElementTags[tag]) {
                        if (props.children != null || props.dangerouslySetInnerHTML != null) {
                            throw new Error(tag + " is a void element tag and must neither have `children` nor " + "use `dangerouslySetInnerHTML`.");
                        }
                    }
                    if (props.dangerouslySetInnerHTML != null) {
                        if (props.children != null) {
                            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                        }
                        if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. " + "Please visit https://reactjs.org/link/dangerously-set-inner-html " + "for more information.");
                        }
                    }
                    {
                        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                            error("A component is `contentEditable` and contains `children` managed by " + "React. It is now your responsibility to guarantee that none of " + "those nodes are unexpectedly modified or duplicated. This is " + "probably not intentional.");
                        }
                    }
                    if (props.style != null && typeof props.style !== "object") {
                        throw new Error("The `style` prop expects a mapping from style properties to values, " + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + "using JSX.");
                    }
                }
                function isCustomComponent(tagName, props) {
                    if (tagName.indexOf("-") === -1) {
                        return typeof props.is === "string";
                    }
                    switch (tagName) {
                      case "annotation-xml":
                      case "color-profile":
                      case "font-face":
                      case "font-face-src":
                      case "font-face-uri":
                      case "font-face-format":
                      case "font-face-name":
                      case "missing-glyph":
                        return false;

                      default:
                        return true;
                    }
                }
                var possibleStandardNames = {
                    accept: "accept",
                    acceptcharset: "acceptCharset",
                    "accept-charset": "acceptCharset",
                    accesskey: "accessKey",
                    action: "action",
                    allowfullscreen: "allowFullScreen",
                    alt: "alt",
                    as: "as",
                    async: "async",
                    autocapitalize: "autoCapitalize",
                    autocomplete: "autoComplete",
                    autocorrect: "autoCorrect",
                    autofocus: "autoFocus",
                    autoplay: "autoPlay",
                    autosave: "autoSave",
                    capture: "capture",
                    cellpadding: "cellPadding",
                    cellspacing: "cellSpacing",
                    challenge: "challenge",
                    charset: "charSet",
                    checked: "checked",
                    children: "children",
                    cite: "cite",
                    class: "className",
                    classid: "classID",
                    classname: "className",
                    cols: "cols",
                    colspan: "colSpan",
                    content: "content",
                    contenteditable: "contentEditable",
                    contextmenu: "contextMenu",
                    controls: "controls",
                    controlslist: "controlsList",
                    coords: "coords",
                    crossorigin: "crossOrigin",
                    dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
                    data: "data",
                    datetime: "dateTime",
                    default: "default",
                    defaultchecked: "defaultChecked",
                    defaultvalue: "defaultValue",
                    defer: "defer",
                    dir: "dir",
                    disabled: "disabled",
                    disablepictureinpicture: "disablePictureInPicture",
                    disableremoteplayback: "disableRemotePlayback",
                    download: "download",
                    draggable: "draggable",
                    enctype: "encType",
                    enterkeyhint: "enterKeyHint",
                    for: "htmlFor",
                    form: "form",
                    formmethod: "formMethod",
                    formaction: "formAction",
                    formenctype: "formEncType",
                    formnovalidate: "formNoValidate",
                    formtarget: "formTarget",
                    frameborder: "frameBorder",
                    headers: "headers",
                    height: "height",
                    hidden: "hidden",
                    high: "high",
                    href: "href",
                    hreflang: "hrefLang",
                    htmlfor: "htmlFor",
                    httpequiv: "httpEquiv",
                    "http-equiv": "httpEquiv",
                    icon: "icon",
                    id: "id",
                    imagesizes: "imageSizes",
                    imagesrcset: "imageSrcSet",
                    innerhtml: "innerHTML",
                    inputmode: "inputMode",
                    integrity: "integrity",
                    is: "is",
                    itemid: "itemID",
                    itemprop: "itemProp",
                    itemref: "itemRef",
                    itemscope: "itemScope",
                    itemtype: "itemType",
                    keyparams: "keyParams",
                    keytype: "keyType",
                    kind: "kind",
                    label: "label",
                    lang: "lang",
                    list: "list",
                    loop: "loop",
                    low: "low",
                    manifest: "manifest",
                    marginwidth: "marginWidth",
                    marginheight: "marginHeight",
                    max: "max",
                    maxlength: "maxLength",
                    media: "media",
                    mediagroup: "mediaGroup",
                    method: "method",
                    min: "min",
                    minlength: "minLength",
                    multiple: "multiple",
                    muted: "muted",
                    name: "name",
                    nomodule: "noModule",
                    nonce: "nonce",
                    novalidate: "noValidate",
                    open: "open",
                    optimum: "optimum",
                    pattern: "pattern",
                    placeholder: "placeholder",
                    playsinline: "playsInline",
                    poster: "poster",
                    preload: "preload",
                    profile: "profile",
                    radiogroup: "radioGroup",
                    readonly: "readOnly",
                    referrerpolicy: "referrerPolicy",
                    rel: "rel",
                    required: "required",
                    reversed: "reversed",
                    role: "role",
                    rows: "rows",
                    rowspan: "rowSpan",
                    sandbox: "sandbox",
                    scope: "scope",
                    scoped: "scoped",
                    scrolling: "scrolling",
                    seamless: "seamless",
                    selected: "selected",
                    shape: "shape",
                    size: "size",
                    sizes: "sizes",
                    span: "span",
                    spellcheck: "spellCheck",
                    src: "src",
                    srcdoc: "srcDoc",
                    srclang: "srcLang",
                    srcset: "srcSet",
                    start: "start",
                    step: "step",
                    style: "style",
                    summary: "summary",
                    tabindex: "tabIndex",
                    target: "target",
                    title: "title",
                    type: "type",
                    usemap: "useMap",
                    value: "value",
                    width: "width",
                    wmode: "wmode",
                    wrap: "wrap",
                    about: "about",
                    accentheight: "accentHeight",
                    "accent-height": "accentHeight",
                    accumulate: "accumulate",
                    additive: "additive",
                    alignmentbaseline: "alignmentBaseline",
                    "alignment-baseline": "alignmentBaseline",
                    allowreorder: "allowReorder",
                    alphabetic: "alphabetic",
                    amplitude: "amplitude",
                    arabicform: "arabicForm",
                    "arabic-form": "arabicForm",
                    ascent: "ascent",
                    attributename: "attributeName",
                    attributetype: "attributeType",
                    autoreverse: "autoReverse",
                    azimuth: "azimuth",
                    basefrequency: "baseFrequency",
                    baselineshift: "baselineShift",
                    "baseline-shift": "baselineShift",
                    baseprofile: "baseProfile",
                    bbox: "bbox",
                    begin: "begin",
                    bias: "bias",
                    by: "by",
                    calcmode: "calcMode",
                    capheight: "capHeight",
                    "cap-height": "capHeight",
                    clip: "clip",
                    clippath: "clipPath",
                    "clip-path": "clipPath",
                    clippathunits: "clipPathUnits",
                    cliprule: "clipRule",
                    "clip-rule": "clipRule",
                    color: "color",
                    colorinterpolation: "colorInterpolation",
                    "color-interpolation": "colorInterpolation",
                    colorinterpolationfilters: "colorInterpolationFilters",
                    "color-interpolation-filters": "colorInterpolationFilters",
                    colorprofile: "colorProfile",
                    "color-profile": "colorProfile",
                    colorrendering: "colorRendering",
                    "color-rendering": "colorRendering",
                    contentscripttype: "contentScriptType",
                    contentstyletype: "contentStyleType",
                    cursor: "cursor",
                    cx: "cx",
                    cy: "cy",
                    d: "d",
                    datatype: "datatype",
                    decelerate: "decelerate",
                    descent: "descent",
                    diffuseconstant: "diffuseConstant",
                    direction: "direction",
                    display: "display",
                    divisor: "divisor",
                    dominantbaseline: "dominantBaseline",
                    "dominant-baseline": "dominantBaseline",
                    dur: "dur",
                    dx: "dx",
                    dy: "dy",
                    edgemode: "edgeMode",
                    elevation: "elevation",
                    enablebackground: "enableBackground",
                    "enable-background": "enableBackground",
                    end: "end",
                    exponent: "exponent",
                    externalresourcesrequired: "externalResourcesRequired",
                    fill: "fill",
                    fillopacity: "fillOpacity",
                    "fill-opacity": "fillOpacity",
                    fillrule: "fillRule",
                    "fill-rule": "fillRule",
                    filter: "filter",
                    filterres: "filterRes",
                    filterunits: "filterUnits",
                    floodopacity: "floodOpacity",
                    "flood-opacity": "floodOpacity",
                    floodcolor: "floodColor",
                    "flood-color": "floodColor",
                    focusable: "focusable",
                    fontfamily: "fontFamily",
                    "font-family": "fontFamily",
                    fontsize: "fontSize",
                    "font-size": "fontSize",
                    fontsizeadjust: "fontSizeAdjust",
                    "font-size-adjust": "fontSizeAdjust",
                    fontstretch: "fontStretch",
                    "font-stretch": "fontStretch",
                    fontstyle: "fontStyle",
                    "font-style": "fontStyle",
                    fontvariant: "fontVariant",
                    "font-variant": "fontVariant",
                    fontweight: "fontWeight",
                    "font-weight": "fontWeight",
                    format: "format",
                    from: "from",
                    fx: "fx",
                    fy: "fy",
                    g1: "g1",
                    g2: "g2",
                    glyphname: "glyphName",
                    "glyph-name": "glyphName",
                    glyphorientationhorizontal: "glyphOrientationHorizontal",
                    "glyph-orientation-horizontal": "glyphOrientationHorizontal",
                    glyphorientationvertical: "glyphOrientationVertical",
                    "glyph-orientation-vertical": "glyphOrientationVertical",
                    glyphref: "glyphRef",
                    gradienttransform: "gradientTransform",
                    gradientunits: "gradientUnits",
                    hanging: "hanging",
                    horizadvx: "horizAdvX",
                    "horiz-adv-x": "horizAdvX",
                    horizoriginx: "horizOriginX",
                    "horiz-origin-x": "horizOriginX",
                    ideographic: "ideographic",
                    imagerendering: "imageRendering",
                    "image-rendering": "imageRendering",
                    in2: "in2",
                    in: "in",
                    inlist: "inlist",
                    intercept: "intercept",
                    k1: "k1",
                    k2: "k2",
                    k3: "k3",
                    k4: "k4",
                    k: "k",
                    kernelmatrix: "kernelMatrix",
                    kernelunitlength: "kernelUnitLength",
                    kerning: "kerning",
                    keypoints: "keyPoints",
                    keysplines: "keySplines",
                    keytimes: "keyTimes",
                    lengthadjust: "lengthAdjust",
                    letterspacing: "letterSpacing",
                    "letter-spacing": "letterSpacing",
                    lightingcolor: "lightingColor",
                    "lighting-color": "lightingColor",
                    limitingconeangle: "limitingConeAngle",
                    local: "local",
                    markerend: "markerEnd",
                    "marker-end": "markerEnd",
                    markerheight: "markerHeight",
                    markermid: "markerMid",
                    "marker-mid": "markerMid",
                    markerstart: "markerStart",
                    "marker-start": "markerStart",
                    markerunits: "markerUnits",
                    markerwidth: "markerWidth",
                    mask: "mask",
                    maskcontentunits: "maskContentUnits",
                    maskunits: "maskUnits",
                    mathematical: "mathematical",
                    mode: "mode",
                    numoctaves: "numOctaves",
                    offset: "offset",
                    opacity: "opacity",
                    operator: "operator",
                    order: "order",
                    orient: "orient",
                    orientation: "orientation",
                    origin: "origin",
                    overflow: "overflow",
                    overlineposition: "overlinePosition",
                    "overline-position": "overlinePosition",
                    overlinethickness: "overlineThickness",
                    "overline-thickness": "overlineThickness",
                    paintorder: "paintOrder",
                    "paint-order": "paintOrder",
                    panose1: "panose1",
                    "panose-1": "panose1",
                    pathlength: "pathLength",
                    patterncontentunits: "patternContentUnits",
                    patterntransform: "patternTransform",
                    patternunits: "patternUnits",
                    pointerevents: "pointerEvents",
                    "pointer-events": "pointerEvents",
                    points: "points",
                    pointsatx: "pointsAtX",
                    pointsaty: "pointsAtY",
                    pointsatz: "pointsAtZ",
                    prefix: "prefix",
                    preservealpha: "preserveAlpha",
                    preserveaspectratio: "preserveAspectRatio",
                    primitiveunits: "primitiveUnits",
                    property: "property",
                    r: "r",
                    radius: "radius",
                    refx: "refX",
                    refy: "refY",
                    renderingintent: "renderingIntent",
                    "rendering-intent": "renderingIntent",
                    repeatcount: "repeatCount",
                    repeatdur: "repeatDur",
                    requiredextensions: "requiredExtensions",
                    requiredfeatures: "requiredFeatures",
                    resource: "resource",
                    restart: "restart",
                    result: "result",
                    results: "results",
                    rotate: "rotate",
                    rx: "rx",
                    ry: "ry",
                    scale: "scale",
                    security: "security",
                    seed: "seed",
                    shaperendering: "shapeRendering",
                    "shape-rendering": "shapeRendering",
                    slope: "slope",
                    spacing: "spacing",
                    specularconstant: "specularConstant",
                    specularexponent: "specularExponent",
                    speed: "speed",
                    spreadmethod: "spreadMethod",
                    startoffset: "startOffset",
                    stddeviation: "stdDeviation",
                    stemh: "stemh",
                    stemv: "stemv",
                    stitchtiles: "stitchTiles",
                    stopcolor: "stopColor",
                    "stop-color": "stopColor",
                    stopopacity: "stopOpacity",
                    "stop-opacity": "stopOpacity",
                    strikethroughposition: "strikethroughPosition",
                    "strikethrough-position": "strikethroughPosition",
                    strikethroughthickness: "strikethroughThickness",
                    "strikethrough-thickness": "strikethroughThickness",
                    string: "string",
                    stroke: "stroke",
                    strokedasharray: "strokeDasharray",
                    "stroke-dasharray": "strokeDasharray",
                    strokedashoffset: "strokeDashoffset",
                    "stroke-dashoffset": "strokeDashoffset",
                    strokelinecap: "strokeLinecap",
                    "stroke-linecap": "strokeLinecap",
                    strokelinejoin: "strokeLinejoin",
                    "stroke-linejoin": "strokeLinejoin",
                    strokemiterlimit: "strokeMiterlimit",
                    "stroke-miterlimit": "strokeMiterlimit",
                    strokewidth: "strokeWidth",
                    "stroke-width": "strokeWidth",
                    strokeopacity: "strokeOpacity",
                    "stroke-opacity": "strokeOpacity",
                    suppresscontenteditablewarning: "suppressContentEditableWarning",
                    suppresshydrationwarning: "suppressHydrationWarning",
                    surfacescale: "surfaceScale",
                    systemlanguage: "systemLanguage",
                    tablevalues: "tableValues",
                    targetx: "targetX",
                    targety: "targetY",
                    textanchor: "textAnchor",
                    "text-anchor": "textAnchor",
                    textdecoration: "textDecoration",
                    "text-decoration": "textDecoration",
                    textlength: "textLength",
                    textrendering: "textRendering",
                    "text-rendering": "textRendering",
                    to: "to",
                    transform: "transform",
                    typeof: "typeof",
                    u1: "u1",
                    u2: "u2",
                    underlineposition: "underlinePosition",
                    "underline-position": "underlinePosition",
                    underlinethickness: "underlineThickness",
                    "underline-thickness": "underlineThickness",
                    unicode: "unicode",
                    unicodebidi: "unicodeBidi",
                    "unicode-bidi": "unicodeBidi",
                    unicoderange: "unicodeRange",
                    "unicode-range": "unicodeRange",
                    unitsperem: "unitsPerEm",
                    "units-per-em": "unitsPerEm",
                    unselectable: "unselectable",
                    valphabetic: "vAlphabetic",
                    "v-alphabetic": "vAlphabetic",
                    values: "values",
                    vectoreffect: "vectorEffect",
                    "vector-effect": "vectorEffect",
                    version: "version",
                    vertadvy: "vertAdvY",
                    "vert-adv-y": "vertAdvY",
                    vertoriginx: "vertOriginX",
                    "vert-origin-x": "vertOriginX",
                    vertoriginy: "vertOriginY",
                    "vert-origin-y": "vertOriginY",
                    vhanging: "vHanging",
                    "v-hanging": "vHanging",
                    videographic: "vIdeographic",
                    "v-ideographic": "vIdeographic",
                    viewbox: "viewBox",
                    viewtarget: "viewTarget",
                    visibility: "visibility",
                    vmathematical: "vMathematical",
                    "v-mathematical": "vMathematical",
                    vocab: "vocab",
                    widths: "widths",
                    wordspacing: "wordSpacing",
                    "word-spacing": "wordSpacing",
                    writingmode: "writingMode",
                    "writing-mode": "writingMode",
                    x1: "x1",
                    x2: "x2",
                    x: "x",
                    xchannelselector: "xChannelSelector",
                    xheight: "xHeight",
                    "x-height": "xHeight",
                    xlinkactuate: "xlinkActuate",
                    "xlink:actuate": "xlinkActuate",
                    xlinkarcrole: "xlinkArcrole",
                    "xlink:arcrole": "xlinkArcrole",
                    xlinkhref: "xlinkHref",
                    "xlink:href": "xlinkHref",
                    xlinkrole: "xlinkRole",
                    "xlink:role": "xlinkRole",
                    xlinkshow: "xlinkShow",
                    "xlink:show": "xlinkShow",
                    xlinktitle: "xlinkTitle",
                    "xlink:title": "xlinkTitle",
                    xlinktype: "xlinkType",
                    "xlink:type": "xlinkType",
                    xmlbase: "xmlBase",
                    "xml:base": "xmlBase",
                    xmllang: "xmlLang",
                    "xml:lang": "xmlLang",
                    xmlns: "xmlns",
                    "xml:space": "xmlSpace",
                    xmlnsxlink: "xmlnsXlink",
                    "xmlns:xlink": "xmlnsXlink",
                    xmlspace: "xmlSpace",
                    y1: "y1",
                    y2: "y2",
                    y: "y",
                    ychannelselector: "yChannelSelector",
                    z: "z",
                    zoomandpan: "zoomAndPan"
                };
                var ariaProperties = {
                    "aria-current": 0,
                    "aria-description": 0,
                    "aria-details": 0,
                    "aria-disabled": 0,
                    "aria-hidden": 0,
                    "aria-invalid": 0,
                    "aria-keyshortcuts": 0,
                    "aria-label": 0,
                    "aria-roledescription": 0,
                    "aria-autocomplete": 0,
                    "aria-checked": 0,
                    "aria-expanded": 0,
                    "aria-haspopup": 0,
                    "aria-level": 0,
                    "aria-modal": 0,
                    "aria-multiline": 0,
                    "aria-multiselectable": 0,
                    "aria-orientation": 0,
                    "aria-placeholder": 0,
                    "aria-pressed": 0,
                    "aria-readonly": 0,
                    "aria-required": 0,
                    "aria-selected": 0,
                    "aria-sort": 0,
                    "aria-valuemax": 0,
                    "aria-valuemin": 0,
                    "aria-valuenow": 0,
                    "aria-valuetext": 0,
                    "aria-atomic": 0,
                    "aria-busy": 0,
                    "aria-live": 0,
                    "aria-relevant": 0,
                    "aria-dropeffect": 0,
                    "aria-grabbed": 0,
                    "aria-activedescendant": 0,
                    "aria-colcount": 0,
                    "aria-colindex": 0,
                    "aria-colspan": 0,
                    "aria-controls": 0,
                    "aria-describedby": 0,
                    "aria-errormessage": 0,
                    "aria-flowto": 0,
                    "aria-labelledby": 0,
                    "aria-owns": 0,
                    "aria-posinset": 0,
                    "aria-rowcount": 0,
                    "aria-rowindex": 0,
                    "aria-rowspan": 0,
                    "aria-setsize": 0
                };
                var warnedProperties = {};
                var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
                var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
                function validateProperty(tagName, name) {
                    {
                        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                            return true;
                        }
                        if (rARIACamel.test(name)) {
                            var ariaName = "aria-" + name.slice(4).toLowerCase();
                            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                            if (correctName == null) {
                                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                                warnedProperties[name] = true;
                                return true;
                            }
                            if (name !== correctName) {
                                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                                warnedProperties[name] = true;
                                return true;
                            }
                        }
                        if (rARIA.test(name)) {
                            var lowerCasedName = name.toLowerCase();
                            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                            if (standardName == null) {
                                warnedProperties[name] = true;
                                return false;
                            }
                            if (name !== standardName) {
                                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                                warnedProperties[name] = true;
                                return true;
                            }
                        }
                    }
                    return true;
                }
                function warnInvalidARIAProps(type, props) {
                    {
                        var invalidProps = [];
                        for (var key in props) {
                            var isValid = validateProperty(type, key);
                            if (!isValid) {
                                invalidProps.push(key);
                            }
                        }
                        var unknownPropString = invalidProps.map((function(prop) {
                            return "`" + prop + "`";
                        })).join(", ");
                        if (invalidProps.length === 1) {
                            error("Invalid aria prop %s on <%s> tag. " + "For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
                        } else if (invalidProps.length > 1) {
                            error("Invalid aria props %s on <%s> tag. " + "For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
                        }
                    }
                }
                function validateProperties(type, props) {
                    if (isCustomComponent(type, props)) {
                        return;
                    }
                    warnInvalidARIAProps(type, props);
                }
                var didWarnValueNull = false;
                function validateProperties$1(type, props) {
                    {
                        if (type !== "input" && type !== "textarea" && type !== "select") {
                            return;
                        }
                        if (props != null && props.value === null && !didWarnValueNull) {
                            didWarnValueNull = true;
                            if (type === "select" && props.multiple) {
                                error("`value` prop on `%s` should not be null. " + "Consider using an empty array when `multiple` is set to `true` " + "to clear the component or `undefined` for uncontrolled components.", type);
                            } else {
                                error("`value` prop on `%s` should not be null. " + "Consider using an empty string to clear the component or `undefined` " + "for uncontrolled components.", type);
                            }
                        }
                    }
                }
                var validateProperty$1 = function() {};
                {
                    var warnedProperties$1 = {};
                    var EVENT_NAME_REGEX = /^on./;
                    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
                    var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
                    var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
                    validateProperty$1 = function(tagName, name, value, eventRegistry) {
                        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                            return true;
                        }
                        var lowerCasedName = name.toLowerCase();
                        if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. " + "All React events are normalized to bubble, so onFocusIn and onFocusOut " + "are not needed/supported by React.");
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (eventRegistry != null) {
                            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
                            if (registrationNameDependencies.hasOwnProperty(name)) {
                                return true;
                            }
                            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
                            if (registrationName != null) {
                                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                                warnedProperties$1[name] = true;
                                return true;
                            }
                            if (EVENT_NAME_REGEX.test(name)) {
                                error("Unknown event handler property `%s`. It will be ignored.", name);
                                warnedProperties$1[name] = true;
                                return true;
                            }
                        } else if (EVENT_NAME_REGEX.test(name)) {
                            if (INVALID_EVENT_NAME_REGEX.test(name)) {
                                error("Invalid event handler property `%s`. " + "React events use the camelCase naming convention, for example `onClick`.", name);
                            }
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                            return true;
                        }
                        if (lowerCasedName === "innerhtml") {
                            error("Directly setting property `innerHTML` is not permitted. " + "For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (lowerCasedName === "aria") {
                            error("The `aria` attribute is reserved for future use in React. " + "Pass individual `aria-` attributes instead.");
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (lowerCasedName === "is" && value !== null && value !== undefined && typeof value !== "string") {
                            error("Received a `%s` for a string attribute `is`. If this is expected, cast " + "the value to a string.", typeof value);
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (typeof value === "number" && isNaN(value)) {
                            error("Received NaN for the `%s` attribute. If this is expected, cast " + "the value to a string.", name);
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        var propertyInfo = getPropertyInfo(name);
                        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
                        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                            var standardName = possibleStandardNames[lowerCasedName];
                            if (standardName !== name) {
                                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                                warnedProperties$1[name] = true;
                                return true;
                            }
                        } else if (!isReserved && name !== lowerCasedName) {
                            error("React does not recognize the `%s` prop on a DOM element. If you " + "intentionally want it to appear in the DOM as a custom " + "attribute, spell it as lowercase `%s` instead. " + "If you accidentally passed it from a parent component, remove " + "it from the DOM element.", name, lowerCasedName);
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                            if (value) {
                                error("Received `%s` for a non-boolean attribute `%s`.\n\n" + "If you want to write it to the DOM, pass a string instead: " + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
                            } else {
                                error("Received `%s` for a non-boolean attribute `%s`.\n\n" + "If you want to write it to the DOM, pass a string instead: " + '%s="%s" or %s={value.toString()}.\n\n' + "If you used to conditionally omit it with %s={condition && value}, " + "pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
                            }
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (isReserved) {
                            return true;
                        }
                        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                            warnedProperties$1[name] = true;
                            return false;
                        }
                        if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                            error("Received the string `%s` for the boolean attribute `%s`. " + "%s " + "Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        return true;
                    };
                }
                var warnUnknownProperties = function(type, props, eventRegistry) {
                    {
                        var unknownProps = [];
                        for (var key in props) {
                            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                            if (!isValid) {
                                unknownProps.push(key);
                            }
                        }
                        var unknownPropString = unknownProps.map((function(prop) {
                            return "`" + prop + "`";
                        })).join(", ");
                        if (unknownProps.length === 1) {
                            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, " + "or pass a string or number value to keep it in the DOM. " + "For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
                        } else if (unknownProps.length > 1) {
                            error("Invalid values for props %s on <%s> tag. Either remove them from the element, " + "or pass a string or number value to keep them in the DOM. " + "For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
                        }
                    }
                };
                function validateProperties$2(type, props, eventRegistry) {
                    if (isCustomComponent(type, props)) {
                        return;
                    }
                    warnUnknownProperties(type, props, eventRegistry);
                }
                var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
                var IS_NON_DELEGATED = 1 << 1;
                var IS_CAPTURE_PHASE = 1 << 2;
                var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
                var currentReplayingEvent = null;
                function setReplayingEvent(event) {
                    {
                        if (currentReplayingEvent !== null) {
                            error("Expected currently replaying event to be null. This error " + "is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    currentReplayingEvent = event;
                }
                function resetReplayingEvent() {
                    {
                        if (currentReplayingEvent === null) {
                            error("Expected currently replaying event to not be null. This error " + "is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    currentReplayingEvent = null;
                }
                function isReplayingEvent(event) {
                    return event === currentReplayingEvent;
                }
                function getEventTarget(nativeEvent) {
                    var target = nativeEvent.target || nativeEvent.srcElement || window;
                    if (target.correspondingUseElement) {
                        target = target.correspondingUseElement;
                    }
                    return target.nodeType === TEXT_NODE ? target.parentNode : target;
                }
                var restoreImpl = null;
                var restoreTarget = null;
                var restoreQueue = null;
                function restoreStateOfTarget(target) {
                    var internalInstance = getInstanceFromNode(target);
                    if (!internalInstance) {
                        return;
                    }
                    if (typeof restoreImpl !== "function") {
                        throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled " + "events. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var stateNode = internalInstance.stateNode;
                    if (stateNode) {
                        var _props = getFiberCurrentPropsFromNode(stateNode);
                        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
                    }
                }
                function setRestoreImplementation(impl) {
                    restoreImpl = impl;
                }
                function enqueueStateRestore(target) {
                    if (restoreTarget) {
                        if (restoreQueue) {
                            restoreQueue.push(target);
                        } else {
                            restoreQueue = [ target ];
                        }
                    } else {
                        restoreTarget = target;
                    }
                }
                function needsStateRestore() {
                    return restoreTarget !== null || restoreQueue !== null;
                }
                function restoreStateIfNeeded() {
                    if (!restoreTarget) {
                        return;
                    }
                    var target = restoreTarget;
                    var queuedTargets = restoreQueue;
                    restoreTarget = null;
                    restoreQueue = null;
                    restoreStateOfTarget(target);
                    if (queuedTargets) {
                        for (var i = 0; i < queuedTargets.length; i++) {
                            restoreStateOfTarget(queuedTargets[i]);
                        }
                    }
                }
                var batchedUpdatesImpl = function(fn, bookkeeping) {
                    return fn(bookkeeping);
                };
                var flushSyncImpl = function() {};
                var isInsideEventHandler = false;
                function finishEventHandler() {
                    var controlledComponentsHavePendingUpdates = needsStateRestore();
                    if (controlledComponentsHavePendingUpdates) {
                        flushSyncImpl();
                        restoreStateIfNeeded();
                    }
                }
                function batchedUpdates(fn, a, b) {
                    if (isInsideEventHandler) {
                        return fn(a, b);
                    }
                    isInsideEventHandler = true;
                    try {
                        return batchedUpdatesImpl(fn, a, b);
                    } finally {
                        isInsideEventHandler = false;
                        finishEventHandler();
                    }
                }
                function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
                    batchedUpdatesImpl = _batchedUpdatesImpl;
                    flushSyncImpl = _flushSyncImpl;
                }
                function isInteractive(tag) {
                    return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
                }
                function shouldPreventMouseEvent(name, type, props) {
                    switch (name) {
                      case "onClick":
                      case "onClickCapture":
                      case "onDoubleClick":
                      case "onDoubleClickCapture":
                      case "onMouseDown":
                      case "onMouseDownCapture":
                      case "onMouseMove":
                      case "onMouseMoveCapture":
                      case "onMouseUp":
                      case "onMouseUpCapture":
                      case "onMouseEnter":
                        return !!(props.disabled && isInteractive(type));

                      default:
                        return false;
                    }
                }
                function getListener(inst, registrationName) {
                    var stateNode = inst.stateNode;
                    if (stateNode === null) {
                        return null;
                    }
                    var props = getFiberCurrentPropsFromNode(stateNode);
                    if (props === null) {
                        return null;
                    }
                    var listener = props[registrationName];
                    if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
                        return null;
                    }
                    if (listener && typeof listener !== "function") {
                        throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
                    }
                    return listener;
                }
                var passiveBrowserEventsSupported = false;
                if (canUseDOM) {
                    try {
                        var options = {};
                        Object.defineProperty(options, "passive", {
                            get: function() {
                                passiveBrowserEventsSupported = true;
                            }
                        });
                        window.addEventListener("test", options, options);
                        window.removeEventListener("test", options, options);
                    } catch (e) {
                        passiveBrowserEventsSupported = false;
                    }
                }
                function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
                    var funcArgs = Array.prototype.slice.call(arguments, 3);
                    try {
                        func.apply(context, funcArgs);
                    } catch (error) {
                        this.onError(error);
                    }
                }
                var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
                {
                    if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
                        var fakeNode = document.createElement("react");
                        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                            if (typeof document === "undefined" || document === null) {
                                throw new Error("The `document` global was defined when React was initialized, but is not " + "defined anymore. This can happen in a test environment if a component " + "schedules an update from an asynchronous callback, but the test has already " + "finished running. To solve this, you can either unmount the component at " + "the end of your test (and ensure that any asynchronous operations get " + "canceled in `componentWillUnmount`), or you can change the test itself " + "to be asynchronous.");
                            }
                            var evt = document.createEvent("Event");
                            var didCall = false;
                            var didError = true;
                            var windowEvent = window.event;
                            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                            function restoreAfterDispatch() {
                                fakeNode.removeEventListener(evtType, callCallback, false);
                                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                                    window.event = windowEvent;
                                }
                            }
                            var funcArgs = Array.prototype.slice.call(arguments, 3);
                            function callCallback() {
                                didCall = true;
                                restoreAfterDispatch();
                                func.apply(context, funcArgs);
                                didError = false;
                            }
                            var error;
                            var didSetError = false;
                            var isCrossOriginError = false;
                            function handleWindowError(event) {
                                error = event.error;
                                didSetError = true;
                                if (error === null && event.colno === 0 && event.lineno === 0) {
                                    isCrossOriginError = true;
                                }
                                if (event.defaultPrevented) {
                                    if (error != null && typeof error === "object") {
                                        try {
                                            error._suppressLogging = true;
                                        } catch (inner) {}
                                    }
                                }
                            }
                            var evtType = "react-" + (name ? name : "invokeguardedcallback");
                            window.addEventListener("error", handleWindowError);
                            fakeNode.addEventListener(evtType, callCallback, false);
                            evt.initEvent(evtType, false, false);
                            fakeNode.dispatchEvent(evt);
                            if (windowEventDescriptor) {
                                Object.defineProperty(window, "event", windowEventDescriptor);
                            }
                            if (didCall && didError) {
                                if (!didSetError) {
                                    error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
                                } else if (isCrossOriginError) {
                                    error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://reactjs.org/link/crossorigin-error for more information.");
                                }
                                this.onError(error);
                            }
                            window.removeEventListener("error", handleWindowError);
                            if (!didCall) {
                                restoreAfterDispatch();
                                return invokeGuardedCallbackProd.apply(this, arguments);
                            }
                        };
                    }
                }
                var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
                var hasError = false;
                var caughtError = null;
                var hasRethrowError = false;
                var rethrowError = null;
                var reporter = {
                    onError: function(error) {
                        hasError = true;
                        caughtError = error;
                    }
                };
                function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
                    hasError = false;
                    caughtError = null;
                    invokeGuardedCallbackImpl$1.apply(reporter, arguments);
                }
                function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
                    invokeGuardedCallback.apply(this, arguments);
                    if (hasError) {
                        var error = clearCaughtError();
                        if (!hasRethrowError) {
                            hasRethrowError = true;
                            rethrowError = error;
                        }
                    }
                }
                function rethrowCaughtError() {
                    if (hasRethrowError) {
                        var error = rethrowError;
                        hasRethrowError = false;
                        rethrowError = null;
                        throw error;
                    }
                }
                function hasCaughtError() {
                    return hasError;
                }
                function clearCaughtError() {
                    if (hasError) {
                        var error = caughtError;
                        hasError = false;
                        caughtError = null;
                        return error;
                    } else {
                        throw new Error("clearCaughtError was called but no error was captured. This error " + "is likely caused by a bug in React. Please file an issue.");
                    }
                }
                function get(key) {
                    return key._reactInternals;
                }
                function has(key) {
                    return key._reactInternals !== undefined;
                }
                function set(key, value) {
                    key._reactInternals = value;
                }
                var NoFlags = 0;
                var PerformedWork = 1;
                var Placement = 2;
                var Update = 4;
                var ChildDeletion = 16;
                var ContentReset = 32;
                var Callback = 64;
                var DidCapture = 128;
                var ForceClientRender = 256;
                var Ref = 512;
                var Snapshot = 1024;
                var Passive = 2048;
                var Hydrating = 4096;
                var Visibility = 8192;
                var StoreConsistency = 16384;
                var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
                var HostEffectMask = 32767;
                var Incomplete = 32768;
                var ShouldCapture = 65536;
                var ForceUpdateForLegacySuspense = 131072;
                var Forked = 1048576;
                var RefStatic = 2097152;
                var LayoutStatic = 4194304;
                var PassiveStatic = 8388608;
                var MountLayoutDev = 16777216;
                var MountPassiveDev = 33554432;
                var BeforeMutationMask = Update | Snapshot | 0;
                var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
                var LayoutMask = Update | Callback | Ref | Visibility;
                var PassiveMask = Passive | ChildDeletion;
                var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
                var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
                function getNearestMountedFiber(fiber) {
                    var node = fiber;
                    var nearestMounted = fiber;
                    if (!fiber.alternate) {
                        var nextNode = node;
                        do {
                            node = nextNode;
                            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                                nearestMounted = node.return;
                            }
                            nextNode = node.return;
                        } while (nextNode);
                    } else {
                        while (node.return) {
                            node = node.return;
                        }
                    }
                    if (node.tag === HostRoot) {
                        return nearestMounted;
                    }
                    return null;
                }
                function getSuspenseInstanceFromFiber(fiber) {
                    if (fiber.tag === SuspenseComponent) {
                        var suspenseState = fiber.memoizedState;
                        if (suspenseState === null) {
                            var current = fiber.alternate;
                            if (current !== null) {
                                suspenseState = current.memoizedState;
                            }
                        }
                        if (suspenseState !== null) {
                            return suspenseState.dehydrated;
                        }
                    }
                    return null;
                }
                function getContainerFromFiber(fiber) {
                    return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
                }
                function isFiberMounted(fiber) {
                    return getNearestMountedFiber(fiber) === fiber;
                }
                function isMounted(component) {
                    {
                        var owner = ReactCurrentOwner.current;
                        if (owner !== null && owner.tag === ClassComponent) {
                            var ownerFiber = owner;
                            var instance = ownerFiber.stateNode;
                            if (!instance._warnedAboutRefsInRender) {
                                error("%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                            }
                            instance._warnedAboutRefsInRender = true;
                        }
                    }
                    var fiber = get(component);
                    if (!fiber) {
                        return false;
                    }
                    return getNearestMountedFiber(fiber) === fiber;
                }
                function assertIsMounted(fiber) {
                    if (getNearestMountedFiber(fiber) !== fiber) {
                        throw new Error("Unable to find node on an unmounted component.");
                    }
                }
                function findCurrentFiberUsingSlowPath(fiber) {
                    var alternate = fiber.alternate;
                    if (!alternate) {
                        var nearestMounted = getNearestMountedFiber(fiber);
                        if (nearestMounted === null) {
                            throw new Error("Unable to find node on an unmounted component.");
                        }
                        if (nearestMounted !== fiber) {
                            return null;
                        }
                        return fiber;
                    }
                    var a = fiber;
                    var b = alternate;
                    while (true) {
                        var parentA = a.return;
                        if (parentA === null) {
                            break;
                        }
                        var parentB = parentA.alternate;
                        if (parentB === null) {
                            var nextParent = parentA.return;
                            if (nextParent !== null) {
                                a = b = nextParent;
                                continue;
                            }
                            break;
                        }
                        if (parentA.child === parentB.child) {
                            var child = parentA.child;
                            while (child) {
                                if (child === a) {
                                    assertIsMounted(parentA);
                                    return fiber;
                                }
                                if (child === b) {
                                    assertIsMounted(parentA);
                                    return alternate;
                                }
                                child = child.sibling;
                            }
                            throw new Error("Unable to find node on an unmounted component.");
                        }
                        if (a.return !== b.return) {
                            a = parentA;
                            b = parentB;
                        } else {
                            var didFindChild = false;
                            var _child = parentA.child;
                            while (_child) {
                                if (_child === a) {
                                    didFindChild = true;
                                    a = parentA;
                                    b = parentB;
                                    break;
                                }
                                if (_child === b) {
                                    didFindChild = true;
                                    b = parentA;
                                    a = parentB;
                                    break;
                                }
                                _child = _child.sibling;
                            }
                            if (!didFindChild) {
                                _child = parentB.child;
                                while (_child) {
                                    if (_child === a) {
                                        didFindChild = true;
                                        a = parentB;
                                        b = parentA;
                                        break;
                                    }
                                    if (_child === b) {
                                        didFindChild = true;
                                        b = parentB;
                                        a = parentA;
                                        break;
                                    }
                                    _child = _child.sibling;
                                }
                                if (!didFindChild) {
                                    throw new Error("Child was not found in either parent set. This indicates a bug " + "in React related to the return pointer. Please file an issue.");
                                }
                            }
                        }
                        if (a.alternate !== b) {
                            throw new Error("Return fibers should always be each others' alternates. " + "This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    if (a.tag !== HostRoot) {
                        throw new Error("Unable to find node on an unmounted component.");
                    }
                    if (a.stateNode.current === a) {
                        return fiber;
                    }
                    return alternate;
                }
                function findCurrentHostFiber(parent) {
                    var currentParent = findCurrentFiberUsingSlowPath(parent);
                    return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
                }
                function findCurrentHostFiberImpl(node) {
                    if (node.tag === HostComponent || node.tag === HostText) {
                        return node;
                    }
                    var child = node.child;
                    while (child !== null) {
                        var match = findCurrentHostFiberImpl(child);
                        if (match !== null) {
                            return match;
                        }
                        child = child.sibling;
                    }
                    return null;
                }
                function findCurrentHostFiberWithNoPortals(parent) {
                    var currentParent = findCurrentFiberUsingSlowPath(parent);
                    return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
                }
                function findCurrentHostFiberWithNoPortalsImpl(node) {
                    if (node.tag === HostComponent || node.tag === HostText) {
                        return node;
                    }
                    var child = node.child;
                    while (child !== null) {
                        if (child.tag !== HostPortal) {
                            var match = findCurrentHostFiberWithNoPortalsImpl(child);
                            if (match !== null) {
                                return match;
                            }
                        }
                        child = child.sibling;
                    }
                    return null;
                }
                var scheduleCallback = Scheduler.unstable_scheduleCallback;
                var cancelCallback = Scheduler.unstable_cancelCallback;
                var shouldYield = Scheduler.unstable_shouldYield;
                var requestPaint = Scheduler.unstable_requestPaint;
                var now = Scheduler.unstable_now;
                var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
                var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
                var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
                var NormalPriority = Scheduler.unstable_NormalPriority;
                var LowPriority = Scheduler.unstable_LowPriority;
                var IdlePriority = Scheduler.unstable_IdlePriority;
                var unstable_yieldValue = Scheduler.unstable_yieldValue;
                var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
                var rendererID = null;
                var injectedHook = null;
                var injectedProfilingHooks = null;
                var hasLoggedError = false;
                var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
                function injectInternals(internals) {
                    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
                        return false;
                    }
                    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
                    if (hook.isDisabled) {
                        return true;
                    }
                    if (!hook.supportsFiber) {
                        {
                            error("The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://reactjs.org/link/react-devtools");
                        }
                        return true;
                    }
                    try {
                        if (enableSchedulingProfiler) {
                            internals = assign({}, internals, {
                                getLaneLabelMap: getLaneLabelMap,
                                injectProfilingHooks: injectProfilingHooks
                            });
                        }
                        rendererID = hook.inject(internals);
                        injectedHook = hook;
                    } catch (err) {
                        {
                            error("React instrumentation encountered an error: %s.", err);
                        }
                    }
                    if (hook.checkDCE) {
                        return true;
                    } else {
                        return false;
                    }
                }
                function onScheduleRoot(root, children) {
                    {
                        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                            try {
                                injectedHook.onScheduleFiberRoot(rendererID, root, children);
                            } catch (err) {
                                if (!hasLoggedError) {
                                    hasLoggedError = true;
                                    error("React instrumentation encountered an error: %s", err);
                                }
                            }
                        }
                    }
                }
                function onCommitRoot(root, eventPriority) {
                    if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
                        try {
                            var didError = (root.current.flags & DidCapture) === DidCapture;
                            if (enableProfilerTimer) {
                                var schedulerPriority;
                                switch (eventPriority) {
                                  case DiscreteEventPriority:
                                    schedulerPriority = ImmediatePriority;
                                    break;

                                  case ContinuousEventPriority:
                                    schedulerPriority = UserBlockingPriority;
                                    break;

                                  case DefaultEventPriority:
                                    schedulerPriority = NormalPriority;
                                    break;

                                  case IdleEventPriority:
                                    schedulerPriority = IdlePriority;
                                    break;

                                  default:
                                    schedulerPriority = NormalPriority;
                                    break;
                                }
                                injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
                            }
                        } catch (err) {
                            {
                                if (!hasLoggedError) {
                                    hasLoggedError = true;
                                    error("React instrumentation encountered an error: %s", err);
                                }
                            }
                        }
                    }
                }
                function onPostCommitRoot(root) {
                    if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
                        try {
                            injectedHook.onPostCommitFiberRoot(rendererID, root);
                        } catch (err) {
                            {
                                if (!hasLoggedError) {
                                    hasLoggedError = true;
                                    error("React instrumentation encountered an error: %s", err);
                                }
                            }
                        }
                    }
                }
                function onCommitUnmount(fiber) {
                    if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
                        try {
                            injectedHook.onCommitFiberUnmount(rendererID, fiber);
                        } catch (err) {
                            {
                                if (!hasLoggedError) {
                                    hasLoggedError = true;
                                    error("React instrumentation encountered an error: %s", err);
                                }
                            }
                        }
                    }
                }
                function setIsStrictModeForDevtools(newIsStrictMode) {
                    {
                        if (typeof unstable_yieldValue === "function") {
                            unstable_setDisableYieldValue(newIsStrictMode);
                            setSuppressWarning(newIsStrictMode);
                        }
                        if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                            try {
                                injectedHook.setStrictMode(rendererID, newIsStrictMode);
                            } catch (err) {
                                {
                                    if (!hasLoggedError) {
                                        hasLoggedError = true;
                                        error("React instrumentation encountered an error: %s", err);
                                    }
                                }
                            }
                        }
                    }
                }
                function injectProfilingHooks(profilingHooks) {
                    injectedProfilingHooks = profilingHooks;
                }
                function getLaneLabelMap() {
                    {
                        var map = new Map;
                        var lane = 1;
                        for (var index = 0; index < TotalLanes; index++) {
                            var label = getLabelForLane(lane);
                            map.set(lane, label);
                            lane *= 2;
                        }
                        return map;
                    }
                }
                function markCommitStarted(lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                            injectedProfilingHooks.markCommitStarted(lanes);
                        }
                    }
                }
                function markCommitStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                            injectedProfilingHooks.markCommitStopped();
                        }
                    }
                }
                function markComponentRenderStarted(fiber) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                            injectedProfilingHooks.markComponentRenderStarted(fiber);
                        }
                    }
                }
                function markComponentRenderStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                            injectedProfilingHooks.markComponentRenderStopped();
                        }
                    }
                }
                function markComponentPassiveEffectMountStarted(fiber) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
                        }
                    }
                }
                function markComponentPassiveEffectMountStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                            injectedProfilingHooks.markComponentPassiveEffectMountStopped();
                        }
                    }
                }
                function markComponentPassiveEffectUnmountStarted(fiber) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
                        }
                    }
                }
                function markComponentPassiveEffectUnmountStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
                        }
                    }
                }
                function markComponentLayoutEffectMountStarted(fiber) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
                        }
                    }
                }
                function markComponentLayoutEffectMountStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                            injectedProfilingHooks.markComponentLayoutEffectMountStopped();
                        }
                    }
                }
                function markComponentLayoutEffectUnmountStarted(fiber) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
                        }
                    }
                }
                function markComponentLayoutEffectUnmountStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
                        }
                    }
                }
                function markComponentErrored(fiber, thrownValue, lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
                        }
                    }
                }
                function markComponentSuspended(fiber, wakeable, lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
                        }
                    }
                }
                function markLayoutEffectsStarted(lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                            injectedProfilingHooks.markLayoutEffectsStarted(lanes);
                        }
                    }
                }
                function markLayoutEffectsStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                            injectedProfilingHooks.markLayoutEffectsStopped();
                        }
                    }
                }
                function markPassiveEffectsStarted(lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                            injectedProfilingHooks.markPassiveEffectsStarted(lanes);
                        }
                    }
                }
                function markPassiveEffectsStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                            injectedProfilingHooks.markPassiveEffectsStopped();
                        }
                    }
                }
                function markRenderStarted(lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                            injectedProfilingHooks.markRenderStarted(lanes);
                        }
                    }
                }
                function markRenderYielded() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                            injectedProfilingHooks.markRenderYielded();
                        }
                    }
                }
                function markRenderStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                            injectedProfilingHooks.markRenderStopped();
                        }
                    }
                }
                function markRenderScheduled(lane) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                            injectedProfilingHooks.markRenderScheduled(lane);
                        }
                    }
                }
                function markForceUpdateScheduled(fiber, lane) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
                        }
                    }
                }
                function markStateUpdateScheduled(fiber, lane) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
                        }
                    }
                }
                var NoMode = 0;
                var ConcurrentMode = 1;
                var ProfileMode = 2;
                var StrictLegacyMode = 8;
                var StrictEffectsMode = 16;
                var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
                var log = Math.log;
                var LN2 = Math.LN2;
                function clz32Fallback(x) {
                    var asUint = x >>> 0;
                    if (asUint === 0) {
                        return 32;
                    }
                    return 31 - (log(asUint) / LN2 | 0) | 0;
                }
                var TotalLanes = 31;
                var NoLanes = 0;
                var NoLane = 0;
                var SyncLane = 1;
                var InputContinuousHydrationLane = 2;
                var InputContinuousLane = 4;
                var DefaultHydrationLane = 8;
                var DefaultLane = 16;
                var TransitionHydrationLane = 32;
                var TransitionLanes = 4194240;
                var TransitionLane1 = 64;
                var TransitionLane2 = 128;
                var TransitionLane3 = 256;
                var TransitionLane4 = 512;
                var TransitionLane5 = 1024;
                var TransitionLane6 = 2048;
                var TransitionLane7 = 4096;
                var TransitionLane8 = 8192;
                var TransitionLane9 = 16384;
                var TransitionLane10 = 32768;
                var TransitionLane11 = 65536;
                var TransitionLane12 = 131072;
                var TransitionLane13 = 262144;
                var TransitionLane14 = 524288;
                var TransitionLane15 = 1048576;
                var TransitionLane16 = 2097152;
                var RetryLanes = 130023424;
                var RetryLane1 = 4194304;
                var RetryLane2 = 8388608;
                var RetryLane3 = 16777216;
                var RetryLane4 = 33554432;
                var RetryLane5 = 67108864;
                var SomeRetryLane = RetryLane1;
                var SelectiveHydrationLane = 134217728;
                var NonIdleLanes = 268435455;
                var IdleHydrationLane = 268435456;
                var IdleLane = 536870912;
                var OffscreenLane = 1073741824;
                function getLabelForLane(lane) {
                    {
                        if (lane & SyncLane) {
                            return "Sync";
                        }
                        if (lane & InputContinuousHydrationLane) {
                            return "InputContinuousHydration";
                        }
                        if (lane & InputContinuousLane) {
                            return "InputContinuous";
                        }
                        if (lane & DefaultHydrationLane) {
                            return "DefaultHydration";
                        }
                        if (lane & DefaultLane) {
                            return "Default";
                        }
                        if (lane & TransitionHydrationLane) {
                            return "TransitionHydration";
                        }
                        if (lane & TransitionLanes) {
                            return "Transition";
                        }
                        if (lane & RetryLanes) {
                            return "Retry";
                        }
                        if (lane & SelectiveHydrationLane) {
                            return "SelectiveHydration";
                        }
                        if (lane & IdleHydrationLane) {
                            return "IdleHydration";
                        }
                        if (lane & IdleLane) {
                            return "Idle";
                        }
                        if (lane & OffscreenLane) {
                            return "Offscreen";
                        }
                    }
                }
                var NoTimestamp = -1;
                var nextTransitionLane = TransitionLane1;
                var nextRetryLane = RetryLane1;
                function getHighestPriorityLanes(lanes) {
                    switch (getHighestPriorityLane(lanes)) {
                      case SyncLane:
                        return SyncLane;

                      case InputContinuousHydrationLane:
                        return InputContinuousHydrationLane;

                      case InputContinuousLane:
                        return InputContinuousLane;

                      case DefaultHydrationLane:
                        return DefaultHydrationLane;

                      case DefaultLane:
                        return DefaultLane;

                      case TransitionHydrationLane:
                        return TransitionHydrationLane;

                      case TransitionLane1:
                      case TransitionLane2:
                      case TransitionLane3:
                      case TransitionLane4:
                      case TransitionLane5:
                      case TransitionLane6:
                      case TransitionLane7:
                      case TransitionLane8:
                      case TransitionLane9:
                      case TransitionLane10:
                      case TransitionLane11:
                      case TransitionLane12:
                      case TransitionLane13:
                      case TransitionLane14:
                      case TransitionLane15:
                      case TransitionLane16:
                        return lanes & TransitionLanes;

                      case RetryLane1:
                      case RetryLane2:
                      case RetryLane3:
                      case RetryLane4:
                      case RetryLane5:
                        return lanes & RetryLanes;

                      case SelectiveHydrationLane:
                        return SelectiveHydrationLane;

                      case IdleHydrationLane:
                        return IdleHydrationLane;

                      case IdleLane:
                        return IdleLane;

                      case OffscreenLane:
                        return OffscreenLane;

                      default:
                        {
                            error("Should have found matching lanes. This is a bug in React.");
                        }
                        return lanes;
                    }
                }
                function getNextLanes(root, wipLanes) {
                    var pendingLanes = root.pendingLanes;
                    if (pendingLanes === NoLanes) {
                        return NoLanes;
                    }
                    var nextLanes = NoLanes;
                    var suspendedLanes = root.suspendedLanes;
                    var pingedLanes = root.pingedLanes;
                    var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
                    if (nonIdlePendingLanes !== NoLanes) {
                        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                        if (nonIdleUnblockedLanes !== NoLanes) {
                            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                        } else {
                            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                            if (nonIdlePingedLanes !== NoLanes) {
                                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                            }
                        }
                    } else {
                        var unblockedLanes = pendingLanes & ~suspendedLanes;
                        if (unblockedLanes !== NoLanes) {
                            nextLanes = getHighestPriorityLanes(unblockedLanes);
                        } else {
                            if (pingedLanes !== NoLanes) {
                                nextLanes = getHighestPriorityLanes(pingedLanes);
                            }
                        }
                    }
                    if (nextLanes === NoLanes) {
                        return NoLanes;
                    }
                    if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
                        var nextLane = getHighestPriorityLane(nextLanes);
                        var wipLane = getHighestPriorityLane(wipLanes);
                        if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                            return wipLanes;
                        }
                    }
                    if ((nextLanes & InputContinuousLane) !== NoLanes) {
                        nextLanes |= pendingLanes & DefaultLane;
                    }
                    var entangledLanes = root.entangledLanes;
                    if (entangledLanes !== NoLanes) {
                        var entanglements = root.entanglements;
                        var lanes = nextLanes & entangledLanes;
                        while (lanes > 0) {
                            var index = pickArbitraryLaneIndex(lanes);
                            var lane = 1 << index;
                            nextLanes |= entanglements[index];
                            lanes &= ~lane;
                        }
                    }
                    return nextLanes;
                }
                function getMostRecentEventTime(root, lanes) {
                    var eventTimes = root.eventTimes;
                    var mostRecentEventTime = NoTimestamp;
                    while (lanes > 0) {
                        var index = pickArbitraryLaneIndex(lanes);
                        var lane = 1 << index;
                        var eventTime = eventTimes[index];
                        if (eventTime > mostRecentEventTime) {
                            mostRecentEventTime = eventTime;
                        }
                        lanes &= ~lane;
                    }
                    return mostRecentEventTime;
                }
                function computeExpirationTime(lane, currentTime) {
                    switch (lane) {
                      case SyncLane:
                      case InputContinuousHydrationLane:
                      case InputContinuousLane:
                        return currentTime + 250;

                      case DefaultHydrationLane:
                      case DefaultLane:
                      case TransitionHydrationLane:
                      case TransitionLane1:
                      case TransitionLane2:
                      case TransitionLane3:
                      case TransitionLane4:
                      case TransitionLane5:
                      case TransitionLane6:
                      case TransitionLane7:
                      case TransitionLane8:
                      case TransitionLane9:
                      case TransitionLane10:
                      case TransitionLane11:
                      case TransitionLane12:
                      case TransitionLane13:
                      case TransitionLane14:
                      case TransitionLane15:
                      case TransitionLane16:
                        return currentTime + 5e3;

                      case RetryLane1:
                      case RetryLane2:
                      case RetryLane3:
                      case RetryLane4:
                      case RetryLane5:
                        return NoTimestamp;

                      case SelectiveHydrationLane:
                      case IdleHydrationLane:
                      case IdleLane:
                      case OffscreenLane:
                        return NoTimestamp;

                      default:
                        {
                            error("Should have found matching lanes. This is a bug in React.");
                        }
                        return NoTimestamp;
                    }
                }
                function markStarvedLanesAsExpired(root, currentTime) {
                    var pendingLanes = root.pendingLanes;
                    var suspendedLanes = root.suspendedLanes;
                    var pingedLanes = root.pingedLanes;
                    var expirationTimes = root.expirationTimes;
                    var lanes = pendingLanes;
                    while (lanes > 0) {
                        var index = pickArbitraryLaneIndex(lanes);
                        var lane = 1 << index;
                        var expirationTime = expirationTimes[index];
                        if (expirationTime === NoTimestamp) {
                            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                                expirationTimes[index] = computeExpirationTime(lane, currentTime);
                            }
                        } else if (expirationTime <= currentTime) {
                            root.expiredLanes |= lane;
                        }
                        lanes &= ~lane;
                    }
                }
                function getHighestPriorityPendingLanes(root) {
                    return getHighestPriorityLanes(root.pendingLanes);
                }
                function getLanesToRetrySynchronouslyOnError(root) {
                    var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
                    if (everythingButOffscreen !== NoLanes) {
                        return everythingButOffscreen;
                    }
                    if (everythingButOffscreen & OffscreenLane) {
                        return OffscreenLane;
                    }
                    return NoLanes;
                }
                function includesSyncLane(lanes) {
                    return (lanes & SyncLane) !== NoLanes;
                }
                function includesNonIdleWork(lanes) {
                    return (lanes & NonIdleLanes) !== NoLanes;
                }
                function includesOnlyRetries(lanes) {
                    return (lanes & RetryLanes) === lanes;
                }
                function includesOnlyNonUrgentLanes(lanes) {
                    var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
                    return (lanes & UrgentLanes) === NoLanes;
                }
                function includesOnlyTransitions(lanes) {
                    return (lanes & TransitionLanes) === lanes;
                }
                function includesBlockingLane(root, lanes) {
                    var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
                    return (lanes & SyncDefaultLanes) !== NoLanes;
                }
                function includesExpiredLane(root, lanes) {
                    return (lanes & root.expiredLanes) !== NoLanes;
                }
                function isTransitionLane(lane) {
                    return (lane & TransitionLanes) !== NoLanes;
                }
                function claimNextTransitionLane() {
                    var lane = nextTransitionLane;
                    nextTransitionLane <<= 1;
                    if ((nextTransitionLane & TransitionLanes) === NoLanes) {
                        nextTransitionLane = TransitionLane1;
                    }
                    return lane;
                }
                function claimNextRetryLane() {
                    var lane = nextRetryLane;
                    nextRetryLane <<= 1;
                    if ((nextRetryLane & RetryLanes) === NoLanes) {
                        nextRetryLane = RetryLane1;
                    }
                    return lane;
                }
                function getHighestPriorityLane(lanes) {
                    return lanes & -lanes;
                }
                function pickArbitraryLane(lanes) {
                    return getHighestPriorityLane(lanes);
                }
                function pickArbitraryLaneIndex(lanes) {
                    return 31 - clz32(lanes);
                }
                function laneToIndex(lane) {
                    return pickArbitraryLaneIndex(lane);
                }
                function includesSomeLane(a, b) {
                    return (a & b) !== NoLanes;
                }
                function isSubsetOfLanes(set, subset) {
                    return (set & subset) === subset;
                }
                function mergeLanes(a, b) {
                    return a | b;
                }
                function removeLanes(set, subset) {
                    return set & ~subset;
                }
                function intersectLanes(a, b) {
                    return a & b;
                }
                function laneToLanes(lane) {
                    return lane;
                }
                function higherPriorityLane(a, b) {
                    return a !== NoLane && a < b ? a : b;
                }
                function createLaneMap(initial) {
                    var laneMap = [];
                    for (var i = 0; i < TotalLanes; i++) {
                        laneMap.push(initial);
                    }
                    return laneMap;
                }
                function markRootUpdated(root, updateLane, eventTime) {
                    root.pendingLanes |= updateLane;
                    if (updateLane !== IdleLane) {
                        root.suspendedLanes = NoLanes;
                        root.pingedLanes = NoLanes;
                    }
                    var eventTimes = root.eventTimes;
                    var index = laneToIndex(updateLane);
                    eventTimes[index] = eventTime;
                }
                function markRootSuspended(root, suspendedLanes) {
                    root.suspendedLanes |= suspendedLanes;
                    root.pingedLanes &= ~suspendedLanes;
                    var expirationTimes = root.expirationTimes;
                    var lanes = suspendedLanes;
                    while (lanes > 0) {
                        var index = pickArbitraryLaneIndex(lanes);
                        var lane = 1 << index;
                        expirationTimes[index] = NoTimestamp;
                        lanes &= ~lane;
                    }
                }
                function markRootPinged(root, pingedLanes, eventTime) {
                    root.pingedLanes |= root.suspendedLanes & pingedLanes;
                }
                function markRootFinished(root, remainingLanes) {
                    var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
                    root.pendingLanes = remainingLanes;
                    root.suspendedLanes = NoLanes;
                    root.pingedLanes = NoLanes;
                    root.expiredLanes &= remainingLanes;
                    root.mutableReadLanes &= remainingLanes;
                    root.entangledLanes &= remainingLanes;
                    var entanglements = root.entanglements;
                    var eventTimes = root.eventTimes;
                    var expirationTimes = root.expirationTimes;
                    var lanes = noLongerPendingLanes;
                    while (lanes > 0) {
                        var index = pickArbitraryLaneIndex(lanes);
                        var lane = 1 << index;
                        entanglements[index] = NoLanes;
                        eventTimes[index] = NoTimestamp;
                        expirationTimes[index] = NoTimestamp;
                        lanes &= ~lane;
                    }
                }
                function markRootEntangled(root, entangledLanes) {
                    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
                    var entanglements = root.entanglements;
                    var lanes = rootEntangledLanes;
                    while (lanes) {
                        var index = pickArbitraryLaneIndex(lanes);
                        var lane = 1 << index;
                        if (lane & entangledLanes | entanglements[index] & entangledLanes) {
                            entanglements[index] |= entangledLanes;
                        }
                        lanes &= ~lane;
                    }
                }
                function getBumpedLaneForHydration(root, renderLanes) {
                    var renderLane = getHighestPriorityLane(renderLanes);
                    var lane;
                    switch (renderLane) {
                      case InputContinuousLane:
                        lane = InputContinuousHydrationLane;
                        break;

                      case DefaultLane:
                        lane = DefaultHydrationLane;
                        break;

                      case TransitionLane1:
                      case TransitionLane2:
                      case TransitionLane3:
                      case TransitionLane4:
                      case TransitionLane5:
                      case TransitionLane6:
                      case TransitionLane7:
                      case TransitionLane8:
                      case TransitionLane9:
                      case TransitionLane10:
                      case TransitionLane11:
                      case TransitionLane12:
                      case TransitionLane13:
                      case TransitionLane14:
                      case TransitionLane15:
                      case TransitionLane16:
                      case RetryLane1:
                      case RetryLane2:
                      case RetryLane3:
                      case RetryLane4:
                      case RetryLane5:
                        lane = TransitionHydrationLane;
                        break;

                      case IdleLane:
                        lane = IdleHydrationLane;
                        break;

                      default:
                        lane = NoLane;
                        break;
                    }
                    if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {
                        return NoLane;
                    }
                    return lane;
                }
                function addFiberToLanesMap(root, fiber, lanes) {
                    if (!isDevToolsPresent) {
                        return;
                    }
                    var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
                    while (lanes > 0) {
                        var index = laneToIndex(lanes);
                        var lane = 1 << index;
                        var updaters = pendingUpdatersLaneMap[index];
                        updaters.add(fiber);
                        lanes &= ~lane;
                    }
                }
                function movePendingFibersToMemoized(root, lanes) {
                    if (!isDevToolsPresent) {
                        return;
                    }
                    var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
                    var memoizedUpdaters = root.memoizedUpdaters;
                    while (lanes > 0) {
                        var index = laneToIndex(lanes);
                        var lane = 1 << index;
                        var updaters = pendingUpdatersLaneMap[index];
                        if (updaters.size > 0) {
                            updaters.forEach((function(fiber) {
                                var alternate = fiber.alternate;
                                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                                    memoizedUpdaters.add(fiber);
                                }
                            }));
                            updaters.clear();
                        }
                        lanes &= ~lane;
                    }
                }
                function getTransitionsForLanes(root, lanes) {
                    {
                        return null;
                    }
                }
                var DiscreteEventPriority = SyncLane;
                var ContinuousEventPriority = InputContinuousLane;
                var DefaultEventPriority = DefaultLane;
                var IdleEventPriority = IdleLane;
                var currentUpdatePriority = NoLane;
                function getCurrentUpdatePriority() {
                    return currentUpdatePriority;
                }
                function setCurrentUpdatePriority(newPriority) {
                    currentUpdatePriority = newPriority;
                }
                function runWithPriority(priority, fn) {
                    var previousPriority = currentUpdatePriority;
                    try {
                        currentUpdatePriority = priority;
                        return fn();
                    } finally {
                        currentUpdatePriority = previousPriority;
                    }
                }
                function higherEventPriority(a, b) {
                    return a !== 0 && a < b ? a : b;
                }
                function lowerEventPriority(a, b) {
                    return a === 0 || a > b ? a : b;
                }
                function isHigherEventPriority(a, b) {
                    return a !== 0 && a < b;
                }
                function lanesToEventPriority(lanes) {
                    var lane = getHighestPriorityLane(lanes);
                    if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
                        return DiscreteEventPriority;
                    }
                    if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
                        return ContinuousEventPriority;
                    }
                    if (includesNonIdleWork(lane)) {
                        return DefaultEventPriority;
                    }
                    return IdleEventPriority;
                }
                function isRootDehydrated(root) {
                    var currentState = root.current.memoizedState;
                    return currentState.isDehydrated;
                }
                var _attemptSynchronousHydration;
                function setAttemptSynchronousHydration(fn) {
                    _attemptSynchronousHydration = fn;
                }
                function attemptSynchronousHydration(fiber) {
                    _attemptSynchronousHydration(fiber);
                }
                var attemptContinuousHydration;
                function setAttemptContinuousHydration(fn) {
                    attemptContinuousHydration = fn;
                }
                var attemptHydrationAtCurrentPriority;
                function setAttemptHydrationAtCurrentPriority(fn) {
                    attemptHydrationAtCurrentPriority = fn;
                }
                var getCurrentUpdatePriority$1;
                function setGetCurrentUpdatePriority(fn) {
                    getCurrentUpdatePriority$1 = fn;
                }
                var attemptHydrationAtPriority;
                function setAttemptHydrationAtPriority(fn) {
                    attemptHydrationAtPriority = fn;
                }
                var hasScheduledReplayAttempt = false;
                var queuedDiscreteEvents = [];
                var queuedFocus = null;
                var queuedDrag = null;
                var queuedMouse = null;
                var queuedPointers = new Map;
                var queuedPointerCaptures = new Map;
                var queuedExplicitHydrationTargets = [];
                var discreteReplayableEvents = [ "mousedown", "mouseup", "touchcancel", "touchend", "touchstart", "auxclick", "dblclick", "pointercancel", "pointerdown", "pointerup", "dragend", "dragstart", "drop", "compositionend", "compositionstart", "keydown", "keypress", "keyup", "input", "textInput", "copy", "cut", "paste", "click", "change", "contextmenu", "reset", "submit" ];
                function isDiscreteEventThatRequiresHydration(eventType) {
                    return discreteReplayableEvents.indexOf(eventType) > -1;
                }
                function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    return {
                        blockedOn: blockedOn,
                        domEventName: domEventName,
                        eventSystemFlags: eventSystemFlags,
                        nativeEvent: nativeEvent,
                        targetContainers: [ targetContainer ]
                    };
                }
                function clearIfContinuousEvent(domEventName, nativeEvent) {
                    switch (domEventName) {
                      case "focusin":
                      case "focusout":
                        queuedFocus = null;
                        break;

                      case "dragenter":
                      case "dragleave":
                        queuedDrag = null;
                        break;

                      case "mouseover":
                      case "mouseout":
                        queuedMouse = null;
                        break;

                      case "pointerover":
                      case "pointerout":
                        {
                            var pointerId = nativeEvent.pointerId;
                            queuedPointers.delete(pointerId);
                            break;
                        }

                      case "gotpointercapture":
                      case "lostpointercapture":
                        {
                            var _pointerId = nativeEvent.pointerId;
                            queuedPointerCaptures.delete(_pointerId);
                            break;
                        }
                    }
                }
                function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
                        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                        if (blockedOn !== null) {
                            var _fiber2 = getInstanceFromNode(blockedOn);
                            if (_fiber2 !== null) {
                                attemptContinuousHydration(_fiber2);
                            }
                        }
                        return queuedEvent;
                    }
                    existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
                    var targetContainers = existingQueuedEvent.targetContainers;
                    if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
                        targetContainers.push(targetContainer);
                    }
                    return existingQueuedEvent;
                }
                function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    switch (domEventName) {
                      case "focusin":
                        {
                            var focusEvent = nativeEvent;
                            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                            return true;
                        }

                      case "dragenter":
                        {
                            var dragEvent = nativeEvent;
                            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                            return true;
                        }

                      case "mouseover":
                        {
                            var mouseEvent = nativeEvent;
                            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                            return true;
                        }

                      case "pointerover":
                        {
                            var pointerEvent = nativeEvent;
                            var pointerId = pointerEvent.pointerId;
                            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                            return true;
                        }

                      case "gotpointercapture":
                        {
                            var _pointerEvent = nativeEvent;
                            var _pointerId2 = _pointerEvent.pointerId;
                            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                            return true;
                        }
                    }
                    return false;
                }
                function attemptExplicitHydrationTarget(queuedTarget) {
                    var targetInst = getClosestInstanceFromNode(queuedTarget.target);
                    if (targetInst !== null) {
                        var nearestMounted = getNearestMountedFiber(targetInst);
                        if (nearestMounted !== null) {
                            var tag = nearestMounted.tag;
                            if (tag === SuspenseComponent) {
                                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                                if (instance !== null) {
                                    queuedTarget.blockedOn = instance;
                                    attemptHydrationAtPriority(queuedTarget.priority, (function() {
                                        attemptHydrationAtCurrentPriority(nearestMounted);
                                    }));
                                    return;
                                }
                            } else if (tag === HostRoot) {
                                var root = nearestMounted.stateNode;
                                if (isRootDehydrated(root)) {
                                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                                    return;
                                }
                            }
                        }
                    }
                    queuedTarget.blockedOn = null;
                }
                function queueExplicitHydrationTarget(target) {
                    var updatePriority = getCurrentUpdatePriority$1();
                    var queuedTarget = {
                        blockedOn: null,
                        target: target,
                        priority: updatePriority
                    };
                    var i = 0;
                    for (;i < queuedExplicitHydrationTargets.length; i++) {
                        if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                            break;
                        }
                    }
                    queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
                    if (i === 0) {
                        attemptExplicitHydrationTarget(queuedTarget);
                    }
                }
                function attemptReplayContinuousQueuedEvent(queuedEvent) {
                    if (queuedEvent.blockedOn !== null) {
                        return false;
                    }
                    var targetContainers = queuedEvent.targetContainers;
                    while (targetContainers.length > 0) {
                        var targetContainer = targetContainers[0];
                        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
                        if (nextBlockedOn === null) {
                            {
                                var nativeEvent = queuedEvent.nativeEvent;
                                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                                setReplayingEvent(nativeEventClone);
                                nativeEvent.target.dispatchEvent(nativeEventClone);
                                resetReplayingEvent();
                            }
                        } else {
                            var _fiber3 = getInstanceFromNode(nextBlockedOn);
                            if (_fiber3 !== null) {
                                attemptContinuousHydration(_fiber3);
                            }
                            queuedEvent.blockedOn = nextBlockedOn;
                            return false;
                        }
                        targetContainers.shift();
                    }
                    return true;
                }
                function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
                    if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
                        map.delete(key);
                    }
                }
                function replayUnblockedEvents() {
                    hasScheduledReplayAttempt = false;
                    if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
                        queuedFocus = null;
                    }
                    if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
                        queuedDrag = null;
                    }
                    if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
                        queuedMouse = null;
                    }
                    queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
                    queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
                }
                function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
                    if (queuedEvent.blockedOn === unblocked) {
                        queuedEvent.blockedOn = null;
                        if (!hasScheduledReplayAttempt) {
                            hasScheduledReplayAttempt = true;
                            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
                        }
                    }
                }
                function retryIfBlockedOn(unblocked) {
                    if (queuedDiscreteEvents.length > 0) {
                        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
                        for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                            var queuedEvent = queuedDiscreteEvents[i];
                            if (queuedEvent.blockedOn === unblocked) {
                                queuedEvent.blockedOn = null;
                            }
                        }
                    }
                    if (queuedFocus !== null) {
                        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
                    }
                    if (queuedDrag !== null) {
                        scheduleCallbackIfUnblocked(queuedDrag, unblocked);
                    }
                    if (queuedMouse !== null) {
                        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
                    }
                    var unblock = function(queuedEvent) {
                        return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
                    };
                    queuedPointers.forEach(unblock);
                    queuedPointerCaptures.forEach(unblock);
                    for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
                        var queuedTarget = queuedExplicitHydrationTargets[_i];
                        if (queuedTarget.blockedOn === unblocked) {
                            queuedTarget.blockedOn = null;
                        }
                    }
                    while (queuedExplicitHydrationTargets.length > 0) {
                        var nextExplicitTarget = queuedExplicitHydrationTargets[0];
                        if (nextExplicitTarget.blockedOn !== null) {
                            break;
                        } else {
                            attemptExplicitHydrationTarget(nextExplicitTarget);
                            if (nextExplicitTarget.blockedOn === null) {
                                queuedExplicitHydrationTargets.shift();
                            }
                        }
                    }
                }
                var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
                var _enabled = true;
                function setEnabled(enabled) {
                    _enabled = !!enabled;
                }
                function isEnabled() {
                    return _enabled;
                }
                function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
                    var eventPriority = getEventPriority(domEventName);
                    var listenerWrapper;
                    switch (eventPriority) {
                      case DiscreteEventPriority:
                        listenerWrapper = dispatchDiscreteEvent;
                        break;

                      case ContinuousEventPriority:
                        listenerWrapper = dispatchContinuousEvent;
                        break;

                      case DefaultEventPriority:
                      default:
                        listenerWrapper = dispatchEvent;
                        break;
                    }
                    return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
                }
                function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
                    var previousPriority = getCurrentUpdatePriority();
                    var prevTransition = ReactCurrentBatchConfig.transition;
                    ReactCurrentBatchConfig.transition = null;
                    try {
                        setCurrentUpdatePriority(DiscreteEventPriority);
                        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
                    } finally {
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig.transition = prevTransition;
                    }
                }
                function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
                    var previousPriority = getCurrentUpdatePriority();
                    var prevTransition = ReactCurrentBatchConfig.transition;
                    ReactCurrentBatchConfig.transition = null;
                    try {
                        setCurrentUpdatePriority(ContinuousEventPriority);
                        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
                    } finally {
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig.transition = prevTransition;
                    }
                }
                function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    if (!_enabled) {
                        return;
                    }
                    {
                        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                    }
                }
                function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                    if (blockedOn === null) {
                        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                        clearIfContinuousEvent(domEventName, nativeEvent);
                        return;
                    }
                    if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                        nativeEvent.stopPropagation();
                        return;
                    }
                    clearIfContinuousEvent(domEventName, nativeEvent);
                    if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
                        while (blockedOn !== null) {
                            var fiber = getInstanceFromNode(blockedOn);
                            if (fiber !== null) {
                                attemptSynchronousHydration(fiber);
                            }
                            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                            if (nextBlockedOn === null) {
                                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                            }
                            if (nextBlockedOn === blockedOn) {
                                break;
                            }
                            blockedOn = nextBlockedOn;
                        }
                        if (blockedOn !== null) {
                            nativeEvent.stopPropagation();
                        }
                        return;
                    }
                    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
                }
                var return_targetInst = null;
                function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    return_targetInst = null;
                    var nativeEventTarget = getEventTarget(nativeEvent);
                    var targetInst = getClosestInstanceFromNode(nativeEventTarget);
                    if (targetInst !== null) {
                        var nearestMounted = getNearestMountedFiber(targetInst);
                        if (nearestMounted === null) {
                            targetInst = null;
                        } else {
                            var tag = nearestMounted.tag;
                            if (tag === SuspenseComponent) {
                                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                                if (instance !== null) {
                                    return instance;
                                }
                                targetInst = null;
                            } else if (tag === HostRoot) {
                                var root = nearestMounted.stateNode;
                                if (isRootDehydrated(root)) {
                                    return getContainerFromFiber(nearestMounted);
                                }
                                targetInst = null;
                            } else if (nearestMounted !== targetInst) {
                                targetInst = null;
                            }
                        }
                    }
                    return_targetInst = targetInst;
                    return null;
                }
                function getEventPriority(domEventName) {
                    switch (domEventName) {
                      case "cancel":
                      case "click":
                      case "close":
                      case "contextmenu":
                      case "copy":
                      case "cut":
                      case "auxclick":
                      case "dblclick":
                      case "dragend":
                      case "dragstart":
                      case "drop":
                      case "focusin":
                      case "focusout":
                      case "input":
                      case "invalid":
                      case "keydown":
                      case "keypress":
                      case "keyup":
                      case "mousedown":
                      case "mouseup":
                      case "paste":
                      case "pause":
                      case "play":
                      case "pointercancel":
                      case "pointerdown":
                      case "pointerup":
                      case "ratechange":
                      case "reset":
                      case "resize":
                      case "seeked":
                      case "submit":
                      case "touchcancel":
                      case "touchend":
                      case "touchstart":
                      case "volumechange":
                      case "change":
                      case "selectionchange":
                      case "textInput":
                      case "compositionstart":
                      case "compositionend":
                      case "compositionupdate":
                      case "beforeblur":
                      case "afterblur":
                      case "beforeinput":
                      case "blur":
                      case "fullscreenchange":
                      case "focus":
                      case "hashchange":
                      case "popstate":
                      case "select":
                      case "selectstart":
                        return DiscreteEventPriority;

                      case "drag":
                      case "dragenter":
                      case "dragexit":
                      case "dragleave":
                      case "dragover":
                      case "mousemove":
                      case "mouseout":
                      case "mouseover":
                      case "pointermove":
                      case "pointerout":
                      case "pointerover":
                      case "scroll":
                      case "toggle":
                      case "touchmove":
                      case "wheel":
                      case "mouseenter":
                      case "mouseleave":
                      case "pointerenter":
                      case "pointerleave":
                        return ContinuousEventPriority;

                      case "message":
                        {
                            var schedulerPriority = getCurrentPriorityLevel();
                            switch (schedulerPriority) {
                              case ImmediatePriority:
                                return DiscreteEventPriority;

                              case UserBlockingPriority:
                                return ContinuousEventPriority;

                              case NormalPriority:
                              case LowPriority:
                                return DefaultEventPriority;

                              case IdlePriority:
                                return IdleEventPriority;

                              default:
                                return DefaultEventPriority;
                            }
                        }

                      default:
                        return DefaultEventPriority;
                    }
                }
                function addEventBubbleListener(target, eventType, listener) {
                    target.addEventListener(eventType, listener, false);
                    return listener;
                }
                function addEventCaptureListener(target, eventType, listener) {
                    target.addEventListener(eventType, listener, true);
                    return listener;
                }
                function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
                    target.addEventListener(eventType, listener, {
                        capture: true,
                        passive: passive
                    });
                    return listener;
                }
                function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
                    target.addEventListener(eventType, listener, {
                        passive: passive
                    });
                    return listener;
                }
                var root = null;
                var startText = null;
                var fallbackText = null;
                function initialize(nativeEventTarget) {
                    root = nativeEventTarget;
                    startText = getText();
                    return true;
                }
                function reset() {
                    root = null;
                    startText = null;
                    fallbackText = null;
                }
                function getData() {
                    if (fallbackText) {
                        return fallbackText;
                    }
                    var start;
                    var startValue = startText;
                    var startLength = startValue.length;
                    var end;
                    var endValue = getText();
                    var endLength = endValue.length;
                    for (start = 0; start < startLength; start++) {
                        if (startValue[start] !== endValue[start]) {
                            break;
                        }
                    }
                    var minEnd = startLength - start;
                    for (end = 1; end <= minEnd; end++) {
                        if (startValue[startLength - end] !== endValue[endLength - end]) {
                            break;
                        }
                    }
                    var sliceTail = end > 1 ? 1 - end : undefined;
                    fallbackText = endValue.slice(start, sliceTail);
                    return fallbackText;
                }
                function getText() {
                    if ("value" in root) {
                        return root.value;
                    }
                    return root.textContent;
                }
                function getEventCharCode(nativeEvent) {
                    var charCode;
                    var keyCode = nativeEvent.keyCode;
                    if ("charCode" in nativeEvent) {
                        charCode = nativeEvent.charCode;
                        if (charCode === 0 && keyCode === 13) {
                            charCode = 13;
                        }
                    } else {
                        charCode = keyCode;
                    }
                    if (charCode === 10) {
                        charCode = 13;
                    }
                    if (charCode >= 32 || charCode === 13) {
                        return charCode;
                    }
                    return 0;
                }
                function functionThatReturnsTrue() {
                    return true;
                }
                function functionThatReturnsFalse() {
                    return false;
                }
                function createSyntheticEvent(Interface) {
                    function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
                        this._reactName = reactName;
                        this._targetInst = targetInst;
                        this.type = reactEventType;
                        this.nativeEvent = nativeEvent;
                        this.target = nativeEventTarget;
                        this.currentTarget = null;
                        for (var _propName in Interface) {
                            if (!Interface.hasOwnProperty(_propName)) {
                                continue;
                            }
                            var normalize = Interface[_propName];
                            if (normalize) {
                                this[_propName] = normalize(nativeEvent);
                            } else {
                                this[_propName] = nativeEvent[_propName];
                            }
                        }
                        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
                        if (defaultPrevented) {
                            this.isDefaultPrevented = functionThatReturnsTrue;
                        } else {
                            this.isDefaultPrevented = functionThatReturnsFalse;
                        }
                        this.isPropagationStopped = functionThatReturnsFalse;
                        return this;
                    }
                    assign(SyntheticBaseEvent.prototype, {
                        preventDefault: function() {
                            this.defaultPrevented = true;
                            var event = this.nativeEvent;
                            if (!event) {
                                return;
                            }
                            if (event.preventDefault) {
                                event.preventDefault();
                            } else if (typeof event.returnValue !== "unknown") {
                                event.returnValue = false;
                            }
                            this.isDefaultPrevented = functionThatReturnsTrue;
                        },
                        stopPropagation: function() {
                            var event = this.nativeEvent;
                            if (!event) {
                                return;
                            }
                            if (event.stopPropagation) {
                                event.stopPropagation();
                            } else if (typeof event.cancelBubble !== "unknown") {
                                event.cancelBubble = true;
                            }
                            this.isPropagationStopped = functionThatReturnsTrue;
                        },
                        persist: function() {},
                        isPersistent: functionThatReturnsTrue
                    });
                    return SyntheticBaseEvent;
                }
                var EventInterface = {
                    eventPhase: 0,
                    bubbles: 0,
                    cancelable: 0,
                    timeStamp: function(event) {
                        return event.timeStamp || Date.now();
                    },
                    defaultPrevented: 0,
                    isTrusted: 0
                };
                var SyntheticEvent = createSyntheticEvent(EventInterface);
                var UIEventInterface = assign({}, EventInterface, {
                    view: 0,
                    detail: 0
                });
                var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
                var lastMovementX;
                var lastMovementY;
                var lastMouseEvent;
                function updateMouseMovementPolyfillState(event) {
                    if (event !== lastMouseEvent) {
                        if (lastMouseEvent && event.type === "mousemove") {
                            lastMovementX = event.screenX - lastMouseEvent.screenX;
                            lastMovementY = event.screenY - lastMouseEvent.screenY;
                        } else {
                            lastMovementX = 0;
                            lastMovementY = 0;
                        }
                        lastMouseEvent = event;
                    }
                }
                var MouseEventInterface = assign({}, UIEventInterface, {
                    screenX: 0,
                    screenY: 0,
                    clientX: 0,
                    clientY: 0,
                    pageX: 0,
                    pageY: 0,
                    ctrlKey: 0,
                    shiftKey: 0,
                    altKey: 0,
                    metaKey: 0,
                    getModifierState: getEventModifierState,
                    button: 0,
                    buttons: 0,
                    relatedTarget: function(event) {
                        if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
                        return event.relatedTarget;
                    },
                    movementX: function(event) {
                        if ("movementX" in event) {
                            return event.movementX;
                        }
                        updateMouseMovementPolyfillState(event);
                        return lastMovementX;
                    },
                    movementY: function(event) {
                        if ("movementY" in event) {
                            return event.movementY;
                        }
                        return lastMovementY;
                    }
                });
                var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
                var DragEventInterface = assign({}, MouseEventInterface, {
                    dataTransfer: 0
                });
                var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
                var FocusEventInterface = assign({}, UIEventInterface, {
                    relatedTarget: 0
                });
                var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
                var AnimationEventInterface = assign({}, EventInterface, {
                    animationName: 0,
                    elapsedTime: 0,
                    pseudoElement: 0
                });
                var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
                var ClipboardEventInterface = assign({}, EventInterface, {
                    clipboardData: function(event) {
                        return "clipboardData" in event ? event.clipboardData : window.clipboardData;
                    }
                });
                var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
                var CompositionEventInterface = assign({}, EventInterface, {
                    data: 0
                });
                var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
                var SyntheticInputEvent = SyntheticCompositionEvent;
                var normalizeKey = {
                    Esc: "Escape",
                    Spacebar: " ",
                    Left: "ArrowLeft",
                    Up: "ArrowUp",
                    Right: "ArrowRight",
                    Down: "ArrowDown",
                    Del: "Delete",
                    Win: "OS",
                    Menu: "ContextMenu",
                    Apps: "ContextMenu",
                    Scroll: "ScrollLock",
                    MozPrintableKey: "Unidentified"
                };
                var translateToKey = {
                    8: "Backspace",
                    9: "Tab",
                    12: "Clear",
                    13: "Enter",
                    16: "Shift",
                    17: "Control",
                    18: "Alt",
                    19: "Pause",
                    20: "CapsLock",
                    27: "Escape",
                    32: " ",
                    33: "PageUp",
                    34: "PageDown",
                    35: "End",
                    36: "Home",
                    37: "ArrowLeft",
                    38: "ArrowUp",
                    39: "ArrowRight",
                    40: "ArrowDown",
                    45: "Insert",
                    46: "Delete",
                    112: "F1",
                    113: "F2",
                    114: "F3",
                    115: "F4",
                    116: "F5",
                    117: "F6",
                    118: "F7",
                    119: "F8",
                    120: "F9",
                    121: "F10",
                    122: "F11",
                    123: "F12",
                    144: "NumLock",
                    145: "ScrollLock",
                    224: "Meta"
                };
                function getEventKey(nativeEvent) {
                    if (nativeEvent.key) {
                        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
                        if (key !== "Unidentified") {
                            return key;
                        }
                    }
                    if (nativeEvent.type === "keypress") {
                        var charCode = getEventCharCode(nativeEvent);
                        return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
                    }
                    if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
                        return translateToKey[nativeEvent.keyCode] || "Unidentified";
                    }
                    return "";
                }
                var modifierKeyToProp = {
                    Alt: "altKey",
                    Control: "ctrlKey",
                    Meta: "metaKey",
                    Shift: "shiftKey"
                };
                function modifierStateGetter(keyArg) {
                    var syntheticEvent = this;
                    var nativeEvent = syntheticEvent.nativeEvent;
                    if (nativeEvent.getModifierState) {
                        return nativeEvent.getModifierState(keyArg);
                    }
                    var keyProp = modifierKeyToProp[keyArg];
                    return keyProp ? !!nativeEvent[keyProp] : false;
                }
                function getEventModifierState(nativeEvent) {
                    return modifierStateGetter;
                }
                var KeyboardEventInterface = assign({}, UIEventInterface, {
                    key: getEventKey,
                    code: 0,
                    location: 0,
                    ctrlKey: 0,
                    shiftKey: 0,
                    altKey: 0,
                    metaKey: 0,
                    repeat: 0,
                    locale: 0,
                    getModifierState: getEventModifierState,
                    charCode: function(event) {
                        if (event.type === "keypress") {
                            return getEventCharCode(event);
                        }
                        return 0;
                    },
                    keyCode: function(event) {
                        if (event.type === "keydown" || event.type === "keyup") {
                            return event.keyCode;
                        }
                        return 0;
                    },
                    which: function(event) {
                        if (event.type === "keypress") {
                            return getEventCharCode(event);
                        }
                        if (event.type === "keydown" || event.type === "keyup") {
                            return event.keyCode;
                        }
                        return 0;
                    }
                });
                var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
                var PointerEventInterface = assign({}, MouseEventInterface, {
                    pointerId: 0,
                    width: 0,
                    height: 0,
                    pressure: 0,
                    tangentialPressure: 0,
                    tiltX: 0,
                    tiltY: 0,
                    twist: 0,
                    pointerType: 0,
                    isPrimary: 0
                });
                var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
                var TouchEventInterface = assign({}, UIEventInterface, {
                    touches: 0,
                    targetTouches: 0,
                    changedTouches: 0,
                    altKey: 0,
                    metaKey: 0,
                    ctrlKey: 0,
                    shiftKey: 0,
                    getModifierState: getEventModifierState
                });
                var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
                var TransitionEventInterface = assign({}, EventInterface, {
                    propertyName: 0,
                    elapsedTime: 0,
                    pseudoElement: 0
                });
                var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
                var WheelEventInterface = assign({}, MouseEventInterface, {
                    deltaX: function(event) {
                        return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
                    },
                    deltaY: function(event) {
                        return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
                    },
                    deltaZ: 0,
                    deltaMode: 0
                });
                var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
                var END_KEYCODES = [ 9, 13, 27, 32 ];
                var START_KEYCODE = 229;
                var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
                var documentMode = null;
                if (canUseDOM && "documentMode" in document) {
                    documentMode = document.documentMode;
                }
                var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
                var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
                var SPACEBAR_CODE = 32;
                var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
                function registerEvents() {
                    registerTwoPhaseEvent("onBeforeInput", [ "compositionend", "keypress", "textInput", "paste" ]);
                    registerTwoPhaseEvent("onCompositionEnd", [ "compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown" ]);
                    registerTwoPhaseEvent("onCompositionStart", [ "compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown" ]);
                    registerTwoPhaseEvent("onCompositionUpdate", [ "compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown" ]);
                }
                var hasSpaceKeypress = false;
                function isKeypressCommand(nativeEvent) {
                    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
                }
                function getCompositionEventType(domEventName) {
                    switch (domEventName) {
                      case "compositionstart":
                        return "onCompositionStart";

                      case "compositionend":
                        return "onCompositionEnd";

                      case "compositionupdate":
                        return "onCompositionUpdate";
                    }
                }
                function isFallbackCompositionStart(domEventName, nativeEvent) {
                    return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
                }
                function isFallbackCompositionEnd(domEventName, nativeEvent) {
                    switch (domEventName) {
                      case "keyup":
                        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

                      case "keydown":
                        return nativeEvent.keyCode !== START_KEYCODE;

                      case "keypress":
                      case "mousedown":
                      case "focusout":
                        return true;

                      default:
                        return false;
                    }
                }
                function getDataFromCustomEvent(nativeEvent) {
                    var detail = nativeEvent.detail;
                    if (typeof detail === "object" && "data" in detail) {
                        return detail.data;
                    }
                    return null;
                }
                function isUsingKoreanIME(nativeEvent) {
                    return nativeEvent.locale === "ko";
                }
                var isComposing = false;
                function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
                    var eventType;
                    var fallbackData;
                    if (canUseCompositionEvent) {
                        eventType = getCompositionEventType(domEventName);
                    } else if (!isComposing) {
                        if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                            eventType = "onCompositionStart";
                        }
                    } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
                        eventType = "onCompositionEnd";
                    }
                    if (!eventType) {
                        return null;
                    }
                    if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
                        if (!isComposing && eventType === "onCompositionStart") {
                            isComposing = initialize(nativeEventTarget);
                        } else if (eventType === "onCompositionEnd") {
                            if (isComposing) {
                                fallbackData = getData();
                            }
                        }
                    }
                    var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
                    if (listeners.length > 0) {
                        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
                        dispatchQueue.push({
                            event: event,
                            listeners: listeners
                        });
                        if (fallbackData) {
                            event.data = fallbackData;
                        } else {
                            var customData = getDataFromCustomEvent(nativeEvent);
                            if (customData !== null) {
                                event.data = customData;
                            }
                        }
                    }
                }
                function getNativeBeforeInputChars(domEventName, nativeEvent) {
                    switch (domEventName) {
                      case "compositionend":
                        return getDataFromCustomEvent(nativeEvent);

                      case "keypress":
                        var which = nativeEvent.which;
                        if (which !== SPACEBAR_CODE) {
                            return null;
                        }
                        hasSpaceKeypress = true;
                        return SPACEBAR_CHAR;

                      case "textInput":
                        var chars = nativeEvent.data;
                        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                            return null;
                        }
                        return chars;

                      default:
                        return null;
                    }
                }
                function getFallbackBeforeInputChars(domEventName, nativeEvent) {
                    if (isComposing) {
                        if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                            var chars = getData();
                            reset();
                            isComposing = false;
                            return chars;
                        }
                        return null;
                    }
                    switch (domEventName) {
                      case "paste":
                        return null;

                      case "keypress":
                        if (!isKeypressCommand(nativeEvent)) {
                            if (nativeEvent.char && nativeEvent.char.length > 1) {
                                return nativeEvent.char;
                            } else if (nativeEvent.which) {
                                return String.fromCharCode(nativeEvent.which);
                            }
                        }
                        return null;

                      case "compositionend":
                        return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

                      default:
                        return null;
                    }
                }
                function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
                    var chars;
                    if (canUseTextInputEvent) {
                        chars = getNativeBeforeInputChars(domEventName, nativeEvent);
                    } else {
                        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
                    }
                    if (!chars) {
                        return null;
                    }
                    var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
                    if (listeners.length > 0) {
                        var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
                        dispatchQueue.push({
                            event: event,
                            listeners: listeners
                        });
                        event.data = chars;
                    }
                }
                function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                    extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                }
                var supportedInputTypes = {
                    color: true,
                    date: true,
                    datetime: true,
                    "datetime-local": true,
                    email: true,
                    month: true,
                    number: true,
                    password: true,
                    range: true,
                    search: true,
                    tel: true,
                    text: true,
                    time: true,
                    url: true,
                    week: true
                };
                function isTextInputElement(elem) {
                    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
                    if (nodeName === "input") {
                        return !!supportedInputTypes[elem.type];
                    }
                    if (nodeName === "textarea") {
                        return true;
                    }
                    return false;
                }
                /**
		 * Checks if an event is supported in the current execution environment.
		 *
		 * NOTE: This will not work correctly for non-generic events such as `change`,
		 * `reset`, `load`, `error`, and `select`.
		 *
		 * Borrows from Modernizr.
		 *
		 * @param {string} eventNameSuffix Event name, e.g. "click".
		 * @return {boolean} True if the event is supported.
		 * @internal
		 * @license Modernizr 3.0.0pre (Custom Build) | MIT
		 */                function isEventSupported(eventNameSuffix) {
                    if (!canUseDOM) {
                        return false;
                    }
                    var eventName = "on" + eventNameSuffix;
                    var isSupported = eventName in document;
                    if (!isSupported) {
                        var element = document.createElement("div");
                        element.setAttribute(eventName, "return;");
                        isSupported = typeof element[eventName] === "function";
                    }
                    return isSupported;
                }
                function registerEvents$1() {
                    registerTwoPhaseEvent("onChange", [ "change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange" ]);
                }
                function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
                    enqueueStateRestore(target);
                    var listeners = accumulateTwoPhaseListeners(inst, "onChange");
                    if (listeners.length > 0) {
                        var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
                        dispatchQueue.push({
                            event: event,
                            listeners: listeners
                        });
                    }
                }
                var activeElement = null;
                var activeElementInst = null;
                function shouldUseChangeEvent(elem) {
                    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
                    return nodeName === "select" || nodeName === "input" && elem.type === "file";
                }
                function manualDispatchChangeEvent(nativeEvent) {
                    var dispatchQueue = [];
                    createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
                    batchedUpdates(runEventInBatch, dispatchQueue);
                }
                function runEventInBatch(dispatchQueue) {
                    processDispatchQueue(dispatchQueue, 0);
                }
                function getInstIfValueChanged(targetInst) {
                    var targetNode = getNodeFromInstance(targetInst);
                    if (updateValueIfChanged(targetNode)) {
                        return targetInst;
                    }
                }
                function getTargetInstForChangeEvent(domEventName, targetInst) {
                    if (domEventName === "change") {
                        return targetInst;
                    }
                }
                var isInputEventSupported = false;
                if (canUseDOM) {
                    isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
                }
                function startWatchingForValueChange(target, targetInst) {
                    activeElement = target;
                    activeElementInst = targetInst;
                    activeElement.attachEvent("onpropertychange", handlePropertyChange);
                }
                function stopWatchingForValueChange() {
                    if (!activeElement) {
                        return;
                    }
                    activeElement.detachEvent("onpropertychange", handlePropertyChange);
                    activeElement = null;
                    activeElementInst = null;
                }
                function handlePropertyChange(nativeEvent) {
                    if (nativeEvent.propertyName !== "value") {
                        return;
                    }
                    if (getInstIfValueChanged(activeElementInst)) {
                        manualDispatchChangeEvent(nativeEvent);
                    }
                }
                function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
                    if (domEventName === "focusin") {
                        stopWatchingForValueChange();
                        startWatchingForValueChange(target, targetInst);
                    } else if (domEventName === "focusout") {
                        stopWatchingForValueChange();
                    }
                }
                function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
                    if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
                        return getInstIfValueChanged(activeElementInst);
                    }
                }
                function shouldUseClickEvent(elem) {
                    var nodeName = elem.nodeName;
                    return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
                }
                function getTargetInstForClickEvent(domEventName, targetInst) {
                    if (domEventName === "click") {
                        return getInstIfValueChanged(targetInst);
                    }
                }
                function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
                    if (domEventName === "input" || domEventName === "change") {
                        return getInstIfValueChanged(targetInst);
                    }
                }
                function handleControlledInputBlur(node) {
                    var state = node._wrapperState;
                    if (!state || !state.controlled || node.type !== "number") {
                        return;
                    }
                    {
                        setDefaultValue(node, "number", node.value);
                    }
                }
                function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
                    var getTargetInstFunc, handleEventFunc;
                    if (shouldUseChangeEvent(targetNode)) {
                        getTargetInstFunc = getTargetInstForChangeEvent;
                    } else if (isTextInputElement(targetNode)) {
                        if (isInputEventSupported) {
                            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                        } else {
                            getTargetInstFunc = getTargetInstForInputEventPolyfill;
                            handleEventFunc = handleEventsForInputEventPolyfill;
                        }
                    } else if (shouldUseClickEvent(targetNode)) {
                        getTargetInstFunc = getTargetInstForClickEvent;
                    }
                    if (getTargetInstFunc) {
                        var inst = getTargetInstFunc(domEventName, targetInst);
                        if (inst) {
                            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                            return;
                        }
                    }
                    if (handleEventFunc) {
                        handleEventFunc(domEventName, targetNode, targetInst);
                    }
                    if (domEventName === "focusout") {
                        handleControlledInputBlur(targetNode);
                    }
                }
                function registerEvents$2() {
                    registerDirectEvent("onMouseEnter", [ "mouseout", "mouseover" ]);
                    registerDirectEvent("onMouseLeave", [ "mouseout", "mouseover" ]);
                    registerDirectEvent("onPointerEnter", [ "pointerout", "pointerover" ]);
                    registerDirectEvent("onPointerLeave", [ "pointerout", "pointerover" ]);
                }
                function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
                    var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
                    if (isOverEvent && !isReplayingEvent(nativeEvent)) {
                        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
                        if (related) {
                            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                                return;
                            }
                        }
                    }
                    if (!isOutEvent && !isOverEvent) {
                        return;
                    }
                    var win;
                    if (nativeEventTarget.window === nativeEventTarget) {
                        win = nativeEventTarget;
                    } else {
                        var doc = nativeEventTarget.ownerDocument;
                        if (doc) {
                            win = doc.defaultView || doc.parentWindow;
                        } else {
                            win = window;
                        }
                    }
                    var from;
                    var to;
                    if (isOutEvent) {
                        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
                        from = targetInst;
                        to = _related ? getClosestInstanceFromNode(_related) : null;
                        if (to !== null) {
                            var nearestMounted = getNearestMountedFiber(to);
                            if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                                to = null;
                            }
                        }
                    } else {
                        from = null;
                        to = targetInst;
                    }
                    if (from === to) {
                        return;
                    }
                    var SyntheticEventCtor = SyntheticMouseEvent;
                    var leaveEventType = "onMouseLeave";
                    var enterEventType = "onMouseEnter";
                    var eventTypePrefix = "mouse";
                    if (domEventName === "pointerout" || domEventName === "pointerover") {
                        SyntheticEventCtor = SyntheticPointerEvent;
                        leaveEventType = "onPointerLeave";
                        enterEventType = "onPointerEnter";
                        eventTypePrefix = "pointer";
                    }
                    var fromNode = from == null ? win : getNodeFromInstance(from);
                    var toNode = to == null ? win : getNodeFromInstance(to);
                    var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
                    leave.target = fromNode;
                    leave.relatedTarget = toNode;
                    var enter = null;
                    var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
                    if (nativeTargetInst === targetInst) {
                        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
                        enterEvent.target = toNode;
                        enterEvent.relatedTarget = fromNode;
                        enter = enterEvent;
                    }
                    accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
                }
                function is(x, y) {
                    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
                }
                var objectIs = typeof Object.is === "function" ? Object.is : is;
                function shallowEqual(objA, objB) {
                    if (objectIs(objA, objB)) {
                        return true;
                    }
                    if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
                        return false;
                    }
                    var keysA = Object.keys(objA);
                    var keysB = Object.keys(objB);
                    if (keysA.length !== keysB.length) {
                        return false;
                    }
                    for (var i = 0; i < keysA.length; i++) {
                        var currentKey = keysA[i];
                        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                            return false;
                        }
                    }
                    return true;
                }
                function getLeafNode(node) {
                    while (node && node.firstChild) {
                        node = node.firstChild;
                    }
                    return node;
                }
                function getSiblingNode(node) {
                    while (node) {
                        if (node.nextSibling) {
                            return node.nextSibling;
                        }
                        node = node.parentNode;
                    }
                }
                function getNodeForCharacterOffset(root, offset) {
                    var node = getLeafNode(root);
                    var nodeStart = 0;
                    var nodeEnd = 0;
                    while (node) {
                        if (node.nodeType === TEXT_NODE) {
                            nodeEnd = nodeStart + node.textContent.length;
                            if (nodeStart <= offset && nodeEnd >= offset) {
                                return {
                                    node: node,
                                    offset: offset - nodeStart
                                };
                            }
                            nodeStart = nodeEnd;
                        }
                        node = getLeafNode(getSiblingNode(node));
                    }
                }
                function getOffsets(outerNode) {
                    var ownerDocument = outerNode.ownerDocument;
                    var win = ownerDocument && ownerDocument.defaultView || window;
                    var selection = win.getSelection && win.getSelection();
                    if (!selection || selection.rangeCount === 0) {
                        return null;
                    }
                    var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
                    try {
                        anchorNode.nodeType;
                        focusNode.nodeType;
                    } catch (e) {
                        return null;
                    }
                    return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
                }
                function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
                    var length = 0;
                    var start = -1;
                    var end = -1;
                    var indexWithinAnchor = 0;
                    var indexWithinFocus = 0;
                    var node = outerNode;
                    var parentNode = null;
                    outer: while (true) {
                        var next = null;
                        while (true) {
                            if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                                start = length + anchorOffset;
                            }
                            if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                                end = length + focusOffset;
                            }
                            if (node.nodeType === TEXT_NODE) {
                                length += node.nodeValue.length;
                            }
                            if ((next = node.firstChild) === null) {
                                break;
                            }
                            parentNode = node;
                            node = next;
                        }
                        while (true) {
                            if (node === outerNode) {
                                break outer;
                            }
                            if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                                start = length;
                            }
                            if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                                end = length;
                            }
                            if ((next = node.nextSibling) !== null) {
                                break;
                            }
                            node = parentNode;
                            parentNode = node.parentNode;
                        }
                        node = next;
                    }
                    if (start === -1 || end === -1) {
                        return null;
                    }
                    return {
                        start: start,
                        end: end
                    };
                }
                function setOffsets(node, offsets) {
                    var doc = node.ownerDocument || document;
                    var win = doc && doc.defaultView || window;
                    if (!win.getSelection) {
                        return;
                    }
                    var selection = win.getSelection();
                    var length = node.textContent.length;
                    var start = Math.min(offsets.start, length);
                    var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
                    if (!selection.extend && start > end) {
                        var temp = end;
                        end = start;
                        start = temp;
                    }
                    var startMarker = getNodeForCharacterOffset(node, start);
                    var endMarker = getNodeForCharacterOffset(node, end);
                    if (startMarker && endMarker) {
                        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                            return;
                        }
                        var range = doc.createRange();
                        range.setStart(startMarker.node, startMarker.offset);
                        selection.removeAllRanges();
                        if (start > end) {
                            selection.addRange(range);
                            selection.extend(endMarker.node, endMarker.offset);
                        } else {
                            range.setEnd(endMarker.node, endMarker.offset);
                            selection.addRange(range);
                        }
                    }
                }
                function isTextNode(node) {
                    return node && node.nodeType === TEXT_NODE;
                }
                function containsNode(outerNode, innerNode) {
                    if (!outerNode || !innerNode) {
                        return false;
                    } else if (outerNode === innerNode) {
                        return true;
                    } else if (isTextNode(outerNode)) {
                        return false;
                    } else if (isTextNode(innerNode)) {
                        return containsNode(outerNode, innerNode.parentNode);
                    } else if ("contains" in outerNode) {
                        return outerNode.contains(innerNode);
                    } else if (outerNode.compareDocumentPosition) {
                        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
                    } else {
                        return false;
                    }
                }
                function isInDocument(node) {
                    return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
                }
                function isSameOriginFrame(iframe) {
                    try {
                        return typeof iframe.contentWindow.location.href === "string";
                    } catch (err) {
                        return false;
                    }
                }
                function getActiveElementDeep() {
                    var win = window;
                    var element = getActiveElement();
                    while (element instanceof win.HTMLIFrameElement) {
                        if (isSameOriginFrame(element)) {
                            win = element.contentWindow;
                        } else {
                            return element;
                        }
                        element = getActiveElement(win.document);
                    }
                    return element;
                }
                function hasSelectionCapabilities(elem) {
                    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
                    return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
                }
                function getSelectionInformation() {
                    var focusedElem = getActiveElementDeep();
                    return {
                        focusedElem: focusedElem,
                        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
                    };
                }
                function restoreSelection(priorSelectionInformation) {
                    var curFocusedElem = getActiveElementDeep();
                    var priorFocusedElem = priorSelectionInformation.focusedElem;
                    var priorSelectionRange = priorSelectionInformation.selectionRange;
                    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
                        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                            setSelection(priorFocusedElem, priorSelectionRange);
                        }
                        var ancestors = [];
                        var ancestor = priorFocusedElem;
                        while (ancestor = ancestor.parentNode) {
                            if (ancestor.nodeType === ELEMENT_NODE) {
                                ancestors.push({
                                    element: ancestor,
                                    left: ancestor.scrollLeft,
                                    top: ancestor.scrollTop
                                });
                            }
                        }
                        if (typeof priorFocusedElem.focus === "function") {
                            priorFocusedElem.focus();
                        }
                        for (var i = 0; i < ancestors.length; i++) {
                            var info = ancestors[i];
                            info.element.scrollLeft = info.left;
                            info.element.scrollTop = info.top;
                        }
                    }
                }
                function getSelection(input) {
                    var selection;
                    if ("selectionStart" in input) {
                        selection = {
                            start: input.selectionStart,
                            end: input.selectionEnd
                        };
                    } else {
                        selection = getOffsets(input);
                    }
                    return selection || {
                        start: 0,
                        end: 0
                    };
                }
                function setSelection(input, offsets) {
                    var start = offsets.start;
                    var end = offsets.end;
                    if (end === undefined) {
                        end = start;
                    }
                    if ("selectionStart" in input) {
                        input.selectionStart = start;
                        input.selectionEnd = Math.min(end, input.value.length);
                    } else {
                        setOffsets(input, offsets);
                    }
                }
                var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
                function registerEvents$3() {
                    registerTwoPhaseEvent("onSelect", [ "focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange" ]);
                }
                var activeElement$1 = null;
                var activeElementInst$1 = null;
                var lastSelection = null;
                var mouseDown = false;
                function getSelection$1(node) {
                    if ("selectionStart" in node && hasSelectionCapabilities(node)) {
                        return {
                            start: node.selectionStart,
                            end: node.selectionEnd
                        };
                    } else {
                        var win = node.ownerDocument && node.ownerDocument.defaultView || window;
                        var selection = win.getSelection();
                        return {
                            anchorNode: selection.anchorNode,
                            anchorOffset: selection.anchorOffset,
                            focusNode: selection.focusNode,
                            focusOffset: selection.focusOffset
                        };
                    }
                }
                function getEventTargetDocument(eventTarget) {
                    return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
                }
                function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
                    var doc = getEventTargetDocument(nativeEventTarget);
                    if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
                        return;
                    }
                    var currentSelection = getSelection$1(activeElement$1);
                    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
                        lastSelection = currentSelection;
                        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
                        if (listeners.length > 0) {
                            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                            dispatchQueue.push({
                                event: event,
                                listeners: listeners
                            });
                            event.target = activeElement$1;
                        }
                    }
                }
                function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
                    switch (domEventName) {
                      case "focusin":
                        if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                            activeElement$1 = targetNode;
                            activeElementInst$1 = targetInst;
                            lastSelection = null;
                        }
                        break;

                      case "focusout":
                        activeElement$1 = null;
                        activeElementInst$1 = null;
                        lastSelection = null;
                        break;

                      case "mousedown":
                        mouseDown = true;
                        break;

                      case "contextmenu":
                      case "mouseup":
                      case "dragend":
                        mouseDown = false;
                        constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                        break;

                      case "selectionchange":
                        if (skipSelectionChangeEvent) {
                            break;
                        }

                      case "keydown":
                      case "keyup":
                        constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                    }
                }
                function makePrefixMap(styleProp, eventName) {
                    var prefixes = {};
                    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
                    prefixes["Webkit" + styleProp] = "webkit" + eventName;
                    prefixes["Moz" + styleProp] = "moz" + eventName;
                    return prefixes;
                }
                var vendorPrefixes = {
                    animationend: makePrefixMap("Animation", "AnimationEnd"),
                    animationiteration: makePrefixMap("Animation", "AnimationIteration"),
                    animationstart: makePrefixMap("Animation", "AnimationStart"),
                    transitionend: makePrefixMap("Transition", "TransitionEnd")
                };
                var prefixedEventNames = {};
                var style = {};
                if (canUseDOM) {
                    style = document.createElement("div").style;
                    if (!("AnimationEvent" in window)) {
                        delete vendorPrefixes.animationend.animation;
                        delete vendorPrefixes.animationiteration.animation;
                        delete vendorPrefixes.animationstart.animation;
                    }
                    if (!("TransitionEvent" in window)) {
                        delete vendorPrefixes.transitionend.transition;
                    }
                }
                function getVendorPrefixedEventName(eventName) {
                    if (prefixedEventNames[eventName]) {
                        return prefixedEventNames[eventName];
                    } else if (!vendorPrefixes[eventName]) {
                        return eventName;
                    }
                    var prefixMap = vendorPrefixes[eventName];
                    for (var styleProp in prefixMap) {
                        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                            return prefixedEventNames[eventName] = prefixMap[styleProp];
                        }
                    }
                    return eventName;
                }
                var ANIMATION_END = getVendorPrefixedEventName("animationend");
                var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
                var ANIMATION_START = getVendorPrefixedEventName("animationstart");
                var TRANSITION_END = getVendorPrefixedEventName("transitionend");
                var topLevelEventsToReactNames = new Map;
                var simpleEventPluginEvents = [ "abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel" ];
                function registerSimpleEvent(domEventName, reactName) {
                    topLevelEventsToReactNames.set(domEventName, reactName);
                    registerTwoPhaseEvent(reactName, [ domEventName ]);
                }
                function registerSimpleEvents() {
                    for (var i = 0; i < simpleEventPluginEvents.length; i++) {
                        var eventName = simpleEventPluginEvents[i];
                        var domEventName = eventName.toLowerCase();
                        var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
                        registerSimpleEvent(domEventName, "on" + capitalizedEvent);
                    }
                    registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
                    registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
                    registerSimpleEvent(ANIMATION_START, "onAnimationStart");
                    registerSimpleEvent("dblclick", "onDoubleClick");
                    registerSimpleEvent("focusin", "onFocus");
                    registerSimpleEvent("focusout", "onBlur");
                    registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
                }
                function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    var reactName = topLevelEventsToReactNames.get(domEventName);
                    if (reactName === undefined) {
                        return;
                    }
                    var SyntheticEventCtor = SyntheticEvent;
                    var reactEventType = domEventName;
                    switch (domEventName) {
                      case "keypress":
                        if (getEventCharCode(nativeEvent) === 0) {
                            return;
                        }

                      case "keydown":
                      case "keyup":
                        SyntheticEventCtor = SyntheticKeyboardEvent;
                        break;

                      case "focusin":
                        reactEventType = "focus";
                        SyntheticEventCtor = SyntheticFocusEvent;
                        break;

                      case "focusout":
                        reactEventType = "blur";
                        SyntheticEventCtor = SyntheticFocusEvent;
                        break;

                      case "beforeblur":
                      case "afterblur":
                        SyntheticEventCtor = SyntheticFocusEvent;
                        break;

                      case "click":
                        if (nativeEvent.button === 2) {
                            return;
                        }

                      case "auxclick":
                      case "dblclick":
                      case "mousedown":
                      case "mousemove":
                      case "mouseup":
                      case "mouseout":
                      case "mouseover":
                      case "contextmenu":
                        SyntheticEventCtor = SyntheticMouseEvent;
                        break;

                      case "drag":
                      case "dragend":
                      case "dragenter":
                      case "dragexit":
                      case "dragleave":
                      case "dragover":
                      case "dragstart":
                      case "drop":
                        SyntheticEventCtor = SyntheticDragEvent;
                        break;

                      case "touchcancel":
                      case "touchend":
                      case "touchmove":
                      case "touchstart":
                        SyntheticEventCtor = SyntheticTouchEvent;
                        break;

                      case ANIMATION_END:
                      case ANIMATION_ITERATION:
                      case ANIMATION_START:
                        SyntheticEventCtor = SyntheticAnimationEvent;
                        break;

                      case TRANSITION_END:
                        SyntheticEventCtor = SyntheticTransitionEvent;
                        break;

                      case "scroll":
                        SyntheticEventCtor = SyntheticUIEvent;
                        break;

                      case "wheel":
                        SyntheticEventCtor = SyntheticWheelEvent;
                        break;

                      case "copy":
                      case "cut":
                      case "paste":
                        SyntheticEventCtor = SyntheticClipboardEvent;
                        break;

                      case "gotpointercapture":
                      case "lostpointercapture":
                      case "pointercancel":
                      case "pointerdown":
                      case "pointermove":
                      case "pointerout":
                      case "pointerover":
                      case "pointerup":
                        SyntheticEventCtor = SyntheticPointerEvent;
                        break;
                    }
                    var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
                    {
                        var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
                        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
                        if (_listeners.length > 0) {
                            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                            dispatchQueue.push({
                                event: _event,
                                listeners: _listeners
                            });
                        }
                    }
                }
                registerSimpleEvents();
                registerEvents$2();
                registerEvents$1();
                registerEvents$3();
                registerEvents();
                function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                    var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
                    if (shouldProcessPolyfillPlugins) {
                        extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                        extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                        extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                        extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                    }
                }
                var mediaEventTypes = [ "abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting" ];
                var nonDelegatedEvents = new Set([ "cancel", "close", "invalid", "load", "scroll", "toggle" ].concat(mediaEventTypes));
                function executeDispatch(event, listener, currentTarget) {
                    var type = event.type || "unknown-event";
                    event.currentTarget = currentTarget;
                    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
                    event.currentTarget = null;
                }
                function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
                    var previousInstance;
                    if (inCapturePhase) {
                        for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                            if (instance !== previousInstance && event.isPropagationStopped()) {
                                return;
                            }
                            executeDispatch(event, listener, currentTarget);
                            previousInstance = instance;
                        }
                    } else {
                        for (var _i = 0; _i < dispatchListeners.length; _i++) {
                            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                            if (_instance !== previousInstance && event.isPropagationStopped()) {
                                return;
                            }
                            executeDispatch(event, _listener, _currentTarget);
                            previousInstance = _instance;
                        }
                    }
                }
                function processDispatchQueue(dispatchQueue, eventSystemFlags) {
                    var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
                    for (var i = 0; i < dispatchQueue.length; i++) {
                        var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
                        processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
                    }
                    rethrowCaughtError();
                }
                function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
                    var nativeEventTarget = getEventTarget(nativeEvent);
                    var dispatchQueue = [];
                    extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                    processDispatchQueue(dispatchQueue, eventSystemFlags);
                }
                function listenToNonDelegatedEvent(domEventName, targetElement) {
                    {
                        if (!nonDelegatedEvents.has(domEventName)) {
                            error('Did not expect a listenToNonDelegatedEvent() call for "%s". ' + "This is a bug in React. Please file an issue.", domEventName);
                        }
                    }
                    var isCapturePhaseListener = false;
                    var listenerSet = getEventListenerSet(targetElement);
                    var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
                    if (!listenerSet.has(listenerSetKey)) {
                        addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
                        listenerSet.add(listenerSetKey);
                    }
                }
                function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
                    {
                        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                            error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. ' + "This is a bug in React. Please file an issue.", domEventName);
                        }
                    }
                    var eventSystemFlags = 0;
                    if (isCapturePhaseListener) {
                        eventSystemFlags |= IS_CAPTURE_PHASE;
                    }
                    addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
                }
                var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
                function listenToAllSupportedEvents(rootContainerElement) {
                    if (!rootContainerElement[listeningMarker]) {
                        rootContainerElement[listeningMarker] = true;
                        allNativeEvents.forEach((function(domEventName) {
                            if (domEventName !== "selectionchange") {
                                if (!nonDelegatedEvents.has(domEventName)) {
                                    listenToNativeEvent(domEventName, false, rootContainerElement);
                                }
                                listenToNativeEvent(domEventName, true, rootContainerElement);
                            }
                        }));
                        var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
                        if (ownerDocument !== null) {
                            if (!ownerDocument[listeningMarker]) {
                                ownerDocument[listeningMarker] = true;
                                listenToNativeEvent("selectionchange", false, ownerDocument);
                            }
                        }
                    }
                }
                function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
                    var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
                    var isPassiveListener = undefined;
                    if (passiveBrowserEventsSupported) {
                        if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                            isPassiveListener = true;
                        }
                    }
                    targetContainer = targetContainer;
                    if (isCapturePhaseListener) {
                        if (isPassiveListener !== undefined) {
                            addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
                        } else {
                            addEventCaptureListener(targetContainer, domEventName, listener);
                        }
                    } else {
                        if (isPassiveListener !== undefined) {
                            addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
                        } else {
                            addEventBubbleListener(targetContainer, domEventName, listener);
                        }
                    }
                }
                function isMatchingRootContainer(grandContainer, targetContainer) {
                    return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
                }
                function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
                    var ancestorInst = targetInst;
                    if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
                        var targetContainerNode = targetContainer;
                        if (targetInst !== null) {
                            var node = targetInst;
                            mainLoop: while (true) {
                                if (node === null) {
                                    return;
                                }
                                var nodeTag = node.tag;
                                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                                    var container = node.stateNode.containerInfo;
                                    if (isMatchingRootContainer(container, targetContainerNode)) {
                                        break;
                                    }
                                    if (nodeTag === HostPortal) {
                                        var grandNode = node.return;
                                        while (grandNode !== null) {
                                            var grandTag = grandNode.tag;
                                            if (grandTag === HostRoot || grandTag === HostPortal) {
                                                var grandContainer = grandNode.stateNode.containerInfo;
                                                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                                                    return;
                                                }
                                            }
                                            grandNode = grandNode.return;
                                        }
                                    }
                                    while (container !== null) {
                                        var parentNode = getClosestInstanceFromNode(container);
                                        if (parentNode === null) {
                                            return;
                                        }
                                        var parentTag = parentNode.tag;
                                        if (parentTag === HostComponent || parentTag === HostText) {
                                            node = ancestorInst = parentNode;
                                            continue mainLoop;
                                        }
                                        container = container.parentNode;
                                    }
                                }
                                node = node.return;
                            }
                        }
                    }
                    batchedUpdates((function() {
                        return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
                    }));
                }
                function createDispatchListener(instance, listener, currentTarget) {
                    return {
                        instance: instance,
                        listener: listener,
                        currentTarget: currentTarget
                    };
                }
                function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
                    var captureName = reactName !== null ? reactName + "Capture" : null;
                    var reactEventName = inCapturePhase ? captureName : reactName;
                    var listeners = [];
                    var instance = targetFiber;
                    var lastHostComponent = null;
                    while (instance !== null) {
                        var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
                        if (tag === HostComponent && stateNode !== null) {
                            lastHostComponent = stateNode;
                            if (reactEventName !== null) {
                                var listener = getListener(instance, reactEventName);
                                if (listener != null) {
                                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                                }
                            }
                        }
                        if (accumulateTargetOnly) {
                            break;
                        }
                        instance = instance.return;
                    }
                    return listeners;
                }
                function accumulateTwoPhaseListeners(targetFiber, reactName) {
                    var captureName = reactName + "Capture";
                    var listeners = [];
                    var instance = targetFiber;
                    while (instance !== null) {
                        var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
                        if (tag === HostComponent && stateNode !== null) {
                            var currentTarget = stateNode;
                            var captureListener = getListener(instance, captureName);
                            if (captureListener != null) {
                                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                            }
                            var bubbleListener = getListener(instance, reactName);
                            if (bubbleListener != null) {
                                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                            }
                        }
                        instance = instance.return;
                    }
                    return listeners;
                }
                function getParent(inst) {
                    if (inst === null) {
                        return null;
                    }
                    do {
                        inst = inst.return;
                    } while (inst && inst.tag !== HostComponent);
                    if (inst) {
                        return inst;
                    }
                    return null;
                }
                function getLowestCommonAncestor(instA, instB) {
                    var nodeA = instA;
                    var nodeB = instB;
                    var depthA = 0;
                    for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
                        depthA++;
                    }
                    var depthB = 0;
                    for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
                        depthB++;
                    }
                    while (depthA - depthB > 0) {
                        nodeA = getParent(nodeA);
                        depthA--;
                    }
                    while (depthB - depthA > 0) {
                        nodeB = getParent(nodeB);
                        depthB--;
                    }
                    var depth = depthA;
                    while (depth--) {
                        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                            return nodeA;
                        }
                        nodeA = getParent(nodeA);
                        nodeB = getParent(nodeB);
                    }
                    return null;
                }
                function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
                    var registrationName = event._reactName;
                    var listeners = [];
                    var instance = target;
                    while (instance !== null) {
                        if (instance === common) {
                            break;
                        }
                        var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
                        if (alternate !== null && alternate === common) {
                            break;
                        }
                        if (tag === HostComponent && stateNode !== null) {
                            var currentTarget = stateNode;
                            if (inCapturePhase) {
                                var captureListener = getListener(instance, registrationName);
                                if (captureListener != null) {
                                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                                }
                            } else if (!inCapturePhase) {
                                var bubbleListener = getListener(instance, registrationName);
                                if (bubbleListener != null) {
                                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                                }
                            }
                        }
                        instance = instance.return;
                    }
                    if (listeners.length !== 0) {
                        dispatchQueue.push({
                            event: event,
                            listeners: listeners
                        });
                    }
                }
                function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
                    var common = from && to ? getLowestCommonAncestor(from, to) : null;
                    if (from !== null) {
                        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
                    }
                    if (to !== null && enterEvent !== null) {
                        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
                    }
                }
                function getListenerSetKey(domEventName, capture) {
                    return domEventName + "__" + (capture ? "capture" : "bubble");
                }
                var didWarnInvalidHydration = false;
                var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
                var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
                var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
                var AUTOFOCUS = "autoFocus";
                var CHILDREN = "children";
                var STYLE = "style";
                var HTML$1 = "__html";
                var warnedUnknownTags;
                var validatePropertiesInDevelopment;
                var warnForPropDifference;
                var warnForExtraAttributes;
                var warnForInvalidEventListener;
                var canDiffStyleForHydrationWarning;
                var normalizeHTML;
                {
                    warnedUnknownTags = {
                        dialog: true,
                        webview: true
                    };
                    validatePropertiesInDevelopment = function(type, props) {
                        validateProperties(type, props);
                        validateProperties$1(type, props);
                        validateProperties$2(type, props, {
                            registrationNameDependencies: registrationNameDependencies,
                            possibleRegistrationNames: possibleRegistrationNames
                        });
                    };
                    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
                    warnForPropDifference = function(propName, serverValue, clientValue) {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
                        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
                        if (normalizedServerValue === normalizedClientValue) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
                    };
                    warnForExtraAttributes = function(attributeNames) {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        var names = [];
                        attributeNames.forEach((function(name) {
                            names.push(name);
                        }));
                        error("Extra attributes from the server: %s", names);
                    };
                    warnForInvalidEventListener = function(registrationName, listener) {
                        if (listener === false) {
                            error("Expected `%s` listener to be a function, instead got `false`.\n\n" + "If you used to conditionally omit it with %s={condition && value}, " + "pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
                        } else {
                            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
                        }
                    };
                    normalizeHTML = function(parent, html) {
                        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
                        testElement.innerHTML = html;
                        return testElement.innerHTML;
                    };
                }
                var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
                var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
                function normalizeMarkupForTextOrAttribute(markup) {
                    {
                        checkHtmlStringCoercion(markup);
                    }
                    var markupString = typeof markup === "string" ? markup : "" + markup;
                    return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
                }
                function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
                    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
                    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
                    if (normalizedServerText === normalizedClientText) {
                        return;
                    }
                    if (shouldWarnDev) {
                        {
                            if (!didWarnInvalidHydration) {
                                didWarnInvalidHydration = true;
                                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                            }
                        }
                    }
                    if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
                        throw new Error("Text content does not match server-rendered HTML.");
                    }
                }
                function getOwnerDocumentFromRootContainer(rootContainerElement) {
                    return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
                }
                function noop() {}
                function trapClickOnNonInteractiveElement(node) {
                    node.onclick = noop;
                }
                function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
                    for (var propKey in nextProps) {
                        if (!nextProps.hasOwnProperty(propKey)) {
                            continue;
                        }
                        var nextProp = nextProps[propKey];
                        if (propKey === STYLE) {
                            {
                                if (nextProp) {
                                    Object.freeze(nextProp);
                                }
                            }
                            setValueForStyles(domElement, nextProp);
                        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                            if (nextHtml != null) {
                                setInnerHTML(domElement, nextHtml);
                            }
                        } else if (propKey === CHILDREN) {
                            if (typeof nextProp === "string") {
                                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                                if (canSetTextContent) {
                                    setTextContent(domElement, nextProp);
                                }
                            } else if (typeof nextProp === "number") {
                                setTextContent(domElement, "" + nextProp);
                            }
                        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                            if (nextProp != null) {
                                if (typeof nextProp !== "function") {
                                    warnForInvalidEventListener(propKey, nextProp);
                                }
                                if (propKey === "onScroll") {
                                    listenToNonDelegatedEvent("scroll", domElement);
                                }
                            }
                        } else if (nextProp != null) {
                            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
                        }
                    }
                }
                function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
                    for (var i = 0; i < updatePayload.length; i += 2) {
                        var propKey = updatePayload[i];
                        var propValue = updatePayload[i + 1];
                        if (propKey === STYLE) {
                            setValueForStyles(domElement, propValue);
                        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            setInnerHTML(domElement, propValue);
                        } else if (propKey === CHILDREN) {
                            setTextContent(domElement, propValue);
                        } else {
                            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
                        }
                    }
                }
                function createElement(type, props, rootContainerElement, parentNamespace) {
                    var isCustomComponentTag;
                    var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
                    var domElement;
                    var namespaceURI = parentNamespace;
                    if (namespaceURI === HTML_NAMESPACE) {
                        namespaceURI = getIntrinsicNamespace(type);
                    }
                    if (namespaceURI === HTML_NAMESPACE) {
                        {
                            isCustomComponentTag = isCustomComponent(type, props);
                            if (!isCustomComponentTag && type !== type.toLowerCase()) {
                                error("<%s /> is using incorrect casing. " + "Use PascalCase for React components, " + "or lowercase for HTML elements.", type);
                            }
                        }
                        if (type === "script") {
                            var div = ownerDocument.createElement("div");
                            div.innerHTML = "<script><" + "/script>";
                            var firstChild = div.firstChild;
                            domElement = div.removeChild(firstChild);
                        } else if (typeof props.is === "string") {
                            domElement = ownerDocument.createElement(type, {
                                is: props.is
                            });
                        } else {
                            domElement = ownerDocument.createElement(type);
                            if (type === "select") {
                                var node = domElement;
                                if (props.multiple) {
                                    node.multiple = true;
                                } else if (props.size) {
                                    node.size = props.size;
                                }
                            }
                        }
                    } else {
                        domElement = ownerDocument.createElementNS(namespaceURI, type);
                    }
                    {
                        if (namespaceURI === HTML_NAMESPACE) {
                            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                                warnedUnknownTags[type] = true;
                                error("The tag <%s> is unrecognized in this browser. " + "If you meant to render a React component, start its name with " + "an uppercase letter.", type);
                            }
                        }
                    }
                    return domElement;
                }
                function createTextNode(text, rootContainerElement) {
                    return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
                }
                function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
                    var isCustomComponentTag = isCustomComponent(tag, rawProps);
                    {
                        validatePropertiesInDevelopment(tag, rawProps);
                    }
                    var props;
                    switch (tag) {
                      case "dialog":
                        listenToNonDelegatedEvent("cancel", domElement);
                        listenToNonDelegatedEvent("close", domElement);
                        props = rawProps;
                        break;

                      case "iframe":
                      case "object":
                      case "embed":
                        listenToNonDelegatedEvent("load", domElement);
                        props = rawProps;
                        break;

                      case "video":
                      case "audio":
                        for (var i = 0; i < mediaEventTypes.length; i++) {
                            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                        }
                        props = rawProps;
                        break;

                      case "source":
                        listenToNonDelegatedEvent("error", domElement);
                        props = rawProps;
                        break;

                      case "img":
                      case "image":
                      case "link":
                        listenToNonDelegatedEvent("error", domElement);
                        listenToNonDelegatedEvent("load", domElement);
                        props = rawProps;
                        break;

                      case "details":
                        listenToNonDelegatedEvent("toggle", domElement);
                        props = rawProps;
                        break;

                      case "input":
                        initWrapperState(domElement, rawProps);
                        props = getHostProps(domElement, rawProps);
                        listenToNonDelegatedEvent("invalid", domElement);
                        break;

                      case "option":
                        validateProps(domElement, rawProps);
                        props = rawProps;
                        break;

                      case "select":
                        initWrapperState$1(domElement, rawProps);
                        props = getHostProps$1(domElement, rawProps);
                        listenToNonDelegatedEvent("invalid", domElement);
                        break;

                      case "textarea":
                        initWrapperState$2(domElement, rawProps);
                        props = getHostProps$2(domElement, rawProps);
                        listenToNonDelegatedEvent("invalid", domElement);
                        break;

                      default:
                        props = rawProps;
                    }
                    assertValidProps(tag, props);
                    setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
                    switch (tag) {
                      case "input":
                        track(domElement);
                        postMountWrapper(domElement, rawProps, false);
                        break;

                      case "textarea":
                        track(domElement);
                        postMountWrapper$3(domElement);
                        break;

                      case "option":
                        postMountWrapper$1(domElement, rawProps);
                        break;

                      case "select":
                        postMountWrapper$2(domElement, rawProps);
                        break;

                      default:
                        if (typeof props.onClick === "function") {
                            trapClickOnNonInteractiveElement(domElement);
                        }
                        break;
                    }
                }
                function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
                    {
                        validatePropertiesInDevelopment(tag, nextRawProps);
                    }
                    var updatePayload = null;
                    var lastProps;
                    var nextProps;
                    switch (tag) {
                      case "input":
                        lastProps = getHostProps(domElement, lastRawProps);
                        nextProps = getHostProps(domElement, nextRawProps);
                        updatePayload = [];
                        break;

                      case "select":
                        lastProps = getHostProps$1(domElement, lastRawProps);
                        nextProps = getHostProps$1(domElement, nextRawProps);
                        updatePayload = [];
                        break;

                      case "textarea":
                        lastProps = getHostProps$2(domElement, lastRawProps);
                        nextProps = getHostProps$2(domElement, nextRawProps);
                        updatePayload = [];
                        break;

                      default:
                        lastProps = lastRawProps;
                        nextProps = nextRawProps;
                        if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                            trapClickOnNonInteractiveElement(domElement);
                        }
                        break;
                    }
                    assertValidProps(tag, nextProps);
                    var propKey;
                    var styleName;
                    var styleUpdates = null;
                    for (propKey in lastProps) {
                        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                            continue;
                        }
                        if (propKey === STYLE) {
                            var lastStyle = lastProps[propKey];
                            for (styleName in lastStyle) {
                                if (lastStyle.hasOwnProperty(styleName)) {
                                    if (!styleUpdates) {
                                        styleUpdates = {};
                                    }
                                    styleUpdates[styleName] = "";
                                }
                            }
                        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                            if (!updatePayload) {
                                updatePayload = [];
                            }
                        } else {
                            (updatePayload = updatePayload || []).push(propKey, null);
                        }
                    }
                    for (propKey in nextProps) {
                        var nextProp = nextProps[propKey];
                        var lastProp = lastProps != null ? lastProps[propKey] : undefined;
                        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                            continue;
                        }
                        if (propKey === STYLE) {
                            {
                                if (nextProp) {
                                    Object.freeze(nextProp);
                                }
                            }
                            if (lastProp) {
                                for (styleName in lastProp) {
                                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                                        if (!styleUpdates) {
                                            styleUpdates = {};
                                        }
                                        styleUpdates[styleName] = "";
                                    }
                                }
                                for (styleName in nextProp) {
                                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                                        if (!styleUpdates) {
                                            styleUpdates = {};
                                        }
                                        styleUpdates[styleName] = nextProp[styleName];
                                    }
                                }
                            } else {
                                if (!styleUpdates) {
                                    if (!updatePayload) {
                                        updatePayload = [];
                                    }
                                    updatePayload.push(propKey, styleUpdates);
                                }
                                styleUpdates = nextProp;
                            }
                        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                            var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                            if (nextHtml != null) {
                                if (lastHtml !== nextHtml) {
                                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                                }
                            }
                        } else if (propKey === CHILDREN) {
                            if (typeof nextProp === "string" || typeof nextProp === "number") {
                                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                            }
                        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                            if (nextProp != null) {
                                if (typeof nextProp !== "function") {
                                    warnForInvalidEventListener(propKey, nextProp);
                                }
                                if (propKey === "onScroll") {
                                    listenToNonDelegatedEvent("scroll", domElement);
                                }
                            }
                            if (!updatePayload && lastProp !== nextProp) {
                                updatePayload = [];
                            }
                        } else {
                            (updatePayload = updatePayload || []).push(propKey, nextProp);
                        }
                    }
                    if (styleUpdates) {
                        {
                            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
                        }
                        (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
                    }
                    return updatePayload;
                }
                function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
                    if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
                        updateChecked(domElement, nextRawProps);
                    }
                    var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
                    var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
                    updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
                    switch (tag) {
                      case "input":
                        updateWrapper(domElement, nextRawProps);
                        break;

                      case "textarea":
                        updateWrapper$1(domElement, nextRawProps);
                        break;

                      case "select":
                        postUpdateWrapper(domElement, nextRawProps);
                        break;
                    }
                }
                function getPossibleStandardName(propName) {
                    {
                        var lowerCasedName = propName.toLowerCase();
                        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                            return null;
                        }
                        return possibleStandardNames[lowerCasedName] || null;
                    }
                }
                function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
                    var isCustomComponentTag;
                    var extraAttributeNames;
                    {
                        isCustomComponentTag = isCustomComponent(tag, rawProps);
                        validatePropertiesInDevelopment(tag, rawProps);
                    }
                    switch (tag) {
                      case "dialog":
                        listenToNonDelegatedEvent("cancel", domElement);
                        listenToNonDelegatedEvent("close", domElement);
                        break;

                      case "iframe":
                      case "object":
                      case "embed":
                        listenToNonDelegatedEvent("load", domElement);
                        break;

                      case "video":
                      case "audio":
                        for (var i = 0; i < mediaEventTypes.length; i++) {
                            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                        }
                        break;

                      case "source":
                        listenToNonDelegatedEvent("error", domElement);
                        break;

                      case "img":
                      case "image":
                      case "link":
                        listenToNonDelegatedEvent("error", domElement);
                        listenToNonDelegatedEvent("load", domElement);
                        break;

                      case "details":
                        listenToNonDelegatedEvent("toggle", domElement);
                        break;

                      case "input":
                        initWrapperState(domElement, rawProps);
                        listenToNonDelegatedEvent("invalid", domElement);
                        break;

                      case "option":
                        validateProps(domElement, rawProps);
                        break;

                      case "select":
                        initWrapperState$1(domElement, rawProps);
                        listenToNonDelegatedEvent("invalid", domElement);
                        break;

                      case "textarea":
                        initWrapperState$2(domElement, rawProps);
                        listenToNonDelegatedEvent("invalid", domElement);
                        break;
                    }
                    assertValidProps(tag, rawProps);
                    {
                        extraAttributeNames = new Set;
                        var attributes = domElement.attributes;
                        for (var _i = 0; _i < attributes.length; _i++) {
                            var name = attributes[_i].name.toLowerCase();
                            switch (name) {
                              case "value":
                                break;

                              case "checked":
                                break;

                              case "selected":
                                break;

                              default:
                                extraAttributeNames.add(attributes[_i].name);
                            }
                        }
                    }
                    var updatePayload = null;
                    for (var propKey in rawProps) {
                        if (!rawProps.hasOwnProperty(propKey)) {
                            continue;
                        }
                        var nextProp = rawProps[propKey];
                        if (propKey === CHILDREN) {
                            if (typeof nextProp === "string") {
                                if (domElement.textContent !== nextProp) {
                                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                                        checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                                    }
                                    updatePayload = [ CHILDREN, nextProp ];
                                }
                            } else if (typeof nextProp === "number") {
                                if (domElement.textContent !== "" + nextProp) {
                                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                                        checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                                    }
                                    updatePayload = [ CHILDREN, "" + nextProp ];
                                }
                            }
                        } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                            if (nextProp != null) {
                                if (typeof nextProp !== "function") {
                                    warnForInvalidEventListener(propKey, nextProp);
                                }
                                if (propKey === "onScroll") {
                                    listenToNonDelegatedEvent("scroll", domElement);
                                }
                            }
                        } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                            var serverValue = void 0;
                            var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                            if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected") ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                                var serverHTML = domElement.innerHTML;
                                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                                if (nextHtml != null) {
                                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                                    if (expectedHTML !== serverHTML) {
                                        warnForPropDifference(propKey, serverHTML, expectedHTML);
                                    }
                                }
                            } else if (propKey === STYLE) {
                                extraAttributeNames.delete(propKey);
                                if (canDiffStyleForHydrationWarning) {
                                    var expectedStyle = createDangerousStringForStyles(nextProp);
                                    serverValue = domElement.getAttribute("style");
                                    if (expectedStyle !== serverValue) {
                                        warnForPropDifference(propKey, serverValue, expectedStyle);
                                    }
                                }
                            } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                                extraAttributeNames.delete(propKey.toLowerCase());
                                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                                if (nextProp !== serverValue) {
                                    warnForPropDifference(propKey, serverValue, nextProp);
                                }
                            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                                var isMismatchDueToBadCasing = false;
                                if (propertyInfo !== null) {
                                    extraAttributeNames.delete(propertyInfo.attributeName);
                                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                                } else {
                                    var ownNamespace = parentNamespace;
                                    if (ownNamespace === HTML_NAMESPACE) {
                                        ownNamespace = getIntrinsicNamespace(tag);
                                    }
                                    if (ownNamespace === HTML_NAMESPACE) {
                                        extraAttributeNames.delete(propKey.toLowerCase());
                                    } else {
                                        var standardName = getPossibleStandardName(propKey);
                                        if (standardName !== null && standardName !== propKey) {
                                            isMismatchDueToBadCasing = true;
                                            extraAttributeNames.delete(standardName);
                                        }
                                        extraAttributeNames.delete(propKey);
                                    }
                                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                                }
                                var dontWarnCustomElement = enableCustomElementPropertySupport;
                                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                                    warnForPropDifference(propKey, serverValue, nextProp);
                                }
                            }
                        }
                    }
                    {
                        if (shouldWarnDev) {
                            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                                warnForExtraAttributes(extraAttributeNames);
                            }
                        }
                    }
                    switch (tag) {
                      case "input":
                        track(domElement);
                        postMountWrapper(domElement, rawProps, true);
                        break;

                      case "textarea":
                        track(domElement);
                        postMountWrapper$3(domElement);
                        break;

                      case "select":
                      case "option":
                        break;

                      default:
                        if (typeof rawProps.onClick === "function") {
                            trapClickOnNonInteractiveElement(domElement);
                        }
                        break;
                    }
                    return updatePayload;
                }
                function diffHydratedText(textNode, text, isConcurrentMode) {
                    var isDifferent = textNode.nodeValue !== text;
                    return isDifferent;
                }
                function warnForDeletedHydratableElement(parentNode, child) {
                    {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
                    }
                }
                function warnForDeletedHydratableText(parentNode, child) {
                    {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
                    }
                }
                function warnForInsertedHydratedElement(parentNode, tag, props) {
                    {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
                    }
                }
                function warnForInsertedHydratedText(parentNode, text) {
                    {
                        if (text === "") {
                            return;
                        }
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
                    }
                }
                function restoreControlledState$3(domElement, tag, props) {
                    switch (tag) {
                      case "input":
                        restoreControlledState(domElement, props);
                        return;

                      case "textarea":
                        restoreControlledState$2(domElement, props);
                        return;

                      case "select":
                        restoreControlledState$1(domElement, props);
                        return;
                    }
                }
                var validateDOMNesting = function() {};
                var updatedAncestorInfo = function() {};
                {
                    var specialTags = [ "address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp" ];
                    var inScopeTags = [ "applet", "caption", "html", "table", "td", "th", "marquee", "object", "template", "foreignObject", "desc", "title" ];
                    var buttonScopeTags = inScopeTags.concat([ "button" ]);
                    var impliedEndTags = [ "dd", "dt", "li", "option", "optgroup", "p", "rp", "rt" ];
                    var emptyAncestorInfo = {
                        current: null,
                        formTag: null,
                        aTagInScope: null,
                        buttonTagInScope: null,
                        nobrTagInScope: null,
                        pTagInButtonScope: null,
                        listItemTagAutoclosing: null,
                        dlItemTagAutoclosing: null
                    };
                    updatedAncestorInfo = function(oldInfo, tag) {
                        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
                        var info = {
                            tag: tag
                        };
                        if (inScopeTags.indexOf(tag) !== -1) {
                            ancestorInfo.aTagInScope = null;
                            ancestorInfo.buttonTagInScope = null;
                            ancestorInfo.nobrTagInScope = null;
                        }
                        if (buttonScopeTags.indexOf(tag) !== -1) {
                            ancestorInfo.pTagInButtonScope = null;
                        }
                        if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                            ancestorInfo.listItemTagAutoclosing = null;
                            ancestorInfo.dlItemTagAutoclosing = null;
                        }
                        ancestorInfo.current = info;
                        if (tag === "form") {
                            ancestorInfo.formTag = info;
                        }
                        if (tag === "a") {
                            ancestorInfo.aTagInScope = info;
                        }
                        if (tag === "button") {
                            ancestorInfo.buttonTagInScope = info;
                        }
                        if (tag === "nobr") {
                            ancestorInfo.nobrTagInScope = info;
                        }
                        if (tag === "p") {
                            ancestorInfo.pTagInButtonScope = info;
                        }
                        if (tag === "li") {
                            ancestorInfo.listItemTagAutoclosing = info;
                        }
                        if (tag === "dd" || tag === "dt") {
                            ancestorInfo.dlItemTagAutoclosing = info;
                        }
                        return ancestorInfo;
                    };
                    var isTagValidWithParent = function(tag, parentTag) {
                        switch (parentTag) {
                          case "select":
                            return tag === "option" || tag === "optgroup" || tag === "#text";

                          case "optgroup":
                            return tag === "option" || tag === "#text";

                          case "option":
                            return tag === "#text";

                          case "tr":
                            return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";

                          case "tbody":
                          case "thead":
                          case "tfoot":
                            return tag === "tr" || tag === "style" || tag === "script" || tag === "template";

                          case "colgroup":
                            return tag === "col" || tag === "template";

                          case "table":
                            return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";

                          case "head":
                            return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";

                          case "html":
                            return tag === "head" || tag === "body" || tag === "frameset";

                          case "frameset":
                            return tag === "frame";

                          case "#document":
                            return tag === "html";
                        }
                        switch (tag) {
                          case "h1":
                          case "h2":
                          case "h3":
                          case "h4":
                          case "h5":
                          case "h6":
                            return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";

                          case "rp":
                          case "rt":
                            return impliedEndTags.indexOf(parentTag) === -1;

                          case "body":
                          case "caption":
                          case "col":
                          case "colgroup":
                          case "frameset":
                          case "frame":
                          case "head":
                          case "html":
                          case "tbody":
                          case "td":
                          case "tfoot":
                          case "th":
                          case "thead":
                          case "tr":
                            return parentTag == null;
                        }
                        return true;
                    };
                    var findInvalidAncestorForTag = function(tag, ancestorInfo) {
                        switch (tag) {
                          case "address":
                          case "article":
                          case "aside":
                          case "blockquote":
                          case "center":
                          case "details":
                          case "dialog":
                          case "dir":
                          case "div":
                          case "dl":
                          case "fieldset":
                          case "figcaption":
                          case "figure":
                          case "footer":
                          case "header":
                          case "hgroup":
                          case "main":
                          case "menu":
                          case "nav":
                          case "ol":
                          case "p":
                          case "section":
                          case "summary":
                          case "ul":
                          case "pre":
                          case "listing":
                          case "table":
                          case "hr":
                          case "xmp":
                          case "h1":
                          case "h2":
                          case "h3":
                          case "h4":
                          case "h5":
                          case "h6":
                            return ancestorInfo.pTagInButtonScope;

                          case "form":
                            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

                          case "li":
                            return ancestorInfo.listItemTagAutoclosing;

                          case "dd":
                          case "dt":
                            return ancestorInfo.dlItemTagAutoclosing;

                          case "button":
                            return ancestorInfo.buttonTagInScope;

                          case "a":
                            return ancestorInfo.aTagInScope;

                          case "nobr":
                            return ancestorInfo.nobrTagInScope;
                        }
                        return null;
                    };
                    var didWarn$1 = {};
                    validateDOMNesting = function(childTag, childText, ancestorInfo) {
                        ancestorInfo = ancestorInfo || emptyAncestorInfo;
                        var parentInfo = ancestorInfo.current;
                        var parentTag = parentInfo && parentInfo.tag;
                        if (childText != null) {
                            if (childTag != null) {
                                error("validateDOMNesting: when childText is passed, childTag should be null");
                            }
                            childTag = "#text";
                        }
                        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
                        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
                        var invalidParentOrAncestor = invalidParent || invalidAncestor;
                        if (!invalidParentOrAncestor) {
                            return;
                        }
                        var ancestorTag = invalidParentOrAncestor.tag;
                        var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
                        if (didWarn$1[warnKey]) {
                            return;
                        }
                        didWarn$1[warnKey] = true;
                        var tagDisplayName = childTag;
                        var whitespaceInfo = "";
                        if (childTag === "#text") {
                            if (/\S/.test(childText)) {
                                tagDisplayName = "Text nodes";
                            } else {
                                tagDisplayName = "Whitespace text nodes";
                                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + "each line of your source code.";
                            }
                        } else {
                            tagDisplayName = "<" + childTag + ">";
                        }
                        if (invalidParent) {
                            var info = "";
                            if (ancestorTag === "table" && childTag === "tr") {
                                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by " + "the browser.";
                            }
                            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
                        } else {
                            error("validateDOMNesting(...): %s cannot appear as a descendant of " + "<%s>.", tagDisplayName, ancestorTag);
                        }
                    };
                }
                var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
                var SUSPENSE_START_DATA = "$";
                var SUSPENSE_END_DATA = "/$";
                var SUSPENSE_PENDING_START_DATA = "$?";
                var SUSPENSE_FALLBACK_START_DATA = "$!";
                var STYLE$1 = "style";
                var eventsEnabled = null;
                var selectionInformation = null;
                function getRootHostContext(rootContainerInstance) {
                    var type;
                    var namespace;
                    var nodeType = rootContainerInstance.nodeType;
                    switch (nodeType) {
                      case DOCUMENT_NODE:
                      case DOCUMENT_FRAGMENT_NODE:
                        {
                            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                            var root = rootContainerInstance.documentElement;
                            namespace = root ? root.namespaceURI : getChildNamespace(null, "");
                            break;
                        }

                      default:
                        {
                            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                            var ownNamespace = container.namespaceURI || null;
                            type = container.tagName;
                            namespace = getChildNamespace(ownNamespace, type);
                            break;
                        }
                    }
                    {
                        var validatedTag = type.toLowerCase();
                        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
                        return {
                            namespace: namespace,
                            ancestorInfo: ancestorInfo
                        };
                    }
                }
                function getChildHostContext(parentHostContext, type, rootContainerInstance) {
                    {
                        var parentHostContextDev = parentHostContext;
                        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
                        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
                        return {
                            namespace: namespace,
                            ancestorInfo: ancestorInfo
                        };
                    }
                }
                function getPublicInstance(instance) {
                    return instance;
                }
                function prepareForCommit(containerInfo) {
                    eventsEnabled = isEnabled();
                    selectionInformation = getSelectionInformation();
                    var activeInstance = null;
                    setEnabled(false);
                    return activeInstance;
                }
                function resetAfterCommit(containerInfo) {
                    restoreSelection(selectionInformation);
                    setEnabled(eventsEnabled);
                    eventsEnabled = null;
                    selectionInformation = null;
                }
                function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
                    var parentNamespace;
                    {
                        var hostContextDev = hostContext;
                        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
                        if (typeof props.children === "string" || typeof props.children === "number") {
                            var string = "" + props.children;
                            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                            validateDOMNesting(null, string, ownAncestorInfo);
                        }
                        parentNamespace = hostContextDev.namespace;
                    }
                    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
                    precacheFiberNode(internalInstanceHandle, domElement);
                    updateFiberProps(domElement, props);
                    return domElement;
                }
                function appendInitialChild(parentInstance, child) {
                    parentInstance.appendChild(child);
                }
                function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
                    setInitialProperties(domElement, type, props, rootContainerInstance);
                    switch (type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        return !!props.autoFocus;

                      case "img":
                        return true;

                      default:
                        return false;
                    }
                }
                function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
                    {
                        var hostContextDev = hostContext;
                        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                            var string = "" + newProps.children;
                            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                            validateDOMNesting(null, string, ownAncestorInfo);
                        }
                    }
                    return diffProperties(domElement, type, oldProps, newProps);
                }
                function shouldSetTextContent(type, props) {
                    return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
                }
                function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
                    {
                        var hostContextDev = hostContext;
                        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
                    }
                    var textNode = createTextNode(text, rootContainerInstance);
                    precacheFiberNode(internalInstanceHandle, textNode);
                    return textNode;
                }
                function getCurrentEventPriority() {
                    var currentEvent = window.event;
                    if (currentEvent === undefined) {
                        return DefaultEventPriority;
                    }
                    return getEventPriority(currentEvent.type);
                }
                var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
                var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
                var noTimeout = -1;
                var localPromise = typeof Promise === "function" ? Promise : undefined;
                var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
                    return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
                } : scheduleTimeout;
                function handleErrorInNextTick(error) {
                    setTimeout((function() {
                        throw error;
                    }));
                }
                function commitMount(domElement, type, newProps, internalInstanceHandle) {
                    switch (type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        if (newProps.autoFocus) {
                            domElement.focus();
                        }
                        return;

                      case "img":
                        {
                            if (newProps.src) {
                                domElement.src = newProps.src;
                            }
                            return;
                        }
                    }
                }
                function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
                    updateProperties(domElement, updatePayload, type, oldProps, newProps);
                    updateFiberProps(domElement, newProps);
                }
                function resetTextContent(domElement) {
                    setTextContent(domElement, "");
                }
                function commitTextUpdate(textInstance, oldText, newText) {
                    textInstance.nodeValue = newText;
                }
                function appendChild(parentInstance, child) {
                    parentInstance.appendChild(child);
                }
                function appendChildToContainer(container, child) {
                    var parentNode;
                    if (container.nodeType === COMMENT_NODE) {
                        parentNode = container.parentNode;
                        parentNode.insertBefore(child, container);
                    } else {
                        parentNode = container;
                        parentNode.appendChild(child);
                    }
                    var reactRootContainer = container._reactRootContainer;
                    if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
                        trapClickOnNonInteractiveElement(parentNode);
                    }
                }
                function insertBefore(parentInstance, child, beforeChild) {
                    parentInstance.insertBefore(child, beforeChild);
                }
                function insertInContainerBefore(container, child, beforeChild) {
                    if (container.nodeType === COMMENT_NODE) {
                        container.parentNode.insertBefore(child, beforeChild);
                    } else {
                        container.insertBefore(child, beforeChild);
                    }
                }
                function removeChild(parentInstance, child) {
                    parentInstance.removeChild(child);
                }
                function removeChildFromContainer(container, child) {
                    if (container.nodeType === COMMENT_NODE) {
                        container.parentNode.removeChild(child);
                    } else {
                        container.removeChild(child);
                    }
                }
                function clearSuspenseBoundary(parentInstance, suspenseInstance) {
                    var node = suspenseInstance;
                    var depth = 0;
                    do {
                        var nextNode = node.nextSibling;
                        parentInstance.removeChild(node);
                        if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                            var data = nextNode.data;
                            if (data === SUSPENSE_END_DATA) {
                                if (depth === 0) {
                                    parentInstance.removeChild(nextNode);
                                    retryIfBlockedOn(suspenseInstance);
                                    return;
                                } else {
                                    depth--;
                                }
                            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                                depth++;
                            }
                        }
                        node = nextNode;
                    } while (node);
                    retryIfBlockedOn(suspenseInstance);
                }
                function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
                    if (container.nodeType === COMMENT_NODE) {
                        clearSuspenseBoundary(container.parentNode, suspenseInstance);
                    } else if (container.nodeType === ELEMENT_NODE) {
                        clearSuspenseBoundary(container, suspenseInstance);
                    }
                    retryIfBlockedOn(container);
                }
                function hideInstance(instance) {
                    instance = instance;
                    var style = instance.style;
                    if (typeof style.setProperty === "function") {
                        style.setProperty("display", "none", "important");
                    } else {
                        style.display = "none";
                    }
                }
                function hideTextInstance(textInstance) {
                    textInstance.nodeValue = "";
                }
                function unhideInstance(instance, props) {
                    instance = instance;
                    var styleProp = props[STYLE$1];
                    var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
                    instance.style.display = dangerousStyleValue("display", display);
                }
                function unhideTextInstance(textInstance, text) {
                    textInstance.nodeValue = text;
                }
                function clearContainer(container) {
                    if (container.nodeType === ELEMENT_NODE) {
                        container.textContent = "";
                    } else if (container.nodeType === DOCUMENT_NODE) {
                        if (container.documentElement) {
                            container.removeChild(container.documentElement);
                        }
                    }
                }
                function canHydrateInstance(instance, type, props) {
                    if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
                        return null;
                    }
                    return instance;
                }
                function canHydrateTextInstance(instance, text) {
                    if (text === "" || instance.nodeType !== TEXT_NODE) {
                        return null;
                    }
                    return instance;
                }
                function canHydrateSuspenseInstance(instance) {
                    if (instance.nodeType !== COMMENT_NODE) {
                        return null;
                    }
                    return instance;
                }
                function isSuspenseInstancePending(instance) {
                    return instance.data === SUSPENSE_PENDING_START_DATA;
                }
                function isSuspenseInstanceFallback(instance) {
                    return instance.data === SUSPENSE_FALLBACK_START_DATA;
                }
                function getSuspenseInstanceFallbackErrorDetails(instance) {
                    var dataset = instance.nextSibling && instance.nextSibling.dataset;
                    var digest, message, stack;
                    if (dataset) {
                        digest = dataset.dgst;
                        {
                            message = dataset.msg;
                            stack = dataset.stck;
                        }
                    }
                    {
                        return {
                            message: message,
                            digest: digest,
                            stack: stack
                        };
                    }
                }
                function registerSuspenseInstanceRetry(instance, callback) {
                    instance._reactRetry = callback;
                }
                function getNextHydratable(node) {
                    for (;node != null; node = node.nextSibling) {
                        var nodeType = node.nodeType;
                        if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                            break;
                        }
                        if (nodeType === COMMENT_NODE) {
                            var nodeData = node.data;
                            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                                break;
                            }
                            if (nodeData === SUSPENSE_END_DATA) {
                                return null;
                            }
                        }
                    }
                    return node;
                }
                function getNextHydratableSibling(instance) {
                    return getNextHydratable(instance.nextSibling);
                }
                function getFirstHydratableChild(parentInstance) {
                    return getNextHydratable(parentInstance.firstChild);
                }
                function getFirstHydratableChildWithinContainer(parentContainer) {
                    return getNextHydratable(parentContainer.firstChild);
                }
                function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
                    return getNextHydratable(parentInstance.nextSibling);
                }
                function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
                    precacheFiberNode(internalInstanceHandle, instance);
                    updateFiberProps(instance, props);
                    var parentNamespace;
                    {
                        var hostContextDev = hostContext;
                        parentNamespace = hostContextDev.namespace;
                    }
                    var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
                    return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
                }
                function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
                    precacheFiberNode(internalInstanceHandle, textInstance);
                    (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
                    return diffHydratedText(textInstance, text);
                }
                function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
                    precacheFiberNode(internalInstanceHandle, suspenseInstance);
                }
                function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
                    var node = suspenseInstance.nextSibling;
                    var depth = 0;
                    while (node) {
                        if (node.nodeType === COMMENT_NODE) {
                            var data = node.data;
                            if (data === SUSPENSE_END_DATA) {
                                if (depth === 0) {
                                    return getNextHydratableSibling(node);
                                } else {
                                    depth--;
                                }
                            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                                depth++;
                            }
                        }
                        node = node.nextSibling;
                    }
                    return null;
                }
                function getParentSuspenseInstance(targetInstance) {
                    var node = targetInstance.previousSibling;
                    var depth = 0;
                    while (node) {
                        if (node.nodeType === COMMENT_NODE) {
                            var data = node.data;
                            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                                if (depth === 0) {
                                    return node;
                                } else {
                                    depth--;
                                }
                            } else if (data === SUSPENSE_END_DATA) {
                                depth++;
                            }
                        }
                        node = node.previousSibling;
                    }
                    return null;
                }
                function commitHydratedContainer(container) {
                    retryIfBlockedOn(container);
                }
                function commitHydratedSuspenseInstance(suspenseInstance) {
                    retryIfBlockedOn(suspenseInstance);
                }
                function shouldDeleteUnhydratedTailInstances(parentType) {
                    return parentType !== "head" && parentType !== "body";
                }
                function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
                    var shouldWarnDev = true;
                    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
                }
                function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
                    if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                        var shouldWarnDev = true;
                        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
                    }
                }
                function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
                    {
                        if (instance.nodeType === ELEMENT_NODE) {
                            warnForDeletedHydratableElement(parentContainer, instance);
                        } else if (instance.nodeType === COMMENT_NODE) ; else {
                            warnForDeletedHydratableText(parentContainer, instance);
                        }
                    }
                }
                function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
                    {
                        var parentNode = parentInstance.parentNode;
                        if (parentNode !== null) {
                            if (instance.nodeType === ELEMENT_NODE) {
                                warnForDeletedHydratableElement(parentNode, instance);
                            } else if (instance.nodeType === COMMENT_NODE) ; else {
                                warnForDeletedHydratableText(parentNode, instance);
                            }
                        }
                    }
                }
                function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
                    {
                        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                            if (instance.nodeType === ELEMENT_NODE) {
                                warnForDeletedHydratableElement(parentInstance, instance);
                            } else if (instance.nodeType === COMMENT_NODE) ; else {
                                warnForDeletedHydratableText(parentInstance, instance);
                            }
                        }
                    }
                }
                function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
                    {
                        warnForInsertedHydratedElement(parentContainer, type);
                    }
                }
                function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
                    {
                        warnForInsertedHydratedText(parentContainer, text);
                    }
                }
                function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
                    {
                        var parentNode = parentInstance.parentNode;
                        if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
                    }
                }
                function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
                    {
                        var parentNode = parentInstance.parentNode;
                        if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
                    }
                }
                function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
                    {
                        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                            warnForInsertedHydratedElement(parentInstance, type);
                        }
                    }
                }
                function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
                    {
                        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                            warnForInsertedHydratedText(parentInstance, text);
                        }
                    }
                }
                function errorHydratingContainer(parentContainer) {
                    {
                        error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
                    }
                }
                function preparePortalMount(portalInstance) {
                    listenToAllSupportedEvents(portalInstance);
                }
                var randomKey = Math.random().toString(36).slice(2);
                var internalInstanceKey = "__reactFiber$" + randomKey;
                var internalPropsKey = "__reactProps$" + randomKey;
                var internalContainerInstanceKey = "__reactContainer$" + randomKey;
                var internalEventHandlersKey = "__reactEvents$" + randomKey;
                var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
                var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
                function detachDeletedInstance(node) {
                    delete node[internalInstanceKey];
                    delete node[internalPropsKey];
                    delete node[internalEventHandlersKey];
                    delete node[internalEventHandlerListenersKey];
                    delete node[internalEventHandlesSetKey];
                }
                function precacheFiberNode(hostInst, node) {
                    node[internalInstanceKey] = hostInst;
                }
                function markContainerAsRoot(hostRoot, node) {
                    node[internalContainerInstanceKey] = hostRoot;
                }
                function unmarkContainerAsRoot(node) {
                    node[internalContainerInstanceKey] = null;
                }
                function isContainerMarkedAsRoot(node) {
                    return !!node[internalContainerInstanceKey];
                }
                function getClosestInstanceFromNode(targetNode) {
                    var targetInst = targetNode[internalInstanceKey];
                    if (targetInst) {
                        return targetInst;
                    }
                    var parentNode = targetNode.parentNode;
                    while (parentNode) {
                        targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
                        if (targetInst) {
                            var alternate = targetInst.alternate;
                            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                                var suspenseInstance = getParentSuspenseInstance(targetNode);
                                while (suspenseInstance !== null) {
                                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                                    if (targetSuspenseInst) {
                                        return targetSuspenseInst;
                                    }
                                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                                }
                            }
                            return targetInst;
                        }
                        targetNode = parentNode;
                        parentNode = targetNode.parentNode;
                    }
                    return null;
                }
                function getInstanceFromNode(node) {
                    var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
                    if (inst) {
                        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                            return inst;
                        } else {
                            return null;
                        }
                    }
                    return null;
                }
                function getNodeFromInstance(inst) {
                    if (inst.tag === HostComponent || inst.tag === HostText) {
                        return inst.stateNode;
                    }
                    throw new Error("getNodeFromInstance: Invalid argument.");
                }
                function getFiberCurrentPropsFromNode(node) {
                    return node[internalPropsKey] || null;
                }
                function updateFiberProps(node, props) {
                    node[internalPropsKey] = props;
                }
                function getEventListenerSet(node) {
                    var elementListenerSet = node[internalEventHandlersKey];
                    if (elementListenerSet === undefined) {
                        elementListenerSet = node[internalEventHandlersKey] = new Set;
                    }
                    return elementListenerSet;
                }
                var loggedTypeFailures = {};
                var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
                function setCurrentlyValidatingElement(element) {
                    {
                        if (element) {
                            var owner = element._owner;
                            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                        } else {
                            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                        }
                    }
                }
                function checkPropTypes(typeSpecs, values, location, componentName, element) {
                    {
                        var has = Function.call.bind(hasOwnProperty);
                        for (var typeSpecName in typeSpecs) {
                            if (has(typeSpecs, typeSpecName)) {
                                var error$1 = void 0;
                                try {
                                    if (typeof typeSpecs[typeSpecName] !== "function") {
                                        var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                                        err.name = "Invariant Violation";
                                        throw err;
                                    }
                                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                                } catch (ex) {
                                    error$1 = ex;
                                }
                                if (error$1 && !(error$1 instanceof Error)) {
                                    setCurrentlyValidatingElement(element);
                                    error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                                    setCurrentlyValidatingElement(null);
                                }
                                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                                    loggedTypeFailures[error$1.message] = true;
                                    setCurrentlyValidatingElement(element);
                                    error("Failed %s type: %s", location, error$1.message);
                                    setCurrentlyValidatingElement(null);
                                }
                            }
                        }
                    }
                }
                var valueStack = [];
                var fiberStack;
                {
                    fiberStack = [];
                }
                var index = -1;
                function createCursor(defaultValue) {
                    return {
                        current: defaultValue
                    };
                }
                function pop(cursor, fiber) {
                    if (index < 0) {
                        {
                            error("Unexpected pop.");
                        }
                        return;
                    }
                    {
                        if (fiber !== fiberStack[index]) {
                            error("Unexpected Fiber popped.");
                        }
                    }
                    cursor.current = valueStack[index];
                    valueStack[index] = null;
                    {
                        fiberStack[index] = null;
                    }
                    index--;
                }
                function push(cursor, value, fiber) {
                    index++;
                    valueStack[index] = cursor.current;
                    {
                        fiberStack[index] = fiber;
                    }
                    cursor.current = value;
                }
                var warnedAboutMissingGetChildContext;
                {
                    warnedAboutMissingGetChildContext = {};
                }
                var emptyContextObject = {};
                {
                    Object.freeze(emptyContextObject);
                }
                var contextStackCursor = createCursor(emptyContextObject);
                var didPerformWorkStackCursor = createCursor(false);
                var previousContext = emptyContextObject;
                function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
                    {
                        if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                            return previousContext;
                        }
                        return contextStackCursor.current;
                    }
                }
                function cacheContext(workInProgress, unmaskedContext, maskedContext) {
                    {
                        var instance = workInProgress.stateNode;
                        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
                        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
                    }
                }
                function getMaskedContext(workInProgress, unmaskedContext) {
                    {
                        var type = workInProgress.type;
                        var contextTypes = type.contextTypes;
                        if (!contextTypes) {
                            return emptyContextObject;
                        }
                        var instance = workInProgress.stateNode;
                        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                            return instance.__reactInternalMemoizedMaskedChildContext;
                        }
                        var context = {};
                        for (var key in contextTypes) {
                            context[key] = unmaskedContext[key];
                        }
                        {
                            var name = getComponentNameFromFiber(workInProgress) || "Unknown";
                            checkPropTypes(contextTypes, context, "context", name);
                        }
                        if (instance) {
                            cacheContext(workInProgress, unmaskedContext, context);
                        }
                        return context;
                    }
                }
                function hasContextChanged() {
                    {
                        return didPerformWorkStackCursor.current;
                    }
                }
                function isContextProvider(type) {
                    {
                        var childContextTypes = type.childContextTypes;
                        return childContextTypes !== null && childContextTypes !== undefined;
                    }
                }
                function popContext(fiber) {
                    {
                        pop(didPerformWorkStackCursor, fiber);
                        pop(contextStackCursor, fiber);
                    }
                }
                function popTopLevelContextObject(fiber) {
                    {
                        pop(didPerformWorkStackCursor, fiber);
                        pop(contextStackCursor, fiber);
                    }
                }
                function pushTopLevelContextObject(fiber, context, didChange) {
                    {
                        if (contextStackCursor.current !== emptyContextObject) {
                            throw new Error("Unexpected context found on stack. " + "This error is likely caused by a bug in React. Please file an issue.");
                        }
                        push(contextStackCursor, context, fiber);
                        push(didPerformWorkStackCursor, didChange, fiber);
                    }
                }
                function processChildContext(fiber, type, parentContext) {
                    {
                        var instance = fiber.stateNode;
                        var childContextTypes = type.childContextTypes;
                        if (typeof instance.getChildContext !== "function") {
                            {
                                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                                if (!warnedAboutMissingGetChildContext[componentName]) {
                                    warnedAboutMissingGetChildContext[componentName] = true;
                                    error("%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
                                }
                            }
                            return parentContext;
                        }
                        var childContext = instance.getChildContext();
                        for (var contextKey in childContext) {
                            if (!(contextKey in childContextTypes)) {
                                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                            }
                        }
                        {
                            var name = getComponentNameFromFiber(fiber) || "Unknown";
                            checkPropTypes(childContextTypes, childContext, "child context", name);
                        }
                        return assign({}, parentContext, childContext);
                    }
                }
                function pushContextProvider(workInProgress) {
                    {
                        var instance = workInProgress.stateNode;
                        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
                        previousContext = contextStackCursor.current;
                        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
                        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
                        return true;
                    }
                }
                function invalidateContextProvider(workInProgress, type, didChange) {
                    {
                        var instance = workInProgress.stateNode;
                        if (!instance) {
                            throw new Error("Expected to have an instance by this point. " + "This error is likely caused by a bug in React. Please file an issue.");
                        }
                        if (didChange) {
                            var mergedContext = processChildContext(workInProgress, type, previousContext);
                            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                            pop(didPerformWorkStackCursor, workInProgress);
                            pop(contextStackCursor, workInProgress);
                            push(contextStackCursor, mergedContext, workInProgress);
                            push(didPerformWorkStackCursor, didChange, workInProgress);
                        } else {
                            pop(didPerformWorkStackCursor, workInProgress);
                            push(didPerformWorkStackCursor, didChange, workInProgress);
                        }
                    }
                }
                function findCurrentUnmaskedContext(fiber) {
                    {
                        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                            throw new Error("Expected subtree parent to be a mounted class component. " + "This error is likely caused by a bug in React. Please file an issue.");
                        }
                        var node = fiber;
                        do {
                            switch (node.tag) {
                              case HostRoot:
                                return node.stateNode.context;

                              case ClassComponent:
                                {
                                    var Component = node.type;
                                    if (isContextProvider(Component)) {
                                        return node.stateNode.__reactInternalMemoizedMergedChildContext;
                                    }
                                    break;
                                }
                            }
                            node = node.return;
                        } while (node !== null);
                        throw new Error("Found unexpected detached subtree parent. " + "This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
                var LegacyRoot = 0;
                var ConcurrentRoot = 1;
                var syncQueue = null;
                var includesLegacySyncCallbacks = false;
                var isFlushingSyncQueue = false;
                function scheduleSyncCallback(callback) {
                    if (syncQueue === null) {
                        syncQueue = [ callback ];
                    } else {
                        syncQueue.push(callback);
                    }
                }
                function scheduleLegacySyncCallback(callback) {
                    includesLegacySyncCallbacks = true;
                    scheduleSyncCallback(callback);
                }
                function flushSyncCallbacksOnlyInLegacyMode() {
                    if (includesLegacySyncCallbacks) {
                        flushSyncCallbacks();
                    }
                }
                function flushSyncCallbacks() {
                    if (!isFlushingSyncQueue && syncQueue !== null) {
                        isFlushingSyncQueue = true;
                        var i = 0;
                        var previousUpdatePriority = getCurrentUpdatePriority();
                        try {
                            var isSync = true;
                            var queue = syncQueue;
                            setCurrentUpdatePriority(DiscreteEventPriority);
                            for (;i < queue.length; i++) {
                                var callback = queue[i];
                                do {
                                    callback = callback(isSync);
                                } while (callback !== null);
                            }
                            syncQueue = null;
                            includesLegacySyncCallbacks = false;
                        } catch (error) {
                            if (syncQueue !== null) {
                                syncQueue = syncQueue.slice(i + 1);
                            }
                            scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                            throw error;
                        } finally {
                            setCurrentUpdatePriority(previousUpdatePriority);
                            isFlushingSyncQueue = false;
                        }
                    }
                    return null;
                }
                var forkStack = [];
                var forkStackIndex = 0;
                var treeForkProvider = null;
                var treeForkCount = 0;
                var idStack = [];
                var idStackIndex = 0;
                var treeContextProvider = null;
                var treeContextId = 1;
                var treeContextOverflow = "";
                function isForkedChild(workInProgress) {
                    warnIfNotHydrating();
                    return (workInProgress.flags & Forked) !== NoFlags;
                }
                function getForksAtLevel(workInProgress) {
                    warnIfNotHydrating();
                    return treeForkCount;
                }
                function getTreeId() {
                    var overflow = treeContextOverflow;
                    var idWithLeadingBit = treeContextId;
                    var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
                    return id.toString(32) + overflow;
                }
                function pushTreeFork(workInProgress, totalChildren) {
                    warnIfNotHydrating();
                    forkStack[forkStackIndex++] = treeForkCount;
                    forkStack[forkStackIndex++] = treeForkProvider;
                    treeForkProvider = workInProgress;
                    treeForkCount = totalChildren;
                }
                function pushTreeId(workInProgress, totalChildren, index) {
                    warnIfNotHydrating();
                    idStack[idStackIndex++] = treeContextId;
                    idStack[idStackIndex++] = treeContextOverflow;
                    idStack[idStackIndex++] = treeContextProvider;
                    treeContextProvider = workInProgress;
                    var baseIdWithLeadingBit = treeContextId;
                    var baseOverflow = treeContextOverflow;
                    var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
                    var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
                    var slot = index + 1;
                    var length = getBitLength(totalChildren) + baseLength;
                    if (length > 30) {
                        var numberOfOverflowBits = baseLength - baseLength % 5;
                        var newOverflowBits = (1 << numberOfOverflowBits) - 1;
                        var newOverflow = (baseId & newOverflowBits).toString(32);
                        var restOfBaseId = baseId >> numberOfOverflowBits;
                        var restOfBaseLength = baseLength - numberOfOverflowBits;
                        var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
                        var restOfNewBits = slot << restOfBaseLength;
                        var id = restOfNewBits | restOfBaseId;
                        var overflow = newOverflow + baseOverflow;
                        treeContextId = 1 << restOfLength | id;
                        treeContextOverflow = overflow;
                    } else {
                        var newBits = slot << baseLength;
                        var _id = newBits | baseId;
                        var _overflow = baseOverflow;
                        treeContextId = 1 << length | _id;
                        treeContextOverflow = _overflow;
                    }
                }
                function pushMaterializedTreeId(workInProgress) {
                    warnIfNotHydrating();
                    var returnFiber = workInProgress.return;
                    if (returnFiber !== null) {
                        var numberOfForks = 1;
                        var slotIndex = 0;
                        pushTreeFork(workInProgress, numberOfForks);
                        pushTreeId(workInProgress, numberOfForks, slotIndex);
                    }
                }
                function getBitLength(number) {
                    return 32 - clz32(number);
                }
                function getLeadingBit(id) {
                    return 1 << getBitLength(id) - 1;
                }
                function popTreeContext(workInProgress) {
                    while (workInProgress === treeForkProvider) {
                        treeForkProvider = forkStack[--forkStackIndex];
                        forkStack[forkStackIndex] = null;
                        treeForkCount = forkStack[--forkStackIndex];
                        forkStack[forkStackIndex] = null;
                    }
                    while (workInProgress === treeContextProvider) {
                        treeContextProvider = idStack[--idStackIndex];
                        idStack[idStackIndex] = null;
                        treeContextOverflow = idStack[--idStackIndex];
                        idStack[idStackIndex] = null;
                        treeContextId = idStack[--idStackIndex];
                        idStack[idStackIndex] = null;
                    }
                }
                function getSuspendedTreeContext() {
                    warnIfNotHydrating();
                    if (treeContextProvider !== null) {
                        return {
                            id: treeContextId,
                            overflow: treeContextOverflow
                        };
                    } else {
                        return null;
                    }
                }
                function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
                    warnIfNotHydrating();
                    idStack[idStackIndex++] = treeContextId;
                    idStack[idStackIndex++] = treeContextOverflow;
                    idStack[idStackIndex++] = treeContextProvider;
                    treeContextId = suspendedContext.id;
                    treeContextOverflow = suspendedContext.overflow;
                    treeContextProvider = workInProgress;
                }
                function warnIfNotHydrating() {
                    {
                        if (!getIsHydrating()) {
                            error("Expected to be hydrating. This is a bug in React. Please file " + "an issue.");
                        }
                    }
                }
                var hydrationParentFiber = null;
                var nextHydratableInstance = null;
                var isHydrating = false;
                var didSuspendOrErrorDEV = false;
                var hydrationErrors = null;
                function warnIfHydrating() {
                    {
                        if (isHydrating) {
                            error("We should not be hydrating here. This is a bug in React. Please file a bug.");
                        }
                    }
                }
                function markDidThrowWhileHydratingDEV() {
                    {
                        didSuspendOrErrorDEV = true;
                    }
                }
                function didSuspendOrErrorWhileHydratingDEV() {
                    {
                        return didSuspendOrErrorDEV;
                    }
                }
                function enterHydrationState(fiber) {
                    var parentInstance = fiber.stateNode.containerInfo;
                    nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
                    hydrationParentFiber = fiber;
                    isHydrating = true;
                    hydrationErrors = null;
                    didSuspendOrErrorDEV = false;
                    return true;
                }
                function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
                    nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
                    hydrationParentFiber = fiber;
                    isHydrating = true;
                    hydrationErrors = null;
                    didSuspendOrErrorDEV = false;
                    if (treeContext !== null) {
                        restoreSuspendedTreeContext(fiber, treeContext);
                    }
                    return true;
                }
                function warnUnhydratedInstance(returnFiber, instance) {
                    {
                        switch (returnFiber.tag) {
                          case HostRoot:
                            {
                                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                                break;
                            }

                          case HostComponent:
                            {
                                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                                break;
                            }

                          case SuspenseComponent:
                            {
                                var suspenseState = returnFiber.memoizedState;
                                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                                break;
                            }
                        }
                    }
                }
                function deleteHydratableInstance(returnFiber, instance) {
                    warnUnhydratedInstance(returnFiber, instance);
                    var childToDelete = createFiberFromHostInstanceForDeletion();
                    childToDelete.stateNode = instance;
                    childToDelete.return = returnFiber;
                    var deletions = returnFiber.deletions;
                    if (deletions === null) {
                        returnFiber.deletions = [ childToDelete ];
                        returnFiber.flags |= ChildDeletion;
                    } else {
                        deletions.push(childToDelete);
                    }
                }
                function warnNonhydratedInstance(returnFiber, fiber) {
                    {
                        if (didSuspendOrErrorDEV) {
                            return;
                        }
                        switch (returnFiber.tag) {
                          case HostRoot:
                            {
                                var parentContainer = returnFiber.stateNode.containerInfo;
                                switch (fiber.tag) {
                                  case HostComponent:
                                    var type = fiber.type;
                                    fiber.pendingProps;
                                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                                    break;

                                  case HostText:
                                    var text = fiber.pendingProps;
                                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                                    break;
                                }
                                break;
                            }

                          case HostComponent:
                            {
                                var parentType = returnFiber.type;
                                var parentProps = returnFiber.memoizedProps;
                                var parentInstance = returnFiber.stateNode;
                                switch (fiber.tag) {
                                  case HostComponent:
                                    {
                                        var _type = fiber.type;
                                        var _props = fiber.pendingProps;
                                        var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                                        break;
                                    }

                                  case HostText:
                                    {
                                        var _text = fiber.pendingProps;
                                        var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                                        break;
                                    }
                                }
                                break;
                            }

                          case SuspenseComponent:
                            {
                                var suspenseState = returnFiber.memoizedState;
                                var _parentInstance = suspenseState.dehydrated;
                                if (_parentInstance !== null) switch (fiber.tag) {
                                  case HostComponent:
                                    var _type2 = fiber.type;
                                    fiber.pendingProps;
                                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                                    break;

                                  case HostText:
                                    var _text2 = fiber.pendingProps;
                                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                                    break;
                                }
                                break;
                            }

                          default:
                            return;
                        }
                    }
                }
                function insertNonHydratedInstance(returnFiber, fiber) {
                    fiber.flags = fiber.flags & ~Hydrating | Placement;
                    warnNonhydratedInstance(returnFiber, fiber);
                }
                function tryHydrate(fiber, nextInstance) {
                    switch (fiber.tag) {
                      case HostComponent:
                        {
                            var type = fiber.type;
                            fiber.pendingProps;
                            var instance = canHydrateInstance(nextInstance, type);
                            if (instance !== null) {
                                fiber.stateNode = instance;
                                hydrationParentFiber = fiber;
                                nextHydratableInstance = getFirstHydratableChild(instance);
                                return true;
                            }
                            return false;
                        }

                      case HostText:
                        {
                            var text = fiber.pendingProps;
                            var textInstance = canHydrateTextInstance(nextInstance, text);
                            if (textInstance !== null) {
                                fiber.stateNode = textInstance;
                                hydrationParentFiber = fiber;
                                nextHydratableInstance = null;
                                return true;
                            }
                            return false;
                        }

                      case SuspenseComponent:
                        {
                            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                            if (suspenseInstance !== null) {
                                var suspenseState = {
                                    dehydrated: suspenseInstance,
                                    treeContext: getSuspendedTreeContext(),
                                    retryLane: OffscreenLane
                                };
                                fiber.memoizedState = suspenseState;
                                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                                dehydratedFragment.return = fiber;
                                fiber.child = dehydratedFragment;
                                hydrationParentFiber = fiber;
                                nextHydratableInstance = null;
                                return true;
                            }
                            return false;
                        }

                      default:
                        return false;
                    }
                }
                function shouldClientRenderOnMismatch(fiber) {
                    return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
                }
                function throwOnHydrationMismatch(fiber) {
                    throw new Error("Hydration failed because the initial UI does not match what was " + "rendered on the server.");
                }
                function tryToClaimNextHydratableInstance(fiber) {
                    if (!isHydrating) {
                        return;
                    }
                    var nextInstance = nextHydratableInstance;
                    if (!nextInstance) {
                        if (shouldClientRenderOnMismatch(fiber)) {
                            warnNonhydratedInstance(hydrationParentFiber, fiber);
                            throwOnHydrationMismatch();
                        }
                        insertNonHydratedInstance(hydrationParentFiber, fiber);
                        isHydrating = false;
                        hydrationParentFiber = fiber;
                        return;
                    }
                    var firstAttemptedInstance = nextInstance;
                    if (!tryHydrate(fiber, nextInstance)) {
                        if (shouldClientRenderOnMismatch(fiber)) {
                            warnNonhydratedInstance(hydrationParentFiber, fiber);
                            throwOnHydrationMismatch();
                        }
                        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
                        var prevHydrationParentFiber = hydrationParentFiber;
                        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                            insertNonHydratedInstance(hydrationParentFiber, fiber);
                            isHydrating = false;
                            hydrationParentFiber = fiber;
                            return;
                        }
                        deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
                    }
                }
                function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
                    var instance = fiber.stateNode;
                    var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
                    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
                    fiber.updateQueue = updatePayload;
                    if (updatePayload !== null) {
                        return true;
                    }
                    return false;
                }
                function prepareToHydrateHostTextInstance(fiber) {
                    var textInstance = fiber.stateNode;
                    var textContent = fiber.memoizedProps;
                    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
                    if (shouldUpdate) {
                        var returnFiber = hydrationParentFiber;
                        if (returnFiber !== null) {
                            switch (returnFiber.tag) {
                              case HostRoot:
                                {
                                    var parentContainer = returnFiber.stateNode.containerInfo;
                                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                                    break;
                                }

                              case HostComponent:
                                {
                                    var parentType = returnFiber.type;
                                    var parentProps = returnFiber.memoizedProps;
                                    var parentInstance = returnFiber.stateNode;
                                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                                    break;
                                }
                            }
                        }
                    }
                    return shouldUpdate;
                }
                function prepareToHydrateHostSuspenseInstance(fiber) {
                    var suspenseState = fiber.memoizedState;
                    var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
                    if (!suspenseInstance) {
                        throw new Error("Expected to have a hydrated suspense instance. " + "This error is likely caused by a bug in React. Please file an issue.");
                    }
                    hydrateSuspenseInstance(suspenseInstance, fiber);
                }
                function skipPastDehydratedSuspenseInstance(fiber) {
                    var suspenseState = fiber.memoizedState;
                    var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
                    if (!suspenseInstance) {
                        throw new Error("Expected to have a hydrated suspense instance. " + "This error is likely caused by a bug in React. Please file an issue.");
                    }
                    return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
                }
                function popToNextHostParent(fiber) {
                    var parent = fiber.return;
                    while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
                        parent = parent.return;
                    }
                    hydrationParentFiber = parent;
                }
                function popHydrationState(fiber) {
                    if (fiber !== hydrationParentFiber) {
                        return false;
                    }
                    if (!isHydrating) {
                        popToNextHostParent(fiber);
                        isHydrating = true;
                        return false;
                    }
                    if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
                        var nextInstance = nextHydratableInstance;
                        if (nextInstance) {
                            if (shouldClientRenderOnMismatch(fiber)) {
                                warnIfUnhydratedTailNodes(fiber);
                                throwOnHydrationMismatch();
                            } else {
                                while (nextInstance) {
                                    deleteHydratableInstance(fiber, nextInstance);
                                    nextInstance = getNextHydratableSibling(nextInstance);
                                }
                            }
                        }
                    }
                    popToNextHostParent(fiber);
                    if (fiber.tag === SuspenseComponent) {
                        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
                    } else {
                        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
                    }
                    return true;
                }
                function hasUnhydratedTailNodes() {
                    return isHydrating && nextHydratableInstance !== null;
                }
                function warnIfUnhydratedTailNodes(fiber) {
                    var nextInstance = nextHydratableInstance;
                    while (nextInstance) {
                        warnUnhydratedInstance(fiber, nextInstance);
                        nextInstance = getNextHydratableSibling(nextInstance);
                    }
                }
                function resetHydrationState() {
                    hydrationParentFiber = null;
                    nextHydratableInstance = null;
                    isHydrating = false;
                    didSuspendOrErrorDEV = false;
                }
                function upgradeHydrationErrorsToRecoverable() {
                    if (hydrationErrors !== null) {
                        queueRecoverableErrors(hydrationErrors);
                        hydrationErrors = null;
                    }
                }
                function getIsHydrating() {
                    return isHydrating;
                }
                function queueHydrationError(error) {
                    if (hydrationErrors === null) {
                        hydrationErrors = [ error ];
                    } else {
                        hydrationErrors.push(error);
                    }
                }
                var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
                var NoTransition = null;
                function requestCurrentTransition() {
                    return ReactCurrentBatchConfig$1.transition;
                }
                var ReactStrictModeWarnings = {
                    recordUnsafeLifecycleWarnings: function(fiber, instance) {},
                    flushPendingUnsafeLifecycleWarnings: function() {},
                    recordLegacyContextWarning: function(fiber, instance) {},
                    flushLegacyContextWarning: function() {},
                    discardPendingWarnings: function() {}
                };
                {
                    var findStrictRoot = function(fiber) {
                        var maybeStrictRoot = null;
                        var node = fiber;
                        while (node !== null) {
                            if (node.mode & StrictLegacyMode) {
                                maybeStrictRoot = node;
                            }
                            node = node.return;
                        }
                        return maybeStrictRoot;
                    };
                    var setToSortedString = function(set) {
                        var array = [];
                        set.forEach((function(value) {
                            array.push(value);
                        }));
                        return array.sort().join(", ");
                    };
                    var pendingComponentWillMountWarnings = [];
                    var pendingUNSAFE_ComponentWillMountWarnings = [];
                    var pendingComponentWillReceivePropsWarnings = [];
                    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                    var pendingComponentWillUpdateWarnings = [];
                    var pendingUNSAFE_ComponentWillUpdateWarnings = [];
                    var didWarnAboutUnsafeLifecycles = new Set;
                    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
                        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                            return;
                        }
                        if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                            pendingComponentWillMountWarnings.push(fiber);
                        }
                        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
                        }
                        if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                            pendingComponentWillReceivePropsWarnings.push(fiber);
                        }
                        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
                        }
                        if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                            pendingComponentWillUpdateWarnings.push(fiber);
                        }
                        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
                        }
                    };
                    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
                        var componentWillMountUniqueNames = new Set;
                        if (pendingComponentWillMountWarnings.length > 0) {
                            pendingComponentWillMountWarnings.forEach((function(fiber) {
                                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            }));
                            pendingComponentWillMountWarnings = [];
                        }
                        var UNSAFE_componentWillMountUniqueNames = new Set;
                        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                            pendingUNSAFE_ComponentWillMountWarnings.forEach((function(fiber) {
                                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            }));
                            pendingUNSAFE_ComponentWillMountWarnings = [];
                        }
                        var componentWillReceivePropsUniqueNames = new Set;
                        if (pendingComponentWillReceivePropsWarnings.length > 0) {
                            pendingComponentWillReceivePropsWarnings.forEach((function(fiber) {
                                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            }));
                            pendingComponentWillReceivePropsWarnings = [];
                        }
                        var UNSAFE_componentWillReceivePropsUniqueNames = new Set;
                        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach((function(fiber) {
                                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            }));
                            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                        }
                        var componentWillUpdateUniqueNames = new Set;
                        if (pendingComponentWillUpdateWarnings.length > 0) {
                            pendingComponentWillUpdateWarnings.forEach((function(fiber) {
                                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            }));
                            pendingComponentWillUpdateWarnings = [];
                        }
                        var UNSAFE_componentWillUpdateUniqueNames = new Set;
                        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                            pendingUNSAFE_ComponentWillUpdateWarnings.forEach((function(fiber) {
                                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            }));
                            pendingUNSAFE_ComponentWillUpdateWarnings = [];
                        }
                        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "\nPlease update the following components: %s", sortedNames);
                        }
                        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, " + "refactor your code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n" + "\nPlease update the following components: %s", _sortedNames);
                        }
                        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "\nPlease update the following components: %s", _sortedNames2);
                        }
                        if (componentWillMountUniqueNames.size > 0) {
                            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                            warn("componentWillMount has been renamed, and is not recommended for use. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "* Rename componentWillMount to UNSAFE_componentWillMount to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames3);
                        }
                        if (componentWillReceivePropsUniqueNames.size > 0) {
                            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                            warn("componentWillReceiveProps has been renamed, and is not recommended for use. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, refactor your " + "code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n" + "* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames4);
                        }
                        if (componentWillUpdateUniqueNames.size > 0) {
                            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                            warn("componentWillUpdate has been renamed, and is not recommended for use. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames5);
                        }
                    };
                    var pendingLegacyContextWarning = new Map;
                    var didWarnAboutLegacyContext = new Set;
                    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
                        var strictRoot = findStrictRoot(fiber);
                        if (strictRoot === null) {
                            error("Expected to find a StrictMode component in a strict mode tree. " + "This error is likely caused by a bug in React. Please file an issue.");
                            return;
                        }
                        if (didWarnAboutLegacyContext.has(fiber.type)) {
                            return;
                        }
                        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
                        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                            if (warningsForRoot === undefined) {
                                warningsForRoot = [];
                                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                            }
                            warningsForRoot.push(fiber);
                        }
                    };
                    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
                        pendingLegacyContextWarning.forEach((function(fiberArray, strictRoot) {
                            if (fiberArray.length === 0) {
                                return;
                            }
                            var firstFiber = fiberArray[0];
                            var uniqueNames = new Set;
                            fiberArray.forEach((function(fiber) {
                                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutLegacyContext.add(fiber.type);
                            }));
                            var sortedNames = setToSortedString(uniqueNames);
                            try {
                                setCurrentFiber(firstFiber);
                                error("Legacy context API has been detected within a strict-mode tree." + "\n\nThe old API will be supported in all 16.x releases, but applications " + "using it should migrate to the new version." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                            } finally {
                                resetCurrentFiber();
                            }
                        }));
                    };
                    ReactStrictModeWarnings.discardPendingWarnings = function() {
                        pendingComponentWillMountWarnings = [];
                        pendingUNSAFE_ComponentWillMountWarnings = [];
                        pendingComponentWillReceivePropsWarnings = [];
                        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                        pendingComponentWillUpdateWarnings = [];
                        pendingUNSAFE_ComponentWillUpdateWarnings = [];
                        pendingLegacyContextWarning = new Map;
                    };
                }
                function resolveDefaultProps(Component, baseProps) {
                    if (Component && Component.defaultProps) {
                        var props = assign({}, baseProps);
                        var defaultProps = Component.defaultProps;
                        for (var propName in defaultProps) {
                            if (props[propName] === undefined) {
                                props[propName] = defaultProps[propName];
                            }
                        }
                        return props;
                    }
                    return baseProps;
                }
                var valueCursor = createCursor(null);
                var rendererSigil;
                {
                    rendererSigil = {};
                }
                var currentlyRenderingFiber = null;
                var lastContextDependency = null;
                var lastFullyObservedContext = null;
                var isDisallowedContextReadInDEV = false;
                function resetContextDependencies() {
                    currentlyRenderingFiber = null;
                    lastContextDependency = null;
                    lastFullyObservedContext = null;
                    {
                        isDisallowedContextReadInDEV = false;
                    }
                }
                function enterDisallowedContextReadInDEV() {
                    {
                        isDisallowedContextReadInDEV = true;
                    }
                }
                function exitDisallowedContextReadInDEV() {
                    {
                        isDisallowedContextReadInDEV = false;
                    }
                }
                function pushProvider(providerFiber, context, nextValue) {
                    {
                        push(valueCursor, context._currentValue, providerFiber);
                        context._currentValue = nextValue;
                        {
                            if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                                error("Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.");
                            }
                            context._currentRenderer = rendererSigil;
                        }
                    }
                }
                function popProvider(context, providerFiber) {
                    var currentValue = valueCursor.current;
                    pop(valueCursor, providerFiber);
                    {
                        {
                            context._currentValue = currentValue;
                        }
                    }
                }
                function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
                    var node = parent;
                    while (node !== null) {
                        var alternate = node.alternate;
                        if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                            node.childLanes = mergeLanes(node.childLanes, renderLanes);
                            if (alternate !== null) {
                                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
                            }
                        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
                            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
                        }
                        if (node === propagationRoot) {
                            break;
                        }
                        node = node.return;
                    }
                    {
                        if (node !== propagationRoot) {
                            error("Expected to find the propagation root when scheduling context work. " + "This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                }
                function propagateContextChange(workInProgress, context, renderLanes) {
                    {
                        propagateContextChange_eager(workInProgress, context, renderLanes);
                    }
                }
                function propagateContextChange_eager(workInProgress, context, renderLanes) {
                    var fiber = workInProgress.child;
                    if (fiber !== null) {
                        fiber.return = workInProgress;
                    }
                    while (fiber !== null) {
                        var nextFiber = void 0;
                        var list = fiber.dependencies;
                        if (list !== null) {
                            nextFiber = fiber.child;
                            var dependency = list.firstContext;
                            while (dependency !== null) {
                                if (dependency.context === context) {
                                    if (fiber.tag === ClassComponent) {
                                        var lane = pickArbitraryLane(renderLanes);
                                        var update = createUpdate(NoTimestamp, lane);
                                        update.tag = ForceUpdate;
                                        var updateQueue = fiber.updateQueue;
                                        if (updateQueue === null) ; else {
                                            var sharedQueue = updateQueue.shared;
                                            var pending = sharedQueue.pending;
                                            if (pending === null) {
                                                update.next = update;
                                            } else {
                                                update.next = pending.next;
                                                pending.next = update;
                                            }
                                            sharedQueue.pending = update;
                                        }
                                    }
                                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                                    var alternate = fiber.alternate;
                                    if (alternate !== null) {
                                        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                                    }
                                    scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress);
                                    list.lanes = mergeLanes(list.lanes, renderLanes);
                                    break;
                                }
                                dependency = dependency.next;
                            }
                        } else if (fiber.tag === ContextProvider) {
                            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
                        } else if (fiber.tag === DehydratedFragment) {
                            var parentSuspense = fiber.return;
                            if (parentSuspense === null) {
                                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                            }
                            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
                            var _alternate = parentSuspense.alternate;
                            if (_alternate !== null) {
                                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
                            }
                            scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
                            nextFiber = fiber.sibling;
                        } else {
                            nextFiber = fiber.child;
                        }
                        if (nextFiber !== null) {
                            nextFiber.return = fiber;
                        } else {
                            nextFiber = fiber;
                            while (nextFiber !== null) {
                                if (nextFiber === workInProgress) {
                                    nextFiber = null;
                                    break;
                                }
                                var sibling = nextFiber.sibling;
                                if (sibling !== null) {
                                    sibling.return = nextFiber.return;
                                    nextFiber = sibling;
                                    break;
                                }
                                nextFiber = nextFiber.return;
                            }
                        }
                        fiber = nextFiber;
                    }
                }
                function prepareToReadContext(workInProgress, renderLanes) {
                    currentlyRenderingFiber = workInProgress;
                    lastContextDependency = null;
                    lastFullyObservedContext = null;
                    var dependencies = workInProgress.dependencies;
                    if (dependencies !== null) {
                        {
                            var firstContext = dependencies.firstContext;
                            if (firstContext !== null) {
                                if (includesSomeLane(dependencies.lanes, renderLanes)) {
                                    markWorkInProgressReceivedUpdate();
                                }
                                dependencies.firstContext = null;
                            }
                        }
                    }
                }
                function readContext(context) {
                    {
                        if (isDisallowedContextReadInDEV) {
                            error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
                        }
                    }
                    var value = context._currentValue;
                    if (lastFullyObservedContext === context) ; else {
                        var contextItem = {
                            context: context,
                            memoizedValue: value,
                            next: null
                        };
                        if (lastContextDependency === null) {
                            if (currentlyRenderingFiber === null) {
                                throw new Error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
                            }
                            lastContextDependency = contextItem;
                            currentlyRenderingFiber.dependencies = {
                                lanes: NoLanes,
                                firstContext: contextItem
                            };
                        } else {
                            lastContextDependency = lastContextDependency.next = contextItem;
                        }
                    }
                    return value;
                }
                var concurrentQueues = null;
                function pushConcurrentUpdateQueue(queue) {
                    if (concurrentQueues === null) {
                        concurrentQueues = [ queue ];
                    } else {
                        concurrentQueues.push(queue);
                    }
                }
                function finishQueueingConcurrentUpdates() {
                    if (concurrentQueues !== null) {
                        for (var i = 0; i < concurrentQueues.length; i++) {
                            var queue = concurrentQueues[i];
                            var lastInterleavedUpdate = queue.interleaved;
                            if (lastInterleavedUpdate !== null) {
                                queue.interleaved = null;
                                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                                var lastPendingUpdate = queue.pending;
                                if (lastPendingUpdate !== null) {
                                    var firstPendingUpdate = lastPendingUpdate.next;
                                    lastPendingUpdate.next = firstInterleavedUpdate;
                                    lastInterleavedUpdate.next = firstPendingUpdate;
                                }
                                queue.pending = lastInterleavedUpdate;
                            }
                        }
                        concurrentQueues = null;
                    }
                }
                function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
                    var interleaved = queue.interleaved;
                    if (interleaved === null) {
                        update.next = update;
                        pushConcurrentUpdateQueue(queue);
                    } else {
                        update.next = interleaved.next;
                        interleaved.next = update;
                    }
                    queue.interleaved = update;
                    return markUpdateLaneFromFiberToRoot(fiber, lane);
                }
                function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
                    var interleaved = queue.interleaved;
                    if (interleaved === null) {
                        update.next = update;
                        pushConcurrentUpdateQueue(queue);
                    } else {
                        update.next = interleaved.next;
                        interleaved.next = update;
                    }
                    queue.interleaved = update;
                }
                function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
                    var interleaved = queue.interleaved;
                    if (interleaved === null) {
                        update.next = update;
                        pushConcurrentUpdateQueue(queue);
                    } else {
                        update.next = interleaved.next;
                        interleaved.next = update;
                    }
                    queue.interleaved = update;
                    return markUpdateLaneFromFiberToRoot(fiber, lane);
                }
                function enqueueConcurrentRenderForLane(fiber, lane) {
                    return markUpdateLaneFromFiberToRoot(fiber, lane);
                }
                var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
                function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
                    var alternate = sourceFiber.alternate;
                    if (alternate !== null) {
                        alternate.lanes = mergeLanes(alternate.lanes, lane);
                    }
                    {
                        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                        }
                    }
                    var node = sourceFiber;
                    var parent = sourceFiber.return;
                    while (parent !== null) {
                        parent.childLanes = mergeLanes(parent.childLanes, lane);
                        alternate = parent.alternate;
                        if (alternate !== null) {
                            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
                        } else {
                            {
                                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                                }
                            }
                        }
                        node = parent;
                        parent = parent.return;
                    }
                    if (node.tag === HostRoot) {
                        var root = node.stateNode;
                        return root;
                    } else {
                        return null;
                    }
                }
                var UpdateState = 0;
                var ReplaceState = 1;
                var ForceUpdate = 2;
                var CaptureUpdate = 3;
                var hasForceUpdate = false;
                var didWarnUpdateInsideUpdate;
                var currentlyProcessingQueue;
                {
                    didWarnUpdateInsideUpdate = false;
                    currentlyProcessingQueue = null;
                }
                function initializeUpdateQueue(fiber) {
                    var queue = {
                        baseState: fiber.memoizedState,
                        firstBaseUpdate: null,
                        lastBaseUpdate: null,
                        shared: {
                            pending: null,
                            interleaved: null,
                            lanes: NoLanes
                        },
                        effects: null
                    };
                    fiber.updateQueue = queue;
                }
                function cloneUpdateQueue(current, workInProgress) {
                    var queue = workInProgress.updateQueue;
                    var currentQueue = current.updateQueue;
                    if (queue === currentQueue) {
                        var clone = {
                            baseState: currentQueue.baseState,
                            firstBaseUpdate: currentQueue.firstBaseUpdate,
                            lastBaseUpdate: currentQueue.lastBaseUpdate,
                            shared: currentQueue.shared,
                            effects: currentQueue.effects
                        };
                        workInProgress.updateQueue = clone;
                    }
                }
                function createUpdate(eventTime, lane) {
                    var update = {
                        eventTime: eventTime,
                        lane: lane,
                        tag: UpdateState,
                        payload: null,
                        callback: null,
                        next: null
                    };
                    return update;
                }
                function enqueueUpdate(fiber, update, lane) {
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) {
                        return null;
                    }
                    var sharedQueue = updateQueue.shared;
                    {
                        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                            error("An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
                            didWarnUpdateInsideUpdate = true;
                        }
                    }
                    if (isUnsafeClassRenderPhaseUpdate()) {
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                            update.next = update;
                        } else {
                            update.next = pending.next;
                            pending.next = update;
                        }
                        sharedQueue.pending = update;
                        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
                    } else {
                        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
                    }
                }
                function entangleTransitions(root, fiber, lane) {
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) {
                        return;
                    }
                    var sharedQueue = updateQueue.shared;
                    if (isTransitionLane(lane)) {
                        var queueLanes = sharedQueue.lanes;
                        queueLanes = intersectLanes(queueLanes, root.pendingLanes);
                        var newQueueLanes = mergeLanes(queueLanes, lane);
                        sharedQueue.lanes = newQueueLanes;
                        markRootEntangled(root, newQueueLanes);
                    }
                }
                function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
                    var queue = workInProgress.updateQueue;
                    var current = workInProgress.alternate;
                    if (current !== null) {
                        var currentQueue = current.updateQueue;
                        if (queue === currentQueue) {
                            var newFirst = null;
                            var newLast = null;
                            var firstBaseUpdate = queue.firstBaseUpdate;
                            if (firstBaseUpdate !== null) {
                                var update = firstBaseUpdate;
                                do {
                                    var clone = {
                                        eventTime: update.eventTime,
                                        lane: update.lane,
                                        tag: update.tag,
                                        payload: update.payload,
                                        callback: update.callback,
                                        next: null
                                    };
                                    if (newLast === null) {
                                        newFirst = newLast = clone;
                                    } else {
                                        newLast.next = clone;
                                        newLast = clone;
                                    }
                                    update = update.next;
                                } while (update !== null);
                                if (newLast === null) {
                                    newFirst = newLast = capturedUpdate;
                                } else {
                                    newLast.next = capturedUpdate;
                                    newLast = capturedUpdate;
                                }
                            } else {
                                newFirst = newLast = capturedUpdate;
                            }
                            queue = {
                                baseState: currentQueue.baseState,
                                firstBaseUpdate: newFirst,
                                lastBaseUpdate: newLast,
                                shared: currentQueue.shared,
                                effects: currentQueue.effects
                            };
                            workInProgress.updateQueue = queue;
                            return;
                        }
                    }
                    var lastBaseUpdate = queue.lastBaseUpdate;
                    if (lastBaseUpdate === null) {
                        queue.firstBaseUpdate = capturedUpdate;
                    } else {
                        lastBaseUpdate.next = capturedUpdate;
                    }
                    queue.lastBaseUpdate = capturedUpdate;
                }
                function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
                    switch (update.tag) {
                      case ReplaceState:
                        {
                            var payload = update.payload;
                            if (typeof payload === "function") {
                                {
                                    enterDisallowedContextReadInDEV();
                                }
                                var nextState = payload.call(instance, prevState, nextProps);
                                {
                                    if (workInProgress.mode & StrictLegacyMode) {
                                        setIsStrictModeForDevtools(true);
                                        try {
                                            payload.call(instance, prevState, nextProps);
                                        } finally {
                                            setIsStrictModeForDevtools(false);
                                        }
                                    }
                                    exitDisallowedContextReadInDEV();
                                }
                                return nextState;
                            }
                            return payload;
                        }

                      case CaptureUpdate:
                        {
                            workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
                        }

                      case UpdateState:
                        {
                            var _payload = update.payload;
                            var partialState;
                            if (typeof _payload === "function") {
                                {
                                    enterDisallowedContextReadInDEV();
                                }
                                partialState = _payload.call(instance, prevState, nextProps);
                                {
                                    if (workInProgress.mode & StrictLegacyMode) {
                                        setIsStrictModeForDevtools(true);
                                        try {
                                            _payload.call(instance, prevState, nextProps);
                                        } finally {
                                            setIsStrictModeForDevtools(false);
                                        }
                                    }
                                    exitDisallowedContextReadInDEV();
                                }
                            } else {
                                partialState = _payload;
                            }
                            if (partialState === null || partialState === undefined) {
                                return prevState;
                            }
                            return assign({}, prevState, partialState);
                        }

                      case ForceUpdate:
                        {
                            hasForceUpdate = true;
                            return prevState;
                        }
                    }
                    return prevState;
                }
                function processUpdateQueue(workInProgress, props, instance, renderLanes) {
                    var queue = workInProgress.updateQueue;
                    hasForceUpdate = false;
                    {
                        currentlyProcessingQueue = queue.shared;
                    }
                    var firstBaseUpdate = queue.firstBaseUpdate;
                    var lastBaseUpdate = queue.lastBaseUpdate;
                    var pendingQueue = queue.shared.pending;
                    if (pendingQueue !== null) {
                        queue.shared.pending = null;
                        var lastPendingUpdate = pendingQueue;
                        var firstPendingUpdate = lastPendingUpdate.next;
                        lastPendingUpdate.next = null;
                        if (lastBaseUpdate === null) {
                            firstBaseUpdate = firstPendingUpdate;
                        } else {
                            lastBaseUpdate.next = firstPendingUpdate;
                        }
                        lastBaseUpdate = lastPendingUpdate;
                        var current = workInProgress.alternate;
                        if (current !== null) {
                            var currentQueue = current.updateQueue;
                            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                            if (currentLastBaseUpdate !== lastBaseUpdate) {
                                if (currentLastBaseUpdate === null) {
                                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                                } else {
                                    currentLastBaseUpdate.next = firstPendingUpdate;
                                }
                                currentQueue.lastBaseUpdate = lastPendingUpdate;
                            }
                        }
                    }
                    if (firstBaseUpdate !== null) {
                        var newState = queue.baseState;
                        var newLanes = NoLanes;
                        var newBaseState = null;
                        var newFirstBaseUpdate = null;
                        var newLastBaseUpdate = null;
                        var update = firstBaseUpdate;
                        do {
                            var updateLane = update.lane;
                            var updateEventTime = update.eventTime;
                            if (!isSubsetOfLanes(renderLanes, updateLane)) {
                                var clone = {
                                    eventTime: updateEventTime,
                                    lane: updateLane,
                                    tag: update.tag,
                                    payload: update.payload,
                                    callback: update.callback,
                                    next: null
                                };
                                if (newLastBaseUpdate === null) {
                                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                                    newBaseState = newState;
                                } else {
                                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                                }
                                newLanes = mergeLanes(newLanes, updateLane);
                            } else {
                                if (newLastBaseUpdate !== null) {
                                    var _clone = {
                                        eventTime: updateEventTime,
                                        lane: NoLane,
                                        tag: update.tag,
                                        payload: update.payload,
                                        callback: update.callback,
                                        next: null
                                    };
                                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                                }
                                newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                                var callback = update.callback;
                                if (callback !== null && update.lane !== NoLane) {
                                    workInProgress.flags |= Callback;
                                    var effects = queue.effects;
                                    if (effects === null) {
                                        queue.effects = [ update ];
                                    } else {
                                        effects.push(update);
                                    }
                                }
                            }
                            update = update.next;
                            if (update === null) {
                                pendingQueue = queue.shared.pending;
                                if (pendingQueue === null) {
                                    break;
                                } else {
                                    var _lastPendingUpdate = pendingQueue;
                                    var _firstPendingUpdate = _lastPendingUpdate.next;
                                    _lastPendingUpdate.next = null;
                                    update = _firstPendingUpdate;
                                    queue.lastBaseUpdate = _lastPendingUpdate;
                                    queue.shared.pending = null;
                                }
                            }
                        } while (true);
                        if (newLastBaseUpdate === null) {
                            newBaseState = newState;
                        }
                        queue.baseState = newBaseState;
                        queue.firstBaseUpdate = newFirstBaseUpdate;
                        queue.lastBaseUpdate = newLastBaseUpdate;
                        var lastInterleaved = queue.shared.interleaved;
                        if (lastInterleaved !== null) {
                            var interleaved = lastInterleaved;
                            do {
                                newLanes = mergeLanes(newLanes, interleaved.lane);
                                interleaved = interleaved.next;
                            } while (interleaved !== lastInterleaved);
                        } else if (firstBaseUpdate === null) {
                            queue.shared.lanes = NoLanes;
                        }
                        markSkippedUpdateLanes(newLanes);
                        workInProgress.lanes = newLanes;
                        workInProgress.memoizedState = newState;
                    }
                    {
                        currentlyProcessingQueue = null;
                    }
                }
                function callCallback(callback, context) {
                    if (typeof callback !== "function") {
                        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
                    }
                    callback.call(context);
                }
                function resetHasForceUpdateBeforeProcessing() {
                    hasForceUpdate = false;
                }
                function checkHasForceUpdateAfterProcessing() {
                    return hasForceUpdate;
                }
                function commitUpdateQueue(finishedWork, finishedQueue, instance) {
                    var effects = finishedQueue.effects;
                    finishedQueue.effects = null;
                    if (effects !== null) {
                        for (var i = 0; i < effects.length; i++) {
                            var effect = effects[i];
                            var callback = effect.callback;
                            if (callback !== null) {
                                effect.callback = null;
                                callCallback(callback, instance);
                            }
                        }
                    }
                }
                var fakeInternalInstance = {};
                var emptyRefsObject = (new React.Component).refs;
                var didWarnAboutStateAssignmentForComponent;
                var didWarnAboutUninitializedState;
                var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
                var didWarnAboutLegacyLifecyclesAndDerivedState;
                var didWarnAboutUndefinedDerivedState;
                var warnOnUndefinedDerivedState;
                var warnOnInvalidCallback;
                var didWarnAboutDirectlyAssigningPropsToState;
                var didWarnAboutContextTypeAndContextTypes;
                var didWarnAboutInvalidateContextType;
                {
                    didWarnAboutStateAssignmentForComponent = new Set;
                    didWarnAboutUninitializedState = new Set;
                    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set;
                    didWarnAboutLegacyLifecyclesAndDerivedState = new Set;
                    didWarnAboutDirectlyAssigningPropsToState = new Set;
                    didWarnAboutUndefinedDerivedState = new Set;
                    didWarnAboutContextTypeAndContextTypes = new Set;
                    didWarnAboutInvalidateContextType = new Set;
                    var didWarnOnInvalidCallback = new Set;
                    warnOnInvalidCallback = function(callback, callerName) {
                        if (callback === null || typeof callback === "function") {
                            return;
                        }
                        var key = callerName + "_" + callback;
                        if (!didWarnOnInvalidCallback.has(key)) {
                            didWarnOnInvalidCallback.add(key);
                            error("%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
                        }
                    };
                    warnOnUndefinedDerivedState = function(type, partialState) {
                        if (partialState === undefined) {
                            var componentName = getComponentNameFromType(type) || "Component";
                            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                                didWarnAboutUndefinedDerivedState.add(componentName);
                                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", componentName);
                            }
                        }
                    };
                    Object.defineProperty(fakeInternalInstance, "_processChildContext", {
                        enumerable: false,
                        value: function() {
                            throw new Error("_processChildContext is not available in React 16+. This likely " + "means you have multiple copies of React and are attempting to nest " + "a React 15 tree inside a React 16 tree using " + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + "to make sure you have only one copy of React (and ideally, switch " + "to ReactDOM.createPortal).");
                        }
                    });
                    Object.freeze(fakeInternalInstance);
                }
                function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
                    var prevState = workInProgress.memoizedState;
                    var partialState = getDerivedStateFromProps(nextProps, prevState);
                    {
                        if (workInProgress.mode & StrictLegacyMode) {
                            setIsStrictModeForDevtools(true);
                            try {
                                partialState = getDerivedStateFromProps(nextProps, prevState);
                            } finally {
                                setIsStrictModeForDevtools(false);
                            }
                        }
                        warnOnUndefinedDerivedState(ctor, partialState);
                    }
                    var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
                    workInProgress.memoizedState = memoizedState;
                    if (workInProgress.lanes === NoLanes) {
                        var updateQueue = workInProgress.updateQueue;
                        updateQueue.baseState = memoizedState;
                    }
                }
                var classComponentUpdater = {
                    isMounted: isMounted,
                    enqueueSetState: function(inst, payload, callback) {
                        var fiber = get(inst);
                        var eventTime = requestEventTime();
                        var lane = requestUpdateLane(fiber);
                        var update = createUpdate(eventTime, lane);
                        update.payload = payload;
                        if (callback !== undefined && callback !== null) {
                            {
                                warnOnInvalidCallback(callback, "setState");
                            }
                            update.callback = callback;
                        }
                        var root = enqueueUpdate(fiber, update, lane);
                        if (root !== null) {
                            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                            entangleTransitions(root, fiber, lane);
                        }
                        {
                            markStateUpdateScheduled(fiber, lane);
                        }
                    },
                    enqueueReplaceState: function(inst, payload, callback) {
                        var fiber = get(inst);
                        var eventTime = requestEventTime();
                        var lane = requestUpdateLane(fiber);
                        var update = createUpdate(eventTime, lane);
                        update.tag = ReplaceState;
                        update.payload = payload;
                        if (callback !== undefined && callback !== null) {
                            {
                                warnOnInvalidCallback(callback, "replaceState");
                            }
                            update.callback = callback;
                        }
                        var root = enqueueUpdate(fiber, update, lane);
                        if (root !== null) {
                            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                            entangleTransitions(root, fiber, lane);
                        }
                        {
                            markStateUpdateScheduled(fiber, lane);
                        }
                    },
                    enqueueForceUpdate: function(inst, callback) {
                        var fiber = get(inst);
                        var eventTime = requestEventTime();
                        var lane = requestUpdateLane(fiber);
                        var update = createUpdate(eventTime, lane);
                        update.tag = ForceUpdate;
                        if (callback !== undefined && callback !== null) {
                            {
                                warnOnInvalidCallback(callback, "forceUpdate");
                            }
                            update.callback = callback;
                        }
                        var root = enqueueUpdate(fiber, update, lane);
                        if (root !== null) {
                            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                            entangleTransitions(root, fiber, lane);
                        }
                        {
                            markForceUpdateScheduled(fiber, lane);
                        }
                    }
                };
                function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
                    var instance = workInProgress.stateNode;
                    if (typeof instance.shouldComponentUpdate === "function") {
                        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                        {
                            if (workInProgress.mode & StrictLegacyMode) {
                                setIsStrictModeForDevtools(true);
                                try {
                                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                                } finally {
                                    setIsStrictModeForDevtools(false);
                                }
                            }
                            if (shouldUpdate === undefined) {
                                error("%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                            }
                        }
                        return shouldUpdate;
                    }
                    if (ctor.prototype && ctor.prototype.isPureReactComponent) {
                        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
                    }
                    return true;
                }
                function checkClassInstance(workInProgress, ctor, newProps) {
                    var instance = workInProgress.stateNode;
                    {
                        var name = getComponentNameFromType(ctor) || "Component";
                        var renderPresent = instance.render;
                        if (!renderPresent) {
                            if (ctor.prototype && typeof ctor.prototype.render === "function") {
                                error("%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
                            } else {
                                error("%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
                            }
                        }
                        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                            error("getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
                        }
                        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                            error("getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
                        }
                        if (instance.propTypes) {
                            error("propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
                        }
                        if (instance.contextType) {
                            error("contextType was defined as an instance property on %s. Use a static " + "property to define contextType instead.", name);
                        }
                        {
                            if (instance.contextTypes) {
                                error("contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
                            }
                            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                                didWarnAboutContextTypeAndContextTypes.add(ctor);
                                error("%s declares both contextTypes and contextType static properties. " + "The legacy contextTypes property will be ignored.", name);
                            }
                        }
                        if (typeof instance.componentShouldUpdate === "function") {
                            error("%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);
                        }
                        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                            error("%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
                        }
                        if (typeof instance.componentDidUnmount === "function") {
                            error("%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
                        }
                        if (typeof instance.componentDidReceiveProps === "function") {
                            error("%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
                        }
                        if (typeof instance.componentWillRecieveProps === "function") {
                            error("%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
                        }
                        if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                            error("%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
                        }
                        var hasMutatedProps = instance.props !== newProps;
                        if (instance.props !== undefined && hasMutatedProps) {
                            error("%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
                        }
                        if (instance.defaultProps) {
                            error("Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). " + "This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
                        }
                        if (typeof instance.getDerivedStateFromProps === "function") {
                            error("%s: getDerivedStateFromProps() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
                        }
                        if (typeof instance.getDerivedStateFromError === "function") {
                            error("%s: getDerivedStateFromError() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
                        }
                        if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                            error("%s: getSnapshotBeforeUpdate() is defined as a static method " + "and will be ignored. Instead, declare it as an instance method.", name);
                        }
                        var _state = instance.state;
                        if (_state && (typeof _state !== "object" || isArray(_state))) {
                            error("%s.state: must be set to an object or null", name);
                        }
                        if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                            error("%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", name);
                        }
                    }
                }
                function adoptClassInstance(workInProgress, instance) {
                    instance.updater = classComponentUpdater;
                    workInProgress.stateNode = instance;
                    set(instance, workInProgress);
                    {
                        instance._reactInternalInstance = fakeInternalInstance;
                    }
                }
                function constructClassInstance(workInProgress, ctor, props) {
                    var isLegacyContextConsumer = false;
                    var unmaskedContext = emptyContextObject;
                    var context = emptyContextObject;
                    var contextType = ctor.contextType;
                    {
                        if ("contextType" in ctor) {
                            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
                            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                                didWarnAboutInvalidateContextType.add(ctor);
                                var addendum = "";
                                if (contextType === undefined) {
                                    addendum = " However, it is set to undefined. " + "This can be caused by a typo or by mixing up named and default imports. " + "This can also happen due to a circular dependency, so " + "try moving the createContext() call to a separate file.";
                                } else if (typeof contextType !== "object") {
                                    addendum = " However, it is set to a " + typeof contextType + ".";
                                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                                    addendum = " Did you accidentally pass the Context.Provider instead?";
                                } else if (contextType._context !== undefined) {
                                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                                } else {
                                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                                }
                                error("%s defines an invalid contextType. " + "contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                            }
                        }
                    }
                    if (typeof contextType === "object" && contextType !== null) {
                        context = readContext(contextType);
                    } else {
                        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                        var contextTypes = ctor.contextTypes;
                        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
                        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
                    }
                    var instance = new ctor(props, context);
                    {
                        if (workInProgress.mode & StrictLegacyMode) {
                            setIsStrictModeForDevtools(true);
                            try {
                                instance = new ctor(props, context);
                            } finally {
                                setIsStrictModeForDevtools(false);
                            }
                        }
                    }
                    var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
                    adoptClassInstance(workInProgress, instance);
                    {
                        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                            var componentName = getComponentNameFromType(ctor) || "Component";
                            if (!didWarnAboutUninitializedState.has(componentName)) {
                                didWarnAboutUninitializedState.add(componentName);
                                error("`%s` uses `getDerivedStateFromProps` but its initial state is " + "%s. This is not recommended. Instead, define the initial state by " + "assigning an object to `this.state` in the constructor of `%s`. " + "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                            }
                        }
                        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                            var foundWillMountName = null;
                            var foundWillReceivePropsName = null;
                            var foundWillUpdateName = null;
                            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                                foundWillMountName = "componentWillMount";
                            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                                foundWillMountName = "UNSAFE_componentWillMount";
                            }
                            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                                foundWillReceivePropsName = "componentWillReceiveProps";
                            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                            }
                            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                                foundWillUpdateName = "componentWillUpdate";
                            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                                foundWillUpdateName = "UNSAFE_componentWillUpdate";
                            }
                            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                                var _componentName = getComponentNameFromType(ctor) || "Component";
                                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + "%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n" + "The above lifecycles should be removed. Learn more about this warning here:\n" + "https://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                                }
                            }
                        }
                    }
                    if (isLegacyContextConsumer) {
                        cacheContext(workInProgress, unmaskedContext, context);
                    }
                    return instance;
                }
                function callComponentWillMount(workInProgress, instance) {
                    var oldState = instance.state;
                    if (typeof instance.componentWillMount === "function") {
                        instance.componentWillMount();
                    }
                    if (typeof instance.UNSAFE_componentWillMount === "function") {
                        instance.UNSAFE_componentWillMount();
                    }
                    if (oldState !== instance.state) {
                        {
                            error("%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentNameFromFiber(workInProgress) || "Component");
                        }
                        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
                    }
                }
                function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
                    var oldState = instance.state;
                    if (typeof instance.componentWillReceiveProps === "function") {
                        instance.componentWillReceiveProps(newProps, nextContext);
                    }
                    if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
                    }
                    if (instance.state !== oldState) {
                        {
                            var componentName = getComponentNameFromFiber(workInProgress) || "Component";
                            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                                didWarnAboutStateAssignmentForComponent.add(componentName);
                                error("%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
                            }
                        }
                        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
                    }
                }
                function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
                    {
                        checkClassInstance(workInProgress, ctor, newProps);
                    }
                    var instance = workInProgress.stateNode;
                    instance.props = newProps;
                    instance.state = workInProgress.memoizedState;
                    instance.refs = emptyRefsObject;
                    initializeUpdateQueue(workInProgress);
                    var contextType = ctor.contextType;
                    if (typeof contextType === "object" && contextType !== null) {
                        instance.context = readContext(contextType);
                    } else {
                        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                        instance.context = getMaskedContext(workInProgress, unmaskedContext);
                    }
                    {
                        if (instance.state === newProps) {
                            var componentName = getComponentNameFromType(ctor) || "Component";
                            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                                error("%s: It is not recommended to assign props directly to state " + "because updates to props won't be reflected in state. " + "In most cases, it is better to use props directly.", componentName);
                            }
                        }
                        if (workInProgress.mode & StrictLegacyMode) {
                            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
                        }
                        {
                            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
                        }
                    }
                    instance.state = workInProgress.memoizedState;
                    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                    if (typeof getDerivedStateFromProps === "function") {
                        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                        instance.state = workInProgress.memoizedState;
                    }
                    if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                        callComponentWillMount(workInProgress, instance);
                        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
                        instance.state = workInProgress.memoizedState;
                    }
                    if (typeof instance.componentDidMount === "function") {
                        var fiberFlags = Update;
                        {
                            fiberFlags |= LayoutStatic;
                        }
                        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {
                            fiberFlags |= MountLayoutDev;
                        }
                        workInProgress.flags |= fiberFlags;
                    }
                }
                function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
                    var instance = workInProgress.stateNode;
                    var oldProps = workInProgress.memoizedProps;
                    instance.props = oldProps;
                    var oldContext = instance.context;
                    var contextType = ctor.contextType;
                    var nextContext = emptyContextObject;
                    if (typeof contextType === "object" && contextType !== null) {
                        nextContext = readContext(contextType);
                    } else {
                        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
                    }
                    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                    var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
                    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
                        if (oldProps !== newProps || oldContext !== nextContext) {
                            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                        }
                    }
                    resetHasForceUpdateBeforeProcessing();
                    var oldState = workInProgress.memoizedState;
                    var newState = instance.state = oldState;
                    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
                    newState = workInProgress.memoizedState;
                    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
                        if (typeof instance.componentDidMount === "function") {
                            var fiberFlags = Update;
                            {
                                fiberFlags |= LayoutStatic;
                            }
                            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {
                                fiberFlags |= MountLayoutDev;
                            }
                            workInProgress.flags |= fiberFlags;
                        }
                        return false;
                    }
                    if (typeof getDerivedStateFromProps === "function") {
                        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                        newState = workInProgress.memoizedState;
                    }
                    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
                    if (shouldUpdate) {
                        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                            if (typeof instance.componentWillMount === "function") {
                                instance.componentWillMount();
                            }
                            if (typeof instance.UNSAFE_componentWillMount === "function") {
                                instance.UNSAFE_componentWillMount();
                            }
                        }
                        if (typeof instance.componentDidMount === "function") {
                            var _fiberFlags = Update;
                            {
                                _fiberFlags |= LayoutStatic;
                            }
                            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {
                                _fiberFlags |= MountLayoutDev;
                            }
                            workInProgress.flags |= _fiberFlags;
                        }
                    } else {
                        if (typeof instance.componentDidMount === "function") {
                            var _fiberFlags2 = Update;
                            {
                                _fiberFlags2 |= LayoutStatic;
                            }
                            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {
                                _fiberFlags2 |= MountLayoutDev;
                            }
                            workInProgress.flags |= _fiberFlags2;
                        }
                        workInProgress.memoizedProps = newProps;
                        workInProgress.memoizedState = newState;
                    }
                    instance.props = newProps;
                    instance.state = newState;
                    instance.context = nextContext;
                    return shouldUpdate;
                }
                function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
                    var instance = workInProgress.stateNode;
                    cloneUpdateQueue(current, workInProgress);
                    var unresolvedOldProps = workInProgress.memoizedProps;
                    var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
                    instance.props = oldProps;
                    var unresolvedNewProps = workInProgress.pendingProps;
                    var oldContext = instance.context;
                    var contextType = ctor.contextType;
                    var nextContext = emptyContextObject;
                    if (typeof contextType === "object" && contextType !== null) {
                        nextContext = readContext(contextType);
                    } else {
                        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
                    }
                    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                    var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
                    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
                        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                        }
                    }
                    resetHasForceUpdateBeforeProcessing();
                    var oldState = workInProgress.memoizedState;
                    var newState = instance.state = oldState;
                    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
                    newState = workInProgress.memoizedState;
                    if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
                        if (typeof instance.componentDidUpdate === "function") {
                            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                                workInProgress.flags |= Update;
                            }
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === "function") {
                            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                                workInProgress.flags |= Snapshot;
                            }
                        }
                        return false;
                    }
                    if (typeof getDerivedStateFromProps === "function") {
                        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                        newState = workInProgress.memoizedState;
                    }
                    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
                    if (shouldUpdate) {
                        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                            if (typeof instance.componentWillUpdate === "function") {
                                instance.componentWillUpdate(newProps, newState, nextContext);
                            }
                            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                            }
                        }
                        if (typeof instance.componentDidUpdate === "function") {
                            workInProgress.flags |= Update;
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === "function") {
                            workInProgress.flags |= Snapshot;
                        }
                    } else {
                        if (typeof instance.componentDidUpdate === "function") {
                            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                                workInProgress.flags |= Update;
                            }
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === "function") {
                            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                                workInProgress.flags |= Snapshot;
                            }
                        }
                        workInProgress.memoizedProps = newProps;
                        workInProgress.memoizedState = newState;
                    }
                    instance.props = newProps;
                    instance.state = newState;
                    instance.context = nextContext;
                    return shouldUpdate;
                }
                var didWarnAboutMaps;
                var didWarnAboutGenerators;
                var didWarnAboutStringRefs;
                var ownerHasKeyUseWarning;
                var ownerHasFunctionTypeWarning;
                var warnForMissingKey = function(child, returnFiber) {};
                {
                    didWarnAboutMaps = false;
                    didWarnAboutGenerators = false;
                    didWarnAboutStringRefs = {};
                    ownerHasKeyUseWarning = {};
                    ownerHasFunctionTypeWarning = {};
                    warnForMissingKey = function(child, returnFiber) {
                        if (child === null || typeof child !== "object") {
                            return;
                        }
                        if (!child._store || child._store.validated || child.key != null) {
                            return;
                        }
                        if (typeof child._store !== "object") {
                            throw new Error("React Component in warnForMissingKey should have a _store. " + "This error is likely caused by a bug in React. Please file an issue.");
                        }
                        child._store.validated = true;
                        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                        if (ownerHasKeyUseWarning[componentName]) {
                            return;
                        }
                        ownerHasKeyUseWarning[componentName] = true;
                        error("Each child in a list should have a unique " + '"key" prop. See https://reactjs.org/link/warning-keys for ' + "more information.");
                    };
                }
                function coerceRef(returnFiber, current, element) {
                    var mixedRef = element.ref;
                    if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
                        {
                            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                                if (!didWarnAboutStringRefs[componentName]) {
                                    {
                                        error('A string ref, "%s", has been found within a strict mode tree. ' + "String refs are a source of potential bugs and should be avoided. " + "We recommend using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                                    }
                                    didWarnAboutStringRefs[componentName] = true;
                                }
                            }
                        }
                        if (element._owner) {
                            var owner = element._owner;
                            var inst;
                            if (owner) {
                                var ownerFiber = owner;
                                if (ownerFiber.tag !== ClassComponent) {
                                    throw new Error("Function components cannot have string refs. " + "We recommend using useRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref");
                                }
                                inst = ownerFiber.stateNode;
                            }
                            if (!inst) {
                                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + "bug in React. Please file an issue.");
                            }
                            var resolvedInst = inst;
                            {
                                checkPropStringCoercion(mixedRef, "ref");
                            }
                            var stringRef = "" + mixedRef;
                            if (current !== null && current.ref !== null && typeof current.ref === "function" && current.ref._stringRef === stringRef) {
                                return current.ref;
                            }
                            var ref = function(value) {
                                var refs = resolvedInst.refs;
                                if (refs === emptyRefsObject) {
                                    refs = resolvedInst.refs = {};
                                }
                                if (value === null) {
                                    delete refs[stringRef];
                                } else {
                                    refs[stringRef] = value;
                                }
                            };
                            ref._stringRef = stringRef;
                            return ref;
                        } else {
                            if (typeof mixedRef !== "string") {
                                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                            }
                            if (!element._owner) {
                                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + " the following reasons:\n" + "1. You may be adding a ref to a function component\n" + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + "3. You have multiple copies of React loaded\n" + "See https://reactjs.org/link/refs-must-have-owner for more information.");
                            }
                        }
                    }
                    return mixedRef;
                }
                function throwOnInvalidObjectType(returnFiber, newChild) {
                    var childString = Object.prototype.toString.call(newChild);
                    throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
                }
                function warnOnFunctionType(returnFiber) {
                    {
                        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                        if (ownerHasFunctionTypeWarning[componentName]) {
                            return;
                        }
                        ownerHasFunctionTypeWarning[componentName] = true;
                        error("Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.");
                    }
                }
                function resolveLazy(lazyType) {
                    var payload = lazyType._payload;
                    var init = lazyType._init;
                    return init(payload);
                }
                function ChildReconciler(shouldTrackSideEffects) {
                    function deleteChild(returnFiber, childToDelete) {
                        if (!shouldTrackSideEffects) {
                            return;
                        }
                        var deletions = returnFiber.deletions;
                        if (deletions === null) {
                            returnFiber.deletions = [ childToDelete ];
                            returnFiber.flags |= ChildDeletion;
                        } else {
                            deletions.push(childToDelete);
                        }
                    }
                    function deleteRemainingChildren(returnFiber, currentFirstChild) {
                        if (!shouldTrackSideEffects) {
                            return null;
                        }
                        var childToDelete = currentFirstChild;
                        while (childToDelete !== null) {
                            deleteChild(returnFiber, childToDelete);
                            childToDelete = childToDelete.sibling;
                        }
                        return null;
                    }
                    function mapRemainingChildren(returnFiber, currentFirstChild) {
                        var existingChildren = new Map;
                        var existingChild = currentFirstChild;
                        while (existingChild !== null) {
                            if (existingChild.key !== null) {
                                existingChildren.set(existingChild.key, existingChild);
                            } else {
                                existingChildren.set(existingChild.index, existingChild);
                            }
                            existingChild = existingChild.sibling;
                        }
                        return existingChildren;
                    }
                    function useFiber(fiber, pendingProps) {
                        var clone = createWorkInProgress(fiber, pendingProps);
                        clone.index = 0;
                        clone.sibling = null;
                        return clone;
                    }
                    function placeChild(newFiber, lastPlacedIndex, newIndex) {
                        newFiber.index = newIndex;
                        if (!shouldTrackSideEffects) {
                            newFiber.flags |= Forked;
                            return lastPlacedIndex;
                        }
                        var current = newFiber.alternate;
                        if (current !== null) {
                            var oldIndex = current.index;
                            if (oldIndex < lastPlacedIndex) {
                                newFiber.flags |= Placement;
                                return lastPlacedIndex;
                            } else {
                                return oldIndex;
                            }
                        } else {
                            newFiber.flags |= Placement;
                            return lastPlacedIndex;
                        }
                    }
                    function placeSingleChild(newFiber) {
                        if (shouldTrackSideEffects && newFiber.alternate === null) {
                            newFiber.flags |= Placement;
                        }
                        return newFiber;
                    }
                    function updateTextNode(returnFiber, current, textContent, lanes) {
                        if (current === null || current.tag !== HostText) {
                            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                            created.return = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current, textContent);
                            existing.return = returnFiber;
                            return existing;
                        }
                    }
                    function updateElement(returnFiber, current, element, lanes) {
                        var elementType = element.type;
                        if (elementType === REACT_FRAGMENT_TYPE) {
                            return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
                        }
                        if (current !== null) {
                            if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
                                var existing = useFiber(current, element.props);
                                existing.ref = coerceRef(returnFiber, current, element);
                                existing.return = returnFiber;
                                {
                                    existing._debugSource = element._source;
                                    existing._debugOwner = element._owner;
                                }
                                return existing;
                            }
                        }
                        var created = createFiberFromElement(element, returnFiber.mode, lanes);
                        created.ref = coerceRef(returnFiber, current, element);
                        created.return = returnFiber;
                        return created;
                    }
                    function updatePortal(returnFiber, current, portal, lanes) {
                        if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                            created.return = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current, portal.children || []);
                            existing.return = returnFiber;
                            return existing;
                        }
                    }
                    function updateFragment(returnFiber, current, fragment, lanes, key) {
                        if (current === null || current.tag !== Fragment) {
                            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                            created.return = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current, fragment);
                            existing.return = returnFiber;
                            return existing;
                        }
                    }
                    function createChild(returnFiber, newChild, lanes) {
                        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                            created.return = returnFiber;
                            return created;
                        }
                        if (typeof newChild === "object" && newChild !== null) {
                            switch (newChild.$$typeof) {
                              case REACT_ELEMENT_TYPE:
                                {
                                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                                    _created.ref = coerceRef(returnFiber, null, newChild);
                                    _created.return = returnFiber;
                                    return _created;
                                }

                              case REACT_PORTAL_TYPE:
                                {
                                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                                    _created2.return = returnFiber;
                                    return _created2;
                                }

                              case REACT_LAZY_TYPE:
                                {
                                    var payload = newChild._payload;
                                    var init = newChild._init;
                                    return createChild(returnFiber, init(payload), lanes);
                                }
                            }
                            if (isArray(newChild) || getIteratorFn(newChild)) {
                                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                                _created3.return = returnFiber;
                                return _created3;
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === "function") {
                                warnOnFunctionType(returnFiber);
                            }
                        }
                        return null;
                    }
                    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
                        var key = oldFiber !== null ? oldFiber.key : null;
                        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                            if (key !== null) {
                                return null;
                            }
                            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
                        }
                        if (typeof newChild === "object" && newChild !== null) {
                            switch (newChild.$$typeof) {
                              case REACT_ELEMENT_TYPE:
                                {
                                    if (newChild.key === key) {
                                        return updateElement(returnFiber, oldFiber, newChild, lanes);
                                    } else {
                                        return null;
                                    }
                                }

                              case REACT_PORTAL_TYPE:
                                {
                                    if (newChild.key === key) {
                                        return updatePortal(returnFiber, oldFiber, newChild, lanes);
                                    } else {
                                        return null;
                                    }
                                }

                              case REACT_LAZY_TYPE:
                                {
                                    var payload = newChild._payload;
                                    var init = newChild._init;
                                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                                }
                            }
                            if (isArray(newChild) || getIteratorFn(newChild)) {
                                if (key !== null) {
                                    return null;
                                }
                                return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === "function") {
                                warnOnFunctionType(returnFiber);
                            }
                        }
                        return null;
                    }
                    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
                        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                            var matchedFiber = existingChildren.get(newIdx) || null;
                            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
                        }
                        if (typeof newChild === "object" && newChild !== null) {
                            switch (newChild.$$typeof) {
                              case REACT_ELEMENT_TYPE:
                                {
                                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                                }

                              case REACT_PORTAL_TYPE:
                                {
                                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                                }

                              case REACT_LAZY_TYPE:
                                var payload = newChild._payload;
                                var init = newChild._init;
                                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                            }
                            if (isArray(newChild) || getIteratorFn(newChild)) {
                                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                                return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === "function") {
                                warnOnFunctionType(returnFiber);
                            }
                        }
                        return null;
                    }
                    function warnOnInvalidKey(child, knownKeys, returnFiber) {
                        {
                            if (typeof child !== "object" || child === null) {
                                return knownKeys;
                            }
                            switch (child.$$typeof) {
                              case REACT_ELEMENT_TYPE:
                              case REACT_PORTAL_TYPE:
                                warnForMissingKey(child, returnFiber);
                                var key = child.key;
                                if (typeof key !== "string") {
                                    break;
                                }
                                if (knownKeys === null) {
                                    knownKeys = new Set;
                                    knownKeys.add(key);
                                    break;
                                }
                                if (!knownKeys.has(key)) {
                                    knownKeys.add(key);
                                    break;
                                }
                                error("Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.", key);
                                break;

                              case REACT_LAZY_TYPE:
                                var payload = child._payload;
                                var init = child._init;
                                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                                break;
                            }
                        }
                        return knownKeys;
                    }
                    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
                        {
                            var knownKeys = null;
                            for (var i = 0; i < newChildren.length; i++) {
                                var child = newChildren[i];
                                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                            }
                        }
                        var resultingFirstChild = null;
                        var previousNewFiber = null;
                        var oldFiber = currentFirstChild;
                        var lastPlacedIndex = 0;
                        var newIdx = 0;
                        var nextOldFiber = null;
                        for (;oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                            if (oldFiber.index > newIdx) {
                                nextOldFiber = oldFiber;
                                oldFiber = null;
                            } else {
                                nextOldFiber = oldFiber.sibling;
                            }
                            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                            if (newFiber === null) {
                                if (oldFiber === null) {
                                    oldFiber = nextOldFiber;
                                }
                                break;
                            }
                            if (shouldTrackSideEffects) {
                                if (oldFiber && newFiber.alternate === null) {
                                    deleteChild(returnFiber, oldFiber);
                                }
                            }
                            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                            if (previousNewFiber === null) {
                                resultingFirstChild = newFiber;
                            } else {
                                previousNewFiber.sibling = newFiber;
                            }
                            previousNewFiber = newFiber;
                            oldFiber = nextOldFiber;
                        }
                        if (newIdx === newChildren.length) {
                            deleteRemainingChildren(returnFiber, oldFiber);
                            if (getIsHydrating()) {
                                var numberOfForks = newIdx;
                                pushTreeFork(returnFiber, numberOfForks);
                            }
                            return resultingFirstChild;
                        }
                        if (oldFiber === null) {
                            for (;newIdx < newChildren.length; newIdx++) {
                                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                                if (_newFiber === null) {
                                    continue;
                                }
                                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber;
                                } else {
                                    previousNewFiber.sibling = _newFiber;
                                }
                                previousNewFiber = _newFiber;
                            }
                            if (getIsHydrating()) {
                                var _numberOfForks = newIdx;
                                pushTreeFork(returnFiber, _numberOfForks);
                            }
                            return resultingFirstChild;
                        }
                        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                        for (;newIdx < newChildren.length; newIdx++) {
                            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                            if (_newFiber2 !== null) {
                                if (shouldTrackSideEffects) {
                                    if (_newFiber2.alternate !== null) {
                                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                                    }
                                }
                                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber2;
                                } else {
                                    previousNewFiber.sibling = _newFiber2;
                                }
                                previousNewFiber = _newFiber2;
                            }
                        }
                        if (shouldTrackSideEffects) {
                            existingChildren.forEach((function(child) {
                                return deleteChild(returnFiber, child);
                            }));
                        }
                        if (getIsHydrating()) {
                            var _numberOfForks2 = newIdx;
                            pushTreeFork(returnFiber, _numberOfForks2);
                        }
                        return resultingFirstChild;
                    }
                    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
                        var iteratorFn = getIteratorFn(newChildrenIterable);
                        if (typeof iteratorFn !== "function") {
                            throw new Error("An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue.");
                        }
                        {
                            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                                if (!didWarnAboutGenerators) {
                                    error("Using Generators as children is unsupported and will likely yield " + "unexpected results because enumerating a generator mutates it. " + "You may convert it to an array with `Array.from()` or the " + "`[...spread]` operator before rendering. Keep in mind " + "you might need to polyfill these features for older browsers.");
                                }
                                didWarnAboutGenerators = true;
                            }
                            if (newChildrenIterable.entries === iteratorFn) {
                                if (!didWarnAboutMaps) {
                                    error("Using Maps as children is not supported. " + "Use an array of keyed ReactElements instead.");
                                }
                                didWarnAboutMaps = true;
                            }
                            var _newChildren = iteratorFn.call(newChildrenIterable);
                            if (_newChildren) {
                                var knownKeys = null;
                                var _step = _newChildren.next();
                                for (;!_step.done; _step = _newChildren.next()) {
                                    var child = _step.value;
                                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                                }
                            }
                        }
                        var newChildren = iteratorFn.call(newChildrenIterable);
                        if (newChildren == null) {
                            throw new Error("An iterable object provided no iterator.");
                        }
                        var resultingFirstChild = null;
                        var previousNewFiber = null;
                        var oldFiber = currentFirstChild;
                        var lastPlacedIndex = 0;
                        var newIdx = 0;
                        var nextOldFiber = null;
                        var step = newChildren.next();
                        for (;oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                            if (oldFiber.index > newIdx) {
                                nextOldFiber = oldFiber;
                                oldFiber = null;
                            } else {
                                nextOldFiber = oldFiber.sibling;
                            }
                            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                            if (newFiber === null) {
                                if (oldFiber === null) {
                                    oldFiber = nextOldFiber;
                                }
                                break;
                            }
                            if (shouldTrackSideEffects) {
                                if (oldFiber && newFiber.alternate === null) {
                                    deleteChild(returnFiber, oldFiber);
                                }
                            }
                            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                            if (previousNewFiber === null) {
                                resultingFirstChild = newFiber;
                            } else {
                                previousNewFiber.sibling = newFiber;
                            }
                            previousNewFiber = newFiber;
                            oldFiber = nextOldFiber;
                        }
                        if (step.done) {
                            deleteRemainingChildren(returnFiber, oldFiber);
                            if (getIsHydrating()) {
                                var numberOfForks = newIdx;
                                pushTreeFork(returnFiber, numberOfForks);
                            }
                            return resultingFirstChild;
                        }
                        if (oldFiber === null) {
                            for (;!step.done; newIdx++, step = newChildren.next()) {
                                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                                if (_newFiber3 === null) {
                                    continue;
                                }
                                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber3;
                                } else {
                                    previousNewFiber.sibling = _newFiber3;
                                }
                                previousNewFiber = _newFiber3;
                            }
                            if (getIsHydrating()) {
                                var _numberOfForks3 = newIdx;
                                pushTreeFork(returnFiber, _numberOfForks3);
                            }
                            return resultingFirstChild;
                        }
                        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                        for (;!step.done; newIdx++, step = newChildren.next()) {
                            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                            if (_newFiber4 !== null) {
                                if (shouldTrackSideEffects) {
                                    if (_newFiber4.alternate !== null) {
                                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                                    }
                                }
                                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber4;
                                } else {
                                    previousNewFiber.sibling = _newFiber4;
                                }
                                previousNewFiber = _newFiber4;
                            }
                        }
                        if (shouldTrackSideEffects) {
                            existingChildren.forEach((function(child) {
                                return deleteChild(returnFiber, child);
                            }));
                        }
                        if (getIsHydrating()) {
                            var _numberOfForks4 = newIdx;
                            pushTreeFork(returnFiber, _numberOfForks4);
                        }
                        return resultingFirstChild;
                    }
                    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
                        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                            var existing = useFiber(currentFirstChild, textContent);
                            existing.return = returnFiber;
                            return existing;
                        }
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                        created.return = returnFiber;
                        return created;
                    }
                    function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
                        var key = element.key;
                        var child = currentFirstChild;
                        while (child !== null) {
                            if (child.key === key) {
                                var elementType = element.type;
                                if (elementType === REACT_FRAGMENT_TYPE) {
                                    if (child.tag === Fragment) {
                                        deleteRemainingChildren(returnFiber, child.sibling);
                                        var existing = useFiber(child, element.props.children);
                                        existing.return = returnFiber;
                                        {
                                            existing._debugSource = element._source;
                                            existing._debugOwner = element._owner;
                                        }
                                        return existing;
                                    }
                                } else {
                                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                                        deleteRemainingChildren(returnFiber, child.sibling);
                                        var _existing = useFiber(child, element.props);
                                        _existing.ref = coerceRef(returnFiber, child, element);
                                        _existing.return = returnFiber;
                                        {
                                            _existing._debugSource = element._source;
                                            _existing._debugOwner = element._owner;
                                        }
                                        return _existing;
                                    }
                                }
                                deleteRemainingChildren(returnFiber, child);
                                break;
                            } else {
                                deleteChild(returnFiber, child);
                            }
                            child = child.sibling;
                        }
                        if (element.type === REACT_FRAGMENT_TYPE) {
                            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                            created.return = returnFiber;
                            return created;
                        } else {
                            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                            _created4.return = returnFiber;
                            return _created4;
                        }
                    }
                    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
                        var key = portal.key;
                        var child = currentFirstChild;
                        while (child !== null) {
                            if (child.key === key) {
                                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                                    deleteRemainingChildren(returnFiber, child.sibling);
                                    var existing = useFiber(child, portal.children || []);
                                    existing.return = returnFiber;
                                    return existing;
                                } else {
                                    deleteRemainingChildren(returnFiber, child);
                                    break;
                                }
                            } else {
                                deleteChild(returnFiber, child);
                            }
                            child = child.sibling;
                        }
                        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                        created.return = returnFiber;
                        return created;
                    }
                    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
                        var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
                        if (isUnkeyedTopLevelFragment) {
                            newChild = newChild.props.children;
                        }
                        if (typeof newChild === "object" && newChild !== null) {
                            switch (newChild.$$typeof) {
                              case REACT_ELEMENT_TYPE:
                                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

                              case REACT_PORTAL_TYPE:
                                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

                              case REACT_LAZY_TYPE:
                                var payload = newChild._payload;
                                var init = newChild._init;
                                return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
                            }
                            if (isArray(newChild)) {
                                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                            }
                            if (getIteratorFn(newChild)) {
                                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
                        }
                        {
                            if (typeof newChild === "function") {
                                warnOnFunctionType(returnFiber);
                            }
                        }
                        return deleteRemainingChildren(returnFiber, currentFirstChild);
                    }
                    return reconcileChildFibers;
                }
                var reconcileChildFibers = ChildReconciler(true);
                var mountChildFibers = ChildReconciler(false);
                function cloneChildFibers(current, workInProgress) {
                    if (current !== null && workInProgress.child !== current.child) {
                        throw new Error("Resuming work not yet implemented.");
                    }
                    if (workInProgress.child === null) {
                        return;
                    }
                    var currentChild = workInProgress.child;
                    var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
                    workInProgress.child = newChild;
                    newChild.return = workInProgress;
                    while (currentChild.sibling !== null) {
                        currentChild = currentChild.sibling;
                        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
                        newChild.return = workInProgress;
                    }
                    newChild.sibling = null;
                }
                function resetChildFibers(workInProgress, lanes) {
                    var child = workInProgress.child;
                    while (child !== null) {
                        resetWorkInProgress(child, lanes);
                        child = child.sibling;
                    }
                }
                var NO_CONTEXT = {};
                var contextStackCursor$1 = createCursor(NO_CONTEXT);
                var contextFiberStackCursor = createCursor(NO_CONTEXT);
                var rootInstanceStackCursor = createCursor(NO_CONTEXT);
                function requiredContext(c) {
                    if (c === NO_CONTEXT) {
                        throw new Error("Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue.");
                    }
                    return c;
                }
                function getRootHostContainer() {
                    var rootInstance = requiredContext(rootInstanceStackCursor.current);
                    return rootInstance;
                }
                function pushHostContainer(fiber, nextRootInstance) {
                    push(rootInstanceStackCursor, nextRootInstance, fiber);
                    push(contextFiberStackCursor, fiber, fiber);
                    push(contextStackCursor$1, NO_CONTEXT, fiber);
                    var nextRootContext = getRootHostContext(nextRootInstance);
                    pop(contextStackCursor$1, fiber);
                    push(contextStackCursor$1, nextRootContext, fiber);
                }
                function popHostContainer(fiber) {
                    pop(contextStackCursor$1, fiber);
                    pop(contextFiberStackCursor, fiber);
                    pop(rootInstanceStackCursor, fiber);
                }
                function getHostContext() {
                    var context = requiredContext(contextStackCursor$1.current);
                    return context;
                }
                function pushHostContext(fiber) {
                    requiredContext(rootInstanceStackCursor.current);
                    var context = requiredContext(contextStackCursor$1.current);
                    var nextContext = getChildHostContext(context, fiber.type);
                    if (context === nextContext) {
                        return;
                    }
                    push(contextFiberStackCursor, fiber, fiber);
                    push(contextStackCursor$1, nextContext, fiber);
                }
                function popHostContext(fiber) {
                    if (contextFiberStackCursor.current !== fiber) {
                        return;
                    }
                    pop(contextStackCursor$1, fiber);
                    pop(contextFiberStackCursor, fiber);
                }
                var DefaultSuspenseContext = 0;
                var SubtreeSuspenseContextMask = 1;
                var InvisibleParentSuspenseContext = 1;
                var ForceSuspenseFallback = 2;
                var suspenseStackCursor = createCursor(DefaultSuspenseContext);
                function hasSuspenseContext(parentContext, flag) {
                    return (parentContext & flag) !== 0;
                }
                function setDefaultShallowSuspenseContext(parentContext) {
                    return parentContext & SubtreeSuspenseContextMask;
                }
                function setShallowSuspenseContext(parentContext, shallowContext) {
                    return parentContext & SubtreeSuspenseContextMask | shallowContext;
                }
                function addSubtreeSuspenseContext(parentContext, subtreeContext) {
                    return parentContext | subtreeContext;
                }
                function pushSuspenseContext(fiber, newContext) {
                    push(suspenseStackCursor, newContext, fiber);
                }
                function popSuspenseContext(fiber) {
                    pop(suspenseStackCursor, fiber);
                }
                function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
                    var nextState = workInProgress.memoizedState;
                    if (nextState !== null) {
                        if (nextState.dehydrated !== null) {
                            return true;
                        }
                        return false;
                    }
                    workInProgress.memoizedProps;
                    {
                        return true;
                    }
                }
                function findFirstSuspended(row) {
                    var node = row;
                    while (node !== null) {
                        if (node.tag === SuspenseComponent) {
                            var state = node.memoizedState;
                            if (state !== null) {
                                var dehydrated = state.dehydrated;
                                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                                    return node;
                                }
                            }
                        } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
                            var didSuspend = (node.flags & DidCapture) !== NoFlags;
                            if (didSuspend) {
                                return node;
                            }
                        } else if (node.child !== null) {
                            node.child.return = node;
                            node = node.child;
                            continue;
                        }
                        if (node === row) {
                            return null;
                        }
                        while (node.sibling === null) {
                            if (node.return === null || node.return === row) {
                                return null;
                            }
                            node = node.return;
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                    }
                    return null;
                }
                var NoFlags$1 = 0;
                var HasEffect = 1;
                var Insertion = 2;
                var Layout = 4;
                var Passive$1 = 8;
                var workInProgressSources = [];
                function resetWorkInProgressVersions() {
                    for (var i = 0; i < workInProgressSources.length; i++) {
                        var mutableSource = workInProgressSources[i];
                        {
                            mutableSource._workInProgressVersionPrimary = null;
                        }
                    }
                    workInProgressSources.length = 0;
                }
                function registerMutableSourceForHydration(root, mutableSource) {
                    var getVersion = mutableSource._getVersion;
                    var version = getVersion(mutableSource._source);
                    if (root.mutableSourceEagerHydrationData == null) {
                        root.mutableSourceEagerHydrationData = [ mutableSource, version ];
                    } else {
                        root.mutableSourceEagerHydrationData.push(mutableSource, version);
                    }
                }
                var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
                var didWarnAboutMismatchedHooksForComponent;
                var didWarnUncachedGetSnapshot;
                {
                    didWarnAboutMismatchedHooksForComponent = new Set;
                }
                var renderLanes = NoLanes;
                var currentlyRenderingFiber$1 = null;
                var currentHook = null;
                var workInProgressHook = null;
                var didScheduleRenderPhaseUpdate = false;
                var didScheduleRenderPhaseUpdateDuringThisPass = false;
                var localIdCounter = 0;
                var globalClientIdCounter = 0;
                var RE_RENDER_LIMIT = 25;
                var currentHookNameInDev = null;
                var hookTypesDev = null;
                var hookTypesUpdateIndexDev = -1;
                var ignorePreviousDependencies = false;
                function mountHookTypesDev() {
                    {
                        var hookName = currentHookNameInDev;
                        if (hookTypesDev === null) {
                            hookTypesDev = [ hookName ];
                        } else {
                            hookTypesDev.push(hookName);
                        }
                    }
                }
                function updateHookTypesDev() {
                    {
                        var hookName = currentHookNameInDev;
                        if (hookTypesDev !== null) {
                            hookTypesUpdateIndexDev++;
                            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                                warnOnHookMismatchInDev(hookName);
                            }
                        }
                    }
                }
                function checkDepsAreArrayDev(deps) {
                    {
                        if (deps !== undefined && deps !== null && !isArray(deps)) {
                            error("%s received a final argument that is not an array (instead, received `%s`). When " + "specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
                        }
                    }
                }
                function warnOnHookMismatchInDev(currentHookName) {
                    {
                        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
                        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                            didWarnAboutMismatchedHooksForComponent.add(componentName);
                            if (hookTypesDev !== null) {
                                var table = "";
                                var secondColumnStart = 30;
                                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                                    var oldHookName = hookTypesDev[i];
                                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                                    var row = i + 1 + ". " + oldHookName;
                                    while (row.length < secondColumnStart) {
                                        row += " ";
                                    }
                                    row += newHookName + "\n";
                                    table += row;
                                }
                                error("React has detected a change in the order of Hooks called by %s. " + "This will lead to bugs and errors if not fixed. " + "For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n" + "   Previous render            Next render\n" + "   ------------------------------------------------------\n" + "%s" + "   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                            }
                        }
                    }
                }
                function throwInvalidHookError() {
                    throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for" + " one of the following reasons:\n" + "1. You might have mismatching versions of React and the renderer (such as React DOM)\n" + "2. You might be breaking the Rules of Hooks\n" + "3. You might have more than one copy of React in the same app\n" + "See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
                }
                function areHookInputsEqual(nextDeps, prevDeps) {
                    {
                        if (ignorePreviousDependencies) {
                            return false;
                        }
                    }
                    if (prevDeps === null) {
                        {
                            error("%s received a final argument during this render, but not during " + "the previous render. Even though the final argument is optional, " + "its type cannot change between renders.", currentHookNameInDev);
                        }
                        return false;
                    }
                    {
                        if (nextDeps.length !== prevDeps.length) {
                            error("The final argument passed to %s changed size between renders. The " + "order and size of this array must remain constant.\n\n" + "Previous: %s\n" + "Incoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
                        }
                    }
                    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
                        if (objectIs(nextDeps[i], prevDeps[i])) {
                            continue;
                        }
                        return false;
                    }
                    return true;
                }
                function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
                    renderLanes = nextRenderLanes;
                    currentlyRenderingFiber$1 = workInProgress;
                    {
                        hookTypesDev = current !== null ? current._debugHookTypes : null;
                        hookTypesUpdateIndexDev = -1;
                        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
                    }
                    workInProgress.memoizedState = null;
                    workInProgress.updateQueue = null;
                    workInProgress.lanes = NoLanes;
                    {
                        if (current !== null && current.memoizedState !== null) {
                            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
                        } else if (hookTypesDev !== null) {
                            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
                        } else {
                            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
                        }
                    }
                    var children = Component(props, secondArg);
                    if (didScheduleRenderPhaseUpdateDuringThisPass) {
                        var numberOfReRenders = 0;
                        do {
                            didScheduleRenderPhaseUpdateDuringThisPass = false;
                            localIdCounter = 0;
                            if (numberOfReRenders >= RE_RENDER_LIMIT) {
                                throw new Error("Too many re-renders. React limits the number of renders to prevent " + "an infinite loop.");
                            }
                            numberOfReRenders += 1;
                            {
                                ignorePreviousDependencies = false;
                            }
                            currentHook = null;
                            workInProgressHook = null;
                            workInProgress.updateQueue = null;
                            {
                                hookTypesUpdateIndexDev = -1;
                            }
                            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                            children = Component(props, secondArg);
                        } while (didScheduleRenderPhaseUpdateDuringThisPass);
                    }
                    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
                    {
                        workInProgress._debugHookTypes = hookTypesDev;
                    }
                    var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
                    renderLanes = NoLanes;
                    currentlyRenderingFiber$1 = null;
                    currentHook = null;
                    workInProgressHook = null;
                    {
                        currentHookNameInDev = null;
                        hookTypesDev = null;
                        hookTypesUpdateIndexDev = -1;
                        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && (current.mode & ConcurrentMode) !== NoMode) {
                            error("Internal React error: Expected static flag was missing. Please " + "notify the React team.");
                        }
                    }
                    didScheduleRenderPhaseUpdate = false;
                    if (didRenderTooFewHooks) {
                        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental " + "early return statement.");
                    }
                    return children;
                }
                function checkDidRenderIdHook() {
                    var didRenderIdHook = localIdCounter !== 0;
                    localIdCounter = 0;
                    return didRenderIdHook;
                }
                function bailoutHooks(current, workInProgress, lanes) {
                    workInProgress.updateQueue = current.updateQueue;
                    if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {
                        workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
                    } else {
                        workInProgress.flags &= ~(Passive | Update);
                    }
                    current.lanes = removeLanes(current.lanes, lanes);
                }
                function resetHooksAfterThrow() {
                    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
                    if (didScheduleRenderPhaseUpdate) {
                        var hook = currentlyRenderingFiber$1.memoizedState;
                        while (hook !== null) {
                            var queue = hook.queue;
                            if (queue !== null) {
                                queue.pending = null;
                            }
                            hook = hook.next;
                        }
                        didScheduleRenderPhaseUpdate = false;
                    }
                    renderLanes = NoLanes;
                    currentlyRenderingFiber$1 = null;
                    currentHook = null;
                    workInProgressHook = null;
                    {
                        hookTypesDev = null;
                        hookTypesUpdateIndexDev = -1;
                        currentHookNameInDev = null;
                        isUpdatingOpaqueValueInRenderPhase = false;
                    }
                    didScheduleRenderPhaseUpdateDuringThisPass = false;
                    localIdCounter = 0;
                }
                function mountWorkInProgressHook() {
                    var hook = {
                        memoizedState: null,
                        baseState: null,
                        baseQueue: null,
                        queue: null,
                        next: null
                    };
                    if (workInProgressHook === null) {
                        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
                    } else {
                        workInProgressHook = workInProgressHook.next = hook;
                    }
                    return workInProgressHook;
                }
                function updateWorkInProgressHook() {
                    var nextCurrentHook;
                    if (currentHook === null) {
                        var current = currentlyRenderingFiber$1.alternate;
                        if (current !== null) {
                            nextCurrentHook = current.memoizedState;
                        } else {
                            nextCurrentHook = null;
                        }
                    } else {
                        nextCurrentHook = currentHook.next;
                    }
                    var nextWorkInProgressHook;
                    if (workInProgressHook === null) {
                        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
                    } else {
                        nextWorkInProgressHook = workInProgressHook.next;
                    }
                    if (nextWorkInProgressHook !== null) {
                        workInProgressHook = nextWorkInProgressHook;
                        nextWorkInProgressHook = workInProgressHook.next;
                        currentHook = nextCurrentHook;
                    } else {
                        if (nextCurrentHook === null) {
                            throw new Error("Rendered more hooks than during the previous render.");
                        }
                        currentHook = nextCurrentHook;
                        var newHook = {
                            memoizedState: currentHook.memoizedState,
                            baseState: currentHook.baseState,
                            baseQueue: currentHook.baseQueue,
                            queue: currentHook.queue,
                            next: null
                        };
                        if (workInProgressHook === null) {
                            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
                        } else {
                            workInProgressHook = workInProgressHook.next = newHook;
                        }
                    }
                    return workInProgressHook;
                }
                function createFunctionComponentUpdateQueue() {
                    return {
                        lastEffect: null,
                        stores: null
                    };
                }
                function basicStateReducer(state, action) {
                    return typeof action === "function" ? action(state) : action;
                }
                function mountReducer(reducer, initialArg, init) {
                    var hook = mountWorkInProgressHook();
                    var initialState;
                    if (init !== undefined) {
                        initialState = init(initialArg);
                    } else {
                        initialState = initialArg;
                    }
                    hook.memoizedState = hook.baseState = initialState;
                    var queue = {
                        pending: null,
                        interleaved: null,
                        lanes: NoLanes,
                        dispatch: null,
                        lastRenderedReducer: reducer,
                        lastRenderedState: initialState
                    };
                    hook.queue = queue;
                    var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
                    return [ hook.memoizedState, dispatch ];
                }
                function updateReducer(reducer, initialArg, init) {
                    var hook = updateWorkInProgressHook();
                    var queue = hook.queue;
                    if (queue === null) {
                        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
                    }
                    queue.lastRenderedReducer = reducer;
                    var current = currentHook;
                    var baseQueue = current.baseQueue;
                    var pendingQueue = queue.pending;
                    if (pendingQueue !== null) {
                        if (baseQueue !== null) {
                            var baseFirst = baseQueue.next;
                            var pendingFirst = pendingQueue.next;
                            baseQueue.next = pendingFirst;
                            pendingQueue.next = baseFirst;
                        }
                        {
                            if (current.baseQueue !== baseQueue) {
                                error("Internal error: Expected work-in-progress queue to be a clone. " + "This is a bug in React.");
                            }
                        }
                        current.baseQueue = baseQueue = pendingQueue;
                        queue.pending = null;
                    }
                    if (baseQueue !== null) {
                        var first = baseQueue.next;
                        var newState = current.baseState;
                        var newBaseState = null;
                        var newBaseQueueFirst = null;
                        var newBaseQueueLast = null;
                        var update = first;
                        do {
                            var updateLane = update.lane;
                            if (!isSubsetOfLanes(renderLanes, updateLane)) {
                                var clone = {
                                    lane: updateLane,
                                    action: update.action,
                                    hasEagerState: update.hasEagerState,
                                    eagerState: update.eagerState,
                                    next: null
                                };
                                if (newBaseQueueLast === null) {
                                    newBaseQueueFirst = newBaseQueueLast = clone;
                                    newBaseState = newState;
                                } else {
                                    newBaseQueueLast = newBaseQueueLast.next = clone;
                                }
                                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                                markSkippedUpdateLanes(updateLane);
                            } else {
                                if (newBaseQueueLast !== null) {
                                    var _clone = {
                                        lane: NoLane,
                                        action: update.action,
                                        hasEagerState: update.hasEagerState,
                                        eagerState: update.eagerState,
                                        next: null
                                    };
                                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                                }
                                if (update.hasEagerState) {
                                    newState = update.eagerState;
                                } else {
                                    var action = update.action;
                                    newState = reducer(newState, action);
                                }
                            }
                            update = update.next;
                        } while (update !== null && update !== first);
                        if (newBaseQueueLast === null) {
                            newBaseState = newState;
                        } else {
                            newBaseQueueLast.next = newBaseQueueFirst;
                        }
                        if (!objectIs(newState, hook.memoizedState)) {
                            markWorkInProgressReceivedUpdate();
                        }
                        hook.memoizedState = newState;
                        hook.baseState = newBaseState;
                        hook.baseQueue = newBaseQueueLast;
                        queue.lastRenderedState = newState;
                    }
                    var lastInterleaved = queue.interleaved;
                    if (lastInterleaved !== null) {
                        var interleaved = lastInterleaved;
                        do {
                            var interleavedLane = interleaved.lane;
                            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                            markSkippedUpdateLanes(interleavedLane);
                            interleaved = interleaved.next;
                        } while (interleaved !== lastInterleaved);
                    } else if (baseQueue === null) {
                        queue.lanes = NoLanes;
                    }
                    var dispatch = queue.dispatch;
                    return [ hook.memoizedState, dispatch ];
                }
                function rerenderReducer(reducer, initialArg, init) {
                    var hook = updateWorkInProgressHook();
                    var queue = hook.queue;
                    if (queue === null) {
                        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
                    }
                    queue.lastRenderedReducer = reducer;
                    var dispatch = queue.dispatch;
                    var lastRenderPhaseUpdate = queue.pending;
                    var newState = hook.memoizedState;
                    if (lastRenderPhaseUpdate !== null) {
                        queue.pending = null;
                        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                        var update = firstRenderPhaseUpdate;
                        do {
                            var action = update.action;
                            newState = reducer(newState, action);
                            update = update.next;
                        } while (update !== firstRenderPhaseUpdate);
                        if (!objectIs(newState, hook.memoizedState)) {
                            markWorkInProgressReceivedUpdate();
                        }
                        hook.memoizedState = newState;
                        if (hook.baseQueue === null) {
                            hook.baseState = newState;
                        }
                        queue.lastRenderedState = newState;
                    }
                    return [ newState, dispatch ];
                }
                function mountMutableSource(source, getSnapshot, subscribe) {
                    {
                        return undefined;
                    }
                }
                function updateMutableSource(source, getSnapshot, subscribe) {
                    {
                        return undefined;
                    }
                }
                function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                    var fiber = currentlyRenderingFiber$1;
                    var hook = mountWorkInProgressHook();
                    var nextSnapshot;
                    var isHydrating = getIsHydrating();
                    if (isHydrating) {
                        if (getServerSnapshot === undefined) {
                            throw new Error("Missing getServerSnapshot, which is required for " + "server-rendered content. Will revert to client rendering.");
                        }
                        nextSnapshot = getServerSnapshot();
                        {
                            if (!didWarnUncachedGetSnapshot) {
                                if (nextSnapshot !== getServerSnapshot()) {
                                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                                    didWarnUncachedGetSnapshot = true;
                                }
                            }
                        }
                    } else {
                        nextSnapshot = getSnapshot();
                        {
                            if (!didWarnUncachedGetSnapshot) {
                                var cachedSnapshot = getSnapshot();
                                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                                    didWarnUncachedGetSnapshot = true;
                                }
                            }
                        }
                        var root = getWorkInProgressRoot();
                        if (root === null) {
                            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
                        }
                        if (!includesBlockingLane(root, renderLanes)) {
                            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
                        }
                    }
                    hook.memoizedState = nextSnapshot;
                    var inst = {
                        value: nextSnapshot,
                        getSnapshot: getSnapshot
                    };
                    hook.queue = inst;
                    mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [ subscribe ]);
                    fiber.flags |= Passive;
                    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
                    return nextSnapshot;
                }
                function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                    var fiber = currentlyRenderingFiber$1;
                    var hook = updateWorkInProgressHook();
                    var nextSnapshot = getSnapshot();
                    {
                        if (!didWarnUncachedGetSnapshot) {
                            var cachedSnapshot = getSnapshot();
                            if (!objectIs(nextSnapshot, cachedSnapshot)) {
                                error("The result of getSnapshot should be cached to avoid an infinite loop");
                                didWarnUncachedGetSnapshot = true;
                            }
                        }
                    }
                    var prevSnapshot = hook.memoizedState;
                    var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
                    if (snapshotChanged) {
                        hook.memoizedState = nextSnapshot;
                        markWorkInProgressReceivedUpdate();
                    }
                    var inst = hook.queue;
                    updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [ subscribe ]);
                    if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
                        fiber.flags |= Passive;
                        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
                        var root = getWorkInProgressRoot();
                        if (root === null) {
                            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
                        }
                        if (!includesBlockingLane(root, renderLanes)) {
                            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
                        }
                    }
                    return nextSnapshot;
                }
                function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
                    fiber.flags |= StoreConsistency;
                    var check = {
                        getSnapshot: getSnapshot,
                        value: renderedSnapshot
                    };
                    var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
                    if (componentUpdateQueue === null) {
                        componentUpdateQueue = createFunctionComponentUpdateQueue();
                        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
                        componentUpdateQueue.stores = [ check ];
                    } else {
                        var stores = componentUpdateQueue.stores;
                        if (stores === null) {
                            componentUpdateQueue.stores = [ check ];
                        } else {
                            stores.push(check);
                        }
                    }
                }
                function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
                    inst.value = nextSnapshot;
                    inst.getSnapshot = getSnapshot;
                    if (checkIfSnapshotChanged(inst)) {
                        forceStoreRerender(fiber);
                    }
                }
                function subscribeToStore(fiber, inst, subscribe) {
                    var handleStoreChange = function() {
                        if (checkIfSnapshotChanged(inst)) {
                            forceStoreRerender(fiber);
                        }
                    };
                    return subscribe(handleStoreChange);
                }
                function checkIfSnapshotChanged(inst) {
                    var latestGetSnapshot = inst.getSnapshot;
                    var prevValue = inst.value;
                    try {
                        var nextValue = latestGetSnapshot();
                        return !objectIs(prevValue, nextValue);
                    } catch (error) {
                        return true;
                    }
                }
                function forceStoreRerender(fiber) {
                    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                    if (root !== null) {
                        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
                    }
                }
                function mountState(initialState) {
                    var hook = mountWorkInProgressHook();
                    if (typeof initialState === "function") {
                        initialState = initialState();
                    }
                    hook.memoizedState = hook.baseState = initialState;
                    var queue = {
                        pending: null,
                        interleaved: null,
                        lanes: NoLanes,
                        dispatch: null,
                        lastRenderedReducer: basicStateReducer,
                        lastRenderedState: initialState
                    };
                    hook.queue = queue;
                    var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
                    return [ hook.memoizedState, dispatch ];
                }
                function updateState(initialState) {
                    return updateReducer(basicStateReducer);
                }
                function rerenderState(initialState) {
                    return rerenderReducer(basicStateReducer);
                }
                function pushEffect(tag, create, destroy, deps) {
                    var effect = {
                        tag: tag,
                        create: create,
                        destroy: destroy,
                        deps: deps,
                        next: null
                    };
                    var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
                    if (componentUpdateQueue === null) {
                        componentUpdateQueue = createFunctionComponentUpdateQueue();
                        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
                        componentUpdateQueue.lastEffect = effect.next = effect;
                    } else {
                        var lastEffect = componentUpdateQueue.lastEffect;
                        if (lastEffect === null) {
                            componentUpdateQueue.lastEffect = effect.next = effect;
                        } else {
                            var firstEffect = lastEffect.next;
                            lastEffect.next = effect;
                            effect.next = firstEffect;
                            componentUpdateQueue.lastEffect = effect;
                        }
                    }
                    return effect;
                }
                function mountRef(initialValue) {
                    var hook = mountWorkInProgressHook();
                    {
                        var _ref2 = {
                            current: initialValue
                        };
                        hook.memoizedState = _ref2;
                        return _ref2;
                    }
                }
                function updateRef(initialValue) {
                    var hook = updateWorkInProgressHook();
                    return hook.memoizedState;
                }
                function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
                    var hook = mountWorkInProgressHook();
                    var nextDeps = deps === undefined ? null : deps;
                    currentlyRenderingFiber$1.flags |= fiberFlags;
                    hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
                }
                function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
                    var hook = updateWorkInProgressHook();
                    var nextDeps = deps === undefined ? null : deps;
                    var destroy = undefined;
                    if (currentHook !== null) {
                        var prevEffect = currentHook.memoizedState;
                        destroy = prevEffect.destroy;
                        if (nextDeps !== null) {
                            var prevDeps = prevEffect.deps;
                            if (areHookInputsEqual(nextDeps, prevDeps)) {
                                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                                return;
                            }
                        }
                    }
                    currentlyRenderingFiber$1.flags |= fiberFlags;
                    hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
                }
                function mountEffect(create, deps) {
                    if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
                        return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
                    } else {
                        return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
                    }
                }
                function updateEffect(create, deps) {
                    return updateEffectImpl(Passive, Passive$1, create, deps);
                }
                function mountInsertionEffect(create, deps) {
                    return mountEffectImpl(Update, Insertion, create, deps);
                }
                function updateInsertionEffect(create, deps) {
                    return updateEffectImpl(Update, Insertion, create, deps);
                }
                function mountLayoutEffect(create, deps) {
                    var fiberFlags = Update;
                    {
                        fiberFlags |= LayoutStatic;
                    }
                    if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
                        fiberFlags |= MountLayoutDev;
                    }
                    return mountEffectImpl(fiberFlags, Layout, create, deps);
                }
                function updateLayoutEffect(create, deps) {
                    return updateEffectImpl(Update, Layout, create, deps);
                }
                function imperativeHandleEffect(create, ref) {
                    if (typeof ref === "function") {
                        var refCallback = ref;
                        var _inst = create();
                        refCallback(_inst);
                        return function() {
                            refCallback(null);
                        };
                    } else if (ref !== null && ref !== undefined) {
                        var refObject = ref;
                        {
                            if (!refObject.hasOwnProperty("current")) {
                                error("Expected useImperativeHandle() first argument to either be a " + "ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                            }
                        }
                        var _inst2 = create();
                        refObject.current = _inst2;
                        return function() {
                            refObject.current = null;
                        };
                    }
                }
                function mountImperativeHandle(ref, create, deps) {
                    {
                        if (typeof create !== "function") {
                            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
                        }
                    }
                    var effectDeps = deps !== null && deps !== undefined ? deps.concat([ ref ]) : null;
                    var fiberFlags = Update;
                    {
                        fiberFlags |= LayoutStatic;
                    }
                    if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
                        fiberFlags |= MountLayoutDev;
                    }
                    return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
                }
                function updateImperativeHandle(ref, create, deps) {
                    {
                        if (typeof create !== "function") {
                            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
                        }
                    }
                    var effectDeps = deps !== null && deps !== undefined ? deps.concat([ ref ]) : null;
                    return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
                }
                function mountDebugValue(value, formatterFn) {}
                var updateDebugValue = mountDebugValue;
                function mountCallback(callback, deps) {
                    var hook = mountWorkInProgressHook();
                    var nextDeps = deps === undefined ? null : deps;
                    hook.memoizedState = [ callback, nextDeps ];
                    return callback;
                }
                function updateCallback(callback, deps) {
                    var hook = updateWorkInProgressHook();
                    var nextDeps = deps === undefined ? null : deps;
                    var prevState = hook.memoizedState;
                    if (prevState !== null) {
                        if (nextDeps !== null) {
                            var prevDeps = prevState[1];
                            if (areHookInputsEqual(nextDeps, prevDeps)) {
                                return prevState[0];
                            }
                        }
                    }
                    hook.memoizedState = [ callback, nextDeps ];
                    return callback;
                }
                function mountMemo(nextCreate, deps) {
                    var hook = mountWorkInProgressHook();
                    var nextDeps = deps === undefined ? null : deps;
                    var nextValue = nextCreate();
                    hook.memoizedState = [ nextValue, nextDeps ];
                    return nextValue;
                }
                function updateMemo(nextCreate, deps) {
                    var hook = updateWorkInProgressHook();
                    var nextDeps = deps === undefined ? null : deps;
                    var prevState = hook.memoizedState;
                    if (prevState !== null) {
                        if (nextDeps !== null) {
                            var prevDeps = prevState[1];
                            if (areHookInputsEqual(nextDeps, prevDeps)) {
                                return prevState[0];
                            }
                        }
                    }
                    var nextValue = nextCreate();
                    hook.memoizedState = [ nextValue, nextDeps ];
                    return nextValue;
                }
                function mountDeferredValue(value) {
                    var hook = mountWorkInProgressHook();
                    hook.memoizedState = value;
                    return value;
                }
                function updateDeferredValue(value) {
                    var hook = updateWorkInProgressHook();
                    var resolvedCurrentHook = currentHook;
                    var prevValue = resolvedCurrentHook.memoizedState;
                    return updateDeferredValueImpl(hook, prevValue, value);
                }
                function rerenderDeferredValue(value) {
                    var hook = updateWorkInProgressHook();
                    if (currentHook === null) {
                        hook.memoizedState = value;
                        return value;
                    } else {
                        var prevValue = currentHook.memoizedState;
                        return updateDeferredValueImpl(hook, prevValue, value);
                    }
                }
                function updateDeferredValueImpl(hook, prevValue, value) {
                    var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
                    if (shouldDeferValue) {
                        if (!objectIs(value, prevValue)) {
                            var deferredLane = claimNextTransitionLane();
                            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                            markSkippedUpdateLanes(deferredLane);
                            hook.baseState = true;
                        }
                        return prevValue;
                    } else {
                        if (hook.baseState) {
                            hook.baseState = false;
                            markWorkInProgressReceivedUpdate();
                        }
                        hook.memoizedState = value;
                        return value;
                    }
                }
                function startTransition(setPending, callback, options) {
                    var previousPriority = getCurrentUpdatePriority();
                    setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
                    setPending(true);
                    var prevTransition = ReactCurrentBatchConfig$2.transition;
                    ReactCurrentBatchConfig$2.transition = {};
                    var currentTransition = ReactCurrentBatchConfig$2.transition;
                    {
                        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set;
                    }
                    try {
                        setPending(false);
                        callback();
                    } finally {
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig$2.transition = prevTransition;
                        {
                            if (prevTransition === null && currentTransition._updatedFibers) {
                                var updatedFibersCount = currentTransition._updatedFibers.size;
                                if (updatedFibersCount > 10) {
                                    warn("Detected a large number of updates inside startTransition. " + "If this is due to a subscription please re-write it to use React provided hooks. " + "Otherwise concurrent mode guarantees are off the table.");
                                }
                                currentTransition._updatedFibers.clear();
                            }
                        }
                    }
                }
                function mountTransition() {
                    var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
                    var start = startTransition.bind(null, setPending);
                    var hook = mountWorkInProgressHook();
                    hook.memoizedState = start;
                    return [ isPending, start ];
                }
                function updateTransition() {
                    var _updateState = updateState(), isPending = _updateState[0];
                    var hook = updateWorkInProgressHook();
                    var start = hook.memoizedState;
                    return [ isPending, start ];
                }
                function rerenderTransition() {
                    var _rerenderState = rerenderState(), isPending = _rerenderState[0];
                    var hook = updateWorkInProgressHook();
                    var start = hook.memoizedState;
                    return [ isPending, start ];
                }
                var isUpdatingOpaqueValueInRenderPhase = false;
                function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
                    {
                        return isUpdatingOpaqueValueInRenderPhase;
                    }
                }
                function mountId() {
                    var hook = mountWorkInProgressHook();
                    var root = getWorkInProgressRoot();
                    var identifierPrefix = root.identifierPrefix;
                    var id;
                    if (getIsHydrating()) {
                        var treeId = getTreeId();
                        id = ":" + identifierPrefix + "R" + treeId;
                        var localId = localIdCounter++;
                        if (localId > 0) {
                            id += "H" + localId.toString(32);
                        }
                        id += ":";
                    } else {
                        var globalClientId = globalClientIdCounter++;
                        id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
                    }
                    hook.memoizedState = id;
                    return id;
                }
                function updateId() {
                    var hook = updateWorkInProgressHook();
                    var id = hook.memoizedState;
                    return id;
                }
                function dispatchReducerAction(fiber, queue, action) {
                    {
                        if (typeof arguments[3] === "function") {
                            error("State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().");
                        }
                    }
                    var lane = requestUpdateLane(fiber);
                    var update = {
                        lane: lane,
                        action: action,
                        hasEagerState: false,
                        eagerState: null,
                        next: null
                    };
                    if (isRenderPhaseUpdate(fiber)) {
                        enqueueRenderPhaseUpdate(queue, update);
                    } else {
                        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
                        if (root !== null) {
                            var eventTime = requestEventTime();
                            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                            entangleTransitionUpdate(root, queue, lane);
                        }
                    }
                    markUpdateInDevTools(fiber, lane);
                }
                function dispatchSetState(fiber, queue, action) {
                    {
                        if (typeof arguments[3] === "function") {
                            error("State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().");
                        }
                    }
                    var lane = requestUpdateLane(fiber);
                    var update = {
                        lane: lane,
                        action: action,
                        hasEagerState: false,
                        eagerState: null,
                        next: null
                    };
                    if (isRenderPhaseUpdate(fiber)) {
                        enqueueRenderPhaseUpdate(queue, update);
                    } else {
                        var alternate = fiber.alternate;
                        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                            var lastRenderedReducer = queue.lastRenderedReducer;
                            if (lastRenderedReducer !== null) {
                                var prevDispatcher;
                                {
                                    prevDispatcher = ReactCurrentDispatcher$1.current;
                                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                                }
                                try {
                                    var currentState = queue.lastRenderedState;
                                    var eagerState = lastRenderedReducer(currentState, action);
                                    update.hasEagerState = true;
                                    update.eagerState = eagerState;
                                    if (objectIs(eagerState, currentState)) {
                                        enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                                        return;
                                    }
                                } catch (error) {} finally {
                                    {
                                        ReactCurrentDispatcher$1.current = prevDispatcher;
                                    }
                                }
                            }
                        }
                        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
                        if (root !== null) {
                            var eventTime = requestEventTime();
                            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                            entangleTransitionUpdate(root, queue, lane);
                        }
                    }
                    markUpdateInDevTools(fiber, lane);
                }
                function isRenderPhaseUpdate(fiber) {
                    var alternate = fiber.alternate;
                    return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
                }
                function enqueueRenderPhaseUpdate(queue, update) {
                    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
                    var pending = queue.pending;
                    if (pending === null) {
                        update.next = update;
                    } else {
                        update.next = pending.next;
                        pending.next = update;
                    }
                    queue.pending = update;
                }
                function entangleTransitionUpdate(root, queue, lane) {
                    if (isTransitionLane(lane)) {
                        var queueLanes = queue.lanes;
                        queueLanes = intersectLanes(queueLanes, root.pendingLanes);
                        var newQueueLanes = mergeLanes(queueLanes, lane);
                        queue.lanes = newQueueLanes;
                        markRootEntangled(root, newQueueLanes);
                    }
                }
                function markUpdateInDevTools(fiber, lane, action) {
                    {
                        markStateUpdateScheduled(fiber, lane);
                    }
                }
                var ContextOnlyDispatcher = {
                    readContext: readContext,
                    useCallback: throwInvalidHookError,
                    useContext: throwInvalidHookError,
                    useEffect: throwInvalidHookError,
                    useImperativeHandle: throwInvalidHookError,
                    useInsertionEffect: throwInvalidHookError,
                    useLayoutEffect: throwInvalidHookError,
                    useMemo: throwInvalidHookError,
                    useReducer: throwInvalidHookError,
                    useRef: throwInvalidHookError,
                    useState: throwInvalidHookError,
                    useDebugValue: throwInvalidHookError,
                    useDeferredValue: throwInvalidHookError,
                    useTransition: throwInvalidHookError,
                    useMutableSource: throwInvalidHookError,
                    useSyncExternalStore: throwInvalidHookError,
                    useId: throwInvalidHookError,
                    unstable_isNewReconciler: enableNewReconciler
                };
                var HooksDispatcherOnMountInDEV = null;
                var HooksDispatcherOnMountWithHookTypesInDEV = null;
                var HooksDispatcherOnUpdateInDEV = null;
                var HooksDispatcherOnRerenderInDEV = null;
                var InvalidNestedHooksDispatcherOnMountInDEV = null;
                var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
                var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
                {
                    var warnInvalidContextAccess = function() {
                        error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
                    };
                    var warnInvalidHookAccess = function() {
                        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. " + "You can only call Hooks at the top level of your React function. " + "For more information, see " + "https://reactjs.org/link/rules-of-hooks");
                    };
                    HooksDispatcherOnMountInDEV = {
                        readContext: function(context) {
                            return readContext(context);
                        },
                        useCallback: function(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            return mountCallback(callback, deps);
                        },
                        useContext: function(context) {
                            currentHookNameInDev = "useContext";
                            mountHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function(create, deps) {
                            currentHookNameInDev = "useEffect";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            return mountEffect(create, deps);
                        },
                        useImperativeHandle: function(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            return mountImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            return mountInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            return mountLayoutEffect(create, deps);
                        },
                        useMemo: function(create, deps) {
                            currentHookNameInDev = "useMemo";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountMemo(create, deps);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            mountHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountReducer(reducer, initialArg, init);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function(initialValue) {
                            currentHookNameInDev = "useRef";
                            mountHookTypesDev();
                            return mountRef(initialValue);
                        },
                        useState: function(initialState) {
                            currentHookNameInDev = "useState";
                            mountHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountState(initialState);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            mountHookTypesDev();
                            return mountDebugValue();
                        },
                        useDeferredValue: function(value) {
                            currentHookNameInDev = "useDeferredValue";
                            mountHookTypesDev();
                            return mountDeferredValue(value);
                        },
                        useTransition: function() {
                            currentHookNameInDev = "useTransition";
                            mountHookTypesDev();
                            return mountTransition();
                        },
                        useMutableSource: function(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            mountHookTypesDev();
                            return mountMutableSource();
                        },
                        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            mountHookTypesDev();
                            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
                        },
                        useId: function() {
                            currentHookNameInDev = "useId";
                            mountHookTypesDev();
                            return mountId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    HooksDispatcherOnMountWithHookTypesInDEV = {
                        readContext: function(context) {
                            return readContext(context);
                        },
                        useCallback: function(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            updateHookTypesDev();
                            return mountCallback(callback, deps);
                        },
                        useContext: function(context) {
                            currentHookNameInDev = "useContext";
                            updateHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function(create, deps) {
                            currentHookNameInDev = "useEffect";
                            updateHookTypesDev();
                            return mountEffect(create, deps);
                        },
                        useImperativeHandle: function(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            updateHookTypesDev();
                            return mountImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            updateHookTypesDev();
                            return mountInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            updateHookTypesDev();
                            return mountLayoutEffect(create, deps);
                        },
                        useMemo: function(create, deps) {
                            currentHookNameInDev = "useMemo";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountMemo(create, deps);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountReducer(reducer, initialArg, init);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function(initialValue) {
                            currentHookNameInDev = "useRef";
                            updateHookTypesDev();
                            return mountRef(initialValue);
                        },
                        useState: function(initialState) {
                            currentHookNameInDev = "useState";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountState(initialState);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            updateHookTypesDev();
                            return mountDebugValue();
                        },
                        useDeferredValue: function(value) {
                            currentHookNameInDev = "useDeferredValue";
                            updateHookTypesDev();
                            return mountDeferredValue(value);
                        },
                        useTransition: function() {
                            currentHookNameInDev = "useTransition";
                            updateHookTypesDev();
                            return mountTransition();
                        },
                        useMutableSource: function(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            updateHookTypesDev();
                            return mountMutableSource();
                        },
                        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            updateHookTypesDev();
                            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
                        },
                        useId: function() {
                            currentHookNameInDev = "useId";
                            updateHookTypesDev();
                            return mountId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    HooksDispatcherOnUpdateInDEV = {
                        readContext: function(context) {
                            return readContext(context);
                        },
                        useCallback: function(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            updateHookTypesDev();
                            return updateCallback(callback, deps);
                        },
                        useContext: function(context) {
                            currentHookNameInDev = "useContext";
                            updateHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function(create, deps) {
                            currentHookNameInDev = "useEffect";
                            updateHookTypesDev();
                            return updateEffect(create, deps);
                        },
                        useImperativeHandle: function(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            updateHookTypesDev();
                            return updateImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            updateHookTypesDev();
                            return updateInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            updateHookTypesDev();
                            return updateLayoutEffect(create, deps);
                        },
                        useMemo: function(create, deps) {
                            currentHookNameInDev = "useMemo";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateMemo(create, deps);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateReducer(reducer, initialArg, init);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function(initialValue) {
                            currentHookNameInDev = "useRef";
                            updateHookTypesDev();
                            return updateRef();
                        },
                        useState: function(initialState) {
                            currentHookNameInDev = "useState";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateState(initialState);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            updateHookTypesDev();
                            return updateDebugValue();
                        },
                        useDeferredValue: function(value) {
                            currentHookNameInDev = "useDeferredValue";
                            updateHookTypesDev();
                            return updateDeferredValue(value);
                        },
                        useTransition: function() {
                            currentHookNameInDev = "useTransition";
                            updateHookTypesDev();
                            return updateTransition();
                        },
                        useMutableSource: function(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            updateHookTypesDev();
                            return updateMutableSource();
                        },
                        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            updateHookTypesDev();
                            return updateSyncExternalStore(subscribe, getSnapshot);
                        },
                        useId: function() {
                            currentHookNameInDev = "useId";
                            updateHookTypesDev();
                            return updateId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    HooksDispatcherOnRerenderInDEV = {
                        readContext: function(context) {
                            return readContext(context);
                        },
                        useCallback: function(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            updateHookTypesDev();
                            return updateCallback(callback, deps);
                        },
                        useContext: function(context) {
                            currentHookNameInDev = "useContext";
                            updateHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function(create, deps) {
                            currentHookNameInDev = "useEffect";
                            updateHookTypesDev();
                            return updateEffect(create, deps);
                        },
                        useImperativeHandle: function(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            updateHookTypesDev();
                            return updateImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            updateHookTypesDev();
                            return updateInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            updateHookTypesDev();
                            return updateLayoutEffect(create, deps);
                        },
                        useMemo: function(create, deps) {
                            currentHookNameInDev = "useMemo";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                            try {
                                return updateMemo(create, deps);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                            try {
                                return rerenderReducer(reducer, initialArg, init);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function(initialValue) {
                            currentHookNameInDev = "useRef";
                            updateHookTypesDev();
                            return updateRef();
                        },
                        useState: function(initialState) {
                            currentHookNameInDev = "useState";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                            try {
                                return rerenderState(initialState);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            updateHookTypesDev();
                            return updateDebugValue();
                        },
                        useDeferredValue: function(value) {
                            currentHookNameInDev = "useDeferredValue";
                            updateHookTypesDev();
                            return rerenderDeferredValue(value);
                        },
                        useTransition: function() {
                            currentHookNameInDev = "useTransition";
                            updateHookTypesDev();
                            return rerenderTransition();
                        },
                        useMutableSource: function(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            updateHookTypesDev();
                            return updateMutableSource();
                        },
                        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            updateHookTypesDev();
                            return updateSyncExternalStore(subscribe, getSnapshot);
                        },
                        useId: function() {
                            currentHookNameInDev = "useId";
                            updateHookTypesDev();
                            return updateId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    InvalidNestedHooksDispatcherOnMountInDEV = {
                        readContext: function(context) {
                            warnInvalidContextAccess();
                            return readContext(context);
                        },
                        useCallback: function(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountCallback(callback, deps);
                        },
                        useContext: function(context) {
                            currentHookNameInDev = "useContext";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function(create, deps) {
                            currentHookNameInDev = "useEffect";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountEffect(create, deps);
                        },
                        useImperativeHandle: function(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountLayoutEffect(create, deps);
                        },
                        useMemo: function(create, deps) {
                            currentHookNameInDev = "useMemo";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountMemo(create, deps);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountReducer(reducer, initialArg, init);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function(initialValue) {
                            currentHookNameInDev = "useRef";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountRef(initialValue);
                        },
                        useState: function(initialState) {
                            currentHookNameInDev = "useState";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountState(initialState);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountDebugValue();
                        },
                        useDeferredValue: function(value) {
                            currentHookNameInDev = "useDeferredValue";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountDeferredValue(value);
                        },
                        useTransition: function() {
                            currentHookNameInDev = "useTransition";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountTransition();
                        },
                        useMutableSource: function(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountMutableSource();
                        },
                        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
                        },
                        useId: function() {
                            currentHookNameInDev = "useId";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    InvalidNestedHooksDispatcherOnUpdateInDEV = {
                        readContext: function(context) {
                            warnInvalidContextAccess();
                            return readContext(context);
                        },
                        useCallback: function(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateCallback(callback, deps);
                        },
                        useContext: function(context) {
                            currentHookNameInDev = "useContext";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function(create, deps) {
                            currentHookNameInDev = "useEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateEffect(create, deps);
                        },
                        useImperativeHandle: function(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateLayoutEffect(create, deps);
                        },
                        useMemo: function(create, deps) {
                            currentHookNameInDev = "useMemo";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateMemo(create, deps);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateReducer(reducer, initialArg, init);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function(initialValue) {
                            currentHookNameInDev = "useRef";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateRef();
                        },
                        useState: function(initialState) {
                            currentHookNameInDev = "useState";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateState(initialState);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateDebugValue();
                        },
                        useDeferredValue: function(value) {
                            currentHookNameInDev = "useDeferredValue";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateDeferredValue(value);
                        },
                        useTransition: function() {
                            currentHookNameInDev = "useTransition";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateTransition();
                        },
                        useMutableSource: function(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateMutableSource();
                        },
                        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateSyncExternalStore(subscribe, getSnapshot);
                        },
                        useId: function() {
                            currentHookNameInDev = "useId";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    InvalidNestedHooksDispatcherOnRerenderInDEV = {
                        readContext: function(context) {
                            warnInvalidContextAccess();
                            return readContext(context);
                        },
                        useCallback: function(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateCallback(callback, deps);
                        },
                        useContext: function(context) {
                            currentHookNameInDev = "useContext";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function(create, deps) {
                            currentHookNameInDev = "useEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateEffect(create, deps);
                        },
                        useImperativeHandle: function(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateLayoutEffect(create, deps);
                        },
                        useMemo: function(create, deps) {
                            currentHookNameInDev = "useMemo";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateMemo(create, deps);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return rerenderReducer(reducer, initialArg, init);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function(initialValue) {
                            currentHookNameInDev = "useRef";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateRef();
                        },
                        useState: function(initialState) {
                            currentHookNameInDev = "useState";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return rerenderState(initialState);
                            } finally {
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateDebugValue();
                        },
                        useDeferredValue: function(value) {
                            currentHookNameInDev = "useDeferredValue";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return rerenderDeferredValue(value);
                        },
                        useTransition: function() {
                            currentHookNameInDev = "useTransition";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return rerenderTransition();
                        },
                        useMutableSource: function(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateMutableSource();
                        },
                        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateSyncExternalStore(subscribe, getSnapshot);
                        },
                        useId: function() {
                            currentHookNameInDev = "useId";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                }
                var now$1 = Scheduler.unstable_now;
                var commitTime = 0;
                var layoutEffectStartTime = -1;
                var profilerStartTime = -1;
                var passiveEffectStartTime = -1;
                var currentUpdateIsNested = false;
                var nestedUpdateScheduled = false;
                function isCurrentUpdateNested() {
                    return currentUpdateIsNested;
                }
                function markNestedUpdateScheduled() {
                    {
                        nestedUpdateScheduled = true;
                    }
                }
                function resetNestedUpdateFlag() {
                    {
                        currentUpdateIsNested = false;
                        nestedUpdateScheduled = false;
                    }
                }
                function syncNestedUpdateFlag() {
                    {
                        currentUpdateIsNested = nestedUpdateScheduled;
                        nestedUpdateScheduled = false;
                    }
                }
                function getCommitTime() {
                    return commitTime;
                }
                function recordCommitTime() {
                    commitTime = now$1();
                }
                function startProfilerTimer(fiber) {
                    profilerStartTime = now$1();
                    if (fiber.actualStartTime < 0) {
                        fiber.actualStartTime = now$1();
                    }
                }
                function stopProfilerTimerIfRunning(fiber) {
                    profilerStartTime = -1;
                }
                function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
                    if (profilerStartTime >= 0) {
                        var elapsedTime = now$1() - profilerStartTime;
                        fiber.actualDuration += elapsedTime;
                        if (overrideBaseTime) {
                            fiber.selfBaseDuration = elapsedTime;
                        }
                        profilerStartTime = -1;
                    }
                }
                function recordLayoutEffectDuration(fiber) {
                    if (layoutEffectStartTime >= 0) {
                        var elapsedTime = now$1() - layoutEffectStartTime;
                        layoutEffectStartTime = -1;
                        var parentFiber = fiber.return;
                        while (parentFiber !== null) {
                            switch (parentFiber.tag) {
                              case HostRoot:
                                var root = parentFiber.stateNode;
                                root.effectDuration += elapsedTime;
                                return;

                              case Profiler:
                                var parentStateNode = parentFiber.stateNode;
                                parentStateNode.effectDuration += elapsedTime;
                                return;
                            }
                            parentFiber = parentFiber.return;
                        }
                    }
                }
                function recordPassiveEffectDuration(fiber) {
                    if (passiveEffectStartTime >= 0) {
                        var elapsedTime = now$1() - passiveEffectStartTime;
                        passiveEffectStartTime = -1;
                        var parentFiber = fiber.return;
                        while (parentFiber !== null) {
                            switch (parentFiber.tag) {
                              case HostRoot:
                                var root = parentFiber.stateNode;
                                if (root !== null) {
                                    root.passiveEffectDuration += elapsedTime;
                                }
                                return;

                              case Profiler:
                                var parentStateNode = parentFiber.stateNode;
                                if (parentStateNode !== null) {
                                    parentStateNode.passiveEffectDuration += elapsedTime;
                                }
                                return;
                            }
                            parentFiber = parentFiber.return;
                        }
                    }
                }
                function startLayoutEffectTimer() {
                    layoutEffectStartTime = now$1();
                }
                function startPassiveEffectTimer() {
                    passiveEffectStartTime = now$1();
                }
                function transferActualDuration(fiber) {
                    var child = fiber.child;
                    while (child) {
                        fiber.actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                }
                function createCapturedValueAtFiber(value, source) {
                    return {
                        value: value,
                        source: source,
                        stack: getStackByFiberInDevAndProd(source),
                        digest: null
                    };
                }
                function createCapturedValue(value, digest, stack) {
                    return {
                        value: value,
                        source: null,
                        stack: stack != null ? stack : null,
                        digest: digest != null ? digest : null
                    };
                }
                function showErrorDialog(boundary, errorInfo) {
                    return true;
                }
                function logCapturedError(boundary, errorInfo) {
                    try {
                        var logError = showErrorDialog(boundary, errorInfo);
                        if (logError === false) {
                            return;
                        }
                        var error = errorInfo.value;
                        if (true) {
                            var source = errorInfo.source;
                            var stack = errorInfo.stack;
                            var componentStack = stack !== null ? stack : "";
                            if (error != null && error._suppressLogging) {
                                if (boundary.tag === ClassComponent) {
                                    return;
                                }
                                console["error"](error);
                            }
                            var componentName = source ? getComponentNameFromFiber(source) : null;
                            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                            var errorBoundaryMessage;
                            if (boundary.tag === HostRoot) {
                                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                            } else {
                                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                            }
                            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                            console["error"](combinedMessage);
                        }
                    } catch (e) {
                        setTimeout((function() {
                            throw e;
                        }));
                    }
                }
                var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
                function createRootErrorUpdate(fiber, errorInfo, lane) {
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = CaptureUpdate;
                    update.payload = {
                        element: null
                    };
                    var error = errorInfo.value;
                    update.callback = function() {
                        onUncaughtError(error);
                        logCapturedError(fiber, errorInfo);
                    };
                    return update;
                }
                function createClassErrorUpdate(fiber, errorInfo, lane) {
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = CaptureUpdate;
                    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
                    if (typeof getDerivedStateFromError === "function") {
                        var error$1 = errorInfo.value;
                        update.payload = function() {
                            return getDerivedStateFromError(error$1);
                        };
                        update.callback = function() {
                            {
                                markFailedErrorBoundaryForHotReloading(fiber);
                            }
                            logCapturedError(fiber, errorInfo);
                        };
                    }
                    var inst = fiber.stateNode;
                    if (inst !== null && typeof inst.componentDidCatch === "function") {
                        update.callback = function callback() {
                            {
                                markFailedErrorBoundaryForHotReloading(fiber);
                            }
                            logCapturedError(fiber, errorInfo);
                            if (typeof getDerivedStateFromError !== "function") {
                                markLegacyErrorBoundaryAsFailed(this);
                            }
                            var error$1 = errorInfo.value;
                            var stack = errorInfo.stack;
                            this.componentDidCatch(error$1, {
                                componentStack: stack !== null ? stack : ""
                            });
                            {
                                if (typeof getDerivedStateFromError !== "function") {
                                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                                        error("%s: Error boundaries should implement getDerivedStateFromError(). " + "In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                                    }
                                }
                            }
                        };
                    }
                    return update;
                }
                function attachPingListener(root, wakeable, lanes) {
                    var pingCache = root.pingCache;
                    var threadIDs;
                    if (pingCache === null) {
                        pingCache = root.pingCache = new PossiblyWeakMap$1;
                        threadIDs = new Set;
                        pingCache.set(wakeable, threadIDs);
                    } else {
                        threadIDs = pingCache.get(wakeable);
                        if (threadIDs === undefined) {
                            threadIDs = new Set;
                            pingCache.set(wakeable, threadIDs);
                        }
                    }
                    if (!threadIDs.has(lanes)) {
                        threadIDs.add(lanes);
                        var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
                        {
                            if (isDevToolsPresent) {
                                restorePendingUpdaters(root, lanes);
                            }
                        }
                        wakeable.then(ping, ping);
                    }
                }
                function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
                    var wakeables = suspenseBoundary.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = new Set;
                        updateQueue.add(wakeable);
                        suspenseBoundary.updateQueue = updateQueue;
                    } else {
                        wakeables.add(wakeable);
                    }
                }
                function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
                    var tag = sourceFiber.tag;
                    if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
                        var currentSource = sourceFiber.alternate;
                        if (currentSource) {
                            sourceFiber.updateQueue = currentSource.updateQueue;
                            sourceFiber.memoizedState = currentSource.memoizedState;
                            sourceFiber.lanes = currentSource.lanes;
                        } else {
                            sourceFiber.updateQueue = null;
                            sourceFiber.memoizedState = null;
                        }
                    }
                }
                function getNearestSuspenseBoundaryToCapture(returnFiber) {
                    var node = returnFiber;
                    do {
                        if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                            return node;
                        }
                        node = node.return;
                    } while (node !== null);
                    return null;
                }
                function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
                    if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
                        if (suspenseBoundary === returnFiber) {
                            suspenseBoundary.flags |= ShouldCapture;
                        } else {
                            suspenseBoundary.flags |= DidCapture;
                            sourceFiber.flags |= ForceUpdateForLegacySuspense;
                            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                            if (sourceFiber.tag === ClassComponent) {
                                var currentSourceFiber = sourceFiber.alternate;
                                if (currentSourceFiber === null) {
                                    sourceFiber.tag = IncompleteClassComponent;
                                } else {
                                    var update = createUpdate(NoTimestamp, SyncLane);
                                    update.tag = ForceUpdate;
                                    enqueueUpdate(sourceFiber, update, SyncLane);
                                }
                            }
                            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                        }
                        return suspenseBoundary;
                    }
                    suspenseBoundary.flags |= ShouldCapture;
                    suspenseBoundary.lanes = rootRenderLanes;
                    return suspenseBoundary;
                }
                function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
                    sourceFiber.flags |= Incomplete;
                    {
                        if (isDevToolsPresent) {
                            restorePendingUpdaters(root, rootRenderLanes);
                        }
                    }
                    if (value !== null && typeof value === "object" && typeof value.then === "function") {
                        var wakeable = value;
                        resetSuspendedComponent(sourceFiber);
                        {
                            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                                markDidThrowWhileHydratingDEV();
                            }
                        }
                        var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                        if (suspenseBoundary !== null) {
                            suspenseBoundary.flags &= ~ForceClientRender;
                            markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes);
                            if (suspenseBoundary.mode & ConcurrentMode) {
                                attachPingListener(root, wakeable, rootRenderLanes);
                            }
                            attachRetryListener(suspenseBoundary, root, wakeable);
                            return;
                        } else {
                            if (!includesSyncLane(rootRenderLanes)) {
                                attachPingListener(root, wakeable, rootRenderLanes);
                                renderDidSuspendDelayIfPossible();
                                return;
                            }
                            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This " + "will cause the UI to be replaced with a loading indicator. To " + "fix, updates that suspend should be wrapped " + "with startTransition.");
                            value = uncaughtSuspenseError;
                        }
                    } else {
                        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                            markDidThrowWhileHydratingDEV();
                            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                            if (_suspenseBoundary !== null) {
                                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                                    _suspenseBoundary.flags |= ForceClientRender;
                                }
                                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes);
                                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                                return;
                            }
                        }
                    }
                    value = createCapturedValueAtFiber(value, sourceFiber);
                    renderDidError(value);
                    var workInProgress = returnFiber;
                    do {
                        switch (workInProgress.tag) {
                          case HostRoot:
                            {
                                var _errorInfo = value;
                                workInProgress.flags |= ShouldCapture;
                                var lane = pickArbitraryLane(rootRenderLanes);
                                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                                var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                                enqueueCapturedUpdate(workInProgress, update);
                                return;
                            }

                          case ClassComponent:
                            var errorInfo = value;
                            var ctor = workInProgress.type;
                            var instance = workInProgress.stateNode;
                            if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                                workInProgress.flags |= ShouldCapture;
                                var _lane = pickArbitraryLane(rootRenderLanes);
                                workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane);
                                var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                                enqueueCapturedUpdate(workInProgress, _update);
                                return;
                            }
                            break;
                        }
                        workInProgress = workInProgress.return;
                    } while (workInProgress !== null);
                }
                function getSuspendedCache() {
                    {
                        return null;
                    }
                }
                var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
                var didReceiveUpdate = false;
                var didWarnAboutBadClass;
                var didWarnAboutModulePatternComponent;
                var didWarnAboutContextTypeOnFunctionComponent;
                var didWarnAboutGetDerivedStateOnFunctionComponent;
                var didWarnAboutFunctionRefs;
                var didWarnAboutReassigningProps;
                var didWarnAboutRevealOrder;
                var didWarnAboutTailOptions;
                {
                    didWarnAboutBadClass = {};
                    didWarnAboutModulePatternComponent = {};
                    didWarnAboutContextTypeOnFunctionComponent = {};
                    didWarnAboutGetDerivedStateOnFunctionComponent = {};
                    didWarnAboutFunctionRefs = {};
                    didWarnAboutReassigningProps = false;
                    didWarnAboutRevealOrder = {};
                    didWarnAboutTailOptions = {};
                }
                function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
                    if (current === null) {
                        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                    } else {
                        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
                    }
                }
                function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
                    workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes);
                    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
                }
                function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
                    {
                        if (workInProgress.type !== workInProgress.elementType) {
                            var innerPropTypes = Component.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
                            }
                        }
                    }
                    var render = Component.render;
                    var ref = workInProgress.ref;
                    var nextChildren;
                    var hasId;
                    prepareToReadContext(workInProgress, renderLanes);
                    {
                        markComponentRenderStarted(workInProgress);
                    }
                    {
                        ReactCurrentOwner$1.current = workInProgress;
                        setIsRendering(true);
                        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                        hasId = checkDidRenderIdHook();
                        if (workInProgress.mode & StrictLegacyMode) {
                            setIsStrictModeForDevtools(true);
                            try {
                                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                                hasId = checkDidRenderIdHook();
                            } finally {
                                setIsStrictModeForDevtools(false);
                            }
                        }
                        setIsRendering(false);
                    }
                    {
                        markComponentRenderStopped();
                    }
                    if (current !== null && !didReceiveUpdate) {
                        bailoutHooks(current, workInProgress, renderLanes);
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    }
                    if (getIsHydrating() && hasId) {
                        pushMaterializedTreeId(workInProgress);
                    }
                    workInProgress.flags |= PerformedWork;
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    return workInProgress.child;
                }
                function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
                    if (current === null) {
                        var type = Component.type;
                        if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                            var resolvedType = type;
                            {
                                resolvedType = resolveFunctionForHotReloading(type);
                            }
                            workInProgress.tag = SimpleMemoComponent;
                            workInProgress.type = resolvedType;
                            {
                                validateFunctionComponentInDev(workInProgress, type);
                            }
                            return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
                        }
                        {
                            var innerPropTypes = type.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
                            }
                        }
                        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
                        child.ref = workInProgress.ref;
                        child.return = workInProgress;
                        workInProgress.child = child;
                        return child;
                    }
                    {
                        var _type = Component.type;
                        var _innerPropTypes = _type.propTypes;
                        if (_innerPropTypes) {
                            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
                        }
                    }
                    var currentChild = current.child;
                    var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
                    if (!hasScheduledUpdateOrContext) {
                        var prevProps = currentChild.memoizedProps;
                        var compare = Component.compare;
                        compare = compare !== null ? compare : shallowEqual;
                        if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
                            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                        }
                    }
                    workInProgress.flags |= PerformedWork;
                    var newChild = createWorkInProgress(currentChild, nextProps);
                    newChild.ref = workInProgress.ref;
                    newChild.return = workInProgress;
                    workInProgress.child = newChild;
                    return newChild;
                }
                function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
                    {
                        if (workInProgress.type !== workInProgress.elementType) {
                            var outerMemoType = workInProgress.elementType;
                            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                                var lazyComponent = outerMemoType;
                                var payload = lazyComponent._payload;
                                var init = lazyComponent._init;
                                try {
                                    outerMemoType = init(payload);
                                } catch (x) {
                                    outerMemoType = null;
                                }
                                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                                if (outerPropTypes) {
                                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                                }
                            }
                        }
                    }
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                            didReceiveUpdate = false;
                            workInProgress.pendingProps = nextProps = prevProps;
                            if (!checkScheduledUpdateOrContext(current, renderLanes)) {
                                workInProgress.lanes = current.lanes;
                                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                            } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                                didReceiveUpdate = true;
                            }
                        }
                    }
                    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
                }
                function updateOffscreenComponent(current, workInProgress, renderLanes) {
                    var nextProps = workInProgress.pendingProps;
                    var nextChildren = nextProps.children;
                    var prevState = current !== null ? current.memoizedState : null;
                    if (nextProps.mode === "hidden" || enableLegacyHidden) {
                        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                            var nextState = {
                                baseLanes: NoLanes,
                                cachePool: null,
                                transitions: null
                            };
                            workInProgress.memoizedState = nextState;
                            pushRenderLanes(workInProgress, renderLanes);
                        } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                            var spawnedCachePool = null;
                            var nextBaseLanes;
                            if (prevState !== null) {
                                var prevBaseLanes = prevState.baseLanes;
                                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                            } else {
                                nextBaseLanes = renderLanes;
                            }
                            workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                            var _nextState = {
                                baseLanes: nextBaseLanes,
                                cachePool: spawnedCachePool,
                                transitions: null
                            };
                            workInProgress.memoizedState = _nextState;
                            workInProgress.updateQueue = null;
                            pushRenderLanes(workInProgress, nextBaseLanes);
                            return null;
                        } else {
                            var _nextState2 = {
                                baseLanes: NoLanes,
                                cachePool: null,
                                transitions: null
                            };
                            workInProgress.memoizedState = _nextState2;
                            var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                            pushRenderLanes(workInProgress, subtreeRenderLanes);
                        }
                    } else {
                        var _subtreeRenderLanes;
                        if (prevState !== null) {
                            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
                            workInProgress.memoizedState = null;
                        } else {
                            _subtreeRenderLanes = renderLanes;
                        }
                        pushRenderLanes(workInProgress, _subtreeRenderLanes);
                    }
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    return workInProgress.child;
                }
                function updateFragment(current, workInProgress, renderLanes) {
                    var nextChildren = workInProgress.pendingProps;
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    return workInProgress.child;
                }
                function updateMode(current, workInProgress, renderLanes) {
                    var nextChildren = workInProgress.pendingProps.children;
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    return workInProgress.child;
                }
                function updateProfiler(current, workInProgress, renderLanes) {
                    {
                        workInProgress.flags |= Update;
                        {
                            var stateNode = workInProgress.stateNode;
                            stateNode.effectDuration = 0;
                            stateNode.passiveEffectDuration = 0;
                        }
                    }
                    var nextProps = workInProgress.pendingProps;
                    var nextChildren = nextProps.children;
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    return workInProgress.child;
                }
                function markRef(current, workInProgress) {
                    var ref = workInProgress.ref;
                    if (current === null && ref !== null || current !== null && current.ref !== ref) {
                        workInProgress.flags |= Ref;
                        {
                            workInProgress.flags |= RefStatic;
                        }
                    }
                }
                function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
                    {
                        if (workInProgress.type !== workInProgress.elementType) {
                            var innerPropTypes = Component.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
                            }
                        }
                    }
                    var context;
                    {
                        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
                        context = getMaskedContext(workInProgress, unmaskedContext);
                    }
                    var nextChildren;
                    var hasId;
                    prepareToReadContext(workInProgress, renderLanes);
                    {
                        markComponentRenderStarted(workInProgress);
                    }
                    {
                        ReactCurrentOwner$1.current = workInProgress;
                        setIsRendering(true);
                        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                        hasId = checkDidRenderIdHook();
                        if (workInProgress.mode & StrictLegacyMode) {
                            setIsStrictModeForDevtools(true);
                            try {
                                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                                hasId = checkDidRenderIdHook();
                            } finally {
                                setIsStrictModeForDevtools(false);
                            }
                        }
                        setIsRendering(false);
                    }
                    {
                        markComponentRenderStopped();
                    }
                    if (current !== null && !didReceiveUpdate) {
                        bailoutHooks(current, workInProgress, renderLanes);
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    }
                    if (getIsHydrating() && hasId) {
                        pushMaterializedTreeId(workInProgress);
                    }
                    workInProgress.flags |= PerformedWork;
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    return workInProgress.child;
                }
                function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
                    {
                        switch (shouldError(workInProgress)) {
                          case false:
                            {
                                var _instance = workInProgress.stateNode;
                                var ctor = workInProgress.type;
                                var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
                                var state = tempInstance.state;
                                _instance.updater.enqueueSetState(_instance, state, null);
                                break;
                            }

                          case true:
                            {
                                workInProgress.flags |= DidCapture;
                                workInProgress.flags |= ShouldCapture;
                                var error$1 = new Error("Simulated error coming from DevTools");
                                var lane = pickArbitraryLane(renderLanes);
                                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                                var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
                                enqueueCapturedUpdate(workInProgress, update);
                                break;
                            }
                        }
                        if (workInProgress.type !== workInProgress.elementType) {
                            var innerPropTypes = Component.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
                            }
                        }
                    }
                    var hasContext;
                    if (isContextProvider(Component)) {
                        hasContext = true;
                        pushContextProvider(workInProgress);
                    } else {
                        hasContext = false;
                    }
                    prepareToReadContext(workInProgress, renderLanes);
                    var instance = workInProgress.stateNode;
                    var shouldUpdate;
                    if (instance === null) {
                        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
                        constructClassInstance(workInProgress, Component, nextProps);
                        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
                        shouldUpdate = true;
                    } else if (current === null) {
                        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
                    } else {
                        shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
                    }
                    var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
                    {
                        var inst = workInProgress.stateNode;
                        if (shouldUpdate && inst.props !== nextProps) {
                            if (!didWarnAboutReassigningProps) {
                                error("It looks like %s is reassigning its own `this.props` while rendering. " + "This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress) || "a component");
                            }
                            didWarnAboutReassigningProps = true;
                        }
                    }
                    return nextUnitOfWork;
                }
                function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
                    markRef(current, workInProgress);
                    var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
                    if (!shouldUpdate && !didCaptureError) {
                        if (hasContext) {
                            invalidateContextProvider(workInProgress, Component, false);
                        }
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    }
                    var instance = workInProgress.stateNode;
                    ReactCurrentOwner$1.current = workInProgress;
                    var nextChildren;
                    if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
                        nextChildren = null;
                        {
                            stopProfilerTimerIfRunning();
                        }
                    } else {
                        {
                            markComponentRenderStarted(workInProgress);
                        }
                        {
                            setIsRendering(true);
                            nextChildren = instance.render();
                            if (workInProgress.mode & StrictLegacyMode) {
                                setIsStrictModeForDevtools(true);
                                try {
                                    instance.render();
                                } finally {
                                    setIsStrictModeForDevtools(false);
                                }
                            }
                            setIsRendering(false);
                        }
                        {
                            markComponentRenderStopped();
                        }
                    }
                    workInProgress.flags |= PerformedWork;
                    if (current !== null && didCaptureError) {
                        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
                    } else {
                        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    }
                    workInProgress.memoizedState = instance.state;
                    if (hasContext) {
                        invalidateContextProvider(workInProgress, Component, true);
                    }
                    return workInProgress.child;
                }
                function pushHostRootContext(workInProgress) {
                    var root = workInProgress.stateNode;
                    if (root.pendingContext) {
                        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
                    } else if (root.context) {
                        pushTopLevelContextObject(workInProgress, root.context, false);
                    }
                    pushHostContainer(workInProgress, root.containerInfo);
                }
                function updateHostRoot(current, workInProgress, renderLanes) {
                    pushHostRootContext(workInProgress);
                    if (current === null) {
                        throw new Error("Should have a current fiber. This is a bug in React.");
                    }
                    var nextProps = workInProgress.pendingProps;
                    var prevState = workInProgress.memoizedState;
                    var prevChildren = prevState.element;
                    cloneUpdateQueue(current, workInProgress);
                    processUpdateQueue(workInProgress, nextProps, null, renderLanes);
                    var nextState = workInProgress.memoizedState;
                    workInProgress.stateNode;
                    var nextChildren = nextState.element;
                    if (prevState.isDehydrated) {
                        var overrideState = {
                            element: nextChildren,
                            isDehydrated: false,
                            cache: nextState.cache,
                            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                            transitions: nextState.transitions
                        };
                        var updateQueue = workInProgress.updateQueue;
                        updateQueue.baseState = overrideState;
                        workInProgress.memoizedState = overrideState;
                        if (workInProgress.flags & ForceClientRender) {
                            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside " + "of a Suspense boundary, the entire root will switch to " + "client rendering."), workInProgress);
                            return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
                        } else if (nextChildren !== prevChildren) {
                            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able " + "hydrate. Switched the entire root to client rendering."), workInProgress);
                            return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
                        } else {
                            enterHydrationState(workInProgress);
                            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                            workInProgress.child = child;
                            var node = child;
                            while (node) {
                                node.flags = node.flags & ~Placement | Hydrating;
                                node = node.sibling;
                            }
                        }
                    } else {
                        resetHydrationState();
                        if (nextChildren === prevChildren) {
                            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                        }
                        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    }
                    return workInProgress.child;
                }
                function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
                    resetHydrationState();
                    queueHydrationError(recoverableError);
                    workInProgress.flags |= ForceClientRender;
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    return workInProgress.child;
                }
                function updateHostComponent(current, workInProgress, renderLanes) {
                    pushHostContext(workInProgress);
                    if (current === null) {
                        tryToClaimNextHydratableInstance(workInProgress);
                    }
                    var type = workInProgress.type;
                    var nextProps = workInProgress.pendingProps;
                    var prevProps = current !== null ? current.memoizedProps : null;
                    var nextChildren = nextProps.children;
                    var isDirectTextChild = shouldSetTextContent(type, nextProps);
                    if (isDirectTextChild) {
                        nextChildren = null;
                    } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
                        workInProgress.flags |= ContentReset;
                    }
                    markRef(current, workInProgress);
                    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    return workInProgress.child;
                }
                function updateHostText(current, workInProgress) {
                    if (current === null) {
                        tryToClaimNextHydratableInstance(workInProgress);
                    }
                    return null;
                }
                function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
                    resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
                    var props = workInProgress.pendingProps;
                    var lazyComponent = elementType;
                    var payload = lazyComponent._payload;
                    var init = lazyComponent._init;
                    var Component = init(payload);
                    workInProgress.type = Component;
                    var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
                    var resolvedProps = resolveDefaultProps(Component, props);
                    var child;
                    switch (resolvedTag) {
                      case FunctionComponent:
                        {
                            {
                                validateFunctionComponentInDev(workInProgress, Component);
                                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                            }
                            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                            return child;
                        }

                      case ClassComponent:
                        {
                            {
                                workInProgress.type = Component = resolveClassForHotReloading(Component);
                            }
                            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                            return child;
                        }

                      case ForwardRef:
                        {
                            {
                                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                            }
                            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                            return child;
                        }

                      case MemoComponent:
                        {
                            {
                                if (workInProgress.type !== workInProgress.elementType) {
                                    var outerPropTypes = Component.propTypes;
                                    if (outerPropTypes) {
                                        checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                                    }
                                }
                            }
                            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);
                            return child;
                        }
                    }
                    var hint = "";
                    {
                        if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                            hint = " Did you wrap a component in React.lazy() more than once?";
                        }
                    }
                    throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
                }
                function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
                    resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
                    workInProgress.tag = ClassComponent;
                    var hasContext;
                    if (isContextProvider(Component)) {
                        hasContext = true;
                        pushContextProvider(workInProgress);
                    } else {
                        hasContext = false;
                    }
                    prepareToReadContext(workInProgress, renderLanes);
                    constructClassInstance(workInProgress, Component, nextProps);
                    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
                    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
                }
                function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
                    resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
                    var props = workInProgress.pendingProps;
                    var context;
                    {
                        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
                        context = getMaskedContext(workInProgress, unmaskedContext);
                    }
                    prepareToReadContext(workInProgress, renderLanes);
                    var value;
                    var hasId;
                    {
                        markComponentRenderStarted(workInProgress);
                    }
                    {
                        if (Component.prototype && typeof Component.prototype.render === "function") {
                            var componentName = getComponentNameFromType(Component) || "Unknown";
                            if (!didWarnAboutBadClass[componentName]) {
                                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                                didWarnAboutBadClass[componentName] = true;
                            }
                        }
                        if (workInProgress.mode & StrictLegacyMode) {
                            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
                        }
                        setIsRendering(true);
                        ReactCurrentOwner$1.current = workInProgress;
                        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                        hasId = checkDidRenderIdHook();
                        setIsRendering(false);
                    }
                    {
                        markComponentRenderStopped();
                    }
                    workInProgress.flags |= PerformedWork;
                    {
                        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
                            var _componentName = getComponentNameFromType(Component) || "Unknown";
                            if (!didWarnAboutModulePatternComponent[_componentName]) {
                                error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                                didWarnAboutModulePatternComponent[_componentName] = true;
                            }
                        }
                    }
                    if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
                        {
                            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                                error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                                didWarnAboutModulePatternComponent[_componentName2] = true;
                            }
                        }
                        workInProgress.tag = ClassComponent;
                        workInProgress.memoizedState = null;
                        workInProgress.updateQueue = null;
                        var hasContext = false;
                        if (isContextProvider(Component)) {
                            hasContext = true;
                            pushContextProvider(workInProgress);
                        } else {
                            hasContext = false;
                        }
                        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
                        initializeUpdateQueue(workInProgress);
                        adoptClassInstance(workInProgress, value);
                        mountClassInstance(workInProgress, Component, props, renderLanes);
                        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
                    } else {
                        workInProgress.tag = FunctionComponent;
                        {
                            if (workInProgress.mode & StrictLegacyMode) {
                                setIsStrictModeForDevtools(true);
                                try {
                                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                                    hasId = checkDidRenderIdHook();
                                } finally {
                                    setIsStrictModeForDevtools(false);
                                }
                            }
                        }
                        if (getIsHydrating() && hasId) {
                            pushMaterializedTreeId(workInProgress);
                        }
                        reconcileChildren(null, workInProgress, value, renderLanes);
                        {
                            validateFunctionComponentInDev(workInProgress, Component);
                        }
                        return workInProgress.child;
                    }
                }
                function validateFunctionComponentInDev(workInProgress, Component) {
                    {
                        if (Component) {
                            if (Component.childContextTypes) {
                                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                            }
                        }
                        if (workInProgress.ref !== null) {
                            var info = "";
                            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                            if (ownerName) {
                                info += "\n\nCheck the render method of `" + ownerName + "`.";
                            }
                            var warningKey = ownerName || "";
                            var debugSource = workInProgress._debugSource;
                            if (debugSource) {
                                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                            }
                            if (!didWarnAboutFunctionRefs[warningKey]) {
                                didWarnAboutFunctionRefs[warningKey] = true;
                                error("Function components cannot be given refs. " + "Attempts to access this ref will fail. " + "Did you mean to use React.forwardRef()?%s", info);
                            }
                        }
                        if (typeof Component.getDerivedStateFromProps === "function") {
                            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                            }
                        }
                        if (typeof Component.contextType === "object" && Component.contextType !== null) {
                            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                                error("%s: Function components do not support contextType.", _componentName4);
                                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                            }
                        }
                    }
                }
                var SUSPENDED_MARKER = {
                    dehydrated: null,
                    treeContext: null,
                    retryLane: NoLane
                };
                function mountSuspenseOffscreenState(renderLanes) {
                    return {
                        baseLanes: renderLanes,
                        cachePool: getSuspendedCache(),
                        transitions: null
                    };
                }
                function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
                    var cachePool = null;
                    return {
                        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
                        cachePool: cachePool,
                        transitions: prevOffscreenState.transitions
                    };
                }
                function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
                    if (current !== null) {
                        var suspenseState = current.memoizedState;
                        if (suspenseState === null) {
                            return false;
                        }
                    }
                    return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
                }
                function getRemainingWorkInPrimaryTree(current, renderLanes) {
                    return removeLanes(current.childLanes, renderLanes);
                }
                function updateSuspenseComponent(current, workInProgress, renderLanes) {
                    var nextProps = workInProgress.pendingProps;
                    {
                        if (shouldSuspend(workInProgress)) {
                            workInProgress.flags |= DidCapture;
                        }
                    }
                    var suspenseContext = suspenseStackCursor.current;
                    var showFallback = false;
                    var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
                    if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
                        showFallback = true;
                        workInProgress.flags &= ~DidCapture;
                    } else {
                        if (current === null || current.memoizedState !== null) {
                            {
                                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                            }
                        }
                    }
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext);
                    if (current === null) {
                        tryToClaimNextHydratableInstance(workInProgress);
                        var suspenseState = workInProgress.memoizedState;
                        if (suspenseState !== null) {
                            var dehydrated = suspenseState.dehydrated;
                            if (dehydrated !== null) {
                                return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
                            }
                        }
                        var nextPrimaryChildren = nextProps.children;
                        var nextFallbackChildren = nextProps.fallback;
                        if (showFallback) {
                            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                            var primaryChildFragment = workInProgress.child;
                            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                            workInProgress.memoizedState = SUSPENDED_MARKER;
                            return fallbackFragment;
                        } else {
                            return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
                        }
                    } else {
                        var prevState = current.memoizedState;
                        if (prevState !== null) {
                            var _dehydrated = prevState.dehydrated;
                            if (_dehydrated !== null) {
                                return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
                            }
                        }
                        if (showFallback) {
                            var _nextFallbackChildren = nextProps.fallback;
                            var _nextPrimaryChildren = nextProps.children;
                            var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
                            var _primaryChildFragment2 = workInProgress.child;
                            var prevOffscreenState = current.child.memoizedState;
                            _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                            _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                            workInProgress.memoizedState = SUSPENDED_MARKER;
                            return fallbackChildFragment;
                        } else {
                            var _nextPrimaryChildren2 = nextProps.children;
                            var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);
                            workInProgress.memoizedState = null;
                            return _primaryChildFragment3;
                        }
                    }
                }
                function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
                    var mode = workInProgress.mode;
                    var primaryChildProps = {
                        mode: "visible",
                        children: primaryChildren
                    };
                    var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
                    primaryChildFragment.return = workInProgress;
                    workInProgress.child = primaryChildFragment;
                    return primaryChildFragment;
                }
                function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
                    var mode = workInProgress.mode;
                    var progressedPrimaryFragment = workInProgress.child;
                    var primaryChildProps = {
                        mode: "hidden",
                        children: primaryChildren
                    };
                    var primaryChildFragment;
                    var fallbackChildFragment;
                    if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
                        primaryChildFragment = progressedPrimaryFragment;
                        primaryChildFragment.childLanes = NoLanes;
                        primaryChildFragment.pendingProps = primaryChildProps;
                        if (workInProgress.mode & ProfileMode) {
                            primaryChildFragment.actualDuration = 0;
                            primaryChildFragment.actualStartTime = -1;
                            primaryChildFragment.selfBaseDuration = 0;
                            primaryChildFragment.treeBaseDuration = 0;
                        }
                        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
                    } else {
                        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
                        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
                    }
                    primaryChildFragment.return = workInProgress;
                    fallbackChildFragment.return = workInProgress;
                    primaryChildFragment.sibling = fallbackChildFragment;
                    workInProgress.child = primaryChildFragment;
                    return fallbackChildFragment;
                }
                function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
                    return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
                }
                function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
                    return createWorkInProgress(current, offscreenProps);
                }
                function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
                    var currentPrimaryChildFragment = current.child;
                    var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                    var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
                        mode: "visible",
                        children: primaryChildren
                    });
                    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                        primaryChildFragment.lanes = renderLanes;
                    }
                    primaryChildFragment.return = workInProgress;
                    primaryChildFragment.sibling = null;
                    if (currentFallbackChildFragment !== null) {
                        var deletions = workInProgress.deletions;
                        if (deletions === null) {
                            workInProgress.deletions = [ currentFallbackChildFragment ];
                            workInProgress.flags |= ChildDeletion;
                        } else {
                            deletions.push(currentFallbackChildFragment);
                        }
                    }
                    workInProgress.child = primaryChildFragment;
                    return primaryChildFragment;
                }
                function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
                    var mode = workInProgress.mode;
                    var currentPrimaryChildFragment = current.child;
                    var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                    var primaryChildProps = {
                        mode: "hidden",
                        children: primaryChildren
                    };
                    var primaryChildFragment;
                    if ((mode & ConcurrentMode) === NoMode && workInProgress.child !== currentPrimaryChildFragment) {
                        var progressedPrimaryFragment = workInProgress.child;
                        primaryChildFragment = progressedPrimaryFragment;
                        primaryChildFragment.childLanes = NoLanes;
                        primaryChildFragment.pendingProps = primaryChildProps;
                        if (workInProgress.mode & ProfileMode) {
                            primaryChildFragment.actualDuration = 0;
                            primaryChildFragment.actualStartTime = -1;
                            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
                        }
                        workInProgress.deletions = null;
                    } else {
                        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
                        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
                    }
                    var fallbackChildFragment;
                    if (currentFallbackChildFragment !== null) {
                        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
                    } else {
                        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
                        fallbackChildFragment.flags |= Placement;
                    }
                    fallbackChildFragment.return = workInProgress;
                    primaryChildFragment.return = workInProgress;
                    primaryChildFragment.sibling = fallbackChildFragment;
                    workInProgress.child = primaryChildFragment;
                    return fallbackChildFragment;
                }
                function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
                    if (recoverableError !== null) {
                        queueHydrationError(recoverableError);
                    }
                    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
                    var nextProps = workInProgress.pendingProps;
                    var primaryChildren = nextProps.children;
                    var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren);
                    primaryChildFragment.flags |= Placement;
                    workInProgress.memoizedState = null;
                    return primaryChildFragment;
                }
                function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
                    var fiberMode = workInProgress.mode;
                    var primaryChildProps = {
                        mode: "visible",
                        children: primaryChildren
                    };
                    var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
                    var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null);
                    fallbackChildFragment.flags |= Placement;
                    primaryChildFragment.return = workInProgress;
                    fallbackChildFragment.return = workInProgress;
                    primaryChildFragment.sibling = fallbackChildFragment;
                    workInProgress.child = primaryChildFragment;
                    if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
                        reconcileChildFibers(workInProgress, current.child, null, renderLanes);
                    }
                    return fallbackChildFragment;
                }
                function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
                    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                        {
                            error("Cannot hydrate Suspense in legacy mode. Switch from " + "ReactDOM.hydrate(element, container) to " + "ReactDOMClient.hydrateRoot(container, <App />)" + ".render(element) or remove the Suspense components from " + "the server rendered components.");
                        }
                        workInProgress.lanes = laneToLanes(SyncLane);
                    } else if (isSuspenseInstanceFallback(suspenseInstance)) {
                        workInProgress.lanes = laneToLanes(DefaultHydrationLane);
                    } else {
                        workInProgress.lanes = laneToLanes(OffscreenLane);
                    }
                    return null;
                }
                function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
                    if (!didSuspend) {
                        warnIfHydrating();
                        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);
                        }
                        if (isSuspenseInstanceFallback(suspenseInstance)) {
                            var digest, message, stack;
                            {
                                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                                digest = _getSuspenseInstanceF.digest;
                                message = _getSuspenseInstanceF.message;
                                stack = _getSuspenseInstanceF.stack;
                            }
                            var error;
                            if (message) {
                                error = new Error(message);
                            } else {
                                error = new Error("The server could not finish this Suspense boundary, likely " + "due to an error during server rendering. Switched to " + "client rendering.");
                            }
                            var capturedValue = createCapturedValue(error, digest, stack);
                            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
                        }
                        var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);
                        if (didReceiveUpdate || hasContextChanged) {
                            var root = getWorkInProgressRoot();
                            if (root !== null) {
                                var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);
                                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                                    suspenseState.retryLane = attemptHydrationAtLane;
                                    var eventTime = NoTimestamp;
                                    enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
                                    scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
                                }
                            }
                            renderDidSuspendDelayIfPossible();
                            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished " + "hydrating. This caused the boundary to switch to client rendering. " + "The usual way to fix this is to wrap the original update " + "in startTransition."));
                            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
                        } else if (isSuspenseInstancePending(suspenseInstance)) {
                            workInProgress.flags |= DidCapture;
                            workInProgress.child = current.child;
                            var retry = retryDehydratedSuspenseBoundary.bind(null, current);
                            registerSuspenseInstanceRetry(suspenseInstance, retry);
                            return null;
                        } else {
                            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
                            var primaryChildren = nextProps.children;
                            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren);
                            primaryChildFragment.flags |= Hydrating;
                            return primaryChildFragment;
                        }
                    } else {
                        if (workInProgress.flags & ForceClientRender) {
                            workInProgress.flags &= ~ForceClientRender;
                            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. " + "Switched to client rendering."));
                            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
                        } else if (workInProgress.memoizedState !== null) {
                            workInProgress.child = current.child;
                            workInProgress.flags |= DidCapture;
                            return null;
                        } else {
                            var nextPrimaryChildren = nextProps.children;
                            var nextFallbackChildren = nextProps.fallback;
                            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                            var _primaryChildFragment4 = workInProgress.child;
                            _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
                            workInProgress.memoizedState = SUSPENDED_MARKER;
                            return fallbackChildFragment;
                        }
                    }
                }
                function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
                }
                function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
                    var node = firstChild;
                    while (node !== null) {
                        if (node.tag === SuspenseComponent) {
                            var state = node.memoizedState;
                            if (state !== null) {
                                scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
                            }
                        } else if (node.tag === SuspenseListComponent) {
                            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
                        } else if (node.child !== null) {
                            node.child.return = node;
                            node = node.child;
                            continue;
                        }
                        if (node === workInProgress) {
                            return;
                        }
                        while (node.sibling === null) {
                            if (node.return === null || node.return === workInProgress) {
                                return;
                            }
                            node = node.return;
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                    }
                }
                function findLastContentRow(firstChild) {
                    var row = firstChild;
                    var lastContentRow = null;
                    while (row !== null) {
                        var currentRow = row.alternate;
                        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                            lastContentRow = row;
                        }
                        row = row.sibling;
                    }
                    return lastContentRow;
                }
                function validateRevealOrder(revealOrder) {
                    {
                        if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                            didWarnAboutRevealOrder[revealOrder] = true;
                            if (typeof revealOrder === "string") {
                                switch (revealOrder.toLowerCase()) {
                                  case "together":
                                  case "forwards":
                                  case "backwards":
                                    {
                                        error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                                        break;
                                    }

                                  case "forward":
                                  case "backward":
                                    {
                                        error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                                        break;
                                    }

                                  default:
                                    error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                                    break;
                                }
                            } else {
                                error("%s is not a supported value for revealOrder on <SuspenseList />. " + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                            }
                        }
                    }
                }
                function validateTailOptions(tailMode, revealOrder) {
                    {
                        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
                            if (tailMode !== "collapsed" && tailMode !== "hidden") {
                                didWarnAboutTailOptions[tailMode] = true;
                                error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
                            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                                didWarnAboutTailOptions[tailMode] = true;
                                error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
                            }
                        }
                    }
                }
                function validateSuspenseListNestedChild(childSlot, index) {
                    {
                        var isAnArray = isArray(childSlot);
                        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
                        if (isAnArray || isIterable) {
                            var type = isAnArray ? "array" : "iterable";
                            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in " + "an additional SuspenseList to configure its revealOrder: " + "<SuspenseList revealOrder=...> ... " + "<SuspenseList revealOrder=...>{%s}</SuspenseList> ... " + "</SuspenseList>", type, index, type);
                            return false;
                        }
                    }
                    return true;
                }
                function validateSuspenseListChildren(children, revealOrder) {
                    {
                        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
                            if (isArray(children)) {
                                for (var i = 0; i < children.length; i++) {
                                    if (!validateSuspenseListNestedChild(children[i], i)) {
                                        return;
                                    }
                                }
                            } else {
                                var iteratorFn = getIteratorFn(children);
                                if (typeof iteratorFn === "function") {
                                    var childrenIterator = iteratorFn.call(children);
                                    if (childrenIterator) {
                                        var step = childrenIterator.next();
                                        var _i = 0;
                                        for (;!step.done; step = childrenIterator.next()) {
                                            if (!validateSuspenseListNestedChild(step.value, _i)) {
                                                return;
                                            }
                                            _i++;
                                        }
                                    }
                                } else {
                                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + "This is not useful since it needs multiple rows. " + "Did you mean to pass multiple children or an array?", revealOrder);
                                }
                            }
                        }
                    }
                }
                function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
                    var renderState = workInProgress.memoizedState;
                    if (renderState === null) {
                        workInProgress.memoizedState = {
                            isBackwards: isBackwards,
                            rendering: null,
                            renderingStartTime: 0,
                            last: lastContentRow,
                            tail: tail,
                            tailMode: tailMode
                        };
                    } else {
                        renderState.isBackwards = isBackwards;
                        renderState.rendering = null;
                        renderState.renderingStartTime = 0;
                        renderState.last = lastContentRow;
                        renderState.tail = tail;
                        renderState.tailMode = tailMode;
                    }
                }
                function updateSuspenseListComponent(current, workInProgress, renderLanes) {
                    var nextProps = workInProgress.pendingProps;
                    var revealOrder = nextProps.revealOrder;
                    var tailMode = nextProps.tail;
                    var newChildren = nextProps.children;
                    validateRevealOrder(revealOrder);
                    validateTailOptions(tailMode, revealOrder);
                    validateSuspenseListChildren(newChildren, revealOrder);
                    reconcileChildren(current, workInProgress, newChildren, renderLanes);
                    var suspenseContext = suspenseStackCursor.current;
                    var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    if (shouldForceFallback) {
                        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                        workInProgress.flags |= DidCapture;
                    } else {
                        var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
                        if (didSuspendBefore) {
                            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
                        }
                        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    }
                    pushSuspenseContext(workInProgress, suspenseContext);
                    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                        workInProgress.memoizedState = null;
                    } else {
                        switch (revealOrder) {
                          case "forwards":
                            {
                                var lastContentRow = findLastContentRow(workInProgress.child);
                                var tail;
                                if (lastContentRow === null) {
                                    tail = workInProgress.child;
                                    workInProgress.child = null;
                                } else {
                                    tail = lastContentRow.sibling;
                                    lastContentRow.sibling = null;
                                }
                                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);
                                break;
                            }

                          case "backwards":
                            {
                                var _tail = null;
                                var row = workInProgress.child;
                                workInProgress.child = null;
                                while (row !== null) {
                                    var currentRow = row.alternate;
                                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                                        workInProgress.child = row;
                                        break;
                                    }
                                    var nextRow = row.sibling;
                                    row.sibling = _tail;
                                    _tail = row;
                                    row = nextRow;
                                }
                                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
                                break;
                            }

                          case "together":
                            {
                                initSuspenseListRenderState(workInProgress, false, null, null, undefined);
                                break;
                            }

                          default:
                            {
                                workInProgress.memoizedState = null;
                            }
                        }
                    }
                    return workInProgress.child;
                }
                function updatePortalComponent(current, workInProgress, renderLanes) {
                    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                    var nextChildren = workInProgress.pendingProps;
                    if (current === null) {
                        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
                    } else {
                        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                    }
                    return workInProgress.child;
                }
                var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
                function updateContextProvider(current, workInProgress, renderLanes) {
                    var providerType = workInProgress.type;
                    var context = providerType._context;
                    var newProps = workInProgress.pendingProps;
                    var oldProps = workInProgress.memoizedProps;
                    var newValue = newProps.value;
                    {
                        if (!("value" in newProps)) {
                            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                            }
                        }
                        var providerPropTypes = workInProgress.type.propTypes;
                        if (providerPropTypes) {
                            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
                        }
                    }
                    pushProvider(workInProgress, context, newValue);
                    {
                        if (oldProps !== null) {
                            var oldValue = oldProps.value;
                            if (objectIs(oldValue, newValue)) {
                                if (oldProps.children === newProps.children && !hasContextChanged()) {
                                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                                }
                            } else {
                                propagateContextChange(workInProgress, context, renderLanes);
                            }
                        }
                    }
                    var newChildren = newProps.children;
                    reconcileChildren(current, workInProgress, newChildren, renderLanes);
                    return workInProgress.child;
                }
                var hasWarnedAboutUsingContextAsConsumer = false;
                function updateContextConsumer(current, workInProgress, renderLanes) {
                    var context = workInProgress.type;
                    {
                        if (context._context === undefined) {
                            if (context !== context.Consumer) {
                                if (!hasWarnedAboutUsingContextAsConsumer) {
                                    hasWarnedAboutUsingContextAsConsumer = true;
                                    error("Rendering <Context> directly is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
                                }
                            }
                        } else {
                            context = context._context;
                        }
                    }
                    var newProps = workInProgress.pendingProps;
                    var render = newProps.children;
                    {
                        if (typeof render !== "function") {
                            error("A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.");
                        }
                    }
                    prepareToReadContext(workInProgress, renderLanes);
                    var newValue = readContext(context);
                    {
                        markComponentRenderStarted(workInProgress);
                    }
                    var newChildren;
                    {
                        ReactCurrentOwner$1.current = workInProgress;
                        setIsRendering(true);
                        newChildren = render(newValue);
                        setIsRendering(false);
                    }
                    {
                        markComponentRenderStopped();
                    }
                    workInProgress.flags |= PerformedWork;
                    reconcileChildren(current, workInProgress, newChildren, renderLanes);
                    return workInProgress.child;
                }
                function markWorkInProgressReceivedUpdate() {
                    didReceiveUpdate = true;
                }
                function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
                    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                        if (current !== null) {
                            current.alternate = null;
                            workInProgress.alternate = null;
                            workInProgress.flags |= Placement;
                        }
                    }
                }
                function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
                    if (current !== null) {
                        workInProgress.dependencies = current.dependencies;
                    }
                    {
                        stopProfilerTimerIfRunning();
                    }
                    markSkippedUpdateLanes(workInProgress.lanes);
                    if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
                        {
                            return null;
                        }
                    }
                    cloneChildFibers(current, workInProgress);
                    return workInProgress.child;
                }
                function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
                    {
                        var returnFiber = oldWorkInProgress.return;
                        if (returnFiber === null) {
                            throw new Error("Cannot swap the root fiber.");
                        }
                        current.alternate = null;
                        oldWorkInProgress.alternate = null;
                        newWorkInProgress.index = oldWorkInProgress.index;
                        newWorkInProgress.sibling = oldWorkInProgress.sibling;
                        newWorkInProgress.return = oldWorkInProgress.return;
                        newWorkInProgress.ref = oldWorkInProgress.ref;
                        if (oldWorkInProgress === returnFiber.child) {
                            returnFiber.child = newWorkInProgress;
                        } else {
                            var prevSibling = returnFiber.child;
                            if (prevSibling === null) {
                                throw new Error("Expected parent to have a child.");
                            }
                            while (prevSibling.sibling !== oldWorkInProgress) {
                                prevSibling = prevSibling.sibling;
                                if (prevSibling === null) {
                                    throw new Error("Expected to find the previous sibling.");
                                }
                            }
                            prevSibling.sibling = newWorkInProgress;
                        }
                        var deletions = returnFiber.deletions;
                        if (deletions === null) {
                            returnFiber.deletions = [ current ];
                            returnFiber.flags |= ChildDeletion;
                        } else {
                            deletions.push(current);
                        }
                        newWorkInProgress.flags |= Placement;
                        return newWorkInProgress;
                    }
                }
                function checkScheduledUpdateOrContext(current, renderLanes) {
                    var updateLanes = current.lanes;
                    if (includesSomeLane(updateLanes, renderLanes)) {
                        return true;
                    }
                    return false;
                }
                function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
                    switch (workInProgress.tag) {
                      case HostRoot:
                        pushHostRootContext(workInProgress);
                        workInProgress.stateNode;
                        resetHydrationState();
                        break;

                      case HostComponent:
                        pushHostContext(workInProgress);
                        break;

                      case ClassComponent:
                        {
                            var Component = workInProgress.type;
                            if (isContextProvider(Component)) {
                                pushContextProvider(workInProgress);
                            }
                            break;
                        }

                      case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;

                      case ContextProvider:
                        {
                            var newValue = workInProgress.memoizedProps.value;
                            var context = workInProgress.type._context;
                            pushProvider(workInProgress, context, newValue);
                            break;
                        }

                      case Profiler:
                        {
                            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                            if (hasChildWork) {
                                workInProgress.flags |= Update;
                            }
                            {
                                var stateNode = workInProgress.stateNode;
                                stateNode.effectDuration = 0;
                                stateNode.passiveEffectDuration = 0;
                            }
                        }
                        break;

                      case SuspenseComponent:
                        {
                            var state = workInProgress.memoizedState;
                            if (state !== null) {
                                if (state.dehydrated !== null) {
                                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                                    workInProgress.flags |= DidCapture;
                                    return null;
                                }
                                var primaryChildFragment = workInProgress.child;
                                var primaryChildLanes = primaryChildFragment.childLanes;
                                if (includesSomeLane(renderLanes, primaryChildLanes)) {
                                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                                } else {
                                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                                    var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                                    if (child !== null) {
                                        return child.sibling;
                                    } else {
                                        return null;
                                    }
                                }
                            } else {
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                            }
                            break;
                        }

                      case SuspenseListComponent:
                        {
                            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                            if (didSuspendBefore) {
                                if (_hasChildWork) {
                                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                                }
                                workInProgress.flags |= DidCapture;
                            }
                            var renderState = workInProgress.memoizedState;
                            if (renderState !== null) {
                                renderState.rendering = null;
                                renderState.tail = null;
                                renderState.lastEffect = null;
                            }
                            pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                            if (_hasChildWork) {
                                break;
                            } else {
                                return null;
                            }
                        }

                      case OffscreenComponent:
                      case LegacyHiddenComponent:
                        {
                            workInProgress.lanes = NoLanes;
                            return updateOffscreenComponent(current, workInProgress, renderLanes);
                        }
                    }
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                }
                function beginWork(current, workInProgress, renderLanes) {
                    {
                        if (workInProgress._debugNeedsRemount && current !== null) {
                            return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
                        }
                    }
                    if (current !== null) {
                        var oldProps = current.memoizedProps;
                        var newProps = workInProgress.pendingProps;
                        if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) {
                            didReceiveUpdate = true;
                        } else {
                            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
                            if (!hasScheduledUpdateOrContext && (workInProgress.flags & DidCapture) === NoFlags) {
                                didReceiveUpdate = false;
                                return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
                            }
                            if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                                didReceiveUpdate = true;
                            } else {
                                didReceiveUpdate = false;
                            }
                        }
                    } else {
                        didReceiveUpdate = false;
                        if (getIsHydrating() && isForkedChild(workInProgress)) {
                            var slotIndex = workInProgress.index;
                            var numberOfForks = getForksAtLevel();
                            pushTreeId(workInProgress, numberOfForks, slotIndex);
                        }
                    }
                    workInProgress.lanes = NoLanes;
                    switch (workInProgress.tag) {
                      case IndeterminateComponent:
                        {
                            return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
                        }

                      case LazyComponent:
                        {
                            var elementType = workInProgress.elementType;
                            return mountLazyComponent(current, workInProgress, elementType, renderLanes);
                        }

                      case FunctionComponent:
                        {
                            var Component = workInProgress.type;
                            var unresolvedProps = workInProgress.pendingProps;
                            var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                            return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
                        }

                      case ClassComponent:
                        {
                            var _Component = workInProgress.type;
                            var _unresolvedProps = workInProgress.pendingProps;
                            var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                            return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
                        }

                      case HostRoot:
                        return updateHostRoot(current, workInProgress, renderLanes);

                      case HostComponent:
                        return updateHostComponent(current, workInProgress, renderLanes);

                      case HostText:
                        return updateHostText(current, workInProgress);

                      case SuspenseComponent:
                        return updateSuspenseComponent(current, workInProgress, renderLanes);

                      case HostPortal:
                        return updatePortalComponent(current, workInProgress, renderLanes);

                      case ForwardRef:
                        {
                            var type = workInProgress.type;
                            var _unresolvedProps2 = workInProgress.pendingProps;
                            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                            return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
                        }

                      case Fragment:
                        return updateFragment(current, workInProgress, renderLanes);

                      case Mode:
                        return updateMode(current, workInProgress, renderLanes);

                      case Profiler:
                        return updateProfiler(current, workInProgress, renderLanes);

                      case ContextProvider:
                        return updateContextProvider(current, workInProgress, renderLanes);

                      case ContextConsumer:
                        return updateContextConsumer(current, workInProgress, renderLanes);

                      case MemoComponent:
                        {
                            var _type2 = workInProgress.type;
                            var _unresolvedProps3 = workInProgress.pendingProps;
                            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                            {
                                if (workInProgress.type !== workInProgress.elementType) {
                                    var outerPropTypes = _type2.propTypes;
                                    if (outerPropTypes) {
                                        checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                                    }
                                }
                            }
                            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                            return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
                        }

                      case SimpleMemoComponent:
                        {
                            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
                        }

                      case IncompleteClassComponent:
                        {
                            var _Component2 = workInProgress.type;
                            var _unresolvedProps4 = workInProgress.pendingProps;
                            var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                            return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
                        }

                      case SuspenseListComponent:
                        {
                            return updateSuspenseListComponent(current, workInProgress, renderLanes);
                        }

                      case ScopeComponent:
                        {
                            break;
                        }

                      case OffscreenComponent:
                        {
                            return updateOffscreenComponent(current, workInProgress, renderLanes);
                        }
                    }
                    throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
                }
                function markUpdate(workInProgress) {
                    workInProgress.flags |= Update;
                }
                function markRef$1(workInProgress) {
                    workInProgress.flags |= Ref;
                    {
                        workInProgress.flags |= RefStatic;
                    }
                }
                var appendAllChildren;
                var updateHostContainer;
                var updateHostComponent$1;
                var updateHostText$1;
                {
                    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
                        var node = workInProgress.child;
                        while (node !== null) {
                            if (node.tag === HostComponent || node.tag === HostText) {
                                appendInitialChild(parent, node.stateNode);
                            } else if (node.tag === HostPortal) ; else if (node.child !== null) {
                                node.child.return = node;
                                node = node.child;
                                continue;
                            }
                            if (node === workInProgress) {
                                return;
                            }
                            while (node.sibling === null) {
                                if (node.return === null || node.return === workInProgress) {
                                    return;
                                }
                                node = node.return;
                            }
                            node.sibling.return = node.return;
                            node = node.sibling;
                        }
                    };
                    updateHostContainer = function(current, workInProgress) {};
                    updateHostComponent$1 = function(current, workInProgress, type, newProps, rootContainerInstance) {
                        var oldProps = current.memoizedProps;
                        if (oldProps === newProps) {
                            return;
                        }
                        var instance = workInProgress.stateNode;
                        var currentHostContext = getHostContext();
                        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                        workInProgress.updateQueue = updatePayload;
                        if (updatePayload) {
                            markUpdate(workInProgress);
                        }
                    };
                    updateHostText$1 = function(current, workInProgress, oldText, newText) {
                        if (oldText !== newText) {
                            markUpdate(workInProgress);
                        }
                    };
                }
                function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
                    if (getIsHydrating()) {
                        return;
                    }
                    switch (renderState.tailMode) {
                      case "hidden":
                        {
                            var tailNode = renderState.tail;
                            var lastTailNode = null;
                            while (tailNode !== null) {
                                if (tailNode.alternate !== null) {
                                    lastTailNode = tailNode;
                                }
                                tailNode = tailNode.sibling;
                            }
                            if (lastTailNode === null) {
                                renderState.tail = null;
                            } else {
                                lastTailNode.sibling = null;
                            }
                            break;
                        }

                      case "collapsed":
                        {
                            var _tailNode = renderState.tail;
                            var _lastTailNode = null;
                            while (_tailNode !== null) {
                                if (_tailNode.alternate !== null) {
                                    _lastTailNode = _tailNode;
                                }
                                _tailNode = _tailNode.sibling;
                            }
                            if (_lastTailNode === null) {
                                if (!hasRenderedATailFallback && renderState.tail !== null) {
                                    renderState.tail.sibling = null;
                                } else {
                                    renderState.tail = null;
                                }
                            } else {
                                _lastTailNode.sibling = null;
                            }
                            break;
                        }
                    }
                }
                function bubbleProperties(completedWork) {
                    var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
                    var newChildLanes = NoLanes;
                    var subtreeFlags = NoFlags;
                    if (!didBailout) {
                        if ((completedWork.mode & ProfileMode) !== NoMode) {
                            var actualDuration = completedWork.actualDuration;
                            var treeBaseDuration = completedWork.selfBaseDuration;
                            var child = completedWork.child;
                            while (child !== null) {
                                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                                subtreeFlags |= child.subtreeFlags;
                                subtreeFlags |= child.flags;
                                actualDuration += child.actualDuration;
                                treeBaseDuration += child.treeBaseDuration;
                                child = child.sibling;
                            }
                            completedWork.actualDuration = actualDuration;
                            completedWork.treeBaseDuration = treeBaseDuration;
                        } else {
                            var _child = completedWork.child;
                            while (_child !== null) {
                                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                                subtreeFlags |= _child.subtreeFlags;
                                subtreeFlags |= _child.flags;
                                _child.return = completedWork;
                                _child = _child.sibling;
                            }
                        }
                        completedWork.subtreeFlags |= subtreeFlags;
                    } else {
                        if ((completedWork.mode & ProfileMode) !== NoMode) {
                            var _treeBaseDuration = completedWork.selfBaseDuration;
                            var _child2 = completedWork.child;
                            while (_child2 !== null) {
                                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                                subtreeFlags |= _child2.flags & StaticMask;
                                _treeBaseDuration += _child2.treeBaseDuration;
                                _child2 = _child2.sibling;
                            }
                            completedWork.treeBaseDuration = _treeBaseDuration;
                        } else {
                            var _child3 = completedWork.child;
                            while (_child3 !== null) {
                                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                                subtreeFlags |= _child3.flags & StaticMask;
                                _child3.return = completedWork;
                                _child3 = _child3.sibling;
                            }
                        }
                        completedWork.subtreeFlags |= subtreeFlags;
                    }
                    completedWork.childLanes = newChildLanes;
                    return didBailout;
                }
                function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
                    if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
                        warnIfUnhydratedTailNodes(workInProgress);
                        resetHydrationState();
                        workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
                        return false;
                    }
                    var wasHydrated = popHydrationState(workInProgress);
                    if (nextState !== null && nextState.dehydrated !== null) {
                        if (current === null) {
                            if (!wasHydrated) {
                                throw new Error("A dehydrated suspense component was completed without a hydrated node. " + "This is probably a bug in React.");
                            }
                            prepareToHydrateHostSuspenseInstance(workInProgress);
                            bubbleProperties(workInProgress);
                            {
                                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                                    var isTimedOutSuspense = nextState !== null;
                                    if (isTimedOutSuspense) {
                                        var primaryChildFragment = workInProgress.child;
                                        if (primaryChildFragment !== null) {
                                            workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                                        }
                                    }
                                }
                            }
                            return false;
                        } else {
                            resetHydrationState();
                            if ((workInProgress.flags & DidCapture) === NoFlags) {
                                workInProgress.memoizedState = null;
                            }
                            workInProgress.flags |= Update;
                            bubbleProperties(workInProgress);
                            {
                                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                                    var _isTimedOutSuspense = nextState !== null;
                                    if (_isTimedOutSuspense) {
                                        var _primaryChildFragment = workInProgress.child;
                                        if (_primaryChildFragment !== null) {
                                            workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                                        }
                                    }
                                }
                            }
                            return false;
                        }
                    } else {
                        upgradeHydrationErrorsToRecoverable();
                        return true;
                    }
                }
                function completeWork(current, workInProgress, renderLanes) {
                    var newProps = workInProgress.pendingProps;
                    popTreeContext(workInProgress);
                    switch (workInProgress.tag) {
                      case IndeterminateComponent:
                      case LazyComponent:
                      case SimpleMemoComponent:
                      case FunctionComponent:
                      case ForwardRef:
                      case Fragment:
                      case Mode:
                      case Profiler:
                      case ContextConsumer:
                      case MemoComponent:
                        bubbleProperties(workInProgress);
                        return null;

                      case ClassComponent:
                        {
                            var Component = workInProgress.type;
                            if (isContextProvider(Component)) {
                                popContext(workInProgress);
                            }
                            bubbleProperties(workInProgress);
                            return null;
                        }

                      case HostRoot:
                        {
                            var fiberRoot = workInProgress.stateNode;
                            popHostContainer(workInProgress);
                            popTopLevelContextObject(workInProgress);
                            resetWorkInProgressVersions();
                            if (fiberRoot.pendingContext) {
                                fiberRoot.context = fiberRoot.pendingContext;
                                fiberRoot.pendingContext = null;
                            }
                            if (current === null || current.child === null) {
                                var wasHydrated = popHydrationState(workInProgress);
                                if (wasHydrated) {
                                    markUpdate(workInProgress);
                                } else {
                                    if (current !== null) {
                                        var prevState = current.memoizedState;
                                        if (!prevState.isDehydrated || (workInProgress.flags & ForceClientRender) !== NoFlags) {
                                            workInProgress.flags |= Snapshot;
                                            upgradeHydrationErrorsToRecoverable();
                                        }
                                    }
                                }
                            }
                            updateHostContainer(current, workInProgress);
                            bubbleProperties(workInProgress);
                            return null;
                        }

                      case HostComponent:
                        {
                            popHostContext(workInProgress);
                            var rootContainerInstance = getRootHostContainer();
                            var type = workInProgress.type;
                            if (current !== null && workInProgress.stateNode != null) {
                                updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                                if (current.ref !== workInProgress.ref) {
                                    markRef$1(workInProgress);
                                }
                            } else {
                                if (!newProps) {
                                    if (workInProgress.stateNode === null) {
                                        throw new Error("We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                                    }
                                    bubbleProperties(workInProgress);
                                    return null;
                                }
                                var currentHostContext = getHostContext();
                                var _wasHydrated = popHydrationState(workInProgress);
                                if (_wasHydrated) {
                                    if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                                        markUpdate(workInProgress);
                                    }
                                } else {
                                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                                    appendAllChildren(instance, workInProgress, false, false);
                                    workInProgress.stateNode = instance;
                                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                                        markUpdate(workInProgress);
                                    }
                                }
                                if (workInProgress.ref !== null) {
                                    markRef$1(workInProgress);
                                }
                            }
                            bubbleProperties(workInProgress);
                            return null;
                        }

                      case HostText:
                        {
                            var newText = newProps;
                            if (current && workInProgress.stateNode != null) {
                                var oldText = current.memoizedProps;
                                updateHostText$1(current, workInProgress, oldText, newText);
                            } else {
                                if (typeof newText !== "string") {
                                    if (workInProgress.stateNode === null) {
                                        throw new Error("We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                                    }
                                }
                                var _rootContainerInstance = getRootHostContainer();
                                var _currentHostContext = getHostContext();
                                var _wasHydrated2 = popHydrationState(workInProgress);
                                if (_wasHydrated2) {
                                    if (prepareToHydrateHostTextInstance(workInProgress)) {
                                        markUpdate(workInProgress);
                                    }
                                } else {
                                    workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                                }
                            }
                            bubbleProperties(workInProgress);
                            return null;
                        }

                      case SuspenseComponent:
                        {
                            popSuspenseContext(workInProgress);
                            var nextState = workInProgress.memoizedState;
                            if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
                                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);
                                if (!fallthroughToNormalSuspensePath) {
                                    if (workInProgress.flags & ShouldCapture) {
                                        return workInProgress;
                                    } else {
                                        return null;
                                    }
                                }
                            }
                            if ((workInProgress.flags & DidCapture) !== NoFlags) {
                                workInProgress.lanes = renderLanes;
                                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                                    transferActualDuration(workInProgress);
                                }
                                return workInProgress;
                            }
                            var nextDidTimeout = nextState !== null;
                            var prevDidTimeout = current !== null && current.memoizedState !== null;
                            if (nextDidTimeout !== prevDidTimeout) {
                                if (nextDidTimeout) {
                                    var _offscreenFiber2 = workInProgress.child;
                                    _offscreenFiber2.flags |= Visibility;
                                    if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
                                        var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                                            renderDidSuspend();
                                        } else {
                                            renderDidSuspendDelayIfPossible();
                                        }
                                    }
                                }
                            }
                            var wakeables = workInProgress.updateQueue;
                            if (wakeables !== null) {
                                workInProgress.flags |= Update;
                            }
                            bubbleProperties(workInProgress);
                            {
                                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                                    if (nextDidTimeout) {
                                        var primaryChildFragment = workInProgress.child;
                                        if (primaryChildFragment !== null) {
                                            workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                                        }
                                    }
                                }
                            }
                            return null;
                        }

                      case HostPortal:
                        popHostContainer(workInProgress);
                        updateHostContainer(current, workInProgress);
                        if (current === null) {
                            preparePortalMount(workInProgress.stateNode.containerInfo);
                        }
                        bubbleProperties(workInProgress);
                        return null;

                      case ContextProvider:
                        var context = workInProgress.type._context;
                        popProvider(context, workInProgress);
                        bubbleProperties(workInProgress);
                        return null;

                      case IncompleteClassComponent:
                        {
                            var _Component = workInProgress.type;
                            if (isContextProvider(_Component)) {
                                popContext(workInProgress);
                            }
                            bubbleProperties(workInProgress);
                            return null;
                        }

                      case SuspenseListComponent:
                        {
                            popSuspenseContext(workInProgress);
                            var renderState = workInProgress.memoizedState;
                            if (renderState === null) {
                                bubbleProperties(workInProgress);
                                return null;
                            }
                            var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                            var renderedTail = renderState.rendering;
                            if (renderedTail === null) {
                                if (!didSuspendAlready) {
                                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                                    if (!cannotBeSuspended) {
                                        var row = workInProgress.child;
                                        while (row !== null) {
                                            var suspended = findFirstSuspended(row);
                                            if (suspended !== null) {
                                                didSuspendAlready = true;
                                                workInProgress.flags |= DidCapture;
                                                cutOffTailIfNeeded(renderState, false);
                                                var newThenables = suspended.updateQueue;
                                                if (newThenables !== null) {
                                                    workInProgress.updateQueue = newThenables;
                                                    workInProgress.flags |= Update;
                                                }
                                                workInProgress.subtreeFlags = NoFlags;
                                                resetChildFibers(workInProgress, renderLanes);
                                                pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                                return workInProgress.child;
                                            }
                                            row = row.sibling;
                                        }
                                    }
                                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                                        workInProgress.flags |= DidCapture;
                                        didSuspendAlready = true;
                                        cutOffTailIfNeeded(renderState, false);
                                        workInProgress.lanes = SomeRetryLane;
                                    }
                                } else {
                                    cutOffTailIfNeeded(renderState, false);
                                }
                            } else {
                                if (!didSuspendAlready) {
                                    var _suspended = findFirstSuspended(renderedTail);
                                    if (_suspended !== null) {
                                        workInProgress.flags |= DidCapture;
                                        didSuspendAlready = true;
                                        var _newThenables = _suspended.updateQueue;
                                        if (_newThenables !== null) {
                                            workInProgress.updateQueue = _newThenables;
                                            workInProgress.flags |= Update;
                                        }
                                        cutOffTailIfNeeded(renderState, true);
                                        if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                                            bubbleProperties(workInProgress);
                                            return null;
                                        }
                                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                                        workInProgress.flags |= DidCapture;
                                        didSuspendAlready = true;
                                        cutOffTailIfNeeded(renderState, false);
                                        workInProgress.lanes = SomeRetryLane;
                                    }
                                }
                                if (renderState.isBackwards) {
                                    renderedTail.sibling = workInProgress.child;
                                    workInProgress.child = renderedTail;
                                } else {
                                    var previousSibling = renderState.last;
                                    if (previousSibling !== null) {
                                        previousSibling.sibling = renderedTail;
                                    } else {
                                        workInProgress.child = renderedTail;
                                    }
                                    renderState.last = renderedTail;
                                }
                            }
                            if (renderState.tail !== null) {
                                var next = renderState.tail;
                                renderState.rendering = next;
                                renderState.tail = next.sibling;
                                renderState.renderingStartTime = now();
                                next.sibling = null;
                                var suspenseContext = suspenseStackCursor.current;
                                if (didSuspendAlready) {
                                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                                } else {
                                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                                }
                                pushSuspenseContext(workInProgress, suspenseContext);
                                return next;
                            }
                            bubbleProperties(workInProgress);
                            return null;
                        }

                      case ScopeComponent:
                        {
                            break;
                        }

                      case OffscreenComponent:
                      case LegacyHiddenComponent:
                        {
                            popRenderLanes(workInProgress);
                            var _nextState = workInProgress.memoizedState;
                            var nextIsHidden = _nextState !== null;
                            if (current !== null) {
                                var _prevState = current.memoizedState;
                                var prevIsHidden = _prevState !== null;
                                if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                                    workInProgress.flags |= Visibility;
                                }
                            }
                            if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {
                                bubbleProperties(workInProgress);
                            } else {
                                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                                    bubbleProperties(workInProgress);
                                    {
                                        if (workInProgress.subtreeFlags & (Placement | Update)) {
                                            workInProgress.flags |= Visibility;
                                        }
                                    }
                                }
                            }
                            return null;
                        }

                      case CacheComponent:
                        {
                            return null;
                        }

                      case TracingMarkerComponent:
                        {
                            return null;
                        }
                    }
                    throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
                }
                function unwindWork(current, workInProgress, renderLanes) {
                    popTreeContext(workInProgress);
                    switch (workInProgress.tag) {
                      case ClassComponent:
                        {
                            var Component = workInProgress.type;
                            if (isContextProvider(Component)) {
                                popContext(workInProgress);
                            }
                            var flags = workInProgress.flags;
                            if (flags & ShouldCapture) {
                                workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                                    transferActualDuration(workInProgress);
                                }
                                return workInProgress;
                            }
                            return null;
                        }

                      case HostRoot:
                        {
                            workInProgress.stateNode;
                            popHostContainer(workInProgress);
                            popTopLevelContextObject(workInProgress);
                            resetWorkInProgressVersions();
                            var _flags = workInProgress.flags;
                            if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                                return workInProgress;
                            }
                            return null;
                        }

                      case HostComponent:
                        {
                            popHostContext(workInProgress);
                            return null;
                        }

                      case SuspenseComponent:
                        {
                            popSuspenseContext(workInProgress);
                            var suspenseState = workInProgress.memoizedState;
                            if (suspenseState !== null && suspenseState.dehydrated !== null) {
                                if (workInProgress.alternate === null) {
                                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in " + "React. Please file an issue.");
                                }
                                resetHydrationState();
                            }
                            var _flags2 = workInProgress.flags;
                            if (_flags2 & ShouldCapture) {
                                workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture;
                                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                                    transferActualDuration(workInProgress);
                                }
                                return workInProgress;
                            }
                            return null;
                        }

                      case SuspenseListComponent:
                        {
                            popSuspenseContext(workInProgress);
                            return null;
                        }

                      case HostPortal:
                        popHostContainer(workInProgress);
                        return null;

                      case ContextProvider:
                        var context = workInProgress.type._context;
                        popProvider(context, workInProgress);
                        return null;

                      case OffscreenComponent:
                      case LegacyHiddenComponent:
                        popRenderLanes(workInProgress);
                        return null;

                      case CacheComponent:
                        return null;

                      default:
                        return null;
                    }
                }
                function unwindInterruptedWork(current, interruptedWork, renderLanes) {
                    popTreeContext(interruptedWork);
                    switch (interruptedWork.tag) {
                      case ClassComponent:
                        {
                            var childContextTypes = interruptedWork.type.childContextTypes;
                            if (childContextTypes !== null && childContextTypes !== undefined) {
                                popContext(interruptedWork);
                            }
                            break;
                        }

                      case HostRoot:
                        {
                            interruptedWork.stateNode;
                            popHostContainer(interruptedWork);
                            popTopLevelContextObject(interruptedWork);
                            resetWorkInProgressVersions();
                            break;
                        }

                      case HostComponent:
                        {
                            popHostContext(interruptedWork);
                            break;
                        }

                      case HostPortal:
                        popHostContainer(interruptedWork);
                        break;

                      case SuspenseComponent:
                        popSuspenseContext(interruptedWork);
                        break;

                      case SuspenseListComponent:
                        popSuspenseContext(interruptedWork);
                        break;

                      case ContextProvider:
                        var context = interruptedWork.type._context;
                        popProvider(context, interruptedWork);
                        break;

                      case OffscreenComponent:
                      case LegacyHiddenComponent:
                        popRenderLanes(interruptedWork);
                        break;
                    }
                }
                var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
                {
                    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set;
                }
                var offscreenSubtreeIsHidden = false;
                var offscreenSubtreeWasHidden = false;
                var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
                var nextEffect = null;
                var inProgressLanes = null;
                var inProgressRoot = null;
                function reportUncaughtErrorInDEV(error) {
                    {
                        invokeGuardedCallback(null, (function() {
                            throw error;
                        }));
                        clearCaughtError();
                    }
                }
                var callComponentWillUnmountWithTimer = function(current, instance) {
                    instance.props = current.memoizedProps;
                    instance.state = current.memoizedState;
                    if (current.mode & ProfileMode) {
                        try {
                            startLayoutEffectTimer();
                            instance.componentWillUnmount();
                        } finally {
                            recordLayoutEffectDuration(current);
                        }
                    } else {
                        instance.componentWillUnmount();
                    }
                };
                function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
                    try {
                        commitHookEffectListMount(Layout, current);
                    } catch (error) {
                        captureCommitPhaseError(current, nearestMountedAncestor, error);
                    }
                }
                function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
                    try {
                        callComponentWillUnmountWithTimer(current, instance);
                    } catch (error) {
                        captureCommitPhaseError(current, nearestMountedAncestor, error);
                    }
                }
                function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
                    try {
                        instance.componentDidMount();
                    } catch (error) {
                        captureCommitPhaseError(current, nearestMountedAncestor, error);
                    }
                }
                function safelyAttachRef(current, nearestMountedAncestor) {
                    try {
                        commitAttachRef(current);
                    } catch (error) {
                        captureCommitPhaseError(current, nearestMountedAncestor, error);
                    }
                }
                function safelyDetachRef(current, nearestMountedAncestor) {
                    var ref = current.ref;
                    if (ref !== null) {
                        if (typeof ref === "function") {
                            var retVal;
                            try {
                                if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {
                                    try {
                                        startLayoutEffectTimer();
                                        retVal = ref(null);
                                    } finally {
                                        recordLayoutEffectDuration(current);
                                    }
                                } else {
                                    retVal = ref(null);
                                }
                            } catch (error) {
                                captureCommitPhaseError(current, nearestMountedAncestor, error);
                            }
                            {
                                if (typeof retVal === "function") {
                                    error("Unexpected return value from a callback ref in %s. " + "A callback ref should not return a function.", getComponentNameFromFiber(current));
                                }
                            }
                        } else {
                            ref.current = null;
                        }
                    }
                }
                function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
                    try {
                        destroy();
                    } catch (error) {
                        captureCommitPhaseError(current, nearestMountedAncestor, error);
                    }
                }
                var shouldFireAfterActiveInstanceBlur = false;
                function commitBeforeMutationEffects(root, firstChild) {
                    prepareForCommit(root.containerInfo);
                    nextEffect = firstChild;
                    commitBeforeMutationEffects_begin();
                    var shouldFire = shouldFireAfterActiveInstanceBlur;
                    shouldFireAfterActiveInstanceBlur = false;
                    return shouldFire;
                }
                function commitBeforeMutationEffects_begin() {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        var child = fiber.child;
                        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                            child.return = fiber;
                            nextEffect = child;
                        } else {
                            commitBeforeMutationEffects_complete();
                        }
                    }
                }
                function commitBeforeMutationEffects_complete() {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        setCurrentFiber(fiber);
                        try {
                            commitBeforeMutationEffectsOnFiber(fiber);
                        } catch (error) {
                            captureCommitPhaseError(fiber, fiber.return, error);
                        }
                        resetCurrentFiber();
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function commitBeforeMutationEffectsOnFiber(finishedWork) {
                    var current = finishedWork.alternate;
                    var flags = finishedWork.flags;
                    if ((flags & Snapshot) !== NoFlags) {
                        setCurrentFiber(finishedWork);
                        switch (finishedWork.tag) {
                          case FunctionComponent:
                          case ForwardRef:
                          case SimpleMemoComponent:
                            {
                                break;
                            }

                          case ClassComponent:
                            {
                                if (current !== null) {
                                    var prevProps = current.memoizedProps;
                                    var prevState = current.memoizedState;
                                    var instance = finishedWork.stateNode;
                                    {
                                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                            if (instance.props !== finishedWork.memoizedProps) {
                                                error("Expected %s props to match memoized props before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                            }
                                            if (instance.state !== finishedWork.memoizedState) {
                                                error("Expected %s state to match memoized state before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                            }
                                        }
                                    }
                                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                                    {
                                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                                            didWarnSet.add(finishedWork.type);
                                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) " + "must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                                        }
                                    }
                                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                                }
                                break;
                            }

                          case HostRoot:
                            {
                                {
                                    var root = finishedWork.stateNode;
                                    clearContainer(root.containerInfo);
                                }
                                break;
                            }

                          case HostComponent:
                          case HostText:
                          case HostPortal:
                          case IncompleteClassComponent:
                            break;

                          default:
                            {
                                throw new Error("This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
                            }
                        }
                        resetCurrentFiber();
                    }
                }
                function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
                    var updateQueue = finishedWork.updateQueue;
                    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            if ((effect.tag & flags) === flags) {
                                var destroy = effect.destroy;
                                effect.destroy = undefined;
                                if (destroy !== undefined) {
                                    {
                                        if ((flags & Passive$1) !== NoFlags$1) {
                                            markComponentPassiveEffectUnmountStarted(finishedWork);
                                        } else if ((flags & Layout) !== NoFlags$1) {
                                            markComponentLayoutEffectUnmountStarted(finishedWork);
                                        }
                                    }
                                    {
                                        if ((flags & Insertion) !== NoFlags$1) {
                                            setIsRunningInsertionEffect(true);
                                        }
                                    }
                                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                                    {
                                        if ((flags & Insertion) !== NoFlags$1) {
                                            setIsRunningInsertionEffect(false);
                                        }
                                    }
                                    {
                                        if ((flags & Passive$1) !== NoFlags$1) {
                                            markComponentPassiveEffectUnmountStopped();
                                        } else if ((flags & Layout) !== NoFlags$1) {
                                            markComponentLayoutEffectUnmountStopped();
                                        }
                                    }
                                }
                            }
                            effect = effect.next;
                        } while (effect !== firstEffect);
                    }
                }
                function commitHookEffectListMount(flags, finishedWork) {
                    var updateQueue = finishedWork.updateQueue;
                    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            if ((effect.tag & flags) === flags) {
                                {
                                    if ((flags & Passive$1) !== NoFlags$1) {
                                        markComponentPassiveEffectMountStarted(finishedWork);
                                    } else if ((flags & Layout) !== NoFlags$1) {
                                        markComponentLayoutEffectMountStarted(finishedWork);
                                    }
                                }
                                var create = effect.create;
                                {
                                    if ((flags & Insertion) !== NoFlags$1) {
                                        setIsRunningInsertionEffect(true);
                                    }
                                }
                                effect.destroy = create();
                                {
                                    if ((flags & Insertion) !== NoFlags$1) {
                                        setIsRunningInsertionEffect(false);
                                    }
                                }
                                {
                                    if ((flags & Passive$1) !== NoFlags$1) {
                                        markComponentPassiveEffectMountStopped();
                                    } else if ((flags & Layout) !== NoFlags$1) {
                                        markComponentLayoutEffectMountStopped();
                                    }
                                }
                                {
                                    var destroy = effect.destroy;
                                    if (destroy !== undefined && typeof destroy !== "function") {
                                        var hookName = void 0;
                                        if ((effect.tag & Layout) !== NoFlags) {
                                            hookName = "useLayoutEffect";
                                        } else if ((effect.tag & Insertion) !== NoFlags) {
                                            hookName = "useInsertionEffect";
                                        } else {
                                            hookName = "useEffect";
                                        }
                                        var addendum = void 0;
                                        if (destroy === null) {
                                            addendum = " You returned null. If your effect does not require clean " + "up, return undefined (or nothing).";
                                        } else if (typeof destroy.then === "function") {
                                            addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + "and call it immediately:\n\n" + hookName + "(() => {\n" + "  async function fetchData() {\n" + "    // You can await here\n" + "    const response = await MyAPI.getData(someId);\n" + "    // ...\n" + "  }\n" + "  fetchData();\n" + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + "Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                                        } else {
                                            addendum = " You returned: " + destroy;
                                        }
                                        error("%s must not return anything besides a function, " + "which is used for clean-up.%s", hookName, addendum);
                                    }
                                }
                            }
                            effect = effect.next;
                        } while (effect !== firstEffect);
                    }
                }
                function commitPassiveEffectDurations(finishedRoot, finishedWork) {
                    {
                        if ((finishedWork.flags & Update) !== NoFlags) {
                            switch (finishedWork.tag) {
                              case Profiler:
                                {
                                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                                    var commitTime = getCommitTime();
                                    var phase = finishedWork.alternate === null ? "mount" : "update";
                                    {
                                        if (isCurrentUpdateNested()) {
                                            phase = "nested-update";
                                        }
                                    }
                                    if (typeof onPostCommit === "function") {
                                        onPostCommit(id, phase, passiveEffectDuration, commitTime);
                                    }
                                    var parentFiber = finishedWork.return;
                                    outer: while (parentFiber !== null) {
                                        switch (parentFiber.tag) {
                                          case HostRoot:
                                            var root = parentFiber.stateNode;
                                            root.passiveEffectDuration += passiveEffectDuration;
                                            break outer;

                                          case Profiler:
                                            var parentStateNode = parentFiber.stateNode;
                                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                                            break outer;
                                        }
                                        parentFiber = parentFiber.return;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
                    if ((finishedWork.flags & LayoutMask) !== NoFlags) {
                        switch (finishedWork.tag) {
                          case FunctionComponent:
                          case ForwardRef:
                          case SimpleMemoComponent:
                            {
                                if (!offscreenSubtreeWasHidden) {
                                    if (finishedWork.mode & ProfileMode) {
                                        try {
                                            startLayoutEffectTimer();
                                            commitHookEffectListMount(Layout | HasEffect, finishedWork);
                                        } finally {
                                            recordLayoutEffectDuration(finishedWork);
                                        }
                                    } else {
                                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                                    }
                                }
                                break;
                            }

                          case ClassComponent:
                            {
                                var instance = finishedWork.stateNode;
                                if (finishedWork.flags & Update) {
                                    if (!offscreenSubtreeWasHidden) {
                                        if (current === null) {
                                            {
                                                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                                    if (instance.props !== finishedWork.memoizedProps) {
                                                        error("Expected %s props to match memoized props before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                    }
                                                    if (instance.state !== finishedWork.memoizedState) {
                                                        error("Expected %s state to match memoized state before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                    }
                                                }
                                            }
                                            if (finishedWork.mode & ProfileMode) {
                                                try {
                                                    startLayoutEffectTimer();
                                                    instance.componentDidMount();
                                                } finally {
                                                    recordLayoutEffectDuration(finishedWork);
                                                }
                                            } else {
                                                instance.componentDidMount();
                                            }
                                        } else {
                                            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                                            var prevState = current.memoizedState;
                                            {
                                                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                                    if (instance.props !== finishedWork.memoizedProps) {
                                                        error("Expected %s props to match memoized props before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                    }
                                                    if (instance.state !== finishedWork.memoizedState) {
                                                        error("Expected %s state to match memoized state before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                    }
                                                }
                                            }
                                            if (finishedWork.mode & ProfileMode) {
                                                try {
                                                    startLayoutEffectTimer();
                                                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                                                } finally {
                                                    recordLayoutEffectDuration(finishedWork);
                                                }
                                            } else {
                                                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                                            }
                                        }
                                    }
                                }
                                var updateQueue = finishedWork.updateQueue;
                                if (updateQueue !== null) {
                                    {
                                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                            if (instance.props !== finishedWork.memoizedProps) {
                                                error("Expected %s props to match memoized props before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                            }
                                            if (instance.state !== finishedWork.memoizedState) {
                                                error("Expected %s state to match memoized state before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                            }
                                        }
                                    }
                                    commitUpdateQueue(finishedWork, updateQueue, instance);
                                }
                                break;
                            }

                          case HostRoot:
                            {
                                var _updateQueue = finishedWork.updateQueue;
                                if (_updateQueue !== null) {
                                    var _instance = null;
                                    if (finishedWork.child !== null) {
                                        switch (finishedWork.child.tag) {
                                          case HostComponent:
                                            _instance = getPublicInstance(finishedWork.child.stateNode);
                                            break;

                                          case ClassComponent:
                                            _instance = finishedWork.child.stateNode;
                                            break;
                                        }
                                    }
                                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                                }
                                break;
                            }

                          case HostComponent:
                            {
                                var _instance2 = finishedWork.stateNode;
                                if (current === null && finishedWork.flags & Update) {
                                    var type = finishedWork.type;
                                    var props = finishedWork.memoizedProps;
                                    commitMount(_instance2, type, props);
                                }
                                break;
                            }

                          case HostText:
                            {
                                break;
                            }

                          case HostPortal:
                            {
                                break;
                            }

                          case Profiler:
                            {
                                {
                                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                                    var effectDuration = finishedWork.stateNode.effectDuration;
                                    var commitTime = getCommitTime();
                                    var phase = current === null ? "mount" : "update";
                                    {
                                        if (isCurrentUpdateNested()) {
                                            phase = "nested-update";
                                        }
                                    }
                                    if (typeof onRender === "function") {
                                        onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
                                    }
                                    {
                                        if (typeof onCommit === "function") {
                                            onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
                                        }
                                        enqueuePendingPassiveProfilerEffect(finishedWork);
                                        var parentFiber = finishedWork.return;
                                        outer: while (parentFiber !== null) {
                                            switch (parentFiber.tag) {
                                              case HostRoot:
                                                var root = parentFiber.stateNode;
                                                root.effectDuration += effectDuration;
                                                break outer;

                                              case Profiler:
                                                var parentStateNode = parentFiber.stateNode;
                                                parentStateNode.effectDuration += effectDuration;
                                                break outer;
                                            }
                                            parentFiber = parentFiber.return;
                                        }
                                    }
                                }
                                break;
                            }

                          case SuspenseComponent:
                            {
                                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                                break;
                            }

                          case SuspenseListComponent:
                          case IncompleteClassComponent:
                          case ScopeComponent:
                          case OffscreenComponent:
                          case LegacyHiddenComponent:
                          case TracingMarkerComponent:
                            {
                                break;
                            }

                          default:
                            throw new Error("This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    if (!offscreenSubtreeWasHidden) {
                        {
                            if (finishedWork.flags & Ref) {
                                commitAttachRef(finishedWork);
                            }
                        }
                    }
                }
                function reappearLayoutEffectsOnFiber(node) {
                    switch (node.tag) {
                      case FunctionComponent:
                      case ForwardRef:
                      case SimpleMemoComponent:
                        {
                            if (node.mode & ProfileMode) {
                                try {
                                    startLayoutEffectTimer();
                                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                                } finally {
                                    recordLayoutEffectDuration(node);
                                }
                            } else {
                                safelyCallCommitHookLayoutEffectListMount(node, node.return);
                            }
                            break;
                        }

                      case ClassComponent:
                        {
                            var instance = node.stateNode;
                            if (typeof instance.componentDidMount === "function") {
                                safelyCallComponentDidMount(node, node.return, instance);
                            }
                            safelyAttachRef(node, node.return);
                            break;
                        }

                      case HostComponent:
                        {
                            safelyAttachRef(node, node.return);
                            break;
                        }
                    }
                }
                function hideOrUnhideAllChildren(finishedWork, isHidden) {
                    var hostSubtreeRoot = null;
                    {
                        var node = finishedWork;
                        while (true) {
                            if (node.tag === HostComponent) {
                                if (hostSubtreeRoot === null) {
                                    hostSubtreeRoot = node;
                                    try {
                                        var instance = node.stateNode;
                                        if (isHidden) {
                                            hideInstance(instance);
                                        } else {
                                            unhideInstance(node.stateNode, node.memoizedProps);
                                        }
                                    } catch (error) {
                                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                                    }
                                }
                            } else if (node.tag === HostText) {
                                if (hostSubtreeRoot === null) {
                                    try {
                                        var _instance3 = node.stateNode;
                                        if (isHidden) {
                                            hideTextInstance(_instance3);
                                        } else {
                                            unhideTextInstance(_instance3, node.memoizedProps);
                                        }
                                    } catch (error) {
                                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                                    }
                                }
                            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
                                node.child.return = node;
                                node = node.child;
                                continue;
                            }
                            if (node === finishedWork) {
                                return;
                            }
                            while (node.sibling === null) {
                                if (node.return === null || node.return === finishedWork) {
                                    return;
                                }
                                if (hostSubtreeRoot === node) {
                                    hostSubtreeRoot = null;
                                }
                                node = node.return;
                            }
                            if (hostSubtreeRoot === node) {
                                hostSubtreeRoot = null;
                            }
                            node.sibling.return = node.return;
                            node = node.sibling;
                        }
                    }
                }
                function commitAttachRef(finishedWork) {
                    var ref = finishedWork.ref;
                    if (ref !== null) {
                        var instance = finishedWork.stateNode;
                        var instanceToUse;
                        switch (finishedWork.tag) {
                          case HostComponent:
                            instanceToUse = getPublicInstance(instance);
                            break;

                          default:
                            instanceToUse = instance;
                        }
                        if (typeof ref === "function") {
                            var retVal;
                            if (finishedWork.mode & ProfileMode) {
                                try {
                                    startLayoutEffectTimer();
                                    retVal = ref(instanceToUse);
                                } finally {
                                    recordLayoutEffectDuration(finishedWork);
                                }
                            } else {
                                retVal = ref(instanceToUse);
                            }
                            {
                                if (typeof retVal === "function") {
                                    error("Unexpected return value from a callback ref in %s. " + "A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                                }
                            }
                        } else {
                            {
                                if (!ref.hasOwnProperty("current")) {
                                    error("Unexpected ref object provided for %s. " + "Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                                }
                            }
                            ref.current = instanceToUse;
                        }
                    }
                }
                function detachFiberMutation(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                        alternate.return = null;
                    }
                    fiber.return = null;
                }
                function detachFiberAfterEffects(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                        fiber.alternate = null;
                        detachFiberAfterEffects(alternate);
                    }
                    {
                        fiber.child = null;
                        fiber.deletions = null;
                        fiber.sibling = null;
                        if (fiber.tag === HostComponent) {
                            var hostInstance = fiber.stateNode;
                            if (hostInstance !== null) {
                                detachDeletedInstance(hostInstance);
                            }
                        }
                        fiber.stateNode = null;
                        {
                            fiber._debugOwner = null;
                        }
                        {
                            fiber.return = null;
                            fiber.dependencies = null;
                            fiber.memoizedProps = null;
                            fiber.memoizedState = null;
                            fiber.pendingProps = null;
                            fiber.stateNode = null;
                            fiber.updateQueue = null;
                        }
                    }
                }
                function getHostParentFiber(fiber) {
                    var parent = fiber.return;
                    while (parent !== null) {
                        if (isHostParent(parent)) {
                            return parent;
                        }
                        parent = parent.return;
                    }
                    throw new Error("Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
                }
                function isHostParent(fiber) {
                    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
                }
                function getHostSibling(fiber) {
                    var node = fiber;
                    siblings: while (true) {
                        while (node.sibling === null) {
                            if (node.return === null || isHostParent(node.return)) {
                                return null;
                            }
                            node = node.return;
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                            if (node.flags & Placement) {
                                continue siblings;
                            }
                            if (node.child === null || node.tag === HostPortal) {
                                continue siblings;
                            } else {
                                node.child.return = node;
                                node = node.child;
                            }
                        }
                        if (!(node.flags & Placement)) {
                            return node.stateNode;
                        }
                    }
                }
                function commitPlacement(finishedWork) {
                    var parentFiber = getHostParentFiber(finishedWork);
                    switch (parentFiber.tag) {
                      case HostComponent:
                        {
                            var parent = parentFiber.stateNode;
                            if (parentFiber.flags & ContentReset) {
                                resetTextContent(parent);
                                parentFiber.flags &= ~ContentReset;
                            }
                            var before = getHostSibling(finishedWork);
                            insertOrAppendPlacementNode(finishedWork, before, parent);
                            break;
                        }

                      case HostRoot:
                      case HostPortal:
                        {
                            var _parent = parentFiber.stateNode.containerInfo;
                            var _before = getHostSibling(finishedWork);
                            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                            break;
                        }

                      default:
                        throw new Error("Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
                    }
                }
                function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
                    var tag = node.tag;
                    var isHost = tag === HostComponent || tag === HostText;
                    if (isHost) {
                        var stateNode = node.stateNode;
                        if (before) {
                            insertInContainerBefore(parent, stateNode, before);
                        } else {
                            appendChildToContainer(parent, stateNode);
                        }
                    } else if (tag === HostPortal) ; else {
                        var child = node.child;
                        if (child !== null) {
                            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                            var sibling = child.sibling;
                            while (sibling !== null) {
                                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                                sibling = sibling.sibling;
                            }
                        }
                    }
                }
                function insertOrAppendPlacementNode(node, before, parent) {
                    var tag = node.tag;
                    var isHost = tag === HostComponent || tag === HostText;
                    if (isHost) {
                        var stateNode = node.stateNode;
                        if (before) {
                            insertBefore(parent, stateNode, before);
                        } else {
                            appendChild(parent, stateNode);
                        }
                    } else if (tag === HostPortal) ; else {
                        var child = node.child;
                        if (child !== null) {
                            insertOrAppendPlacementNode(child, before, parent);
                            var sibling = child.sibling;
                            while (sibling !== null) {
                                insertOrAppendPlacementNode(sibling, before, parent);
                                sibling = sibling.sibling;
                            }
                        }
                    }
                }
                var hostParent = null;
                var hostParentIsContainer = false;
                function commitDeletionEffects(root, returnFiber, deletedFiber) {
                    {
                        var parent = returnFiber;
                        findParent: while (parent !== null) {
                            switch (parent.tag) {
                              case HostComponent:
                                {
                                    hostParent = parent.stateNode;
                                    hostParentIsContainer = false;
                                    break findParent;
                                }

                              case HostRoot:
                                {
                                    hostParent = parent.stateNode.containerInfo;
                                    hostParentIsContainer = true;
                                    break findParent;
                                }

                              case HostPortal:
                                {
                                    hostParent = parent.stateNode.containerInfo;
                                    hostParentIsContainer = true;
                                    break findParent;
                                }
                            }
                            parent = parent.return;
                        }
                        if (hostParent === null) {
                            throw new Error("Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue.");
                        }
                        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
                        hostParent = null;
                        hostParentIsContainer = false;
                    }
                    detachFiberMutation(deletedFiber);
                }
                function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
                    var child = parent.child;
                    while (child !== null) {
                        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
                        child = child.sibling;
                    }
                }
                function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
                    onCommitUnmount(deletedFiber);
                    switch (deletedFiber.tag) {
                      case HostComponent:
                        {
                            if (!offscreenSubtreeWasHidden) {
                                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                            }
                        }

                      case HostText:
                        {
                            {
                                var prevHostParent = hostParent;
                                var prevHostParentIsContainer = hostParentIsContainer;
                                hostParent = null;
                                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                hostParent = prevHostParent;
                                hostParentIsContainer = prevHostParentIsContainer;
                                if (hostParent !== null) {
                                    if (hostParentIsContainer) {
                                        removeChildFromContainer(hostParent, deletedFiber.stateNode);
                                    } else {
                                        removeChild(hostParent, deletedFiber.stateNode);
                                    }
                                }
                            }
                            return;
                        }

                      case DehydratedFragment:
                        {
                            {
                                if (hostParent !== null) {
                                    if (hostParentIsContainer) {
                                        clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                                    } else {
                                        clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                                    }
                                }
                            }
                            return;
                        }

                      case HostPortal:
                        {
                            {
                                var _prevHostParent = hostParent;
                                var _prevHostParentIsContainer = hostParentIsContainer;
                                hostParent = deletedFiber.stateNode.containerInfo;
                                hostParentIsContainer = true;
                                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                hostParent = _prevHostParent;
                                hostParentIsContainer = _prevHostParentIsContainer;
                            }
                            return;
                        }

                      case FunctionComponent:
                      case ForwardRef:
                      case MemoComponent:
                      case SimpleMemoComponent:
                        {
                            if (!offscreenSubtreeWasHidden) {
                                var updateQueue = deletedFiber.updateQueue;
                                if (updateQueue !== null) {
                                    var lastEffect = updateQueue.lastEffect;
                                    if (lastEffect !== null) {
                                        var firstEffect = lastEffect.next;
                                        var effect = firstEffect;
                                        do {
                                            var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                                            if (destroy !== undefined) {
                                                if ((tag & Insertion) !== NoFlags$1) {
                                                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                                } else if ((tag & Layout) !== NoFlags$1) {
                                                    {
                                                        markComponentLayoutEffectUnmountStarted(deletedFiber);
                                                    }
                                                    if (deletedFiber.mode & ProfileMode) {
                                                        startLayoutEffectTimer();
                                                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                                        recordLayoutEffectDuration(deletedFiber);
                                                    } else {
                                                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                                    }
                                                    {
                                                        markComponentLayoutEffectUnmountStopped();
                                                    }
                                                }
                                            }
                                            effect = effect.next;
                                        } while (effect !== firstEffect);
                                    }
                                }
                            }
                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                            return;
                        }

                      case ClassComponent:
                        {
                            if (!offscreenSubtreeWasHidden) {
                                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                                var instance = deletedFiber.stateNode;
                                if (typeof instance.componentWillUnmount === "function") {
                                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                                }
                            }
                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                            return;
                        }

                      case ScopeComponent:
                        {
                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                            return;
                        }

                      case OffscreenComponent:
                        {
                            if (deletedFiber.mode & ConcurrentMode) {
                                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                            } else {
                                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                            }
                            break;
                        }

                      default:
                        {
                            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                            return;
                        }
                    }
                }
                function commitSuspenseCallback(finishedWork) {
                    finishedWork.memoizedState;
                }
                function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
                    var newState = finishedWork.memoizedState;
                    if (newState === null) {
                        var current = finishedWork.alternate;
                        if (current !== null) {
                            var prevState = current.memoizedState;
                            if (prevState !== null) {
                                var suspenseInstance = prevState.dehydrated;
                                if (suspenseInstance !== null) {
                                    commitHydratedSuspenseInstance(suspenseInstance);
                                }
                            }
                        }
                    }
                }
                function attachSuspenseRetryListeners(finishedWork) {
                    var wakeables = finishedWork.updateQueue;
                    if (wakeables !== null) {
                        finishedWork.updateQueue = null;
                        var retryCache = finishedWork.stateNode;
                        if (retryCache === null) {
                            retryCache = finishedWork.stateNode = new PossiblyWeakSet;
                        }
                        wakeables.forEach((function(wakeable) {
                            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                            if (!retryCache.has(wakeable)) {
                                retryCache.add(wakeable);
                                {
                                    if (isDevToolsPresent) {
                                        if (inProgressLanes !== null && inProgressRoot !== null) {
                                            restorePendingUpdaters(inProgressRoot, inProgressLanes);
                                        } else {
                                            throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                                        }
                                    }
                                }
                                wakeable.then(retry, retry);
                            }
                        }));
                    }
                }
                function commitMutationEffects(root, finishedWork, committedLanes) {
                    inProgressLanes = committedLanes;
                    inProgressRoot = root;
                    setCurrentFiber(finishedWork);
                    commitMutationEffectsOnFiber(finishedWork, root);
                    setCurrentFiber(finishedWork);
                    inProgressLanes = null;
                    inProgressRoot = null;
                }
                function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
                    var deletions = parentFiber.deletions;
                    if (deletions !== null) {
                        for (var i = 0; i < deletions.length; i++) {
                            var childToDelete = deletions[i];
                            try {
                                commitDeletionEffects(root, parentFiber, childToDelete);
                            } catch (error) {
                                captureCommitPhaseError(childToDelete, parentFiber, error);
                            }
                        }
                    }
                    var prevDebugFiber = getCurrentFiber();
                    if (parentFiber.subtreeFlags & MutationMask) {
                        var child = parentFiber.child;
                        while (child !== null) {
                            setCurrentFiber(child);
                            commitMutationEffectsOnFiber(child, root);
                            child = child.sibling;
                        }
                    }
                    setCurrentFiber(prevDebugFiber);
                }
                function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
                    var current = finishedWork.alternate;
                    var flags = finishedWork.flags;
                    switch (finishedWork.tag) {
                      case FunctionComponent:
                      case ForwardRef:
                      case MemoComponent:
                      case SimpleMemoComponent:
                        {
                            recursivelyTraverseMutationEffects(root, finishedWork);
                            commitReconciliationEffects(finishedWork);
                            if (flags & Update) {
                                try {
                                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                                } catch (error) {
                                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                                }
                                if (finishedWork.mode & ProfileMode) {
                                    try {
                                        startLayoutEffectTimer();
                                        commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                                    } catch (error) {
                                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                                    }
                                    recordLayoutEffectDuration(finishedWork);
                                } else {
                                    try {
                                        commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                                    } catch (error) {
                                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                                    }
                                }
                            }
                            return;
                        }

                      case ClassComponent:
                        {
                            recursivelyTraverseMutationEffects(root, finishedWork);
                            commitReconciliationEffects(finishedWork);
                            if (flags & Ref) {
                                if (current !== null) {
                                    safelyDetachRef(current, current.return);
                                }
                            }
                            return;
                        }

                      case HostComponent:
                        {
                            recursivelyTraverseMutationEffects(root, finishedWork);
                            commitReconciliationEffects(finishedWork);
                            if (flags & Ref) {
                                if (current !== null) {
                                    safelyDetachRef(current, current.return);
                                }
                            }
                            {
                                if (finishedWork.flags & ContentReset) {
                                    var instance = finishedWork.stateNode;
                                    try {
                                        resetTextContent(instance);
                                    } catch (error) {
                                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                                    }
                                }
                                if (flags & Update) {
                                    var _instance4 = finishedWork.stateNode;
                                    if (_instance4 != null) {
                                        var newProps = finishedWork.memoizedProps;
                                        var oldProps = current !== null ? current.memoizedProps : newProps;
                                        var type = finishedWork.type;
                                        var updatePayload = finishedWork.updateQueue;
                                        finishedWork.updateQueue = null;
                                        if (updatePayload !== null) {
                                            try {
                                                commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                                            } catch (error) {
                                                captureCommitPhaseError(finishedWork, finishedWork.return, error);
                                            }
                                        }
                                    }
                                }
                            }
                            return;
                        }

                      case HostText:
                        {
                            recursivelyTraverseMutationEffects(root, finishedWork);
                            commitReconciliationEffects(finishedWork);
                            if (flags & Update) {
                                {
                                    if (finishedWork.stateNode === null) {
                                        throw new Error("This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                                    }
                                    var textInstance = finishedWork.stateNode;
                                    var newText = finishedWork.memoizedProps;
                                    var oldText = current !== null ? current.memoizedProps : newText;
                                    try {
                                        commitTextUpdate(textInstance, oldText, newText);
                                    } catch (error) {
                                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                                    }
                                }
                            }
                            return;
                        }

                      case HostRoot:
                        {
                            recursivelyTraverseMutationEffects(root, finishedWork);
                            commitReconciliationEffects(finishedWork);
                            if (flags & Update) {
                                {
                                    if (current !== null) {
                                        var prevRootState = current.memoizedState;
                                        if (prevRootState.isDehydrated) {
                                            try {
                                                commitHydratedContainer(root.containerInfo);
                                            } catch (error) {
                                                captureCommitPhaseError(finishedWork, finishedWork.return, error);
                                            }
                                        }
                                    }
                                }
                            }
                            return;
                        }

                      case HostPortal:
                        {
                            recursivelyTraverseMutationEffects(root, finishedWork);
                            commitReconciliationEffects(finishedWork);
                            return;
                        }

                      case SuspenseComponent:
                        {
                            recursivelyTraverseMutationEffects(root, finishedWork);
                            commitReconciliationEffects(finishedWork);
                            var offscreenFiber = finishedWork.child;
                            if (offscreenFiber.flags & Visibility) {
                                var offscreenInstance = offscreenFiber.stateNode;
                                var newState = offscreenFiber.memoizedState;
                                var isHidden = newState !== null;
                                offscreenInstance.isHidden = isHidden;
                                if (isHidden) {
                                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                                    if (!wasHidden) {
                                        markCommitTimeOfFallback();
                                    }
                                }
                            }
                            if (flags & Update) {
                                try {
                                    commitSuspenseCallback(finishedWork);
                                } catch (error) {
                                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                                }
                                attachSuspenseRetryListeners(finishedWork);
                            }
                            return;
                        }

                      case OffscreenComponent:
                        {
                            var _wasHidden = current !== null && current.memoizedState !== null;
                            if (finishedWork.mode & ConcurrentMode) {
                                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                                recursivelyTraverseMutationEffects(root, finishedWork);
                                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                            } else {
                                recursivelyTraverseMutationEffects(root, finishedWork);
                            }
                            commitReconciliationEffects(finishedWork);
                            if (flags & Visibility) {
                                var _offscreenInstance = finishedWork.stateNode;
                                var _newState = finishedWork.memoizedState;
                                var _isHidden = _newState !== null;
                                var offscreenBoundary = finishedWork;
                                _offscreenInstance.isHidden = _isHidden;
                                {
                                    if (_isHidden) {
                                        if (!_wasHidden) {
                                            if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                                                nextEffect = offscreenBoundary;
                                                var offscreenChild = offscreenBoundary.child;
                                                while (offscreenChild !== null) {
                                                    nextEffect = offscreenChild;
                                                    disappearLayoutEffects_begin(offscreenChild);
                                                    offscreenChild = offscreenChild.sibling;
                                                }
                                            }
                                        }
                                    }
                                }
                                {
                                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                                }
                            }
                            return;
                        }

                      case SuspenseListComponent:
                        {
                            recursivelyTraverseMutationEffects(root, finishedWork);
                            commitReconciliationEffects(finishedWork);
                            if (flags & Update) {
                                attachSuspenseRetryListeners(finishedWork);
                            }
                            return;
                        }

                      case ScopeComponent:
                        {
                            return;
                        }

                      default:
                        {
                            recursivelyTraverseMutationEffects(root, finishedWork);
                            commitReconciliationEffects(finishedWork);
                            return;
                        }
                    }
                }
                function commitReconciliationEffects(finishedWork) {
                    var flags = finishedWork.flags;
                    if (flags & Placement) {
                        try {
                            commitPlacement(finishedWork);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                        finishedWork.flags &= ~Placement;
                    }
                    if (flags & Hydrating) {
                        finishedWork.flags &= ~Hydrating;
                    }
                }
                function commitLayoutEffects(finishedWork, root, committedLanes) {
                    inProgressLanes = committedLanes;
                    inProgressRoot = root;
                    nextEffect = finishedWork;
                    commitLayoutEffects_begin(finishedWork, root, committedLanes);
                    inProgressLanes = null;
                    inProgressRoot = null;
                }
                function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
                    var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        var firstChild = fiber.child;
                        if (fiber.tag === OffscreenComponent && isModernRoot) {
                            var isHidden = fiber.memoizedState !== null;
                            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                            if (newOffscreenSubtreeIsHidden) {
                                commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                                continue;
                            } else {
                                var current = fiber.alternate;
                                var wasHidden = current !== null && current.memoizedState !== null;
                                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                                    nextEffect = fiber;
                                    reappearLayoutEffects_begin(fiber);
                                }
                                var child = firstChild;
                                while (child !== null) {
                                    nextEffect = child;
                                    commitLayoutEffects_begin(child, root, committedLanes);
                                    child = child.sibling;
                                }
                                nextEffect = fiber;
                                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                                commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                                continue;
                            }
                        }
                        if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                            firstChild.return = fiber;
                            nextEffect = firstChild;
                        } else {
                            commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                        }
                    }
                }
                function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        if ((fiber.flags & LayoutMask) !== NoFlags) {
                            var current = fiber.alternate;
                            setCurrentFiber(fiber);
                            try {
                                commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
                            } catch (error) {
                                captureCommitPhaseError(fiber, fiber.return, error);
                            }
                            resetCurrentFiber();
                        }
                        if (fiber === subtreeRoot) {
                            nextEffect = null;
                            return;
                        }
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function disappearLayoutEffects_begin(subtreeRoot) {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        var firstChild = fiber.child;
                        switch (fiber.tag) {
                          case FunctionComponent:
                          case ForwardRef:
                          case MemoComponent:
                          case SimpleMemoComponent:
                            {
                                if (fiber.mode & ProfileMode) {
                                    try {
                                        startLayoutEffectTimer();
                                        commitHookEffectListUnmount(Layout, fiber, fiber.return);
                                    } finally {
                                        recordLayoutEffectDuration(fiber);
                                    }
                                } else {
                                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                                }
                                break;
                            }

                          case ClassComponent:
                            {
                                safelyDetachRef(fiber, fiber.return);
                                var instance = fiber.stateNode;
                                if (typeof instance.componentWillUnmount === "function") {
                                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                                }
                                break;
                            }

                          case HostComponent:
                            {
                                safelyDetachRef(fiber, fiber.return);
                                break;
                            }

                          case OffscreenComponent:
                            {
                                var isHidden = fiber.memoizedState !== null;
                                if (isHidden) {
                                    disappearLayoutEffects_complete(subtreeRoot);
                                    continue;
                                }
                                break;
                            }
                        }
                        if (firstChild !== null) {
                            firstChild.return = fiber;
                            nextEffect = firstChild;
                        } else {
                            disappearLayoutEffects_complete(subtreeRoot);
                        }
                    }
                }
                function disappearLayoutEffects_complete(subtreeRoot) {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        if (fiber === subtreeRoot) {
                            nextEffect = null;
                            return;
                        }
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function reappearLayoutEffects_begin(subtreeRoot) {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        var firstChild = fiber.child;
                        if (fiber.tag === OffscreenComponent) {
                            var isHidden = fiber.memoizedState !== null;
                            if (isHidden) {
                                reappearLayoutEffects_complete(subtreeRoot);
                                continue;
                            }
                        }
                        if (firstChild !== null) {
                            firstChild.return = fiber;
                            nextEffect = firstChild;
                        } else {
                            reappearLayoutEffects_complete(subtreeRoot);
                        }
                    }
                }
                function reappearLayoutEffects_complete(subtreeRoot) {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        setCurrentFiber(fiber);
                        try {
                            reappearLayoutEffectsOnFiber(fiber);
                        } catch (error) {
                            captureCommitPhaseError(fiber, fiber.return, error);
                        }
                        resetCurrentFiber();
                        if (fiber === subtreeRoot) {
                            nextEffect = null;
                            return;
                        }
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
                    nextEffect = finishedWork;
                    commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
                }
                function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        var firstChild = fiber.child;
                        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                            firstChild.return = fiber;
                            nextEffect = firstChild;
                        } else {
                            commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
                        }
                    }
                }
                function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        if ((fiber.flags & Passive) !== NoFlags) {
                            setCurrentFiber(fiber);
                            try {
                                commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
                            } catch (error) {
                                captureCommitPhaseError(fiber, fiber.return, error);
                            }
                            resetCurrentFiber();
                        }
                        if (fiber === subtreeRoot) {
                            nextEffect = null;
                            return;
                        }
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
                    switch (finishedWork.tag) {
                      case FunctionComponent:
                      case ForwardRef:
                      case SimpleMemoComponent:
                        {
                            if (finishedWork.mode & ProfileMode) {
                                startPassiveEffectTimer();
                                try {
                                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                                } finally {
                                    recordPassiveEffectDuration(finishedWork);
                                }
                            } else {
                                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                            }
                            break;
                        }
                    }
                }
                function commitPassiveUnmountEffects(firstChild) {
                    nextEffect = firstChild;
                    commitPassiveUnmountEffects_begin();
                }
                function commitPassiveUnmountEffects_begin() {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        var child = fiber.child;
                        if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                            var deletions = fiber.deletions;
                            if (deletions !== null) {
                                for (var i = 0; i < deletions.length; i++) {
                                    var fiberToDelete = deletions[i];
                                    nextEffect = fiberToDelete;
                                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                                }
                                {
                                    var previousFiber = fiber.alternate;
                                    if (previousFiber !== null) {
                                        var detachedChild = previousFiber.child;
                                        if (detachedChild !== null) {
                                            previousFiber.child = null;
                                            do {
                                                var detachedSibling = detachedChild.sibling;
                                                detachedChild.sibling = null;
                                                detachedChild = detachedSibling;
                                            } while (detachedChild !== null);
                                        }
                                    }
                                }
                                nextEffect = fiber;
                            }
                        }
                        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                            child.return = fiber;
                            nextEffect = child;
                        } else {
                            commitPassiveUnmountEffects_complete();
                        }
                    }
                }
                function commitPassiveUnmountEffects_complete() {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        if ((fiber.flags & Passive) !== NoFlags) {
                            setCurrentFiber(fiber);
                            commitPassiveUnmountOnFiber(fiber);
                            resetCurrentFiber();
                        }
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function commitPassiveUnmountOnFiber(finishedWork) {
                    switch (finishedWork.tag) {
                      case FunctionComponent:
                      case ForwardRef:
                      case SimpleMemoComponent:
                        {
                            if (finishedWork.mode & ProfileMode) {
                                startPassiveEffectTimer();
                                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                                recordPassiveEffectDuration(finishedWork);
                            } else {
                                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                            }
                            break;
                        }
                    }
                }
                function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        setCurrentFiber(fiber);
                        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
                        resetCurrentFiber();
                        var child = fiber.child;
                        if (child !== null) {
                            child.return = fiber;
                            nextEffect = child;
                        } else {
                            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
                        }
                    }
                }
                function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
                    while (nextEffect !== null) {
                        var fiber = nextEffect;
                        var sibling = fiber.sibling;
                        var returnFiber = fiber.return;
                        {
                            detachFiberAfterEffects(fiber);
                            if (fiber === deletedSubtreeRoot) {
                                nextEffect = null;
                                return;
                            }
                        }
                        if (sibling !== null) {
                            sibling.return = returnFiber;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = returnFiber;
                    }
                }
                function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
                    switch (current.tag) {
                      case FunctionComponent:
                      case ForwardRef:
                      case SimpleMemoComponent:
                        {
                            if (current.mode & ProfileMode) {
                                startPassiveEffectTimer();
                                commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                                recordPassiveEffectDuration(current);
                            } else {
                                commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                            }
                            break;
                        }
                    }
                }
                function invokeLayoutEffectMountInDEV(fiber) {
                    {
                        switch (fiber.tag) {
                          case FunctionComponent:
                          case ForwardRef:
                          case SimpleMemoComponent:
                            {
                                try {
                                    commitHookEffectListMount(Layout | HasEffect, fiber);
                                } catch (error) {
                                    captureCommitPhaseError(fiber, fiber.return, error);
                                }
                                break;
                            }

                          case ClassComponent:
                            {
                                var instance = fiber.stateNode;
                                try {
                                    instance.componentDidMount();
                                } catch (error) {
                                    captureCommitPhaseError(fiber, fiber.return, error);
                                }
                                break;
                            }
                        }
                    }
                }
                function invokePassiveEffectMountInDEV(fiber) {
                    {
                        switch (fiber.tag) {
                          case FunctionComponent:
                          case ForwardRef:
                          case SimpleMemoComponent:
                            {
                                try {
                                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                                } catch (error) {
                                    captureCommitPhaseError(fiber, fiber.return, error);
                                }
                                break;
                            }
                        }
                    }
                }
                function invokeLayoutEffectUnmountInDEV(fiber) {
                    {
                        switch (fiber.tag) {
                          case FunctionComponent:
                          case ForwardRef:
                          case SimpleMemoComponent:
                            {
                                try {
                                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                                } catch (error) {
                                    captureCommitPhaseError(fiber, fiber.return, error);
                                }
                                break;
                            }

                          case ClassComponent:
                            {
                                var instance = fiber.stateNode;
                                if (typeof instance.componentWillUnmount === "function") {
                                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                                }
                                break;
                            }
                        }
                    }
                }
                function invokePassiveEffectUnmountInDEV(fiber) {
                    {
                        switch (fiber.tag) {
                          case FunctionComponent:
                          case ForwardRef:
                          case SimpleMemoComponent:
                            {
                                try {
                                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                                } catch (error) {
                                    captureCommitPhaseError(fiber, fiber.return, error);
                                }
                            }
                        }
                    }
                }
                if (typeof Symbol === "function" && Symbol.for) {
                    var symbolFor = Symbol.for;
                    symbolFor("selector.component");
                    symbolFor("selector.has_pseudo_class");
                    symbolFor("selector.role");
                    symbolFor("selector.test_id");
                    symbolFor("selector.text");
                }
                var commitHooks = [];
                function onCommitRoot$1() {
                    {
                        commitHooks.forEach((function(commitHook) {
                            return commitHook();
                        }));
                    }
                }
                var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
                function isLegacyActEnvironment(fiber) {
                    {
                        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
                        var jestIsDefined = typeof jest !== "undefined";
                        return jestIsDefined && isReactActEnvironmentGlobal !== false;
                    }
                }
                function isConcurrentActEnvironment() {
                    {
                        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
                        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                            error("The current testing environment is not configured to support " + "act(...)");
                        }
                        return isReactActEnvironmentGlobal;
                    }
                }
                var ceil = Math.ceil;
                var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
                var NoContext = 0;
                var BatchedContext = 1;
                var RenderContext = 2;
                var CommitContext = 4;
                var RootInProgress = 0;
                var RootFatalErrored = 1;
                var RootErrored = 2;
                var RootSuspended = 3;
                var RootSuspendedWithDelay = 4;
                var RootCompleted = 5;
                var RootDidNotComplete = 6;
                var executionContext = NoContext;
                var workInProgressRoot = null;
                var workInProgress = null;
                var workInProgressRootRenderLanes = NoLanes;
                var subtreeRenderLanes = NoLanes;
                var subtreeRenderLanesCursor = createCursor(NoLanes);
                var workInProgressRootExitStatus = RootInProgress;
                var workInProgressRootFatalError = null;
                var workInProgressRootSkippedLanes = NoLanes;
                var workInProgressRootInterleavedUpdatedLanes = NoLanes;
                var workInProgressRootPingedLanes = NoLanes;
                var workInProgressRootConcurrentErrors = null;
                var workInProgressRootRecoverableErrors = null;
                var globalMostRecentFallbackTime = 0;
                var FALLBACK_THROTTLE_MS = 500;
                var workInProgressRootRenderTargetTime = Infinity;
                var RENDER_TIMEOUT_MS = 500;
                var workInProgressTransitions = null;
                function resetRenderTimer() {
                    workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
                }
                function getRenderTargetTime() {
                    return workInProgressRootRenderTargetTime;
                }
                var hasUncaughtError = false;
                var firstUncaughtError = null;
                var legacyErrorBoundariesThatAlreadyFailed = null;
                var rootDoesHavePassiveEffects = false;
                var rootWithPendingPassiveEffects = null;
                var pendingPassiveEffectsLanes = NoLanes;
                var pendingPassiveProfilerEffects = [];
                var pendingPassiveTransitions = null;
                var NESTED_UPDATE_LIMIT = 50;
                var nestedUpdateCount = 0;
                var rootWithNestedUpdates = null;
                var isFlushingPassiveEffects = false;
                var didScheduleUpdateDuringPassiveEffects = false;
                var NESTED_PASSIVE_UPDATE_LIMIT = 50;
                var nestedPassiveUpdateCount = 0;
                var rootWithPassiveNestedUpdates = null;
                var currentEventTime = NoTimestamp;
                var currentEventTransitionLane = NoLanes;
                var isRunningInsertionEffect = false;
                function getWorkInProgressRoot() {
                    return workInProgressRoot;
                }
                function requestEventTime() {
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        return now();
                    }
                    if (currentEventTime !== NoTimestamp) {
                        return currentEventTime;
                    }
                    currentEventTime = now();
                    return currentEventTime;
                }
                function requestUpdateLane(fiber) {
                    var mode = fiber.mode;
                    if ((mode & ConcurrentMode) === NoMode) {
                        return SyncLane;
                    } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
                        return pickArbitraryLane(workInProgressRootRenderLanes);
                    }
                    var isTransition = requestCurrentTransition() !== NoTransition;
                    if (isTransition) {
                        if (ReactCurrentBatchConfig$3.transition !== null) {
                            var transition = ReactCurrentBatchConfig$3.transition;
                            if (!transition._updatedFibers) {
                                transition._updatedFibers = new Set;
                            }
                            transition._updatedFibers.add(fiber);
                        }
                        if (currentEventTransitionLane === NoLane) {
                            currentEventTransitionLane = claimNextTransitionLane();
                        }
                        return currentEventTransitionLane;
                    }
                    var updateLane = getCurrentUpdatePriority();
                    if (updateLane !== NoLane) {
                        return updateLane;
                    }
                    var eventLane = getCurrentEventPriority();
                    return eventLane;
                }
                function requestRetryLane(fiber) {
                    var mode = fiber.mode;
                    if ((mode & ConcurrentMode) === NoMode) {
                        return SyncLane;
                    }
                    return claimNextRetryLane();
                }
                function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
                    checkForNestedUpdates();
                    {
                        if (isRunningInsertionEffect) {
                            error("useInsertionEffect must not schedule updates.");
                        }
                    }
                    {
                        if (isFlushingPassiveEffects) {
                            didScheduleUpdateDuringPassiveEffects = true;
                        }
                    }
                    markRootUpdated(root, lane, eventTime);
                    if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {
                        warnAboutRenderPhaseUpdatesInDEV(fiber);
                    } else {
                        {
                            if (isDevToolsPresent) {
                                addFiberToLanesMap(root, fiber, lane);
                            }
                        }
                        warnIfUpdatesNotWrappedWithActDEV(fiber);
                        if (root === workInProgressRoot) {
                            if ((executionContext & RenderContext) === NoContext) {
                                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                            }
                            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                                markRootSuspended$1(root, workInProgressRootRenderLanes);
                            }
                        }
                        ensureRootIsScheduled(root, eventTime);
                        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                            resetRenderTimer();
                            flushSyncCallbacksOnlyInLegacyMode();
                        }
                    }
                }
                function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
                    var current = root.current;
                    current.lanes = lane;
                    markRootUpdated(root, lane, eventTime);
                    ensureRootIsScheduled(root, eventTime);
                }
                function isUnsafeClassRenderPhaseUpdate(fiber) {
                    return (executionContext & RenderContext) !== NoContext;
                }
                function ensureRootIsScheduled(root, currentTime) {
                    var existingCallbackNode = root.callbackNode;
                    markStarvedLanesAsExpired(root, currentTime);
                    var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
                    if (nextLanes === NoLanes) {
                        if (existingCallbackNode !== null) {
                            cancelCallback$1(existingCallbackNode);
                        }
                        root.callbackNode = null;
                        root.callbackPriority = NoLane;
                        return;
                    }
                    var newCallbackPriority = getHighestPriorityLane(nextLanes);
                    var existingCallbackPriority = root.callbackPriority;
                    if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
                        {
                            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                            }
                        }
                        return;
                    }
                    if (existingCallbackNode != null) {
                        cancelCallback$1(existingCallbackNode);
                    }
                    var newCallbackNode;
                    if (newCallbackPriority === SyncLane) {
                        if (root.tag === LegacyRoot) {
                            if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                            }
                            scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
                        } else {
                            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
                        }
                        {
                            if (ReactCurrentActQueue$1.current !== null) {
                                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                            } else {
                                scheduleMicrotask((function() {
                                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                                        flushSyncCallbacks();
                                    }
                                }));
                            }
                        }
                        newCallbackNode = null;
                    } else {
                        var schedulerPriorityLevel;
                        switch (lanesToEventPriority(nextLanes)) {
                          case DiscreteEventPriority:
                            schedulerPriorityLevel = ImmediatePriority;
                            break;

                          case ContinuousEventPriority:
                            schedulerPriorityLevel = UserBlockingPriority;
                            break;

                          case DefaultEventPriority:
                            schedulerPriorityLevel = NormalPriority;
                            break;

                          case IdleEventPriority:
                            schedulerPriorityLevel = IdlePriority;
                            break;

                          default:
                            schedulerPriorityLevel = NormalPriority;
                            break;
                        }
                        newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
                    }
                    root.callbackPriority = newCallbackPriority;
                    root.callbackNode = newCallbackNode;
                }
                function performConcurrentWorkOnRoot(root, didTimeout) {
                    {
                        resetNestedUpdateFlag();
                    }
                    currentEventTime = NoTimestamp;
                    currentEventTransitionLane = NoLanes;
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        throw new Error("Should not already be working.");
                    }
                    var originalCallbackNode = root.callbackNode;
                    var didFlushPassiveEffects = flushPassiveEffects();
                    if (didFlushPassiveEffects) {
                        if (root.callbackNode !== originalCallbackNode) {
                            return null;
                        }
                    }
                    var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
                    if (lanes === NoLanes) {
                        return null;
                    }
                    var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;
                    var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);
                    if (exitStatus !== RootInProgress) {
                        if (exitStatus === RootErrored) {
                            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                            if (errorRetryLanes !== NoLanes) {
                                lanes = errorRetryLanes;
                                exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
                            }
                        }
                        if (exitStatus === RootFatalErrored) {
                            var fatalError = workInProgressRootFatalError;
                            prepareFreshStack(root, NoLanes);
                            markRootSuspended$1(root, lanes);
                            ensureRootIsScheduled(root, now());
                            throw fatalError;
                        }
                        if (exitStatus === RootDidNotComplete) {
                            markRootSuspended$1(root, lanes);
                        } else {
                            var renderWasConcurrent = !includesBlockingLane(root, lanes);
                            var finishedWork = root.current.alternate;
                            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                                exitStatus = renderRootSync(root, lanes);
                                if (exitStatus === RootErrored) {
                                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                                    if (_errorRetryLanes !== NoLanes) {
                                        lanes = _errorRetryLanes;
                                        exitStatus = recoverFromConcurrentError(root, _errorRetryLanes);
                                    }
                                }
                                if (exitStatus === RootFatalErrored) {
                                    var _fatalError = workInProgressRootFatalError;
                                    prepareFreshStack(root, NoLanes);
                                    markRootSuspended$1(root, lanes);
                                    ensureRootIsScheduled(root, now());
                                    throw _fatalError;
                                }
                            }
                            root.finishedWork = finishedWork;
                            root.finishedLanes = lanes;
                            finishConcurrentRender(root, exitStatus, lanes);
                        }
                    }
                    ensureRootIsScheduled(root, now());
                    if (root.callbackNode === originalCallbackNode) {
                        return performConcurrentWorkOnRoot.bind(null, root);
                    }
                    return null;
                }
                function recoverFromConcurrentError(root, errorRetryLanes) {
                    var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
                    if (isRootDehydrated(root)) {
                        var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
                        rootWorkInProgress.flags |= ForceClientRender;
                        {
                            errorHydratingContainer(root.containerInfo);
                        }
                    }
                    var exitStatus = renderRootSync(root, errorRetryLanes);
                    if (exitStatus !== RootErrored) {
                        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
                        workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
                        if (errorsFromSecondAttempt !== null) {
                            queueRecoverableErrors(errorsFromSecondAttempt);
                        }
                    }
                    return exitStatus;
                }
                function queueRecoverableErrors(errors) {
                    if (workInProgressRootRecoverableErrors === null) {
                        workInProgressRootRecoverableErrors = errors;
                    } else {
                        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
                    }
                }
                function finishConcurrentRender(root, exitStatus, lanes) {
                    switch (exitStatus) {
                      case RootInProgress:
                      case RootFatalErrored:
                        {
                            throw new Error("Root did not complete. This is a bug in React.");
                        }

                      case RootErrored:
                        {
                            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                            break;
                        }

                      case RootSuspended:
                        {
                            markRootSuspended$1(root, lanes);
                            if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                                if (msUntilTimeout > 10) {
                                    var nextLanes = getNextLanes(root, NoLanes);
                                    if (nextLanes !== NoLanes) {
                                        break;
                                    }
                                    var suspendedLanes = root.suspendedLanes;
                                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                                        requestEventTime();
                                        markRootPinged(root, suspendedLanes);
                                        break;
                                    }
                                    root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                                    break;
                                }
                            }
                            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                            break;
                        }

                      case RootSuspendedWithDelay:
                        {
                            markRootSuspended$1(root, lanes);
                            if (includesOnlyTransitions(lanes)) {
                                break;
                            }
                            if (!shouldForceFlushFallbacksInDEV()) {
                                var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                                var eventTimeMs = mostRecentEventTime;
                                var timeElapsedMs = now() - eventTimeMs;
                                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                                if (_msUntilTimeout > 10) {
                                    root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                                    break;
                                }
                            }
                            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                            break;
                        }

                      case RootCompleted:
                        {
                            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                            break;
                        }

                      default:
                        {
                            throw new Error("Unknown root exit status.");
                        }
                    }
                }
                function isRenderConsistentWithExternalStores(finishedWork) {
                    var node = finishedWork;
                    while (true) {
                        if (node.flags & StoreConsistency) {
                            var updateQueue = node.updateQueue;
                            if (updateQueue !== null) {
                                var checks = updateQueue.stores;
                                if (checks !== null) {
                                    for (var i = 0; i < checks.length; i++) {
                                        var check = checks[i];
                                        var getSnapshot = check.getSnapshot;
                                        var renderedValue = check.value;
                                        try {
                                            if (!objectIs(getSnapshot(), renderedValue)) {
                                                return false;
                                            }
                                        } catch (error) {
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                        var child = node.child;
                        if (node.subtreeFlags & StoreConsistency && child !== null) {
                            child.return = node;
                            node = child;
                            continue;
                        }
                        if (node === finishedWork) {
                            return true;
                        }
                        while (node.sibling === null) {
                            if (node.return === null || node.return === finishedWork) {
                                return true;
                            }
                            node = node.return;
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                    }
                    return true;
                }
                function markRootSuspended$1(root, suspendedLanes) {
                    suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
                    suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
                    markRootSuspended(root, suspendedLanes);
                }
                function performSyncWorkOnRoot(root) {
                    {
                        syncNestedUpdateFlag();
                    }
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        throw new Error("Should not already be working.");
                    }
                    flushPassiveEffects();
                    var lanes = getNextLanes(root, NoLanes);
                    if (!includesSomeLane(lanes, SyncLane)) {
                        ensureRootIsScheduled(root, now());
                        return null;
                    }
                    var exitStatus = renderRootSync(root, lanes);
                    if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
                        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                        if (errorRetryLanes !== NoLanes) {
                            lanes = errorRetryLanes;
                            exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
                        }
                    }
                    if (exitStatus === RootFatalErrored) {
                        var fatalError = workInProgressRootFatalError;
                        prepareFreshStack(root, NoLanes);
                        markRootSuspended$1(root, lanes);
                        ensureRootIsScheduled(root, now());
                        throw fatalError;
                    }
                    if (exitStatus === RootDidNotComplete) {
                        throw new Error("Root did not complete. This is a bug in React.");
                    }
                    var finishedWork = root.current.alternate;
                    root.finishedWork = finishedWork;
                    root.finishedLanes = lanes;
                    commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                    ensureRootIsScheduled(root, now());
                    return null;
                }
                function flushRoot(root, lanes) {
                    if (lanes !== NoLanes) {
                        markRootEntangled(root, mergeLanes(lanes, SyncLane));
                        ensureRootIsScheduled(root, now());
                        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                            resetRenderTimer();
                            flushSyncCallbacks();
                        }
                    }
                }
                function batchedUpdates$1(fn, a) {
                    var prevExecutionContext = executionContext;
                    executionContext |= BatchedContext;
                    try {
                        return fn(a);
                    } finally {
                        executionContext = prevExecutionContext;
                        if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                            resetRenderTimer();
                            flushSyncCallbacksOnlyInLegacyMode();
                        }
                    }
                }
                function discreteUpdates(fn, a, b, c, d) {
                    var previousPriority = getCurrentUpdatePriority();
                    var prevTransition = ReactCurrentBatchConfig$3.transition;
                    try {
                        ReactCurrentBatchConfig$3.transition = null;
                        setCurrentUpdatePriority(DiscreteEventPriority);
                        return fn(a, b, c, d);
                    } finally {
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig$3.transition = prevTransition;
                        if (executionContext === NoContext) {
                            resetRenderTimer();
                        }
                    }
                }
                function flushSync(fn) {
                    if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                        flushPassiveEffects();
                    }
                    var prevExecutionContext = executionContext;
                    executionContext |= BatchedContext;
                    var prevTransition = ReactCurrentBatchConfig$3.transition;
                    var previousPriority = getCurrentUpdatePriority();
                    try {
                        ReactCurrentBatchConfig$3.transition = null;
                        setCurrentUpdatePriority(DiscreteEventPriority);
                        if (fn) {
                            return fn();
                        } else {
                            return undefined;
                        }
                    } finally {
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig$3.transition = prevTransition;
                        executionContext = prevExecutionContext;
                        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                            flushSyncCallbacks();
                        }
                    }
                }
                function isAlreadyRendering() {
                    return (executionContext & (RenderContext | CommitContext)) !== NoContext;
                }
                function pushRenderLanes(fiber, lanes) {
                    push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
                    subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
                }
                function popRenderLanes(fiber) {
                    subtreeRenderLanes = subtreeRenderLanesCursor.current;
                    pop(subtreeRenderLanesCursor, fiber);
                }
                function prepareFreshStack(root, lanes) {
                    root.finishedWork = null;
                    root.finishedLanes = NoLanes;
                    var timeoutHandle = root.timeoutHandle;
                    if (timeoutHandle !== noTimeout) {
                        root.timeoutHandle = noTimeout;
                        cancelTimeout(timeoutHandle);
                    }
                    if (workInProgress !== null) {
                        var interruptedWork = workInProgress.return;
                        while (interruptedWork !== null) {
                            var current = interruptedWork.alternate;
                            unwindInterruptedWork(current, interruptedWork);
                            interruptedWork = interruptedWork.return;
                        }
                    }
                    workInProgressRoot = root;
                    var rootWorkInProgress = createWorkInProgress(root.current, null);
                    workInProgress = rootWorkInProgress;
                    workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
                    workInProgressRootExitStatus = RootInProgress;
                    workInProgressRootFatalError = null;
                    workInProgressRootSkippedLanes = NoLanes;
                    workInProgressRootInterleavedUpdatedLanes = NoLanes;
                    workInProgressRootPingedLanes = NoLanes;
                    workInProgressRootConcurrentErrors = null;
                    workInProgressRootRecoverableErrors = null;
                    finishQueueingConcurrentUpdates();
                    {
                        ReactStrictModeWarnings.discardPendingWarnings();
                    }
                    return rootWorkInProgress;
                }
                function handleError(root, thrownValue) {
                    do {
                        var erroredWork = workInProgress;
                        try {
                            resetContextDependencies();
                            resetHooksAfterThrow();
                            resetCurrentFiber();
                            ReactCurrentOwner$2.current = null;
                            if (erroredWork === null || erroredWork.return === null) {
                                workInProgressRootExitStatus = RootFatalErrored;
                                workInProgressRootFatalError = thrownValue;
                                workInProgress = null;
                                return;
                            }
                            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                            }
                            if (enableSchedulingProfiler) {
                                markComponentRenderStopped();
                                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                                    var wakeable = thrownValue;
                                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                                } else {
                                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                                }
                            }
                            throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                            completeUnitOfWork(erroredWork);
                        } catch (yetAnotherThrownValue) {
                            thrownValue = yetAnotherThrownValue;
                            if (workInProgress === erroredWork && erroredWork !== null) {
                                erroredWork = erroredWork.return;
                                workInProgress = erroredWork;
                            } else {
                                erroredWork = workInProgress;
                            }
                            continue;
                        }
                        return;
                    } while (true);
                }
                function pushDispatcher() {
                    var prevDispatcher = ReactCurrentDispatcher$2.current;
                    ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
                    if (prevDispatcher === null) {
                        return ContextOnlyDispatcher;
                    } else {
                        return prevDispatcher;
                    }
                }
                function popDispatcher(prevDispatcher) {
                    ReactCurrentDispatcher$2.current = prevDispatcher;
                }
                function markCommitTimeOfFallback() {
                    globalMostRecentFallbackTime = now();
                }
                function markSkippedUpdateLanes(lane) {
                    workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
                }
                function renderDidSuspend() {
                    if (workInProgressRootExitStatus === RootInProgress) {
                        workInProgressRootExitStatus = RootSuspended;
                    }
                }
                function renderDidSuspendDelayIfPossible() {
                    if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
                        workInProgressRootExitStatus = RootSuspendedWithDelay;
                    }
                    if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
                        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
                    }
                }
                function renderDidError(error) {
                    if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
                        workInProgressRootExitStatus = RootErrored;
                    }
                    if (workInProgressRootConcurrentErrors === null) {
                        workInProgressRootConcurrentErrors = [ error ];
                    } else {
                        workInProgressRootConcurrentErrors.push(error);
                    }
                }
                function renderHasNotSuspendedYet() {
                    return workInProgressRootExitStatus === RootInProgress;
                }
                function renderRootSync(root, lanes) {
                    var prevExecutionContext = executionContext;
                    executionContext |= RenderContext;
                    var prevDispatcher = pushDispatcher();
                    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
                        {
                            if (isDevToolsPresent) {
                                var memoizedUpdaters = root.memoizedUpdaters;
                                if (memoizedUpdaters.size > 0) {
                                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                                    memoizedUpdaters.clear();
                                }
                                movePendingFibersToMemoized(root, lanes);
                            }
                        }
                        workInProgressTransitions = getTransitionsForLanes();
                        prepareFreshStack(root, lanes);
                    }
                    {
                        markRenderStarted(lanes);
                    }
                    do {
                        try {
                            workLoopSync();
                            break;
                        } catch (thrownValue) {
                            handleError(root, thrownValue);
                        }
                    } while (true);
                    resetContextDependencies();
                    executionContext = prevExecutionContext;
                    popDispatcher(prevDispatcher);
                    if (workInProgress !== null) {
                        throw new Error("Cannot commit an incomplete root. This error is likely caused by a " + "bug in React. Please file an issue.");
                    }
                    {
                        markRenderStopped();
                    }
                    workInProgressRoot = null;
                    workInProgressRootRenderLanes = NoLanes;
                    return workInProgressRootExitStatus;
                }
                function workLoopSync() {
                    while (workInProgress !== null) {
                        performUnitOfWork(workInProgress);
                    }
                }
                function renderRootConcurrent(root, lanes) {
                    var prevExecutionContext = executionContext;
                    executionContext |= RenderContext;
                    var prevDispatcher = pushDispatcher();
                    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
                        {
                            if (isDevToolsPresent) {
                                var memoizedUpdaters = root.memoizedUpdaters;
                                if (memoizedUpdaters.size > 0) {
                                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                                    memoizedUpdaters.clear();
                                }
                                movePendingFibersToMemoized(root, lanes);
                            }
                        }
                        workInProgressTransitions = getTransitionsForLanes();
                        resetRenderTimer();
                        prepareFreshStack(root, lanes);
                    }
                    {
                        markRenderStarted(lanes);
                    }
                    do {
                        try {
                            workLoopConcurrent();
                            break;
                        } catch (thrownValue) {
                            handleError(root, thrownValue);
                        }
                    } while (true);
                    resetContextDependencies();
                    popDispatcher(prevDispatcher);
                    executionContext = prevExecutionContext;
                    if (workInProgress !== null) {
                        {
                            markRenderYielded();
                        }
                        return RootInProgress;
                    } else {
                        {
                            markRenderStopped();
                        }
                        workInProgressRoot = null;
                        workInProgressRootRenderLanes = NoLanes;
                        return workInProgressRootExitStatus;
                    }
                }
                function workLoopConcurrent() {
                    while (workInProgress !== null && !shouldYield()) {
                        performUnitOfWork(workInProgress);
                    }
                }
                function performUnitOfWork(unitOfWork) {
                    var current = unitOfWork.alternate;
                    setCurrentFiber(unitOfWork);
                    var next;
                    if ((unitOfWork.mode & ProfileMode) !== NoMode) {
                        startProfilerTimer(unitOfWork);
                        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
                        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
                    } else {
                        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
                    }
                    resetCurrentFiber();
                    unitOfWork.memoizedProps = unitOfWork.pendingProps;
                    if (next === null) {
                        completeUnitOfWork(unitOfWork);
                    } else {
                        workInProgress = next;
                    }
                    ReactCurrentOwner$2.current = null;
                }
                function completeUnitOfWork(unitOfWork) {
                    var completedWork = unitOfWork;
                    do {
                        var current = completedWork.alternate;
                        var returnFiber = completedWork.return;
                        if ((completedWork.flags & Incomplete) === NoFlags) {
                            setCurrentFiber(completedWork);
                            var next = void 0;
                            if ((completedWork.mode & ProfileMode) === NoMode) {
                                next = completeWork(current, completedWork, subtreeRenderLanes);
                            } else {
                                startProfilerTimer(completedWork);
                                next = completeWork(current, completedWork, subtreeRenderLanes);
                                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                            }
                            resetCurrentFiber();
                            if (next !== null) {
                                workInProgress = next;
                                return;
                            }
                        } else {
                            var _next = unwindWork(current, completedWork);
                            if (_next !== null) {
                                _next.flags &= HostEffectMask;
                                workInProgress = _next;
                                return;
                            }
                            if ((completedWork.mode & ProfileMode) !== NoMode) {
                                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                                var actualDuration = completedWork.actualDuration;
                                var child = completedWork.child;
                                while (child !== null) {
                                    actualDuration += child.actualDuration;
                                    child = child.sibling;
                                }
                                completedWork.actualDuration = actualDuration;
                            }
                            if (returnFiber !== null) {
                                returnFiber.flags |= Incomplete;
                                returnFiber.subtreeFlags = NoFlags;
                                returnFiber.deletions = null;
                            } else {
                                workInProgressRootExitStatus = RootDidNotComplete;
                                workInProgress = null;
                                return;
                            }
                        }
                        var siblingFiber = completedWork.sibling;
                        if (siblingFiber !== null) {
                            workInProgress = siblingFiber;
                            return;
                        }
                        completedWork = returnFiber;
                        workInProgress = completedWork;
                    } while (completedWork !== null);
                    if (workInProgressRootExitStatus === RootInProgress) {
                        workInProgressRootExitStatus = RootCompleted;
                    }
                }
                function commitRoot(root, recoverableErrors, transitions) {
                    var previousUpdateLanePriority = getCurrentUpdatePriority();
                    var prevTransition = ReactCurrentBatchConfig$3.transition;
                    try {
                        ReactCurrentBatchConfig$3.transition = null;
                        setCurrentUpdatePriority(DiscreteEventPriority);
                        commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
                    } finally {
                        ReactCurrentBatchConfig$3.transition = prevTransition;
                        setCurrentUpdatePriority(previousUpdateLanePriority);
                    }
                    return null;
                }
                function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
                    do {
                        flushPassiveEffects();
                    } while (rootWithPendingPassiveEffects !== null);
                    flushRenderPhaseStrictModeWarningsInDEV();
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        throw new Error("Should not already be working.");
                    }
                    var finishedWork = root.finishedWork;
                    var lanes = root.finishedLanes;
                    {
                        markCommitStarted(lanes);
                    }
                    if (finishedWork === null) {
                        {
                            markCommitStopped();
                        }
                        return null;
                    } else {
                        {
                            if (lanes === NoLanes) {
                                error("root.finishedLanes should not be empty during a commit. This is a " + "bug in React.");
                            }
                        }
                    }
                    root.finishedWork = null;
                    root.finishedLanes = NoLanes;
                    if (finishedWork === root.current) {
                        throw new Error("Cannot commit the same tree as before. This error is likely caused by " + "a bug in React. Please file an issue.");
                    }
                    root.callbackNode = null;
                    root.callbackPriority = NoLane;
                    var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
                    markRootFinished(root, remainingLanes);
                    if (root === workInProgressRoot) {
                        workInProgressRoot = null;
                        workInProgress = null;
                        workInProgressRootRenderLanes = NoLanes;
                    }
                    if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
                        if (!rootDoesHavePassiveEffects) {
                            rootDoesHavePassiveEffects = true;
                            pendingPassiveTransitions = transitions;
                            scheduleCallback$1(NormalPriority, (function() {
                                flushPassiveEffects();
                                return null;
                            }));
                        }
                    }
                    var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
                    var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
                    if (subtreeHasEffects || rootHasEffect) {
                        var prevTransition = ReactCurrentBatchConfig$3.transition;
                        ReactCurrentBatchConfig$3.transition = null;
                        var previousPriority = getCurrentUpdatePriority();
                        setCurrentUpdatePriority(DiscreteEventPriority);
                        var prevExecutionContext = executionContext;
                        executionContext |= CommitContext;
                        ReactCurrentOwner$2.current = null;
                        commitBeforeMutationEffects(root, finishedWork);
                        {
                            recordCommitTime();
                        }
                        commitMutationEffects(root, finishedWork, lanes);
                        resetAfterCommit(root.containerInfo);
                        root.current = finishedWork;
                        {
                            markLayoutEffectsStarted(lanes);
                        }
                        commitLayoutEffects(finishedWork, root, lanes);
                        {
                            markLayoutEffectsStopped();
                        }
                        requestPaint();
                        executionContext = prevExecutionContext;
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig$3.transition = prevTransition;
                    } else {
                        root.current = finishedWork;
                        {
                            recordCommitTime();
                        }
                    }
                    var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
                    if (rootDoesHavePassiveEffects) {
                        rootDoesHavePassiveEffects = false;
                        rootWithPendingPassiveEffects = root;
                        pendingPassiveEffectsLanes = lanes;
                    } else {
                        {
                            nestedPassiveUpdateCount = 0;
                            rootWithPassiveNestedUpdates = null;
                        }
                    }
                    remainingLanes = root.pendingLanes;
                    if (remainingLanes === NoLanes) {
                        legacyErrorBoundariesThatAlreadyFailed = null;
                    }
                    {
                        if (!rootDidHavePassiveEffects) {
                            commitDoubleInvokeEffectsInDEV(root.current, false);
                        }
                    }
                    onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
                    {
                        if (isDevToolsPresent) {
                            root.memoizedUpdaters.clear();
                        }
                    }
                    {
                        onCommitRoot$1();
                    }
                    ensureRootIsScheduled(root, now());
                    if (recoverableErrors !== null) {
                        var onRecoverableError = root.onRecoverableError;
                        for (var i = 0; i < recoverableErrors.length; i++) {
                            var recoverableError = recoverableErrors[i];
                            var componentStack = recoverableError.stack;
                            var digest = recoverableError.digest;
                            onRecoverableError(recoverableError.value, {
                                componentStack: componentStack,
                                digest: digest
                            });
                        }
                    }
                    if (hasUncaughtError) {
                        hasUncaughtError = false;
                        var error$1 = firstUncaughtError;
                        firstUncaughtError = null;
                        throw error$1;
                    }
                    if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {
                        flushPassiveEffects();
                    }
                    remainingLanes = root.pendingLanes;
                    if (includesSomeLane(remainingLanes, SyncLane)) {
                        {
                            markNestedUpdateScheduled();
                        }
                        if (root === rootWithNestedUpdates) {
                            nestedUpdateCount++;
                        } else {
                            nestedUpdateCount = 0;
                            rootWithNestedUpdates = root;
                        }
                    } else {
                        nestedUpdateCount = 0;
                    }
                    flushSyncCallbacks();
                    {
                        markCommitStopped();
                    }
                    return null;
                }
                function flushPassiveEffects() {
                    if (rootWithPendingPassiveEffects !== null) {
                        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
                        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
                        var prevTransition = ReactCurrentBatchConfig$3.transition;
                        var previousPriority = getCurrentUpdatePriority();
                        try {
                            ReactCurrentBatchConfig$3.transition = null;
                            setCurrentUpdatePriority(priority);
                            return flushPassiveEffectsImpl();
                        } finally {
                            setCurrentUpdatePriority(previousPriority);
                            ReactCurrentBatchConfig$3.transition = prevTransition;
                        }
                    }
                    return false;
                }
                function enqueuePendingPassiveProfilerEffect(fiber) {
                    {
                        pendingPassiveProfilerEffects.push(fiber);
                        if (!rootDoesHavePassiveEffects) {
                            rootDoesHavePassiveEffects = true;
                            scheduleCallback$1(NormalPriority, (function() {
                                flushPassiveEffects();
                                return null;
                            }));
                        }
                    }
                }
                function flushPassiveEffectsImpl() {
                    if (rootWithPendingPassiveEffects === null) {
                        return false;
                    }
                    var transitions = pendingPassiveTransitions;
                    pendingPassiveTransitions = null;
                    var root = rootWithPendingPassiveEffects;
                    var lanes = pendingPassiveEffectsLanes;
                    rootWithPendingPassiveEffects = null;
                    pendingPassiveEffectsLanes = NoLanes;
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        throw new Error("Cannot flush passive effects while already rendering.");
                    }
                    {
                        isFlushingPassiveEffects = true;
                        didScheduleUpdateDuringPassiveEffects = false;
                    }
                    {
                        markPassiveEffectsStarted(lanes);
                    }
                    var prevExecutionContext = executionContext;
                    executionContext |= CommitContext;
                    commitPassiveUnmountEffects(root.current);
                    commitPassiveMountEffects(root, root.current, lanes, transitions);
                    {
                        var profilerEffects = pendingPassiveProfilerEffects;
                        pendingPassiveProfilerEffects = [];
                        for (var i = 0; i < profilerEffects.length; i++) {
                            var _fiber = profilerEffects[i];
                            commitPassiveEffectDurations(root, _fiber);
                        }
                    }
                    {
                        markPassiveEffectsStopped();
                    }
                    {
                        commitDoubleInvokeEffectsInDEV(root.current, true);
                    }
                    executionContext = prevExecutionContext;
                    flushSyncCallbacks();
                    {
                        if (didScheduleUpdateDuringPassiveEffects) {
                            if (root === rootWithPassiveNestedUpdates) {
                                nestedPassiveUpdateCount++;
                            } else {
                                nestedPassiveUpdateCount = 0;
                                rootWithPassiveNestedUpdates = root;
                            }
                        } else {
                            nestedPassiveUpdateCount = 0;
                        }
                        isFlushingPassiveEffects = false;
                        didScheduleUpdateDuringPassiveEffects = false;
                    }
                    onPostCommitRoot(root);
                    {
                        var stateNode = root.current.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                    }
                    return true;
                }
                function isAlreadyFailedLegacyErrorBoundary(instance) {
                    return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
                }
                function markLegacyErrorBoundaryAsFailed(instance) {
                    if (legacyErrorBoundariesThatAlreadyFailed === null) {
                        legacyErrorBoundariesThatAlreadyFailed = new Set([ instance ]);
                    } else {
                        legacyErrorBoundariesThatAlreadyFailed.add(instance);
                    }
                }
                function prepareToThrowUncaughtError(error) {
                    if (!hasUncaughtError) {
                        hasUncaughtError = true;
                        firstUncaughtError = error;
                    }
                }
                var onUncaughtError = prepareToThrowUncaughtError;
                function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
                    var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
                    var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
                    var root = enqueueUpdate(rootFiber, update, SyncLane);
                    var eventTime = requestEventTime();
                    if (root !== null) {
                        markRootUpdated(root, SyncLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                    }
                }
                function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
                    {
                        reportUncaughtErrorInDEV(error$1);
                        setIsRunningInsertionEffect(false);
                    }
                    if (sourceFiber.tag === HostRoot) {
                        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
                        return;
                    }
                    var fiber = null;
                    {
                        fiber = nearestMountedAncestor;
                    }
                    while (fiber !== null) {
                        if (fiber.tag === HostRoot) {
                            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                            return;
                        } else if (fiber.tag === ClassComponent) {
                            var ctor = fiber.type;
                            var instance = fiber.stateNode;
                            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                                var root = enqueueUpdate(fiber, update, SyncLane);
                                var eventTime = requestEventTime();
                                if (root !== null) {
                                    markRootUpdated(root, SyncLane, eventTime);
                                    ensureRootIsScheduled(root, eventTime);
                                }
                                return;
                            }
                        }
                        fiber = fiber.return;
                    }
                    {
                        error("Internal React error: Attempted to capture a commit phase error " + "inside a detached tree. This indicates a bug in React. Likely " + "causes include deleting the same fiber more than once, committing an " + "already-finished tree, or an inconsistent return pointer.\n\n" + "Error message:\n\n%s", error$1);
                    }
                }
                function pingSuspendedRoot(root, wakeable, pingedLanes) {
                    var pingCache = root.pingCache;
                    if (pingCache !== null) {
                        pingCache.delete(wakeable);
                    }
                    var eventTime = requestEventTime();
                    markRootPinged(root, pingedLanes);
                    warnIfSuspenseResolutionNotWrappedWithActDEV(root);
                    if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
                        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                            prepareFreshStack(root, NoLanes);
                        } else {
                            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
                        }
                    }
                    ensureRootIsScheduled(root, eventTime);
                }
                function retryTimedOutBoundary(boundaryFiber, retryLane) {
                    if (retryLane === NoLane) {
                        retryLane = requestRetryLane(boundaryFiber);
                    }
                    var eventTime = requestEventTime();
                    var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
                    if (root !== null) {
                        markRootUpdated(root, retryLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                    }
                }
                function retryDehydratedSuspenseBoundary(boundaryFiber) {
                    var suspenseState = boundaryFiber.memoizedState;
                    var retryLane = NoLane;
                    if (suspenseState !== null) {
                        retryLane = suspenseState.retryLane;
                    }
                    retryTimedOutBoundary(boundaryFiber, retryLane);
                }
                function resolveRetryWakeable(boundaryFiber, wakeable) {
                    var retryLane = NoLane;
                    var retryCache;
                    switch (boundaryFiber.tag) {
                      case SuspenseComponent:
                        retryCache = boundaryFiber.stateNode;
                        var suspenseState = boundaryFiber.memoizedState;
                        if (suspenseState !== null) {
                            retryLane = suspenseState.retryLane;
                        }
                        break;

                      case SuspenseListComponent:
                        retryCache = boundaryFiber.stateNode;
                        break;

                      default:
                        throw new Error("Pinged unknown suspense boundary type. " + "This is probably a bug in React.");
                    }
                    if (retryCache !== null) {
                        retryCache.delete(wakeable);
                    }
                    retryTimedOutBoundary(boundaryFiber, retryLane);
                }
                function jnd(timeElapsed) {
                    return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
                }
                function checkForNestedUpdates() {
                    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                        nestedUpdateCount = 0;
                        rootWithNestedUpdates = null;
                        throw new Error("Maximum update depth exceeded. This can happen when a component " + "repeatedly calls setState inside componentWillUpdate or " + "componentDidUpdate. React limits the number of nested updates to " + "prevent infinite loops.");
                    }
                    {
                        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                            nestedPassiveUpdateCount = 0;
                            rootWithPassiveNestedUpdates = null;
                            error("Maximum update depth exceeded. This can happen when a component " + "calls setState inside useEffect, but useEffect either doesn't " + "have a dependency array, or one of the dependencies changes on " + "every render.");
                        }
                    }
                }
                function flushRenderPhaseStrictModeWarningsInDEV() {
                    {
                        ReactStrictModeWarnings.flushLegacyContextWarning();
                        {
                            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
                        }
                    }
                }
                function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
                    {
                        setCurrentFiber(fiber);
                        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
                        if (hasPassiveEffects) {
                            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
                        }
                        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
                        if (hasPassiveEffects) {
                            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
                        }
                        resetCurrentFiber();
                    }
                }
                function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
                    {
                        var current = firstChild;
                        var subtreeRoot = null;
                        while (current !== null) {
                            var primarySubtreeFlag = current.subtreeFlags & fiberFlags;
                            if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {
                                current = current.child;
                            } else {
                                if ((current.flags & fiberFlags) !== NoFlags) {
                                    invokeEffectFn(current);
                                }
                                if (current.sibling !== null) {
                                    current = current.sibling;
                                } else {
                                    current = subtreeRoot = current.return;
                                }
                            }
                        }
                    }
                }
                var didWarnStateUpdateForNotYetMountedComponent = null;
                function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
                    {
                        if ((executionContext & RenderContext) !== NoContext) {
                            return;
                        }
                        if (!(fiber.mode & ConcurrentMode)) {
                            return;
                        }
                        var tag = fiber.tag;
                        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                            return;
                        }
                        var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
                        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                                return;
                            }
                            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
                        } else {
                            didWarnStateUpdateForNotYetMountedComponent = new Set([ componentName ]);
                        }
                        var previousFiber = current;
                        try {
                            setCurrentFiber(fiber);
                            error("Can't perform a React state update on a component that hasn't mounted yet. " + "This indicates that you have a side-effect in your render function that " + "asynchronously later calls tries to update the component. Move this work to " + "useEffect instead.");
                        } finally {
                            if (previousFiber) {
                                setCurrentFiber(fiber);
                            } else {
                                resetCurrentFiber();
                            }
                        }
                    }
                }
                var beginWork$1;
                {
                    var dummyFiber = null;
                    beginWork$1 = function(current, unitOfWork, lanes) {
                        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
                        try {
                            return beginWork(current, unitOfWork, lanes);
                        } catch (originalError) {
                            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                                throw originalError;
                            }
                            resetContextDependencies();
                            resetHooksAfterThrow();
                            unwindInterruptedWork(current, unitOfWork);
                            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                            if (unitOfWork.mode & ProfileMode) {
                                startProfilerTimer(unitOfWork);
                            }
                            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
                            if (hasCaughtError()) {
                                var replayError = clearCaughtError();
                                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                                    originalError._suppressLogging = true;
                                }
                            }
                            throw originalError;
                        }
                    };
                }
                var didWarnAboutUpdateInRender = false;
                var didWarnAboutUpdateInRenderForAnotherComponent;
                {
                    didWarnAboutUpdateInRenderForAnotherComponent = new Set;
                }
                function warnAboutRenderPhaseUpdatesInDEV(fiber) {
                    {
                        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                            switch (fiber.tag) {
                              case FunctionComponent:
                              case ForwardRef:
                              case SimpleMemoComponent:
                                {
                                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                                    var dedupeKey = renderingComponentName;
                                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                                        didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                                        var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                                        error("Cannot update a component (`%s`) while rendering a " + "different component (`%s`). To locate the bad setState() call inside `%s`, " + "follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                                    }
                                    break;
                                }

                              case ClassComponent:
                                {
                                    if (!didWarnAboutUpdateInRender) {
                                        error("Cannot update during an existing state transition (such as " + "within `render`). Render methods should be a pure " + "function of props and state.");
                                        didWarnAboutUpdateInRender = true;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                function restorePendingUpdaters(root, lanes) {
                    {
                        if (isDevToolsPresent) {
                            var memoizedUpdaters = root.memoizedUpdaters;
                            memoizedUpdaters.forEach((function(schedulingFiber) {
                                addFiberToLanesMap(root, schedulingFiber, lanes);
                            }));
                        }
                    }
                }
                var fakeActCallbackNode = {};
                function scheduleCallback$1(priorityLevel, callback) {
                    {
                        var actQueue = ReactCurrentActQueue$1.current;
                        if (actQueue !== null) {
                            actQueue.push(callback);
                            return fakeActCallbackNode;
                        } else {
                            return scheduleCallback(priorityLevel, callback);
                        }
                    }
                }
                function cancelCallback$1(callbackNode) {
                    if (callbackNode === fakeActCallbackNode) {
                        return;
                    }
                    return cancelCallback(callbackNode);
                }
                function shouldForceFlushFallbacksInDEV() {
                    return ReactCurrentActQueue$1.current !== null;
                }
                function warnIfUpdatesNotWrappedWithActDEV(fiber) {
                    {
                        if (fiber.mode & ConcurrentMode) {
                            if (!isConcurrentActEnvironment()) {
                                return;
                            }
                        } else {
                            if (!isLegacyActEnvironment()) {
                                return;
                            }
                            if (executionContext !== NoContext) {
                                return;
                            }
                            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                                return;
                            }
                        }
                        if (ReactCurrentActQueue$1.current === null) {
                            var previousFiber = current;
                            try {
                                setCurrentFiber(fiber);
                                error("An update to %s inside a test was not wrapped in act(...).\n\n" + "When testing, code that causes React state updates should be " + "wrapped into act(...):\n\n" + "act(() => {\n" + "  /* fire events that update state */\n" + "});\n" + "/* assert on the output */\n\n" + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                            } finally {
                                if (previousFiber) {
                                    setCurrentFiber(fiber);
                                } else {
                                    resetCurrentFiber();
                                }
                            }
                        }
                    }
                }
                function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
                    {
                        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                            error("A suspended resource finished loading inside a test, but the event " + "was not wrapped in act(...).\n\n" + "When testing, code that resolves suspended data should be wrapped " + "into act(...):\n\n" + "act(() => {\n" + "  /* finish loading suspended data */\n" + "});\n" + "/* assert on the output */\n\n" + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://reactjs.org/link/wrap-tests-with-act");
                        }
                    }
                }
                function setIsRunningInsertionEffect(isRunning) {
                    {
                        isRunningInsertionEffect = isRunning;
                    }
                }
                var resolveFamily = null;
                var failedBoundaries = null;
                var setRefreshHandler = function(handler) {
                    {
                        resolveFamily = handler;
                    }
                };
                function resolveFunctionForHotReloading(type) {
                    {
                        if (resolveFamily === null) {
                            return type;
                        }
                        var family = resolveFamily(type);
                        if (family === undefined) {
                            return type;
                        }
                        return family.current;
                    }
                }
                function resolveClassForHotReloading(type) {
                    return resolveFunctionForHotReloading(type);
                }
                function resolveForwardRefForHotReloading(type) {
                    {
                        if (resolveFamily === null) {
                            return type;
                        }
                        var family = resolveFamily(type);
                        if (family === undefined) {
                            if (type !== null && type !== undefined && typeof type.render === "function") {
                                var currentRender = resolveFunctionForHotReloading(type.render);
                                if (type.render !== currentRender) {
                                    var syntheticType = {
                                        $$typeof: REACT_FORWARD_REF_TYPE,
                                        render: currentRender
                                    };
                                    if (type.displayName !== undefined) {
                                        syntheticType.displayName = type.displayName;
                                    }
                                    return syntheticType;
                                }
                            }
                            return type;
                        }
                        return family.current;
                    }
                }
                function isCompatibleFamilyForHotReloading(fiber, element) {
                    {
                        if (resolveFamily === null) {
                            return false;
                        }
                        var prevType = fiber.elementType;
                        var nextType = element.type;
                        var needsCompareFamilies = false;
                        var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
                        switch (fiber.tag) {
                          case ClassComponent:
                            {
                                if (typeof nextType === "function") {
                                    needsCompareFamilies = true;
                                }
                                break;
                            }

                          case FunctionComponent:
                            {
                                if (typeof nextType === "function") {
                                    needsCompareFamilies = true;
                                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                    needsCompareFamilies = true;
                                }
                                break;
                            }

                          case ForwardRef:
                            {
                                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                                    needsCompareFamilies = true;
                                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                    needsCompareFamilies = true;
                                }
                                break;
                            }

                          case MemoComponent:
                          case SimpleMemoComponent:
                            {
                                if ($$typeofNextType === REACT_MEMO_TYPE) {
                                    needsCompareFamilies = true;
                                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                    needsCompareFamilies = true;
                                }
                                break;
                            }

                          default:
                            return false;
                        }
                        if (needsCompareFamilies) {
                            var prevFamily = resolveFamily(prevType);
                            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
                                return true;
                            }
                        }
                        return false;
                    }
                }
                function markFailedErrorBoundaryForHotReloading(fiber) {
                    {
                        if (resolveFamily === null) {
                            return;
                        }
                        if (typeof WeakSet !== "function") {
                            return;
                        }
                        if (failedBoundaries === null) {
                            failedBoundaries = new WeakSet;
                        }
                        failedBoundaries.add(fiber);
                    }
                }
                var scheduleRefresh = function(root, update) {
                    {
                        if (resolveFamily === null) {
                            return;
                        }
                        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
                        flushPassiveEffects();
                        flushSync((function() {
                            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
                        }));
                    }
                };
                var scheduleRoot = function(root, element) {
                    {
                        if (root.context !== emptyContextObject) {
                            return;
                        }
                        flushPassiveEffects();
                        flushSync((function() {
                            updateContainer(element, root, null, null);
                        }));
                    }
                };
                function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
                    {
                        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
                        var candidateType = null;
                        switch (tag) {
                          case FunctionComponent:
                          case SimpleMemoComponent:
                          case ClassComponent:
                            candidateType = type;
                            break;

                          case ForwardRef:
                            candidateType = type.render;
                            break;
                        }
                        if (resolveFamily === null) {
                            throw new Error("Expected resolveFamily to be set during hot reload.");
                        }
                        var needsRender = false;
                        var needsRemount = false;
                        if (candidateType !== null) {
                            var family = resolveFamily(candidateType);
                            if (family !== undefined) {
                                if (staleFamilies.has(family)) {
                                    needsRemount = true;
                                } else if (updatedFamilies.has(family)) {
                                    if (tag === ClassComponent) {
                                        needsRemount = true;
                                    } else {
                                        needsRender = true;
                                    }
                                }
                            }
                        }
                        if (failedBoundaries !== null) {
                            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                                needsRemount = true;
                            }
                        }
                        if (needsRemount) {
                            fiber._debugNeedsRemount = true;
                        }
                        if (needsRemount || needsRender) {
                            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                            if (_root !== null) {
                                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                            }
                        }
                        if (child !== null && !needsRemount) {
                            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
                        }
                        if (sibling !== null) {
                            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
                        }
                    }
                }
                var findHostInstancesForRefresh = function(root, families) {
                    {
                        var hostInstances = new Set;
                        var types = new Set(families.map((function(family) {
                            return family.current;
                        })));
                        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
                        return hostInstances;
                    }
                };
                function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
                    {
                        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
                        var candidateType = null;
                        switch (tag) {
                          case FunctionComponent:
                          case SimpleMemoComponent:
                          case ClassComponent:
                            candidateType = type;
                            break;

                          case ForwardRef:
                            candidateType = type.render;
                            break;
                        }
                        var didMatch = false;
                        if (candidateType !== null) {
                            if (types.has(candidateType)) {
                                didMatch = true;
                            }
                        }
                        if (didMatch) {
                            findHostInstancesForFiberShallowly(fiber, hostInstances);
                        } else {
                            if (child !== null) {
                                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                            }
                        }
                        if (sibling !== null) {
                            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
                        }
                    }
                }
                function findHostInstancesForFiberShallowly(fiber, hostInstances) {
                    {
                        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
                        if (foundHostInstances) {
                            return;
                        }
                        var node = fiber;
                        while (true) {
                            switch (node.tag) {
                              case HostComponent:
                                hostInstances.add(node.stateNode);
                                return;

                              case HostPortal:
                                hostInstances.add(node.stateNode.containerInfo);
                                return;

                              case HostRoot:
                                hostInstances.add(node.stateNode.containerInfo);
                                return;
                            }
                            if (node.return === null) {
                                throw new Error("Expected to reach root first.");
                            }
                            node = node.return;
                        }
                    }
                }
                function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
                    {
                        var node = fiber;
                        var foundHostInstances = false;
                        while (true) {
                            if (node.tag === HostComponent) {
                                foundHostInstances = true;
                                hostInstances.add(node.stateNode);
                            } else if (node.child !== null) {
                                node.child.return = node;
                                node = node.child;
                                continue;
                            }
                            if (node === fiber) {
                                return foundHostInstances;
                            }
                            while (node.sibling === null) {
                                if (node.return === null || node.return === fiber) {
                                    return foundHostInstances;
                                }
                                node = node.return;
                            }
                            node.sibling.return = node.return;
                            node = node.sibling;
                        }
                    }
                    return false;
                }
                var hasBadMapPolyfill;
                {
                    hasBadMapPolyfill = false;
                    try {
                        var nonExtensibleObject = Object.preventExtensions({});
                        new Map([ [ nonExtensibleObject, null ] ]);
                        new Set([ nonExtensibleObject ]);
                    } catch (e) {
                        hasBadMapPolyfill = true;
                    }
                }
                function FiberNode(tag, pendingProps, key, mode) {
                    this.tag = tag;
                    this.key = key;
                    this.elementType = null;
                    this.type = null;
                    this.stateNode = null;
                    this.return = null;
                    this.child = null;
                    this.sibling = null;
                    this.index = 0;
                    this.ref = null;
                    this.pendingProps = pendingProps;
                    this.memoizedProps = null;
                    this.updateQueue = null;
                    this.memoizedState = null;
                    this.dependencies = null;
                    this.mode = mode;
                    this.flags = NoFlags;
                    this.subtreeFlags = NoFlags;
                    this.deletions = null;
                    this.lanes = NoLanes;
                    this.childLanes = NoLanes;
                    this.alternate = null;
                    {
                        this.actualDuration = Number.NaN;
                        this.actualStartTime = Number.NaN;
                        this.selfBaseDuration = Number.NaN;
                        this.treeBaseDuration = Number.NaN;
                        this.actualDuration = 0;
                        this.actualStartTime = -1;
                        this.selfBaseDuration = 0;
                        this.treeBaseDuration = 0;
                    }
                    {
                        this._debugSource = null;
                        this._debugOwner = null;
                        this._debugNeedsRemount = false;
                        this._debugHookTypes = null;
                        if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                            Object.preventExtensions(this);
                        }
                    }
                }
                var createFiber = function(tag, pendingProps, key, mode) {
                    return new FiberNode(tag, pendingProps, key, mode);
                };
                function shouldConstruct$1(Component) {
                    var prototype = Component.prototype;
                    return !!(prototype && prototype.isReactComponent);
                }
                function isSimpleFunctionComponent(type) {
                    return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === undefined;
                }
                function resolveLazyComponentTag(Component) {
                    if (typeof Component === "function") {
                        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
                    } else if (Component !== undefined && Component !== null) {
                        var $$typeof = Component.$$typeof;
                        if ($$typeof === REACT_FORWARD_REF_TYPE) {
                            return ForwardRef;
                        }
                        if ($$typeof === REACT_MEMO_TYPE) {
                            return MemoComponent;
                        }
                    }
                    return IndeterminateComponent;
                }
                function createWorkInProgress(current, pendingProps) {
                    var workInProgress = current.alternate;
                    if (workInProgress === null) {
                        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
                        workInProgress.elementType = current.elementType;
                        workInProgress.type = current.type;
                        workInProgress.stateNode = current.stateNode;
                        {
                            workInProgress._debugSource = current._debugSource;
                            workInProgress._debugOwner = current._debugOwner;
                            workInProgress._debugHookTypes = current._debugHookTypes;
                        }
                        workInProgress.alternate = current;
                        current.alternate = workInProgress;
                    } else {
                        workInProgress.pendingProps = pendingProps;
                        workInProgress.type = current.type;
                        workInProgress.flags = NoFlags;
                        workInProgress.subtreeFlags = NoFlags;
                        workInProgress.deletions = null;
                        {
                            workInProgress.actualDuration = 0;
                            workInProgress.actualStartTime = -1;
                        }
                    }
                    workInProgress.flags = current.flags & StaticMask;
                    workInProgress.childLanes = current.childLanes;
                    workInProgress.lanes = current.lanes;
                    workInProgress.child = current.child;
                    workInProgress.memoizedProps = current.memoizedProps;
                    workInProgress.memoizedState = current.memoizedState;
                    workInProgress.updateQueue = current.updateQueue;
                    var currentDependencies = current.dependencies;
                    workInProgress.dependencies = currentDependencies === null ? null : {
                        lanes: currentDependencies.lanes,
                        firstContext: currentDependencies.firstContext
                    };
                    workInProgress.sibling = current.sibling;
                    workInProgress.index = current.index;
                    workInProgress.ref = current.ref;
                    {
                        workInProgress.selfBaseDuration = current.selfBaseDuration;
                        workInProgress.treeBaseDuration = current.treeBaseDuration;
                    }
                    {
                        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
                        switch (workInProgress.tag) {
                          case IndeterminateComponent:
                          case FunctionComponent:
                          case SimpleMemoComponent:
                            workInProgress.type = resolveFunctionForHotReloading(current.type);
                            break;

                          case ClassComponent:
                            workInProgress.type = resolveClassForHotReloading(current.type);
                            break;

                          case ForwardRef:
                            workInProgress.type = resolveForwardRefForHotReloading(current.type);
                            break;
                        }
                    }
                    return workInProgress;
                }
                function resetWorkInProgress(workInProgress, renderLanes) {
                    workInProgress.flags &= StaticMask | Placement;
                    var current = workInProgress.alternate;
                    if (current === null) {
                        workInProgress.childLanes = NoLanes;
                        workInProgress.lanes = renderLanes;
                        workInProgress.child = null;
                        workInProgress.subtreeFlags = NoFlags;
                        workInProgress.memoizedProps = null;
                        workInProgress.memoizedState = null;
                        workInProgress.updateQueue = null;
                        workInProgress.dependencies = null;
                        workInProgress.stateNode = null;
                        {
                            workInProgress.selfBaseDuration = 0;
                            workInProgress.treeBaseDuration = 0;
                        }
                    } else {
                        workInProgress.childLanes = current.childLanes;
                        workInProgress.lanes = current.lanes;
                        workInProgress.child = current.child;
                        workInProgress.subtreeFlags = NoFlags;
                        workInProgress.deletions = null;
                        workInProgress.memoizedProps = current.memoizedProps;
                        workInProgress.memoizedState = current.memoizedState;
                        workInProgress.updateQueue = current.updateQueue;
                        workInProgress.type = current.type;
                        var currentDependencies = current.dependencies;
                        workInProgress.dependencies = currentDependencies === null ? null : {
                            lanes: currentDependencies.lanes,
                            firstContext: currentDependencies.firstContext
                        };
                        {
                            workInProgress.selfBaseDuration = current.selfBaseDuration;
                            workInProgress.treeBaseDuration = current.treeBaseDuration;
                        }
                    }
                    return workInProgress;
                }
                function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
                    var mode;
                    if (tag === ConcurrentRoot) {
                        mode = ConcurrentMode;
                        if (isStrictMode === true) {
                            mode |= StrictLegacyMode;
                            {
                                mode |= StrictEffectsMode;
                            }
                        }
                    } else {
                        mode = NoMode;
                    }
                    if (isDevToolsPresent) {
                        mode |= ProfileMode;
                    }
                    return createFiber(HostRoot, null, null, mode);
                }
                function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
                    var fiberTag = IndeterminateComponent;
                    var resolvedType = type;
                    if (typeof type === "function") {
                        if (shouldConstruct$1(type)) {
                            fiberTag = ClassComponent;
                            {
                                resolvedType = resolveClassForHotReloading(resolvedType);
                            }
                        } else {
                            {
                                resolvedType = resolveFunctionForHotReloading(resolvedType);
                            }
                        }
                    } else if (typeof type === "string") {
                        fiberTag = HostComponent;
                    } else {
                        getTag: switch (type) {
                          case REACT_FRAGMENT_TYPE:
                            return createFiberFromFragment(pendingProps.children, mode, lanes, key);

                          case REACT_STRICT_MODE_TYPE:
                            fiberTag = Mode;
                            mode |= StrictLegacyMode;
                            if ((mode & ConcurrentMode) !== NoMode) {
                                mode |= StrictEffectsMode;
                            }
                            break;

                          case REACT_PROFILER_TYPE:
                            return createFiberFromProfiler(pendingProps, mode, lanes, key);

                          case REACT_SUSPENSE_TYPE:
                            return createFiberFromSuspense(pendingProps, mode, lanes, key);

                          case REACT_SUSPENSE_LIST_TYPE:
                            return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

                          case REACT_OFFSCREEN_TYPE:
                            return createFiberFromOffscreen(pendingProps, mode, lanes, key);

                          case REACT_LEGACY_HIDDEN_TYPE:
                          case REACT_SCOPE_TYPE:
                          case REACT_CACHE_TYPE:
                          case REACT_TRACING_MARKER_TYPE:
                          case REACT_DEBUG_TRACING_MODE_TYPE:
                          default:
                            {
                                if (typeof type === "object" && type !== null) {
                                    switch (type.$$typeof) {
                                      case REACT_PROVIDER_TYPE:
                                        fiberTag = ContextProvider;
                                        break getTag;

                                      case REACT_CONTEXT_TYPE:
                                        fiberTag = ContextConsumer;
                                        break getTag;

                                      case REACT_FORWARD_REF_TYPE:
                                        fiberTag = ForwardRef;
                                        {
                                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                                        }
                                        break getTag;

                                      case REACT_MEMO_TYPE:
                                        fiberTag = MemoComponent;
                                        break getTag;

                                      case REACT_LAZY_TYPE:
                                        fiberTag = LazyComponent;
                                        resolvedType = null;
                                        break getTag;
                                    }
                                }
                                var info = "";
                                {
                                    if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                                        info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
                                    }
                                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                                    if (ownerName) {
                                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                                    }
                                }
                                throw new Error("Element type is invalid: expected a string (for built-in " + "components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                            }
                        }
                    }
                    var fiber = createFiber(fiberTag, pendingProps, key, mode);
                    fiber.elementType = type;
                    fiber.type = resolvedType;
                    fiber.lanes = lanes;
                    {
                        fiber._debugOwner = owner;
                    }
                    return fiber;
                }
                function createFiberFromElement(element, mode, lanes) {
                    var owner = null;
                    {
                        owner = element._owner;
                    }
                    var type = element.type;
                    var key = element.key;
                    var pendingProps = element.props;
                    var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
                    {
                        fiber._debugSource = element._source;
                        fiber._debugOwner = element._owner;
                    }
                    return fiber;
                }
                function createFiberFromFragment(elements, mode, lanes, key) {
                    var fiber = createFiber(Fragment, elements, key, mode);
                    fiber.lanes = lanes;
                    return fiber;
                }
                function createFiberFromProfiler(pendingProps, mode, lanes, key) {
                    {
                        if (typeof pendingProps.id !== "string") {
                            error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
                        }
                    }
                    var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
                    fiber.elementType = REACT_PROFILER_TYPE;
                    fiber.lanes = lanes;
                    {
                        fiber.stateNode = {
                            effectDuration: 0,
                            passiveEffectDuration: 0
                        };
                    }
                    return fiber;
                }
                function createFiberFromSuspense(pendingProps, mode, lanes, key) {
                    var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
                    fiber.elementType = REACT_SUSPENSE_TYPE;
                    fiber.lanes = lanes;
                    return fiber;
                }
                function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
                    var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
                    fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
                    fiber.lanes = lanes;
                    return fiber;
                }
                function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
                    var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
                    fiber.elementType = REACT_OFFSCREEN_TYPE;
                    fiber.lanes = lanes;
                    var primaryChildInstance = {
                        isHidden: false
                    };
                    fiber.stateNode = primaryChildInstance;
                    return fiber;
                }
                function createFiberFromText(content, mode, lanes) {
                    var fiber = createFiber(HostText, content, null, mode);
                    fiber.lanes = lanes;
                    return fiber;
                }
                function createFiberFromHostInstanceForDeletion() {
                    var fiber = createFiber(HostComponent, null, null, NoMode);
                    fiber.elementType = "DELETED";
                    return fiber;
                }
                function createFiberFromDehydratedFragment(dehydratedNode) {
                    var fiber = createFiber(DehydratedFragment, null, null, NoMode);
                    fiber.stateNode = dehydratedNode;
                    return fiber;
                }
                function createFiberFromPortal(portal, mode, lanes) {
                    var pendingProps = portal.children !== null ? portal.children : [];
                    var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
                    fiber.lanes = lanes;
                    fiber.stateNode = {
                        containerInfo: portal.containerInfo,
                        pendingChildren: null,
                        implementation: portal.implementation
                    };
                    return fiber;
                }
                function assignFiberPropertiesInDEV(target, source) {
                    if (target === null) {
                        target = createFiber(IndeterminateComponent, null, null, NoMode);
                    }
                    target.tag = source.tag;
                    target.key = source.key;
                    target.elementType = source.elementType;
                    target.type = source.type;
                    target.stateNode = source.stateNode;
                    target.return = source.return;
                    target.child = source.child;
                    target.sibling = source.sibling;
                    target.index = source.index;
                    target.ref = source.ref;
                    target.pendingProps = source.pendingProps;
                    target.memoizedProps = source.memoizedProps;
                    target.updateQueue = source.updateQueue;
                    target.memoizedState = source.memoizedState;
                    target.dependencies = source.dependencies;
                    target.mode = source.mode;
                    target.flags = source.flags;
                    target.subtreeFlags = source.subtreeFlags;
                    target.deletions = source.deletions;
                    target.lanes = source.lanes;
                    target.childLanes = source.childLanes;
                    target.alternate = source.alternate;
                    {
                        target.actualDuration = source.actualDuration;
                        target.actualStartTime = source.actualStartTime;
                        target.selfBaseDuration = source.selfBaseDuration;
                        target.treeBaseDuration = source.treeBaseDuration;
                    }
                    target._debugSource = source._debugSource;
                    target._debugOwner = source._debugOwner;
                    target._debugNeedsRemount = source._debugNeedsRemount;
                    target._debugHookTypes = source._debugHookTypes;
                    return target;
                }
                function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
                    this.tag = tag;
                    this.containerInfo = containerInfo;
                    this.pendingChildren = null;
                    this.current = null;
                    this.pingCache = null;
                    this.finishedWork = null;
                    this.timeoutHandle = noTimeout;
                    this.context = null;
                    this.pendingContext = null;
                    this.callbackNode = null;
                    this.callbackPriority = NoLane;
                    this.eventTimes = createLaneMap(NoLanes);
                    this.expirationTimes = createLaneMap(NoTimestamp);
                    this.pendingLanes = NoLanes;
                    this.suspendedLanes = NoLanes;
                    this.pingedLanes = NoLanes;
                    this.expiredLanes = NoLanes;
                    this.mutableReadLanes = NoLanes;
                    this.finishedLanes = NoLanes;
                    this.entangledLanes = NoLanes;
                    this.entanglements = createLaneMap(NoLanes);
                    this.identifierPrefix = identifierPrefix;
                    this.onRecoverableError = onRecoverableError;
                    {
                        this.mutableSourceEagerHydrationData = null;
                    }
                    {
                        this.effectDuration = 0;
                        this.passiveEffectDuration = 0;
                    }
                    {
                        this.memoizedUpdaters = new Set;
                        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
                        for (var _i = 0; _i < TotalLanes; _i++) {
                            pendingUpdatersLaneMap.push(new Set);
                        }
                    }
                    {
                        switch (tag) {
                          case ConcurrentRoot:
                            this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
                            break;

                          case LegacyRoot:
                            this._debugRootType = hydrate ? "hydrate()" : "render()";
                            break;
                        }
                    }
                }
                function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
                    var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
                    var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
                    root.current = uninitializedFiber;
                    uninitializedFiber.stateNode = root;
                    {
                        var _initialState = {
                            element: initialChildren,
                            isDehydrated: hydrate,
                            cache: null,
                            transitions: null,
                            pendingSuspenseBoundaries: null
                        };
                        uninitializedFiber.memoizedState = _initialState;
                    }
                    initializeUpdateQueue(uninitializedFiber);
                    return root;
                }
                var ReactVersion = "18.2.0";
                function createPortal(children, containerInfo, implementation) {
                    var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                    {
                        checkKeyStringCoercion(key);
                    }
                    return {
                        $$typeof: REACT_PORTAL_TYPE,
                        key: key == null ? null : "" + key,
                        children: children,
                        containerInfo: containerInfo,
                        implementation: implementation
                    };
                }
                var didWarnAboutNestedUpdates;
                var didWarnAboutFindNodeInStrictMode;
                {
                    didWarnAboutNestedUpdates = false;
                    didWarnAboutFindNodeInStrictMode = {};
                }
                function getContextForSubtree(parentComponent) {
                    if (!parentComponent) {
                        return emptyContextObject;
                    }
                    var fiber = get(parentComponent);
                    var parentContext = findCurrentUnmaskedContext(fiber);
                    if (fiber.tag === ClassComponent) {
                        var Component = fiber.type;
                        if (isContextProvider(Component)) {
                            return processChildContext(fiber, Component, parentContext);
                        }
                    }
                    return parentContext;
                }
                function findHostInstanceWithWarning(component, methodName) {
                    {
                        var fiber = get(component);
                        if (fiber === undefined) {
                            if (typeof component.render === "function") {
                                throw new Error("Unable to find node on an unmounted component.");
                            } else {
                                var keys = Object.keys(component).join(",");
                                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                            }
                        }
                        var hostFiber = findCurrentHostFiber(fiber);
                        if (hostFiber === null) {
                            return null;
                        }
                        if (hostFiber.mode & StrictLegacyMode) {
                            var componentName = getComponentNameFromFiber(fiber) || "Component";
                            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                                didWarnAboutFindNodeInStrictMode[componentName] = true;
                                var previousFiber = current;
                                try {
                                    setCurrentFiber(hostFiber);
                                    if (fiber.mode & StrictLegacyMode) {
                                        error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which is inside StrictMode. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                                    } else {
                                        error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which renders StrictMode children. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                                    }
                                } finally {
                                    if (previousFiber) {
                                        setCurrentFiber(previousFiber);
                                    } else {
                                        resetCurrentFiber();
                                    }
                                }
                            }
                        }
                        return hostFiber.stateNode;
                    }
                }
                function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
                    var hydrate = false;
                    var initialChildren = null;
                    return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
                }
                function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
                    var hydrate = true;
                    var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
                    root.context = getContextForSubtree(null);
                    var current = root.current;
                    var eventTime = requestEventTime();
                    var lane = requestUpdateLane(current);
                    var update = createUpdate(eventTime, lane);
                    update.callback = callback !== undefined && callback !== null ? callback : null;
                    enqueueUpdate(current, update, lane);
                    scheduleInitialHydrationOnRoot(root, lane, eventTime);
                    return root;
                }
                function updateContainer(element, container, parentComponent, callback) {
                    {
                        onScheduleRoot(container, element);
                    }
                    var current$1 = container.current;
                    var eventTime = requestEventTime();
                    var lane = requestUpdateLane(current$1);
                    {
                        markRenderScheduled(lane);
                    }
                    var context = getContextForSubtree(parentComponent);
                    if (container.context === null) {
                        container.context = context;
                    } else {
                        container.pendingContext = context;
                    }
                    {
                        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                            didWarnAboutNestedUpdates = true;
                            error("Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
                        }
                    }
                    var update = createUpdate(eventTime, lane);
                    update.payload = {
                        element: element
                    };
                    callback = callback === undefined ? null : callback;
                    if (callback !== null) {
                        {
                            if (typeof callback !== "function") {
                                error("render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
                            }
                        }
                        update.callback = callback;
                    }
                    var root = enqueueUpdate(current$1, update, lane);
                    if (root !== null) {
                        scheduleUpdateOnFiber(root, current$1, lane, eventTime);
                        entangleTransitions(root, current$1, lane);
                    }
                    return lane;
                }
                function getPublicRootInstance(container) {
                    var containerFiber = container.current;
                    if (!containerFiber.child) {
                        return null;
                    }
                    switch (containerFiber.child.tag) {
                      case HostComponent:
                        return getPublicInstance(containerFiber.child.stateNode);

                      default:
                        return containerFiber.child.stateNode;
                    }
                }
                function attemptSynchronousHydration$1(fiber) {
                    switch (fiber.tag) {
                      case HostRoot:
                        {
                            var root = fiber.stateNode;
                            if (isRootDehydrated(root)) {
                                var lanes = getHighestPriorityPendingLanes(root);
                                flushRoot(root, lanes);
                            }
                            break;
                        }

                      case SuspenseComponent:
                        {
                            flushSync((function() {
                                var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                                if (root !== null) {
                                    var eventTime = requestEventTime();
                                    scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
                                }
                            }));
                            var retryLane = SyncLane;
                            markRetryLaneIfNotHydrated(fiber, retryLane);
                            break;
                        }
                    }
                }
                function markRetryLaneImpl(fiber, retryLane) {
                    var suspenseState = fiber.memoizedState;
                    if (suspenseState !== null && suspenseState.dehydrated !== null) {
                        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
                    }
                }
                function markRetryLaneIfNotHydrated(fiber, retryLane) {
                    markRetryLaneImpl(fiber, retryLane);
                    var alternate = fiber.alternate;
                    if (alternate) {
                        markRetryLaneImpl(alternate, retryLane);
                    }
                }
                function attemptContinuousHydration$1(fiber) {
                    if (fiber.tag !== SuspenseComponent) {
                        return;
                    }
                    var lane = SelectiveHydrationLane;
                    var root = enqueueConcurrentRenderForLane(fiber, lane);
                    if (root !== null) {
                        var eventTime = requestEventTime();
                        scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                    }
                    markRetryLaneIfNotHydrated(fiber, lane);
                }
                function attemptHydrationAtCurrentPriority$1(fiber) {
                    if (fiber.tag !== SuspenseComponent) {
                        return;
                    }
                    var lane = requestUpdateLane(fiber);
                    var root = enqueueConcurrentRenderForLane(fiber, lane);
                    if (root !== null) {
                        var eventTime = requestEventTime();
                        scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                    }
                    markRetryLaneIfNotHydrated(fiber, lane);
                }
                function findHostInstanceWithNoPortals(fiber) {
                    var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
                    if (hostFiber === null) {
                        return null;
                    }
                    return hostFiber.stateNode;
                }
                var shouldErrorImpl = function(fiber) {
                    return null;
                };
                function shouldError(fiber) {
                    return shouldErrorImpl(fiber);
                }
                var shouldSuspendImpl = function(fiber) {
                    return false;
                };
                function shouldSuspend(fiber) {
                    return shouldSuspendImpl(fiber);
                }
                var overrideHookState = null;
                var overrideHookStateDeletePath = null;
                var overrideHookStateRenamePath = null;
                var overrideProps = null;
                var overridePropsDeletePath = null;
                var overridePropsRenamePath = null;
                var scheduleUpdate = null;
                var setErrorHandler = null;
                var setSuspenseHandler = null;
                {
                    var copyWithDeleteImpl = function(obj, path, index) {
                        var key = path[index];
                        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
                        if (index + 1 === path.length) {
                            if (isArray(updated)) {
                                updated.splice(key, 1);
                            } else {
                                delete updated[key];
                            }
                            return updated;
                        }
                        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
                        return updated;
                    };
                    var copyWithDelete = function(obj, path) {
                        return copyWithDeleteImpl(obj, path, 0);
                    };
                    var copyWithRenameImpl = function(obj, oldPath, newPath, index) {
                        var oldKey = oldPath[index];
                        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
                        if (index + 1 === oldPath.length) {
                            var newKey = newPath[index];
                            updated[newKey] = updated[oldKey];
                            if (isArray(updated)) {
                                updated.splice(oldKey, 1);
                            } else {
                                delete updated[oldKey];
                            }
                        } else {
                            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
                        }
                        return updated;
                    };
                    var copyWithRename = function(obj, oldPath, newPath) {
                        if (oldPath.length !== newPath.length) {
                            warn("copyWithRename() expects paths of the same length");
                            return;
                        } else {
                            for (var i = 0; i < newPath.length - 1; i++) {
                                if (oldPath[i] !== newPath[i]) {
                                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                                    return;
                                }
                            }
                        }
                        return copyWithRenameImpl(obj, oldPath, newPath, 0);
                    };
                    var copyWithSetImpl = function(obj, path, index, value) {
                        if (index >= path.length) {
                            return value;
                        }
                        var key = path[index];
                        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
                        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
                        return updated;
                    };
                    var copyWithSet = function(obj, path, value) {
                        return copyWithSetImpl(obj, path, 0, value);
                    };
                    var findHook = function(fiber, id) {
                        var currentHook = fiber.memoizedState;
                        while (currentHook !== null && id > 0) {
                            currentHook = currentHook.next;
                            id--;
                        }
                        return currentHook;
                    };
                    overrideHookState = function(fiber, id, path, value) {
                        var hook = findHook(fiber, id);
                        if (hook !== null) {
                            var newState = copyWithSet(hook.memoizedState, path, value);
                            hook.memoizedState = newState;
                            hook.baseState = newState;
                            fiber.memoizedProps = assign({}, fiber.memoizedProps);
                            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                            if (root !== null) {
                                scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
                            }
                        }
                    };
                    overrideHookStateDeletePath = function(fiber, id, path) {
                        var hook = findHook(fiber, id);
                        if (hook !== null) {
                            var newState = copyWithDelete(hook.memoizedState, path);
                            hook.memoizedState = newState;
                            hook.baseState = newState;
                            fiber.memoizedProps = assign({}, fiber.memoizedProps);
                            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                            if (root !== null) {
                                scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
                            }
                        }
                    };
                    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
                        var hook = findHook(fiber, id);
                        if (hook !== null) {
                            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                            hook.memoizedState = newState;
                            hook.baseState = newState;
                            fiber.memoizedProps = assign({}, fiber.memoizedProps);
                            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                            if (root !== null) {
                                scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
                            }
                        }
                    };
                    overrideProps = function(fiber, path, value) {
                        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
                        if (fiber.alternate) {
                            fiber.alternate.pendingProps = fiber.pendingProps;
                        }
                        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                        if (root !== null) {
                            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
                        }
                    };
                    overridePropsDeletePath = function(fiber, path) {
                        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
                        if (fiber.alternate) {
                            fiber.alternate.pendingProps = fiber.pendingProps;
                        }
                        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                        if (root !== null) {
                            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
                        }
                    };
                    overridePropsRenamePath = function(fiber, oldPath, newPath) {
                        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
                        if (fiber.alternate) {
                            fiber.alternate.pendingProps = fiber.pendingProps;
                        }
                        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                        if (root !== null) {
                            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
                        }
                    };
                    scheduleUpdate = function(fiber) {
                        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                        if (root !== null) {
                            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
                        }
                    };
                    setErrorHandler = function(newShouldErrorImpl) {
                        shouldErrorImpl = newShouldErrorImpl;
                    };
                    setSuspenseHandler = function(newShouldSuspendImpl) {
                        shouldSuspendImpl = newShouldSuspendImpl;
                    };
                }
                function findHostInstanceByFiber(fiber) {
                    var hostFiber = findCurrentHostFiber(fiber);
                    if (hostFiber === null) {
                        return null;
                    }
                    return hostFiber.stateNode;
                }
                function emptyFindFiberByHostInstance(instance) {
                    return null;
                }
                function getCurrentFiberForDevTools() {
                    return current;
                }
                function injectIntoDevTools(devToolsConfig) {
                    var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
                    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
                    return injectInternals({
                        bundleType: devToolsConfig.bundleType,
                        version: devToolsConfig.version,
                        rendererPackageName: devToolsConfig.rendererPackageName,
                        rendererConfig: devToolsConfig.rendererConfig,
                        overrideHookState: overrideHookState,
                        overrideHookStateDeletePath: overrideHookStateDeletePath,
                        overrideHookStateRenamePath: overrideHookStateRenamePath,
                        overrideProps: overrideProps,
                        overridePropsDeletePath: overridePropsDeletePath,
                        overridePropsRenamePath: overridePropsRenamePath,
                        setErrorHandler: setErrorHandler,
                        setSuspenseHandler: setSuspenseHandler,
                        scheduleUpdate: scheduleUpdate,
                        currentDispatcherRef: ReactCurrentDispatcher,
                        findHostInstanceByFiber: findHostInstanceByFiber,
                        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
                        findHostInstancesForRefresh: findHostInstancesForRefresh,
                        scheduleRefresh: scheduleRefresh,
                        scheduleRoot: scheduleRoot,
                        setRefreshHandler: setRefreshHandler,
                        getCurrentFiber: getCurrentFiberForDevTools,
                        reconcilerVersion: ReactVersion
                    });
                }
                var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error) {
                    console["error"](error);
                };
                function ReactDOMRoot(internalRoot) {
                    this._internalRoot = internalRoot;
                }
                ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
                    var root = this._internalRoot;
                    if (root === null) {
                        throw new Error("Cannot update an unmounted root.");
                    }
                    {
                        if (typeof arguments[1] === "function") {
                            error("render(...): does not support the second callback argument. " + "To execute a side effect after rendering, declare it in a component body with useEffect().");
                        } else if (isValidContainer(arguments[1])) {
                            error("You passed a container to the second argument of root.render(...). " + "You don't need to pass it again since you already passed it to create the root.");
                        } else if (typeof arguments[1] !== "undefined") {
                            error("You passed a second argument to root.render(...) but it only accepts " + "one argument.");
                        }
                        var container = root.containerInfo;
                        if (container.nodeType !== COMMENT_NODE) {
                            var hostInstance = findHostInstanceWithNoPortals(root.current);
                            if (hostInstance) {
                                if (hostInstance.parentNode !== container) {
                                    error("render(...): It looks like the React-rendered content of the " + "root container was removed without using React. This is not " + "supported and will cause errors. Instead, call " + "root.unmount() to empty a root's container.");
                                }
                            }
                        }
                    }
                    updateContainer(children, root, null, null);
                };
                ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
                    {
                        if (typeof arguments[0] === "function") {
                            error("unmount(...): does not support a callback argument. " + "To execute a side effect after rendering, declare it in a component body with useEffect().");
                        }
                    }
                    var root = this._internalRoot;
                    if (root !== null) {
                        this._internalRoot = null;
                        var container = root.containerInfo;
                        {
                            if (isAlreadyRendering()) {
                                error("Attempted to synchronously unmount a root while React was already " + "rendering. React cannot finish unmounting the root until the " + "current render has completed, which may lead to a race condition.");
                            }
                        }
                        flushSync((function() {
                            updateContainer(null, root, null, null);
                        }));
                        unmarkContainerAsRoot(container);
                    }
                };
                function createRoot(container, options) {
                    if (!isValidContainer(container)) {
                        throw new Error("createRoot(...): Target container is not a DOM element.");
                    }
                    warnIfReactDOMContainerInDEV(container);
                    var isStrictMode = false;
                    var concurrentUpdatesByDefaultOverride = false;
                    var identifierPrefix = "";
                    var onRecoverableError = defaultOnRecoverableError;
                    if (options !== null && options !== undefined) {
                        {
                            if (options.hydrate) {
                                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                            } else {
                                if (typeof options === "object" && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {
                                    error("You passed a JSX element to createRoot. You probably meant to " + "call root.render instead. " + "Example usage:\n\n" + "  let root = createRoot(domContainer);\n" + "  root.render(<App />);");
                                }
                            }
                        }
                        if (options.unstable_strictMode === true) {
                            isStrictMode = true;
                        }
                        if (options.identifierPrefix !== undefined) {
                            identifierPrefix = options.identifierPrefix;
                        }
                        if (options.onRecoverableError !== undefined) {
                            onRecoverableError = options.onRecoverableError;
                        }
                        if (options.transitionCallbacks !== undefined) {
                            options.transitionCallbacks;
                        }
                    }
                    var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
                    markContainerAsRoot(root.current, container);
                    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
                    listenToAllSupportedEvents(rootContainerElement);
                    return new ReactDOMRoot(root);
                }
                function ReactDOMHydrationRoot(internalRoot) {
                    this._internalRoot = internalRoot;
                }
                function scheduleHydration(target) {
                    if (target) {
                        queueExplicitHydrationTarget(target);
                    }
                }
                ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
                function hydrateRoot(container, initialChildren, options) {
                    if (!isValidContainer(container)) {
                        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
                    }
                    warnIfReactDOMContainerInDEV(container);
                    {
                        if (initialChildren === undefined) {
                            error("Must provide initial children as second argument to hydrateRoot. " + "Example usage: hydrateRoot(domContainer, <App />)");
                        }
                    }
                    var hydrationCallbacks = options != null ? options : null;
                    var mutableSources = options != null && options.hydratedSources || null;
                    var isStrictMode = false;
                    var concurrentUpdatesByDefaultOverride = false;
                    var identifierPrefix = "";
                    var onRecoverableError = defaultOnRecoverableError;
                    if (options !== null && options !== undefined) {
                        if (options.unstable_strictMode === true) {
                            isStrictMode = true;
                        }
                        if (options.identifierPrefix !== undefined) {
                            identifierPrefix = options.identifierPrefix;
                        }
                        if (options.onRecoverableError !== undefined) {
                            onRecoverableError = options.onRecoverableError;
                        }
                    }
                    var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
                    markContainerAsRoot(root.current, container);
                    listenToAllSupportedEvents(container);
                    if (mutableSources) {
                        for (var i = 0; i < mutableSources.length; i++) {
                            var mutableSource = mutableSources[i];
                            registerMutableSourceForHydration(root, mutableSource);
                        }
                    }
                    return new ReactDOMHydrationRoot(root);
                }
                function isValidContainer(node) {
                    return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
                }
                function isValidContainerLegacy(node) {
                    return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
                }
                function warnIfReactDOMContainerInDEV(container) {
                    {
                        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                            error("createRoot(): Creating roots directly with document.body is " + "discouraged, since its children are often manipulated by third-party " + "scripts and browser extensions. This may lead to subtle " + "reconciliation issues. Try using a container element created " + "for your app.");
                        }
                        if (isContainerMarkedAsRoot(container)) {
                            if (container._reactRootContainer) {
                                error("You are calling ReactDOMClient.createRoot() on a container that was previously " + "passed to ReactDOM.render(). This is not supported.");
                            } else {
                                error("You are calling ReactDOMClient.createRoot() on a container that " + "has already been passed to createRoot() before. Instead, call " + "root.render() on the existing root instead if you want to update it.");
                            }
                        }
                    }
                }
                var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
                var topLevelUpdateWarnings;
                {
                    topLevelUpdateWarnings = function(container) {
                        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                            if (hostInstance) {
                                if (hostInstance.parentNode !== container) {
                                    error("render(...): It looks like the React-rendered content of this " + "container was removed without using React. This is not " + "supported and will cause errors. Instead, call " + "ReactDOM.unmountComponentAtNode to empty a container.");
                                }
                            }
                        }
                        var isRootRenderedBySomeReact = !!container._reactRootContainer;
                        var rootEl = getReactRootElementInContainer(container);
                        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
                        if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                            error("render(...): Replacing React-rendered children with a new root " + "component. If you intended to update the children of this node, " + "you should instead have the existing children update their state " + "and render the new components instead of calling ReactDOM.render.");
                        }
                        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                            error("render(): Rendering components directly into document.body is " + "discouraged, since its children are often manipulated by third-party " + "scripts and browser extensions. This may lead to subtle " + "reconciliation issues. Try rendering into a container element created " + "for your app.");
                        }
                    };
                }
                function getReactRootElementInContainer(container) {
                    if (!container) {
                        return null;
                    }
                    if (container.nodeType === DOCUMENT_NODE) {
                        return container.documentElement;
                    } else {
                        return container.firstChild;
                    }
                }
                function noopOnRecoverableError() {}
                function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
                    if (isHydrationContainer) {
                        if (typeof callback === "function") {
                            var originalCallback = callback;
                            callback = function() {
                                var instance = getPublicRootInstance(root);
                                originalCallback.call(instance);
                            };
                        }
                        var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
                        container._reactRootContainer = root;
                        markContainerAsRoot(root.current, container);
                        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
                        listenToAllSupportedEvents(rootContainerElement);
                        flushSync();
                        return root;
                    } else {
                        var rootSibling;
                        while (rootSibling = container.lastChild) {
                            container.removeChild(rootSibling);
                        }
                        if (typeof callback === "function") {
                            var _originalCallback = callback;
                            callback = function() {
                                var instance = getPublicRootInstance(_root);
                                _originalCallback.call(instance);
                            };
                        }
                        var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
                        container._reactRootContainer = _root;
                        markContainerAsRoot(_root.current, container);
                        var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
                        listenToAllSupportedEvents(_rootContainerElement);
                        flushSync((function() {
                            updateContainer(initialChildren, _root, parentComponent, callback);
                        }));
                        return _root;
                    }
                }
                function warnOnInvalidCallback$1(callback, callerName) {
                    {
                        if (callback !== null && typeof callback !== "function") {
                            error("%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
                        }
                    }
                }
                function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
                    {
                        topLevelUpdateWarnings(container);
                        warnOnInvalidCallback$1(callback === undefined ? null : callback, "render");
                    }
                    var maybeRoot = container._reactRootContainer;
                    var root;
                    if (!maybeRoot) {
                        root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
                    } else {
                        root = maybeRoot;
                        if (typeof callback === "function") {
                            var originalCallback = callback;
                            callback = function() {
                                var instance = getPublicRootInstance(root);
                                originalCallback.call(instance);
                            };
                        }
                        updateContainer(children, root, parentComponent, callback);
                    }
                    return getPublicRootInstance(root);
                }
                function findDOMNode(componentOrElement) {
                    {
                        var owner = ReactCurrentOwner$3.current;
                        if (owner !== null && owner.stateNode !== null) {
                            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                            if (!warnedAboutRefsInRender) {
                                error("%s is accessing findDOMNode inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                            }
                            owner.stateNode._warnedAboutRefsInRender = true;
                        }
                    }
                    if (componentOrElement == null) {
                        return null;
                    }
                    if (componentOrElement.nodeType === ELEMENT_NODE) {
                        return componentOrElement;
                    }
                    {
                        return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
                    }
                }
                function hydrate(element, container, callback) {
                    {
                        error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot " + "instead. Until you switch to the new API, your app will behave as " + "if it's running React 17. Learn " + "more: https://reactjs.org/link/switch-to-createroot");
                    }
                    if (!isValidContainerLegacy(container)) {
                        throw new Error("Target container is not a DOM element.");
                    }
                    {
                        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
                        if (isModernRoot) {
                            error("You are calling ReactDOM.hydrate() on a container that was previously " + "passed to ReactDOMClient.createRoot(). This is not supported. " + "Did you mean to call hydrateRoot(container, element)?");
                        }
                    }
                    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
                }
                function render(element, container, callback) {
                    {
                        error("ReactDOM.render is no longer supported in React 18. Use createRoot " + "instead. Until you switch to the new API, your app will behave as " + "if it's running React 17. Learn " + "more: https://reactjs.org/link/switch-to-createroot");
                    }
                    if (!isValidContainerLegacy(container)) {
                        throw new Error("Target container is not a DOM element.");
                    }
                    {
                        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
                        if (isModernRoot) {
                            error("You are calling ReactDOM.render() on a container that was previously " + "passed to ReactDOMClient.createRoot(). This is not supported. " + "Did you mean to call root.render(element)?");
                        }
                    }
                    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
                }
                function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
                    {
                        error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported " + "in React 18. Consider using a portal instead. Until you switch to " + "the createRoot API, your app will behave as if it's running React " + "17. Learn more: https://reactjs.org/link/switch-to-createroot");
                    }
                    if (!isValidContainerLegacy(containerNode)) {
                        throw new Error("Target container is not a DOM element.");
                    }
                    if (parentComponent == null || !has(parentComponent)) {
                        throw new Error("parentComponent must be a valid React Component");
                    }
                    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
                }
                function unmountComponentAtNode(container) {
                    if (!isValidContainerLegacy(container)) {
                        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
                    }
                    {
                        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
                        if (isModernRoot) {
                            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously " + "passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
                        }
                    }
                    if (container._reactRootContainer) {
                        {
                            var rootEl = getReactRootElementInContainer(container);
                            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                            if (renderedByDifferentReact) {
                                error("unmountComponentAtNode(): The node you're attempting to unmount " + "was rendered by another copy of React.");
                            }
                        }
                        flushSync((function() {
                            legacyRenderSubtreeIntoContainer(null, null, container, false, (function() {
                                container._reactRootContainer = null;
                                unmarkContainerAsRoot(container);
                            }));
                        }));
                        return true;
                    } else {
                        {
                            var _rootEl = getReactRootElementInContainer(container);
                            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                            if (hasNonRootReactChild) {
                                error("unmountComponentAtNode(): The node you're attempting to unmount " + "was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead " + "of its container." : "Instead, have the parent component update its state and " + "rerender in order to remove this component.");
                            }
                        }
                        return false;
                    }
                }
                setAttemptSynchronousHydration(attemptSynchronousHydration$1);
                setAttemptContinuousHydration(attemptContinuousHydration$1);
                setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
                setGetCurrentUpdatePriority(getCurrentUpdatePriority);
                setAttemptHydrationAtPriority(runWithPriority);
                {
                    if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
                        error("React depends on Map and Set built-in types. Make sure that you load a " + "polyfill in older browsers. https://reactjs.org/link/react-polyfills");
                    }
                }
                setRestoreImplementation(restoreControlledState$3);
                setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
                function createPortal$1(children, container) {
                    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                    if (!isValidContainer(container)) {
                        throw new Error("Target container is not a DOM element.");
                    }
                    return createPortal(children, container, null, key);
                }
                function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
                    return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
                }
                var Internals = {
                    usingClientEntryPoint: false,
                    Events: [ getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1 ]
                };
                function createRoot$1(container, options) {
                    {
                        if (!Internals.usingClientEntryPoint && !false) {
                            error('You are importing createRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
                        }
                    }
                    return createRoot(container, options);
                }
                function hydrateRoot$1(container, initialChildren, options) {
                    {
                        if (!Internals.usingClientEntryPoint && !false) {
                            error('You are importing hydrateRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
                        }
                    }
                    return hydrateRoot(container, initialChildren, options);
                }
                function flushSync$1(fn) {
                    {
                        if (isAlreadyRendering()) {
                            error("flushSync was called from inside a lifecycle method. React cannot " + "flush when React is already rendering. Consider moving this call to " + "a scheduler task or micro task.");
                        }
                    }
                    return flushSync(fn);
                }
                var foundDevTools = injectIntoDevTools({
                    findFiberByHostInstance: getClosestInstanceFromNode,
                    bundleType: 1,
                    version: ReactVersion,
                    rendererPackageName: "react-dom"
                });
                {
                    if (!foundDevTools && canUseDOM && window.top === window.self) {
                        if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                            var protocol = window.location.protocol;
                            if (/^(https?|file):$/.test(protocol)) {
                                console.info("%cDownload the React DevTools " + "for a better development experience: " + "https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): " + "https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                            }
                        }
                    }
                }
                reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
                reactDom_development.createPortal = createPortal$1;
                reactDom_development.createRoot = createRoot$1;
                reactDom_development.findDOMNode = findDOMNode;
                reactDom_development.flushSync = flushSync$1;
                reactDom_development.hydrate = hydrate;
                reactDom_development.hydrateRoot = hydrateRoot$1;
                reactDom_development.render = render;
                reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
                reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
                reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
                reactDom_development.version = ReactVersion;
                if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
                }
            })();
        }
        return reactDom_development;
    }
    (function(module) {
        {
            module.exports = requireReactDom_development();
        }
    })(reactDom);
    var m$1 = reactDomExports;
    {
        var i = m$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        client.createRoot = function(c, o) {
            i.usingClientEntryPoint = true;
            try {
                return m$1.createRoot(c, o);
            } finally {
                i.usingClientEntryPoint = false;
            }
        };
        client.hydrateRoot = function(c, h, o) {
            i.usingClientEntryPoint = true;
            try {
                return m$1.hydrateRoot(c, h, o);
            } finally {
                i.usingClientEntryPoint = false;
            }
        };
    }
    const u = Symbol.for("r2wc.reactRender"), m = Symbol.for("r2wc.shouldRender"), d = Symbol.for("r2wc.root");
    function P(s = "") {
        return s.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
    }
    const j = {
        expando: function(s, a, c) {
            Object.defineProperty(s, a, {
                enumerable: !0,
                get: function() {
                    return c;
                },
                set: function(r) {
                    c = r, this[u]();
                }
            }), s[u]();
        }
    };
    function w(s, a, c, r = {}) {
        const f = {}, y = {}, b = {};
        r.props || (r.props = s.propTypes ? Object.keys(s.propTypes) : []);
        const g = Array.isArray(r.props) ? r.props.slice() : Object.keys(r.props), S = Array.isArray(r.props);
        console.log("r.props", r.props);
        g.forEach((e => {
            f[e] = S ? String : r.props[e], y[e] = P(e), b[y[e]] = e;
        }));
        const h = {
            isConnected: "isConnected" in HTMLElement.prototype
        };
        let l = !1;
        const p = function(...e) {
            const o = Reflect.construct(HTMLElement, e, this.constructor);
            return typeof r.shadow == "string" ? o.attachShadow({
                mode: r.shadow
            }) : r.shadow && (console.warn('Specifying the "shadow" option as a boolean is deprecated and will be removed in a future version.'), 
            o.attachShadow({
                mode: "open"
            })), o;
        }, i = Object.create(HTMLElement.prototype);
        i.constructor = p;
        const A = new Proxy(i, {
            has: function(e, o) {
                return o in f || o in i;
            },
            set: function(e, o, t, n) {
                return l && (h[o] = !0), typeof o == "symbol" || h[o] || o in e ? Reflect.set(e, o, t, n) : (j.expando(n, o, t), 
                !0);
            },
            getOwnPropertyDescriptor: function(e, o) {
                const t = Reflect.getOwnPropertyDescriptor(e, o);
                if (t) return t;
                if (o in f) return {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    value: void 0
                };
            }
        });
        return p.prototype = A, i.connectedCallback = function() {
            this[m] = !0, this[u]();
        }, i.disconnectedCallback = function() {
            typeof c.createRoot == "function" ? this[d].unmount() : c.unmountComponentAtNode(this);
        }, i[u] = function() {
            if (this[m] === !0) {
                const e = {};
                Object.keys(this).forEach((function(n) {
                    h[n] !== !1 && (e[n] = this[n]);
                }), this), l = !0;
                console.log("this", this);
                const o = r.shadow ? this.shadowRoot : this, t = a.createElement(s, e);
                typeof c.createRoot == "function" ? (this[d] || (this[d] = c.createRoot(o)), this[d].render(t)) : c.render(t, o), 
                l = !1;
            }
        }, p.observedAttributes = Object.keys(b), i.attributeChangedCallback = function(e, o, t) {
            const n = b[e] || e;
            switch (f[n]) {
              case "ref":
              case Function:
                if (!t && f[n] === "ref") {
                    t = a.createRef();
                    break;
                }
                typeof window < "u" ? t = window[t] || t : typeof global < "u" && (t = global[t] || t), 
                typeof t == "function" && (t = t.bind(this));
                break;

              case Number:
                t = parseFloat(t);
                break;

              case Boolean:
                t = /^[ty1-9]/i.test(t);
                break;

              case Object:
              case Array:
                t = JSON.parse(t);
                break;
            }
            this[n] = t;
        }, p
        /*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */;
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P ? value : new P((function(resolve) {
                resolve(value);
            }));
        }
        return new (P || (P = Promise))((function(resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        }));
    }
    var jsxRuntimeExports = {};
    var jsxRuntime = {
        get exports() {
            return jsxRuntimeExports;
        },
        set exports(v) {
            jsxRuntimeExports = v;
        }
    };
    var reactJsxRuntime_development = {};
    /**
	 * @license React
	 * react-jsx-runtime.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */    var hasRequiredReactJsxRuntime_development;
    function requireReactJsxRuntime_development() {
        if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
        hasRequiredReactJsxRuntime_development = 1;
        {
            (function() {
                var React = reactExports;
                var REACT_ELEMENT_TYPE = Symbol.for("react.element");
                var REACT_PORTAL_TYPE = Symbol.for("react.portal");
                var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
                var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
                var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
                var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
                var REACT_CONTEXT_TYPE = Symbol.for("react.context");
                var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
                var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
                var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
                var REACT_MEMO_TYPE = Symbol.for("react.memo");
                var REACT_LAZY_TYPE = Symbol.for("react.lazy");
                var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
                var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = "@@iterator";
                function getIteratorFn(maybeIterable) {
                    if (maybeIterable === null || typeof maybeIterable !== "object") {
                        return null;
                    }
                    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
                    if (typeof maybeIterator === "function") {
                        return maybeIterator;
                    }
                    return null;
                }
                var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
                function error(format) {
                    {
                        {
                            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                                args[_key2 - 1] = arguments[_key2];
                            }
                            printWarning("error", format, args);
                        }
                    }
                }
                function printWarning(level, format, args) {
                    {
                        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                        var stack = ReactDebugCurrentFrame.getStackAddendum();
                        if (stack !== "") {
                            format += "%s";
                            args = args.concat([ stack ]);
                        }
                        var argsWithFormat = args.map((function(item) {
                            return String(item);
                        }));
                        argsWithFormat.unshift("Warning: " + format);
                        Function.prototype.apply.call(console[level], console, argsWithFormat);
                    }
                }
                var enableScopeAPI = false;
                var enableCacheElement = false;
                var enableTransitionTracing = false;
                var enableLegacyHidden = false;
                var enableDebugTracing = false;
                var REACT_MODULE_REFERENCE;
                {
                    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
                }
                function isValidElementType(type) {
                    if (typeof type === "string" || typeof type === "function") {
                        return true;
                    }
                    if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
                        return true;
                    }
                    if (typeof type === "object" && type !== null) {
                        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
                            return true;
                        }
                    }
                    return false;
                }
                function getWrappedName(outerType, innerType, wrapperName) {
                    var displayName = outerType.displayName;
                    if (displayName) {
                        return displayName;
                    }
                    var functionName = innerType.displayName || innerType.name || "";
                    return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
                }
                function getContextName(type) {
                    return type.displayName || "Context";
                }
                function getComponentNameFromType(type) {
                    if (type == null) {
                        return null;
                    }
                    {
                        if (typeof type.tag === "number") {
                            error("Received an unexpected object in getComponentNameFromType(). " + "This is likely a bug in React. Please file an issue.");
                        }
                    }
                    if (typeof type === "function") {
                        return type.displayName || type.name || null;
                    }
                    if (typeof type === "string") {
                        return type;
                    }
                    switch (type) {
                      case REACT_FRAGMENT_TYPE:
                        return "Fragment";

                      case REACT_PORTAL_TYPE:
                        return "Portal";

                      case REACT_PROFILER_TYPE:
                        return "Profiler";

                      case REACT_STRICT_MODE_TYPE:
                        return "StrictMode";

                      case REACT_SUSPENSE_TYPE:
                        return "Suspense";

                      case REACT_SUSPENSE_LIST_TYPE:
                        return "SuspenseList";
                    }
                    if (typeof type === "object") {
                        switch (type.$$typeof) {
                          case REACT_CONTEXT_TYPE:
                            var context = type;
                            return getContextName(context) + ".Consumer";

                          case REACT_PROVIDER_TYPE:
                            var provider = type;
                            return getContextName(provider._context) + ".Provider";

                          case REACT_FORWARD_REF_TYPE:
                            return getWrappedName(type, type.render, "ForwardRef");

                          case REACT_MEMO_TYPE:
                            var outerName = type.displayName || null;
                            if (outerName !== null) {
                                return outerName;
                            }
                            return getComponentNameFromType(type.type) || "Memo";

                          case REACT_LAZY_TYPE:
                            {
                                var lazyComponent = type;
                                var payload = lazyComponent._payload;
                                var init = lazyComponent._init;
                                try {
                                    return getComponentNameFromType(init(payload));
                                } catch (x) {
                                    return null;
                                }
                            }
                        }
                    }
                    return null;
                }
                var assign = Object.assign;
                var disabledDepth = 0;
                var prevLog;
                var prevInfo;
                var prevWarn;
                var prevError;
                var prevGroup;
                var prevGroupCollapsed;
                var prevGroupEnd;
                function disabledLog() {}
                disabledLog.__reactDisabledLog = true;
                function disableLogs() {
                    {
                        if (disabledDepth === 0) {
                            prevLog = console.log;
                            prevInfo = console.info;
                            prevWarn = console.warn;
                            prevError = console.error;
                            prevGroup = console.group;
                            prevGroupCollapsed = console.groupCollapsed;
                            prevGroupEnd = console.groupEnd;
                            var props = {
                                configurable: true,
                                enumerable: true,
                                value: disabledLog,
                                writable: true
                            };
                            Object.defineProperties(console, {
                                info: props,
                                log: props,
                                warn: props,
                                error: props,
                                group: props,
                                groupCollapsed: props,
                                groupEnd: props
                            });
                        }
                        disabledDepth++;
                    }
                }
                function reenableLogs() {
                    {
                        disabledDepth--;
                        if (disabledDepth === 0) {
                            var props = {
                                configurable: true,
                                enumerable: true,
                                writable: true
                            };
                            Object.defineProperties(console, {
                                log: assign({}, props, {
                                    value: prevLog
                                }),
                                info: assign({}, props, {
                                    value: prevInfo
                                }),
                                warn: assign({}, props, {
                                    value: prevWarn
                                }),
                                error: assign({}, props, {
                                    value: prevError
                                }),
                                group: assign({}, props, {
                                    value: prevGroup
                                }),
                                groupCollapsed: assign({}, props, {
                                    value: prevGroupCollapsed
                                }),
                                groupEnd: assign({}, props, {
                                    value: prevGroupEnd
                                })
                            });
                        }
                        if (disabledDepth < 0) {
                            error("disabledDepth fell below zero. " + "This is a bug in React. Please file an issue.");
                        }
                    }
                }
                var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
                var prefix;
                function describeBuiltInComponentFrame(name, source, ownerFn) {
                    {
                        if (prefix === undefined) {
                            try {
                                throw Error();
                            } catch (x) {
                                var match = x.stack.trim().match(/\n( *(at )?)/);
                                prefix = match && match[1] || "";
                            }
                        }
                        return "\n" + prefix + name;
                    }
                }
                var reentry = false;
                var componentFrameCache;
                {
                    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
                    componentFrameCache = new PossiblyWeakMap;
                }
                function describeNativeComponentFrame(fn, construct) {
                    if (!fn || reentry) {
                        return "";
                    }
                    {
                        var frame = componentFrameCache.get(fn);
                        if (frame !== undefined) {
                            return frame;
                        }
                    }
                    var control;
                    reentry = true;
                    var previousPrepareStackTrace = Error.prepareStackTrace;
                    Error.prepareStackTrace = undefined;
                    var previousDispatcher;
                    {
                        previousDispatcher = ReactCurrentDispatcher.current;
                        ReactCurrentDispatcher.current = null;
                        disableLogs();
                    }
                    try {
                        if (construct) {
                            var Fake = function() {
                                throw Error();
                            };
                            Object.defineProperty(Fake.prototype, "props", {
                                set: function() {
                                    throw Error();
                                }
                            });
                            if (typeof Reflect === "object" && Reflect.construct) {
                                try {
                                    Reflect.construct(Fake, []);
                                } catch (x) {
                                    control = x;
                                }
                                Reflect.construct(fn, [], Fake);
                            } else {
                                try {
                                    Fake.call();
                                } catch (x) {
                                    control = x;
                                }
                                fn.call(Fake.prototype);
                            }
                        } else {
                            try {
                                throw Error();
                            } catch (x) {
                                control = x;
                            }
                            fn();
                        }
                    } catch (sample) {
                        if (sample && control && typeof sample.stack === "string") {
                            var sampleLines = sample.stack.split("\n");
                            var controlLines = control.stack.split("\n");
                            var s = sampleLines.length - 1;
                            var c = controlLines.length - 1;
                            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                                c--;
                            }
                            for (;s >= 1 && c >= 0; s--, c--) {
                                if (sampleLines[s] !== controlLines[c]) {
                                    if (s !== 1 || c !== 1) {
                                        do {
                                            s--;
                                            c--;
                                            if (c < 0 || sampleLines[s] !== controlLines[c]) {
                                                var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                                                if (fn.displayName && _frame.includes("<anonymous>")) {
                                                    _frame = _frame.replace("<anonymous>", fn.displayName);
                                                }
                                                {
                                                    if (typeof fn === "function") {
                                                        componentFrameCache.set(fn, _frame);
                                                    }
                                                }
                                                return _frame;
                                            }
                                        } while (s >= 1 && c >= 0);
                                    }
                                    break;
                                }
                            }
                        }
                    } finally {
                        reentry = false;
                        {
                            ReactCurrentDispatcher.current = previousDispatcher;
                            reenableLogs();
                        }
                        Error.prepareStackTrace = previousPrepareStackTrace;
                    }
                    var name = fn ? fn.displayName || fn.name : "";
                    var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
                    {
                        if (typeof fn === "function") {
                            componentFrameCache.set(fn, syntheticFrame);
                        }
                    }
                    return syntheticFrame;
                }
                function describeFunctionComponentFrame(fn, source, ownerFn) {
                    {
                        return describeNativeComponentFrame(fn, false);
                    }
                }
                function shouldConstruct(Component) {
                    var prototype = Component.prototype;
                    return !!(prototype && prototype.isReactComponent);
                }
                function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
                    if (type == null) {
                        return "";
                    }
                    if (typeof type === "function") {
                        {
                            return describeNativeComponentFrame(type, shouldConstruct(type));
                        }
                    }
                    if (typeof type === "string") {
                        return describeBuiltInComponentFrame(type);
                    }
                    switch (type) {
                      case REACT_SUSPENSE_TYPE:
                        return describeBuiltInComponentFrame("Suspense");

                      case REACT_SUSPENSE_LIST_TYPE:
                        return describeBuiltInComponentFrame("SuspenseList");
                    }
                    if (typeof type === "object") {
                        switch (type.$$typeof) {
                          case REACT_FORWARD_REF_TYPE:
                            return describeFunctionComponentFrame(type.render);

                          case REACT_MEMO_TYPE:
                            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

                          case REACT_LAZY_TYPE:
                            {
                                var lazyComponent = type;
                                var payload = lazyComponent._payload;
                                var init = lazyComponent._init;
                                try {
                                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                                } catch (x) {}
                            }
                        }
                    }
                    return "";
                }
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var loggedTypeFailures = {};
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                function setCurrentlyValidatingElement(element) {
                    {
                        if (element) {
                            var owner = element._owner;
                            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                            ReactDebugCurrentFrame.setExtraStackFrame(stack);
                        } else {
                            ReactDebugCurrentFrame.setExtraStackFrame(null);
                        }
                    }
                }
                function checkPropTypes(typeSpecs, values, location, componentName, element) {
                    {
                        var has = Function.call.bind(hasOwnProperty);
                        for (var typeSpecName in typeSpecs) {
                            if (has(typeSpecs, typeSpecName)) {
                                var error$1 = void 0;
                                try {
                                    if (typeof typeSpecs[typeSpecName] !== "function") {
                                        var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                                        err.name = "Invariant Violation";
                                        throw err;
                                    }
                                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                                } catch (ex) {
                                    error$1 = ex;
                                }
                                if (error$1 && !(error$1 instanceof Error)) {
                                    setCurrentlyValidatingElement(element);
                                    error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                                    setCurrentlyValidatingElement(null);
                                }
                                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                                    loggedTypeFailures[error$1.message] = true;
                                    setCurrentlyValidatingElement(element);
                                    error("Failed %s type: %s", location, error$1.message);
                                    setCurrentlyValidatingElement(null);
                                }
                            }
                        }
                    }
                }
                var isArrayImpl = Array.isArray;
                function isArray(a) {
                    return isArrayImpl(a);
                }
                function typeName(value) {
                    {
                        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
                        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
                        return type;
                    }
                }
                function willCoercionThrow(value) {
                    {
                        try {
                            testStringCoercion(value);
                            return false;
                        } catch (e) {
                            return true;
                        }
                    }
                }
                function testStringCoercion(value) {
                    return "" + value;
                }
                function checkKeyStringCoercion(value) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided key is an unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
                var RESERVED_PROPS = {
                    key: true,
                    ref: true,
                    __self: true,
                    __source: true
                };
                var specialPropKeyWarningShown;
                var specialPropRefWarningShown;
                var didWarnAboutStringRefs;
                {
                    didWarnAboutStringRefs = {};
                }
                function hasValidRef(config) {
                    {
                        if (hasOwnProperty.call(config, "ref")) {
                            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                            if (getter && getter.isReactWarning) {
                                return false;
                            }
                        }
                    }
                    return config.ref !== undefined;
                }
                function hasValidKey(config) {
                    {
                        if (hasOwnProperty.call(config, "key")) {
                            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                            if (getter && getter.isReactWarning) {
                                return false;
                            }
                        }
                    }
                    return config.key !== undefined;
                }
                function warnIfStringRefCannotBeAutoConverted(config, self) {
                    {
                        if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                            if (!didWarnAboutStringRefs[componentName]) {
                                error('Component "%s" contains the string ref "%s". ' + "Support for string refs will be removed in a future major release. " + "This case cannot be automatically converted to an arrow function. " + "We ask you to manually fix this case by using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                                didWarnAboutStringRefs[componentName] = true;
                            }
                        }
                    }
                }
                function defineKeyPropWarningGetter(props, displayName) {
                    {
                        var warnAboutAccessingKey = function() {
                            if (!specialPropKeyWarningShown) {
                                specialPropKeyWarningShown = true;
                                error("%s: `key` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
                            }
                        };
                        warnAboutAccessingKey.isReactWarning = true;
                        Object.defineProperty(props, "key", {
                            get: warnAboutAccessingKey,
                            configurable: true
                        });
                    }
                }
                function defineRefPropWarningGetter(props, displayName) {
                    {
                        var warnAboutAccessingRef = function() {
                            if (!specialPropRefWarningShown) {
                                specialPropRefWarningShown = true;
                                error("%s: `ref` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
                            }
                        };
                        warnAboutAccessingRef.isReactWarning = true;
                        Object.defineProperty(props, "ref", {
                            get: warnAboutAccessingRef,
                            configurable: true
                        });
                    }
                }
                var ReactElement = function(type, key, ref, self, source, owner, props) {
                    var element = {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: type,
                        key: key,
                        ref: ref,
                        props: props,
                        _owner: owner
                    };
                    {
                        element._store = {};
                        Object.defineProperty(element._store, "validated", {
                            configurable: false,
                            enumerable: false,
                            writable: true,
                            value: false
                        });
                        Object.defineProperty(element, "_self", {
                            configurable: false,
                            enumerable: false,
                            writable: false,
                            value: self
                        });
                        Object.defineProperty(element, "_source", {
                            configurable: false,
                            enumerable: false,
                            writable: false,
                            value: source
                        });
                        if (Object.freeze) {
                            Object.freeze(element.props);
                            Object.freeze(element);
                        }
                    }
                    return element;
                };
                function jsxDEV(type, config, maybeKey, source, self) {
                    {
                        var propName;
                        var props = {};
                        var key = null;
                        var ref = null;
                        if (maybeKey !== undefined) {
                            {
                                checkKeyStringCoercion(maybeKey);
                            }
                            key = "" + maybeKey;
                        }
                        if (hasValidKey(config)) {
                            {
                                checkKeyStringCoercion(config.key);
                            }
                            key = "" + config.key;
                        }
                        if (hasValidRef(config)) {
                            ref = config.ref;
                            warnIfStringRefCannotBeAutoConverted(config, self);
                        }
                        for (propName in config) {
                            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                                props[propName] = config[propName];
                            }
                        }
                        if (type && type.defaultProps) {
                            var defaultProps = type.defaultProps;
                            for (propName in defaultProps) {
                                if (props[propName] === undefined) {
                                    props[propName] = defaultProps[propName];
                                }
                            }
                        }
                        if (key || ref) {
                            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                            if (key) {
                                defineKeyPropWarningGetter(props, displayName);
                            }
                            if (ref) {
                                defineRefPropWarningGetter(props, displayName);
                            }
                        }
                        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
                    }
                }
                var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
                var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
                function setCurrentlyValidatingElement$1(element) {
                    {
                        if (element) {
                            var owner = element._owner;
                            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                        } else {
                            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                        }
                    }
                }
                var propTypesMisspellWarningShown;
                {
                    propTypesMisspellWarningShown = false;
                }
                function isValidElement(object) {
                    {
                        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                    }
                }
                function getDeclarationErrorAddendum() {
                    {
                        if (ReactCurrentOwner$1.current) {
                            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                            if (name) {
                                return "\n\nCheck the render method of `" + name + "`.";
                            }
                        }
                        return "";
                    }
                }
                function getSourceInfoErrorAddendum(source) {
                    {
                        if (source !== undefined) {
                            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                            var lineNumber = source.lineNumber;
                            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
                        }
                        return "";
                    }
                }
                var ownerHasKeyUseWarning = {};
                function getCurrentComponentErrorInfo(parentType) {
                    {
                        var info = getDeclarationErrorAddendum();
                        if (!info) {
                            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                            if (parentName) {
                                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                            }
                        }
                        return info;
                    }
                }
                function validateExplicitKey(element, parentType) {
                    {
                        if (!element._store || element._store.validated || element.key != null) {
                            return;
                        }
                        element._store.validated = true;
                        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
                        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                            return;
                        }
                        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                        var childOwner = "";
                        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
                        }
                        setCurrentlyValidatingElement$1(element);
                        error('Each child in a list should have a unique "key" prop.' + "%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
                        setCurrentlyValidatingElement$1(null);
                    }
                }
                function validateChildKeys(node, parentType) {
                    {
                        if (typeof node !== "object") {
                            return;
                        }
                        if (isArray(node)) {
                            for (var i = 0; i < node.length; i++) {
                                var child = node[i];
                                if (isValidElement(child)) {
                                    validateExplicitKey(child, parentType);
                                }
                            }
                        } else if (isValidElement(node)) {
                            if (node._store) {
                                node._store.validated = true;
                            }
                        } else if (node) {
                            var iteratorFn = getIteratorFn(node);
                            if (typeof iteratorFn === "function") {
                                if (iteratorFn !== node.entries) {
                                    var iterator = iteratorFn.call(node);
                                    var step;
                                    while (!(step = iterator.next()).done) {
                                        if (isValidElement(step.value)) {
                                            validateExplicitKey(step.value, parentType);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                function validatePropTypes(element) {
                    {
                        var type = element.type;
                        if (type === null || type === undefined || typeof type === "string") {
                            return;
                        }
                        var propTypes;
                        if (typeof type === "function") {
                            propTypes = type.propTypes;
                        } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                            propTypes = type.propTypes;
                        } else {
                            return;
                        }
                        if (propTypes) {
                            var name = getComponentNameFromType(type);
                            checkPropTypes(propTypes, element.props, "prop", name, element);
                        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
                            propTypesMisspellWarningShown = true;
                            var _name = getComponentNameFromType(type);
                            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
                        }
                        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                            error("getDefaultProps is only used on classic React.createClass " + "definitions. Use a static property named `defaultProps` instead.");
                        }
                    }
                }
                function validateFragmentProps(fragment) {
                    {
                        var keys = Object.keys(fragment.props);
                        for (var i = 0; i < keys.length; i++) {
                            var key = keys[i];
                            if (key !== "children" && key !== "key") {
                                setCurrentlyValidatingElement$1(fragment);
                                error("Invalid prop `%s` supplied to `React.Fragment`. " + "React.Fragment can only have `key` and `children` props.", key);
                                setCurrentlyValidatingElement$1(null);
                                break;
                            }
                        }
                        if (fragment.ref !== null) {
                            setCurrentlyValidatingElement$1(fragment);
                            error("Invalid attribute `ref` supplied to `React.Fragment`.");
                            setCurrentlyValidatingElement$1(null);
                        }
                    }
                }
                function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
                    {
                        var validType = isValidElementType(type);
                        if (!validType) {
                            var info = "";
                            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                                info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and named imports.";
                            }
                            var sourceInfo = getSourceInfoErrorAddendum(source);
                            if (sourceInfo) {
                                info += sourceInfo;
                            } else {
                                info += getDeclarationErrorAddendum();
                            }
                            var typeString;
                            if (type === null) {
                                typeString = "null";
                            } else if (isArray(type)) {
                                typeString = "array";
                            } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                                info = " Did you accidentally export a JSX literal instead of a component?";
                            } else {
                                typeString = typeof type;
                            }
                            error("React.jsx: type is invalid -- expected a string (for " + "built-in components) or a class/function (for composite " + "components) but got: %s.%s", typeString, info);
                        }
                        var element = jsxDEV(type, props, key, source, self);
                        if (element == null) {
                            return element;
                        }
                        if (validType) {
                            var children = props.children;
                            if (children !== undefined) {
                                if (isStaticChildren) {
                                    if (isArray(children)) {
                                        for (var i = 0; i < children.length; i++) {
                                            validateChildKeys(children[i], type);
                                        }
                                        if (Object.freeze) {
                                            Object.freeze(children);
                                        }
                                    } else {
                                        error("React.jsx: Static children should always be an array. " + "You are likely explicitly calling React.jsxs or React.jsxDEV. " + "Use the Babel transform instead.");
                                    }
                                } else {
                                    validateChildKeys(children, type);
                                }
                            }
                        }
                        if (type === REACT_FRAGMENT_TYPE) {
                            validateFragmentProps(element);
                        } else {
                            validatePropTypes(element);
                        }
                        return element;
                    }
                }
                function jsxWithValidationStatic(type, props, key) {
                    {
                        return jsxWithValidation(type, props, key, true);
                    }
                }
                function jsxWithValidationDynamic(type, props, key) {
                    {
                        return jsxWithValidation(type, props, key, false);
                    }
                }
                var jsx = jsxWithValidationDynamic;
                var jsxs = jsxWithValidationStatic;
                reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
                reactJsxRuntime_development.jsx = jsx;
                reactJsxRuntime_development.jsxs = jsxs;
            })();
        }
        return reactJsxRuntime_development;
    }
    (function(module) {
        {
            module.exports = requireReactJsxRuntime_development();
        }
    })(jsxRuntime);
    var cryptoJsExports = {};
    var cryptoJs = {
        get exports() {
            return cryptoJsExports;
        },
        set exports(v) {
            cryptoJsExports = v;
        }
    };
    function commonjsRequire(path) {
        throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
    }
    var coreExports = {};
    var core = {
        get exports() {
            return coreExports;
        },
        set exports(v) {
            coreExports = v;
        }
    };
    var hasRequiredCore;
    function requireCore() {
        if (hasRequiredCore) return coreExports;
        hasRequiredCore = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory();
                }
            })(commonjsGlobal, (function() {
                var CryptoJS = CryptoJS || function(Math, undefined$1) {
                    var crypto;
                    if (typeof window !== "undefined" && window.crypto) {
                        crypto = window.crypto;
                    }
                    if (typeof self !== "undefined" && self.crypto) {
                        crypto = self.crypto;
                    }
                    if (typeof globalThis !== "undefined" && globalThis.crypto) {
                        crypto = globalThis.crypto;
                    }
                    if (!crypto && typeof window !== "undefined" && window.msCrypto) {
                        crypto = window.msCrypto;
                    }
                    if (!crypto && typeof commonjsGlobal !== "undefined" && commonjsGlobal.crypto) {
                        crypto = commonjsGlobal.crypto;
                    }
                    if (!crypto && typeof commonjsRequire === "function") {
                        try {
                            crypto = require("crypto");
                        } catch (err) {}
                    }
                    var cryptoSecureRandomInt = function() {
                        if (crypto) {
                            if (typeof crypto.getRandomValues === "function") {
                                try {
                                    return crypto.getRandomValues(new Uint32Array(1))[0];
                                } catch (err) {}
                            }
                            if (typeof crypto.randomBytes === "function") {
                                try {
                                    return crypto.randomBytes(4).readInt32LE();
                                } catch (err) {}
                            }
                        }
                        throw new Error("Native crypto module could not be used to get secure random number.");
                    };
                    var create = Object.create || function() {
                        function F() {}
                        return function(obj) {
                            var subtype;
                            F.prototype = obj;
                            subtype = new F;
                            F.prototype = null;
                            return subtype;
                        };
                    }();
                    var C = {};
                    var C_lib = C.lib = {};
                    var Base = C_lib.Base = function() {
                        return {
                            extend: function(overrides) {
                                var subtype = create(this);
                                if (overrides) {
                                    subtype.mixIn(overrides);
                                }
                                if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                                    subtype.init = function() {
                                        subtype.$super.init.apply(this, arguments);
                                    };
                                }
                                subtype.init.prototype = subtype;
                                subtype.$super = this;
                                return subtype;
                            },
                            create: function() {
                                var instance = this.extend();
                                instance.init.apply(instance, arguments);
                                return instance;
                            },
                            init: function() {},
                            mixIn: function(properties) {
                                for (var propertyName in properties) {
                                    if (properties.hasOwnProperty(propertyName)) {
                                        this[propertyName] = properties[propertyName];
                                    }
                                }
                                if (properties.hasOwnProperty("toString")) {
                                    this.toString = properties.toString;
                                }
                            },
                            clone: function() {
                                return this.init.prototype.extend(this);
                            }
                        };
                    }();
                    var WordArray = C_lib.WordArray = Base.extend({
                        init: function(words, sigBytes) {
                            words = this.words = words || [];
                            if (sigBytes != undefined$1) {
                                this.sigBytes = sigBytes;
                            } else {
                                this.sigBytes = words.length * 4;
                            }
                        },
                        toString: function(encoder) {
                            return (encoder || Hex).stringify(this);
                        },
                        concat: function(wordArray) {
                            var thisWords = this.words;
                            var thatWords = wordArray.words;
                            var thisSigBytes = this.sigBytes;
                            var thatSigBytes = wordArray.sigBytes;
                            this.clamp();
                            if (thisSigBytes % 4) {
                                for (var i = 0; i < thatSigBytes; i++) {
                                    var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                                    thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
                                }
                            } else {
                                for (var j = 0; j < thatSigBytes; j += 4) {
                                    thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
                                }
                            }
                            this.sigBytes += thatSigBytes;
                            return this;
                        },
                        clamp: function() {
                            var words = this.words;
                            var sigBytes = this.sigBytes;
                            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
                            words.length = Math.ceil(sigBytes / 4);
                        },
                        clone: function() {
                            var clone = Base.clone.call(this);
                            clone.words = this.words.slice(0);
                            return clone;
                        },
                        random: function(nBytes) {
                            var words = [];
                            for (var i = 0; i < nBytes; i += 4) {
                                words.push(cryptoSecureRandomInt());
                            }
                            return new WordArray.init(words, nBytes);
                        }
                    });
                    var C_enc = C.enc = {};
                    var Hex = C_enc.Hex = {
                        stringify: function(wordArray) {
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;
                            var hexChars = [];
                            for (var i = 0; i < sigBytes; i++) {
                                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                                hexChars.push((bite >>> 4).toString(16));
                                hexChars.push((bite & 15).toString(16));
                            }
                            return hexChars.join("");
                        },
                        parse: function(hexStr) {
                            var hexStrLength = hexStr.length;
                            var words = [];
                            for (var i = 0; i < hexStrLength; i += 2) {
                                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
                            }
                            return new WordArray.init(words, hexStrLength / 2);
                        }
                    };
                    var Latin1 = C_enc.Latin1 = {
                        stringify: function(wordArray) {
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;
                            var latin1Chars = [];
                            for (var i = 0; i < sigBytes; i++) {
                                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                                latin1Chars.push(String.fromCharCode(bite));
                            }
                            return latin1Chars.join("");
                        },
                        parse: function(latin1Str) {
                            var latin1StrLength = latin1Str.length;
                            var words = [];
                            for (var i = 0; i < latin1StrLength; i++) {
                                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
                            }
                            return new WordArray.init(words, latin1StrLength);
                        }
                    };
                    var Utf8 = C_enc.Utf8 = {
                        stringify: function(wordArray) {
                            try {
                                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                            } catch (e) {
                                throw new Error("Malformed UTF-8 data");
                            }
                        },
                        parse: function(utf8Str) {
                            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
                        }
                    };
                    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
                        reset: function() {
                            this._data = new WordArray.init;
                            this._nDataBytes = 0;
                        },
                        _append: function(data) {
                            if (typeof data == "string") {
                                data = Utf8.parse(data);
                            }
                            this._data.concat(data);
                            this._nDataBytes += data.sigBytes;
                        },
                        _process: function(doFlush) {
                            var processedWords;
                            var data = this._data;
                            var dataWords = data.words;
                            var dataSigBytes = data.sigBytes;
                            var blockSize = this.blockSize;
                            var blockSizeBytes = blockSize * 4;
                            var nBlocksReady = dataSigBytes / blockSizeBytes;
                            if (doFlush) {
                                nBlocksReady = Math.ceil(nBlocksReady);
                            } else {
                                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
                            }
                            var nWordsReady = nBlocksReady * blockSize;
                            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);
                            if (nWordsReady) {
                                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                                    this._doProcessBlock(dataWords, offset);
                                }
                                processedWords = dataWords.splice(0, nWordsReady);
                                data.sigBytes -= nBytesReady;
                            }
                            return new WordArray.init(processedWords, nBytesReady);
                        },
                        clone: function() {
                            var clone = Base.clone.call(this);
                            clone._data = this._data.clone();
                            return clone;
                        },
                        _minBufferSize: 0
                    });
                    C_lib.Hasher = BufferedBlockAlgorithm.extend({
                        cfg: Base.extend(),
                        init: function(cfg) {
                            this.cfg = this.cfg.extend(cfg);
                            this.reset();
                        },
                        reset: function() {
                            BufferedBlockAlgorithm.reset.call(this);
                            this._doReset();
                        },
                        update: function(messageUpdate) {
                            this._append(messageUpdate);
                            this._process();
                            return this;
                        },
                        finalize: function(messageUpdate) {
                            if (messageUpdate) {
                                this._append(messageUpdate);
                            }
                            var hash = this._doFinalize();
                            return hash;
                        },
                        blockSize: 512 / 32,
                        _createHelper: function(hasher) {
                            return function(message, cfg) {
                                return new hasher.init(cfg).finalize(message);
                            };
                        },
                        _createHmacHelper: function(hasher) {
                            return function(message, key) {
                                return new C_algo.HMAC.init(hasher, key).finalize(message);
                            };
                        }
                    });
                    var C_algo = C.algo = {};
                    return C;
                }(Math);
                return CryptoJS;
            }));
        })(core);
        return coreExports;
    }
    var x64CoreExports = {};
    var x64Core = {
        get exports() {
            return x64CoreExports;
        },
        set exports(v) {
            x64CoreExports = v;
        }
    };
    var hasRequiredX64Core;
    function requireX64Core() {
        if (hasRequiredX64Core) return x64CoreExports;
        hasRequiredX64Core = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory(requireCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function(undefined$1) {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Base = C_lib.Base;
                    var X32WordArray = C_lib.WordArray;
                    var C_x64 = C.x64 = {};
                    C_x64.Word = Base.extend({
                        init: function(high, low) {
                            this.high = high;
                            this.low = low;
                        }
                    });
                    C_x64.WordArray = Base.extend({
                        init: function(words, sigBytes) {
                            words = this.words = words || [];
                            if (sigBytes != undefined$1) {
                                this.sigBytes = sigBytes;
                            } else {
                                this.sigBytes = words.length * 8;
                            }
                        },
                        toX32: function() {
                            var x64Words = this.words;
                            var x64WordsLength = x64Words.length;
                            var x32Words = [];
                            for (var i = 0; i < x64WordsLength; i++) {
                                var x64Word = x64Words[i];
                                x32Words.push(x64Word.high);
                                x32Words.push(x64Word.low);
                            }
                            return X32WordArray.create(x32Words, this.sigBytes);
                        },
                        clone: function() {
                            var clone = Base.clone.call(this);
                            var words = clone.words = this.words.slice(0);
                            var wordsLength = words.length;
                            for (var i = 0; i < wordsLength; i++) {
                                words[i] = words[i].clone();
                            }
                            return clone;
                        }
                    });
                })();
                return CryptoJS;
            }));
        })(x64Core);
        return x64CoreExports;
    }
    var libTypedarraysExports = {};
    var libTypedarrays = {
        get exports() {
            return libTypedarraysExports;
        },
        set exports(v) {
            libTypedarraysExports = v;
        }
    };
    var hasRequiredLibTypedarrays;
    function requireLibTypedarrays() {
        if (hasRequiredLibTypedarrays) return libTypedarraysExports;
        hasRequiredLibTypedarrays = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory(requireCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    if (typeof ArrayBuffer != "function") {
                        return;
                    }
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var superInit = WordArray.init;
                    var subInit = WordArray.init = function(typedArray) {
                        if (typedArray instanceof ArrayBuffer) {
                            typedArray = new Uint8Array(typedArray);
                        }
                        if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
                            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
                        }
                        if (typedArray instanceof Uint8Array) {
                            var typedArrayByteLength = typedArray.byteLength;
                            var words = [];
                            for (var i = 0; i < typedArrayByteLength; i++) {
                                words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
                            }
                            superInit.call(this, words, typedArrayByteLength);
                        } else {
                            superInit.apply(this, arguments);
                        }
                    };
                    subInit.prototype = WordArray;
                })();
                return CryptoJS.lib.WordArray;
            }));
        })(libTypedarrays);
        return libTypedarraysExports;
    }
    var encUtf16Exports = {};
    var encUtf16 = {
        get exports() {
            return encUtf16Exports;
        },
        set exports(v) {
            encUtf16Exports = v;
        }
    };
    var hasRequiredEncUtf16;
    function requireEncUtf16() {
        if (hasRequiredEncUtf16) return encUtf16Exports;
        hasRequiredEncUtf16 = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory(requireCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var C_enc = C.enc;
                    C_enc.Utf16 = C_enc.Utf16BE = {
                        stringify: function(wordArray) {
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;
                            var utf16Chars = [];
                            for (var i = 0; i < sigBytes; i += 2) {
                                var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
                                utf16Chars.push(String.fromCharCode(codePoint));
                            }
                            return utf16Chars.join("");
                        },
                        parse: function(utf16Str) {
                            var utf16StrLength = utf16Str.length;
                            var words = [];
                            for (var i = 0; i < utf16StrLength; i++) {
                                words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
                            }
                            return WordArray.create(words, utf16StrLength * 2);
                        }
                    };
                    C_enc.Utf16LE = {
                        stringify: function(wordArray) {
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;
                            var utf16Chars = [];
                            for (var i = 0; i < sigBytes; i += 2) {
                                var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
                                utf16Chars.push(String.fromCharCode(codePoint));
                            }
                            return utf16Chars.join("");
                        },
                        parse: function(utf16Str) {
                            var utf16StrLength = utf16Str.length;
                            var words = [];
                            for (var i = 0; i < utf16StrLength; i++) {
                                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
                            }
                            return WordArray.create(words, utf16StrLength * 2);
                        }
                    };
                    function swapEndian(word) {
                        return word << 8 & 4278255360 | word >>> 8 & 16711935;
                    }
                })();
                return CryptoJS.enc.Utf16;
            }));
        })(encUtf16);
        return encUtf16Exports;
    }
    var encBase64Exports = {};
    var encBase64 = {
        get exports() {
            return encBase64Exports;
        },
        set exports(v) {
            encBase64Exports = v;
        }
    };
    var hasRequiredEncBase64;
    function requireEncBase64() {
        if (hasRequiredEncBase64) return encBase64Exports;
        hasRequiredEncBase64 = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory(requireCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var C_enc = C.enc;
                    C_enc.Base64 = {
                        stringify: function(wordArray) {
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;
                            var map = this._map;
                            wordArray.clamp();
                            var base64Chars = [];
                            for (var i = 0; i < sigBytes; i += 3) {
                                var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                                var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
                                var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
                                var triplet = byte1 << 16 | byte2 << 8 | byte3;
                                for (var j = 0; j < 4 && i + j * .75 < sigBytes; j++) {
                                    base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
                                }
                            }
                            var paddingChar = map.charAt(64);
                            if (paddingChar) {
                                while (base64Chars.length % 4) {
                                    base64Chars.push(paddingChar);
                                }
                            }
                            return base64Chars.join("");
                        },
                        parse: function(base64Str) {
                            var base64StrLength = base64Str.length;
                            var map = this._map;
                            var reverseMap = this._reverseMap;
                            if (!reverseMap) {
                                reverseMap = this._reverseMap = [];
                                for (var j = 0; j < map.length; j++) {
                                    reverseMap[map.charCodeAt(j)] = j;
                                }
                            }
                            var paddingChar = map.charAt(64);
                            if (paddingChar) {
                                var paddingIndex = base64Str.indexOf(paddingChar);
                                if (paddingIndex !== -1) {
                                    base64StrLength = paddingIndex;
                                }
                            }
                            return parseLoop(base64Str, base64StrLength, reverseMap);
                        },
                        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
                    };
                    function parseLoop(base64Str, base64StrLength, reverseMap) {
                        var words = [];
                        var nBytes = 0;
                        for (var i = 0; i < base64StrLength; i++) {
                            if (i % 4) {
                                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
                                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
                                var bitsCombined = bits1 | bits2;
                                words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                                nBytes++;
                            }
                        }
                        return WordArray.create(words, nBytes);
                    }
                })();
                return CryptoJS.enc.Base64;
            }));
        })(encBase64);
        return encBase64Exports;
    }
    var encBase64urlExports = {};
    var encBase64url = {
        get exports() {
            return encBase64urlExports;
        },
        set exports(v) {
            encBase64urlExports = v;
        }
    };
    var hasRequiredEncBase64url;
    function requireEncBase64url() {
        if (hasRequiredEncBase64url) return encBase64urlExports;
        hasRequiredEncBase64url = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory(requireCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var C_enc = C.enc;
                    C_enc.Base64url = {
                        stringify: function(wordArray, urlSafe = true) {
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;
                            var map = urlSafe ? this._safe_map : this._map;
                            wordArray.clamp();
                            var base64Chars = [];
                            for (var i = 0; i < sigBytes; i += 3) {
                                var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                                var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
                                var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
                                var triplet = byte1 << 16 | byte2 << 8 | byte3;
                                for (var j = 0; j < 4 && i + j * .75 < sigBytes; j++) {
                                    base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
                                }
                            }
                            var paddingChar = map.charAt(64);
                            if (paddingChar) {
                                while (base64Chars.length % 4) {
                                    base64Chars.push(paddingChar);
                                }
                            }
                            return base64Chars.join("");
                        },
                        parse: function(base64Str, urlSafe = true) {
                            var base64StrLength = base64Str.length;
                            var map = urlSafe ? this._safe_map : this._map;
                            var reverseMap = this._reverseMap;
                            if (!reverseMap) {
                                reverseMap = this._reverseMap = [];
                                for (var j = 0; j < map.length; j++) {
                                    reverseMap[map.charCodeAt(j)] = j;
                                }
                            }
                            var paddingChar = map.charAt(64);
                            if (paddingChar) {
                                var paddingIndex = base64Str.indexOf(paddingChar);
                                if (paddingIndex !== -1) {
                                    base64StrLength = paddingIndex;
                                }
                            }
                            return parseLoop(base64Str, base64StrLength, reverseMap);
                        },
                        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                        _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
                    };
                    function parseLoop(base64Str, base64StrLength, reverseMap) {
                        var words = [];
                        var nBytes = 0;
                        for (var i = 0; i < base64StrLength; i++) {
                            if (i % 4) {
                                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
                                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
                                var bitsCombined = bits1 | bits2;
                                words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                                nBytes++;
                            }
                        }
                        return WordArray.create(words, nBytes);
                    }
                })();
                return CryptoJS.enc.Base64url;
            }));
        })(encBase64url);
        return encBase64urlExports;
    }
    var md5Exports = {};
    var md5 = {
        get exports() {
            return md5Exports;
        },
        set exports(v) {
            md5Exports = v;
        }
    };
    var hasRequiredMd5;
    function requireMd5() {
        if (hasRequiredMd5) return md5Exports;
        hasRequiredMd5 = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory(requireCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function(Math) {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var Hasher = C_lib.Hasher;
                    var C_algo = C.algo;
                    var T = [];
                    (function() {
                        for (var i = 0; i < 64; i++) {
                            T[i] = Math.abs(Math.sin(i + 1)) * 4294967296 | 0;
                        }
                    })();
                    var MD5 = C_algo.MD5 = Hasher.extend({
                        _doReset: function() {
                            this._hash = new WordArray.init([ 1732584193, 4023233417, 2562383102, 271733878 ]);
                        },
                        _doProcessBlock: function(M, offset) {
                            for (var i = 0; i < 16; i++) {
                                var offset_i = offset + i;
                                var M_offset_i = M[offset_i];
                                M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
                            }
                            var H = this._hash.words;
                            var M_offset_0 = M[offset + 0];
                            var M_offset_1 = M[offset + 1];
                            var M_offset_2 = M[offset + 2];
                            var M_offset_3 = M[offset + 3];
                            var M_offset_4 = M[offset + 4];
                            var M_offset_5 = M[offset + 5];
                            var M_offset_6 = M[offset + 6];
                            var M_offset_7 = M[offset + 7];
                            var M_offset_8 = M[offset + 8];
                            var M_offset_9 = M[offset + 9];
                            var M_offset_10 = M[offset + 10];
                            var M_offset_11 = M[offset + 11];
                            var M_offset_12 = M[offset + 12];
                            var M_offset_13 = M[offset + 13];
                            var M_offset_14 = M[offset + 14];
                            var M_offset_15 = M[offset + 15];
                            var a = H[0];
                            var b = H[1];
                            var c = H[2];
                            var d = H[3];
                            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
                            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
                            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
                            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
                            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
                            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
                            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
                            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
                            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
                            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
                            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
                            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
                            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
                            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
                            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
                            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
                            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
                            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
                            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
                            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
                            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
                            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
                            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
                            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
                            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
                            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
                            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
                            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
                            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
                            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
                            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
                            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
                            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
                            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
                            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
                            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
                            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
                            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
                            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
                            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
                            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
                            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
                            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
                            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
                            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
                            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
                            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
                            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
                            a = II(a, b, c, d, M_offset_0, 6, T[48]);
                            d = II(d, a, b, c, M_offset_7, 10, T[49]);
                            c = II(c, d, a, b, M_offset_14, 15, T[50]);
                            b = II(b, c, d, a, M_offset_5, 21, T[51]);
                            a = II(a, b, c, d, M_offset_12, 6, T[52]);
                            d = II(d, a, b, c, M_offset_3, 10, T[53]);
                            c = II(c, d, a, b, M_offset_10, 15, T[54]);
                            b = II(b, c, d, a, M_offset_1, 21, T[55]);
                            a = II(a, b, c, d, M_offset_8, 6, T[56]);
                            d = II(d, a, b, c, M_offset_15, 10, T[57]);
                            c = II(c, d, a, b, M_offset_6, 15, T[58]);
                            b = II(b, c, d, a, M_offset_13, 21, T[59]);
                            a = II(a, b, c, d, M_offset_4, 6, T[60]);
                            d = II(d, a, b, c, M_offset_11, 10, T[61]);
                            c = II(c, d, a, b, M_offset_2, 15, T[62]);
                            b = II(b, c, d, a, M_offset_9, 21, T[63]);
                            H[0] = H[0] + a | 0;
                            H[1] = H[1] + b | 0;
                            H[2] = H[2] + c | 0;
                            H[3] = H[3] + d | 0;
                        },
                        _doFinalize: function() {
                            var data = this._data;
                            var dataWords = data.words;
                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;
                            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                            var nBitsTotalH = Math.floor(nBitsTotal / 4294967296);
                            var nBitsTotalL = nBitsTotal;
                            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
                            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
                            data.sigBytes = (dataWords.length + 1) * 4;
                            this._process();
                            var hash = this._hash;
                            var H = hash.words;
                            for (var i = 0; i < 4; i++) {
                                var H_i = H[i];
                                H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
                            }
                            return hash;
                        },
                        clone: function() {
                            var clone = Hasher.clone.call(this);
                            clone._hash = this._hash.clone();
                            return clone;
                        }
                    });
                    function FF(a, b, c, d, x, s, t) {
                        var n = a + (b & c | ~b & d) + x + t;
                        return (n << s | n >>> 32 - s) + b;
                    }
                    function GG(a, b, c, d, x, s, t) {
                        var n = a + (b & d | c & ~d) + x + t;
                        return (n << s | n >>> 32 - s) + b;
                    }
                    function HH(a, b, c, d, x, s, t) {
                        var n = a + (b ^ c ^ d) + x + t;
                        return (n << s | n >>> 32 - s) + b;
                    }
                    function II(a, b, c, d, x, s, t) {
                        var n = a + (c ^ (b | ~d)) + x + t;
                        return (n << s | n >>> 32 - s) + b;
                    }
                    C.MD5 = Hasher._createHelper(MD5);
                    C.HmacMD5 = Hasher._createHmacHelper(MD5);
                })(Math);
                return CryptoJS.MD5;
            }));
        })(md5);
        return md5Exports;
    }
    var sha1Exports = {};
    var sha1 = {
        get exports() {
            return sha1Exports;
        },
        set exports(v) {
            sha1Exports = v;
        }
    };
    var hasRequiredSha1;
    function requireSha1() {
        if (hasRequiredSha1) return sha1Exports;
        hasRequiredSha1 = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory(requireCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var Hasher = C_lib.Hasher;
                    var C_algo = C.algo;
                    var W = [];
                    var SHA1 = C_algo.SHA1 = Hasher.extend({
                        _doReset: function() {
                            this._hash = new WordArray.init([ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ]);
                        },
                        _doProcessBlock: function(M, offset) {
                            var H = this._hash.words;
                            var a = H[0];
                            var b = H[1];
                            var c = H[2];
                            var d = H[3];
                            var e = H[4];
                            for (var i = 0; i < 80; i++) {
                                if (i < 16) {
                                    W[i] = M[offset + i] | 0;
                                } else {
                                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                                    W[i] = n << 1 | n >>> 31;
                                }
                                var t = (a << 5 | a >>> 27) + e + W[i];
                                if (i < 20) {
                                    t += (b & c | ~b & d) + 1518500249;
                                } else if (i < 40) {
                                    t += (b ^ c ^ d) + 1859775393;
                                } else if (i < 60) {
                                    t += (b & c | b & d | c & d) - 1894007588;
                                } else {
                                    t += (b ^ c ^ d) - 899497514;
                                }
                                e = d;
                                d = c;
                                c = b << 30 | b >>> 2;
                                b = a;
                                a = t;
                            }
                            H[0] = H[0] + a | 0;
                            H[1] = H[1] + b | 0;
                            H[2] = H[2] + c | 0;
                            H[3] = H[3] + d | 0;
                            H[4] = H[4] + e | 0;
                        },
                        _doFinalize: function() {
                            var data = this._data;
                            var dataWords = data.words;
                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;
                            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
                            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
                            data.sigBytes = dataWords.length * 4;
                            this._process();
                            return this._hash;
                        },
                        clone: function() {
                            var clone = Hasher.clone.call(this);
                            clone._hash = this._hash.clone();
                            return clone;
                        }
                    });
                    C.SHA1 = Hasher._createHelper(SHA1);
                    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
                })();
                return CryptoJS.SHA1;
            }));
        })(sha1);
        return sha1Exports;
    }
    var sha256Exports = {};
    var sha256 = {
        get exports() {
            return sha256Exports;
        },
        set exports(v) {
            sha256Exports = v;
        }
    };
    var hasRequiredSha256;
    function requireSha256() {
        if (hasRequiredSha256) return sha256Exports;
        hasRequiredSha256 = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory(requireCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function(Math) {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var Hasher = C_lib.Hasher;
                    var C_algo = C.algo;
                    var H = [];
                    var K = [];
                    (function() {
                        function isPrime(n) {
                            var sqrtN = Math.sqrt(n);
                            for (var factor = 2; factor <= sqrtN; factor++) {
                                if (!(n % factor)) {
                                    return false;
                                }
                            }
                            return true;
                        }
                        function getFractionalBits(n) {
                            return (n - (n | 0)) * 4294967296 | 0;
                        }
                        var n = 2;
                        var nPrime = 0;
                        while (nPrime < 64) {
                            if (isPrime(n)) {
                                if (nPrime < 8) {
                                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
                                }
                                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
                                nPrime++;
                            }
                            n++;
                        }
                    })();
                    var W = [];
                    var SHA256 = C_algo.SHA256 = Hasher.extend({
                        _doReset: function() {
                            this._hash = new WordArray.init(H.slice(0));
                        },
                        _doProcessBlock: function(M, offset) {
                            var H = this._hash.words;
                            var a = H[0];
                            var b = H[1];
                            var c = H[2];
                            var d = H[3];
                            var e = H[4];
                            var f = H[5];
                            var g = H[6];
                            var h = H[7];
                            for (var i = 0; i < 64; i++) {
                                if (i < 16) {
                                    W[i] = M[offset + i] | 0;
                                } else {
                                    var gamma0x = W[i - 15];
                                    var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                                    var gamma1x = W[i - 2];
                                    var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                                }
                                var ch = e & f ^ ~e & g;
                                var maj = a & b ^ a & c ^ b & c;
                                var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
                                var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
                                var t1 = h + sigma1 + ch + K[i] + W[i];
                                var t2 = sigma0 + maj;
                                h = g;
                                g = f;
                                f = e;
                                e = d + t1 | 0;
                                d = c;
                                c = b;
                                b = a;
                                a = t1 + t2 | 0;
                            }
                            H[0] = H[0] + a | 0;
                            H[1] = H[1] + b | 0;
                            H[2] = H[2] + c | 0;
                            H[3] = H[3] + d | 0;
                            H[4] = H[4] + e | 0;
                            H[5] = H[5] + f | 0;
                            H[6] = H[6] + g | 0;
                            H[7] = H[7] + h | 0;
                        },
                        _doFinalize: function() {
                            var data = this._data;
                            var dataWords = data.words;
                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;
                            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
                            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
                            data.sigBytes = dataWords.length * 4;
                            this._process();
                            return this._hash;
                        },
                        clone: function() {
                            var clone = Hasher.clone.call(this);
                            clone._hash = this._hash.clone();
                            return clone;
                        }
                    });
                    C.SHA256 = Hasher._createHelper(SHA256);
                    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
                })(Math);
                return CryptoJS.SHA256;
            }));
        })(sha256);
        return sha256Exports;
    }
    var sha224Exports = {};
    var sha224 = {
        get exports() {
            return sha224Exports;
        },
        set exports(v) {
            sha224Exports = v;
        }
    };
    var hasRequiredSha224;
    function requireSha224() {
        if (hasRequiredSha224) return sha224Exports;
        hasRequiredSha224 = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireSha256());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var C_algo = C.algo;
                    var SHA256 = C_algo.SHA256;
                    var SHA224 = C_algo.SHA224 = SHA256.extend({
                        _doReset: function() {
                            this._hash = new WordArray.init([ 3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428 ]);
                        },
                        _doFinalize: function() {
                            var hash = SHA256._doFinalize.call(this);
                            hash.sigBytes -= 4;
                            return hash;
                        }
                    });
                    C.SHA224 = SHA256._createHelper(SHA224);
                    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
                })();
                return CryptoJS.SHA224;
            }));
        })(sha224);
        return sha224Exports;
    }
    var sha512Exports = {};
    var sha512 = {
        get exports() {
            return sha512Exports;
        },
        set exports(v) {
            sha512Exports = v;
        }
    };
    var hasRequiredSha512;
    function requireSha512() {
        if (hasRequiredSha512) return sha512Exports;
        hasRequiredSha512 = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireX64Core());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Hasher = C_lib.Hasher;
                    var C_x64 = C.x64;
                    var X64Word = C_x64.Word;
                    var X64WordArray = C_x64.WordArray;
                    var C_algo = C.algo;
                    function X64Word_create() {
                        return X64Word.create.apply(X64Word, arguments);
                    }
                    var K = [ X64Word_create(1116352408, 3609767458), X64Word_create(1899447441, 602891725), X64Word_create(3049323471, 3964484399), X64Word_create(3921009573, 2173295548), X64Word_create(961987163, 4081628472), X64Word_create(1508970993, 3053834265), X64Word_create(2453635748, 2937671579), X64Word_create(2870763221, 3664609560), X64Word_create(3624381080, 2734883394), X64Word_create(310598401, 1164996542), X64Word_create(607225278, 1323610764), X64Word_create(1426881987, 3590304994), X64Word_create(1925078388, 4068182383), X64Word_create(2162078206, 991336113), X64Word_create(2614888103, 633803317), X64Word_create(3248222580, 3479774868), X64Word_create(3835390401, 2666613458), X64Word_create(4022224774, 944711139), X64Word_create(264347078, 2341262773), X64Word_create(604807628, 2007800933), X64Word_create(770255983, 1495990901), X64Word_create(1249150122, 1856431235), X64Word_create(1555081692, 3175218132), X64Word_create(1996064986, 2198950837), X64Word_create(2554220882, 3999719339), X64Word_create(2821834349, 766784016), X64Word_create(2952996808, 2566594879), X64Word_create(3210313671, 3203337956), X64Word_create(3336571891, 1034457026), X64Word_create(3584528711, 2466948901), X64Word_create(113926993, 3758326383), X64Word_create(338241895, 168717936), X64Word_create(666307205, 1188179964), X64Word_create(773529912, 1546045734), X64Word_create(1294757372, 1522805485), X64Word_create(1396182291, 2643833823), X64Word_create(1695183700, 2343527390), X64Word_create(1986661051, 1014477480), X64Word_create(2177026350, 1206759142), X64Word_create(2456956037, 344077627), X64Word_create(2730485921, 1290863460), X64Word_create(2820302411, 3158454273), X64Word_create(3259730800, 3505952657), X64Word_create(3345764771, 106217008), X64Word_create(3516065817, 3606008344), X64Word_create(3600352804, 1432725776), X64Word_create(4094571909, 1467031594), X64Word_create(275423344, 851169720), X64Word_create(430227734, 3100823752), X64Word_create(506948616, 1363258195), X64Word_create(659060556, 3750685593), X64Word_create(883997877, 3785050280), X64Word_create(958139571, 3318307427), X64Word_create(1322822218, 3812723403), X64Word_create(1537002063, 2003034995), X64Word_create(1747873779, 3602036899), X64Word_create(1955562222, 1575990012), X64Word_create(2024104815, 1125592928), X64Word_create(2227730452, 2716904306), X64Word_create(2361852424, 442776044), X64Word_create(2428436474, 593698344), X64Word_create(2756734187, 3733110249), X64Word_create(3204031479, 2999351573), X64Word_create(3329325298, 3815920427), X64Word_create(3391569614, 3928383900), X64Word_create(3515267271, 566280711), X64Word_create(3940187606, 3454069534), X64Word_create(4118630271, 4000239992), X64Word_create(116418474, 1914138554), X64Word_create(174292421, 2731055270), X64Word_create(289380356, 3203993006), X64Word_create(460393269, 320620315), X64Word_create(685471733, 587496836), X64Word_create(852142971, 1086792851), X64Word_create(1017036298, 365543100), X64Word_create(1126000580, 2618297676), X64Word_create(1288033470, 3409855158), X64Word_create(1501505948, 4234509866), X64Word_create(1607167915, 987167468), X64Word_create(1816402316, 1246189591) ];
                    var W = [];
                    (function() {
                        for (var i = 0; i < 80; i++) {
                            W[i] = X64Word_create();
                        }
                    })();
                    var SHA512 = C_algo.SHA512 = Hasher.extend({
                        _doReset: function() {
                            this._hash = new X64WordArray.init([ new X64Word.init(1779033703, 4089235720), new X64Word.init(3144134277, 2227873595), new X64Word.init(1013904242, 4271175723), new X64Word.init(2773480762, 1595750129), new X64Word.init(1359893119, 2917565137), new X64Word.init(2600822924, 725511199), new X64Word.init(528734635, 4215389547), new X64Word.init(1541459225, 327033209) ]);
                        },
                        _doProcessBlock: function(M, offset) {
                            var H = this._hash.words;
                            var H0 = H[0];
                            var H1 = H[1];
                            var H2 = H[2];
                            var H3 = H[3];
                            var H4 = H[4];
                            var H5 = H[5];
                            var H6 = H[6];
                            var H7 = H[7];
                            var H0h = H0.high;
                            var H0l = H0.low;
                            var H1h = H1.high;
                            var H1l = H1.low;
                            var H2h = H2.high;
                            var H2l = H2.low;
                            var H3h = H3.high;
                            var H3l = H3.low;
                            var H4h = H4.high;
                            var H4l = H4.low;
                            var H5h = H5.high;
                            var H5l = H5.low;
                            var H6h = H6.high;
                            var H6l = H6.low;
                            var H7h = H7.high;
                            var H7l = H7.low;
                            var ah = H0h;
                            var al = H0l;
                            var bh = H1h;
                            var bl = H1l;
                            var ch = H2h;
                            var cl = H2l;
                            var dh = H3h;
                            var dl = H3l;
                            var eh = H4h;
                            var el = H4l;
                            var fh = H5h;
                            var fl = H5l;
                            var gh = H6h;
                            var gl = H6l;
                            var hh = H7h;
                            var hl = H7l;
                            for (var i = 0; i < 80; i++) {
                                var Wil;
                                var Wih;
                                var Wi = W[i];
                                if (i < 16) {
                                    Wih = Wi.high = M[offset + i * 2] | 0;
                                    Wil = Wi.low = M[offset + i * 2 + 1] | 0;
                                } else {
                                    var gamma0x = W[i - 15];
                                    var gamma0xh = gamma0x.high;
                                    var gamma0xl = gamma0x.low;
                                    var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                                    var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                                    var gamma1x = W[i - 2];
                                    var gamma1xh = gamma1x.high;
                                    var gamma1xl = gamma1x.low;
                                    var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                                    var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                                    var Wi7 = W[i - 7];
                                    var Wi7h = Wi7.high;
                                    var Wi7l = Wi7.low;
                                    var Wi16 = W[i - 16];
                                    var Wi16h = Wi16.high;
                                    var Wi16l = Wi16.low;
                                    Wil = gamma0l + Wi7l;
                                    Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                                    Wil = Wil + gamma1l;
                                    Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                                    Wil = Wil + Wi16l;
                                    Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                                    Wi.high = Wih;
                                    Wi.low = Wil;
                                }
                                var chh = eh & fh ^ ~eh & gh;
                                var chl = el & fl ^ ~el & gl;
                                var majh = ah & bh ^ ah & ch ^ bh & ch;
                                var majl = al & bl ^ al & cl ^ bl & cl;
                                var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
                                var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
                                var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
                                var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
                                var Ki = K[i];
                                var Kih = Ki.high;
                                var Kil = Ki.low;
                                var t1l = hl + sigma1l;
                                var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
                                var t1l = t1l + chl;
                                var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
                                var t1l = t1l + Kil;
                                var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
                                var t1l = t1l + Wil;
                                var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
                                var t2l = sigma0l + majl;
                                var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
                                hh = gh;
                                hl = gl;
                                gh = fh;
                                gl = fl;
                                fh = eh;
                                fl = el;
                                el = dl + t1l | 0;
                                eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
                                dh = ch;
                                dl = cl;
                                ch = bh;
                                cl = bl;
                                bh = ah;
                                bl = al;
                                al = t1l + t2l | 0;
                                ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
                            }
                            H0l = H0.low = H0l + al;
                            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
                            H1l = H1.low = H1l + bl;
                            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
                            H2l = H2.low = H2l + cl;
                            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
                            H3l = H3.low = H3l + dl;
                            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
                            H4l = H4.low = H4l + el;
                            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
                            H5l = H5.low = H5l + fl;
                            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
                            H6l = H6.low = H6l + gl;
                            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
                            H7l = H7.low = H7l + hl;
                            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
                        },
                        _doFinalize: function() {
                            var data = this._data;
                            var dataWords = data.words;
                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;
                            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
                            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
                            data.sigBytes = dataWords.length * 4;
                            this._process();
                            var hash = this._hash.toX32();
                            return hash;
                        },
                        clone: function() {
                            var clone = Hasher.clone.call(this);
                            clone._hash = this._hash.clone();
                            return clone;
                        },
                        blockSize: 1024 / 32
                    });
                    C.SHA512 = Hasher._createHelper(SHA512);
                    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
                })();
                return CryptoJS.SHA512;
            }));
        })(sha512);
        return sha512Exports;
    }
    var sha384Exports = {};
    var sha384 = {
        get exports() {
            return sha384Exports;
        },
        set exports(v) {
            sha384Exports = v;
        }
    };
    var hasRequiredSha384;
    function requireSha384() {
        if (hasRequiredSha384) return sha384Exports;
        hasRequiredSha384 = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireX64Core(), requireSha512());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_x64 = C.x64;
                    var X64Word = C_x64.Word;
                    var X64WordArray = C_x64.WordArray;
                    var C_algo = C.algo;
                    var SHA512 = C_algo.SHA512;
                    var SHA384 = C_algo.SHA384 = SHA512.extend({
                        _doReset: function() {
                            this._hash = new X64WordArray.init([ new X64Word.init(3418070365, 3238371032), new X64Word.init(1654270250, 914150663), new X64Word.init(2438529370, 812702999), new X64Word.init(355462360, 4144912697), new X64Word.init(1731405415, 4290775857), new X64Word.init(2394180231, 1750603025), new X64Word.init(3675008525, 1694076839), new X64Word.init(1203062813, 3204075428) ]);
                        },
                        _doFinalize: function() {
                            var hash = SHA512._doFinalize.call(this);
                            hash.sigBytes -= 16;
                            return hash;
                        }
                    });
                    C.SHA384 = SHA512._createHelper(SHA384);
                    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
                })();
                return CryptoJS.SHA384;
            }));
        })(sha384);
        return sha384Exports;
    }
    var sha3Exports = {};
    var sha3 = {
        get exports() {
            return sha3Exports;
        },
        set exports(v) {
            sha3Exports = v;
        }
    };
    var hasRequiredSha3;
    function requireSha3() {
        if (hasRequiredSha3) return sha3Exports;
        hasRequiredSha3 = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireX64Core());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function(Math) {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var Hasher = C_lib.Hasher;
                    var C_x64 = C.x64;
                    var X64Word = C_x64.Word;
                    var C_algo = C.algo;
                    var RHO_OFFSETS = [];
                    var PI_INDEXES = [];
                    var ROUND_CONSTANTS = [];
                    (function() {
                        var x = 1, y = 0;
                        for (var t = 0; t < 24; t++) {
                            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
                            var newX = y % 5;
                            var newY = (2 * x + 3 * y) % 5;
                            x = newX;
                            y = newY;
                        }
                        for (var x = 0; x < 5; x++) {
                            for (var y = 0; y < 5; y++) {
                                PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
                            }
                        }
                        var LFSR = 1;
                        for (var i = 0; i < 24; i++) {
                            var roundConstantMsw = 0;
                            var roundConstantLsw = 0;
                            for (var j = 0; j < 7; j++) {
                                if (LFSR & 1) {
                                    var bitPosition = (1 << j) - 1;
                                    if (bitPosition < 32) {
                                        roundConstantLsw ^= 1 << bitPosition;
                                    } else {
                                        roundConstantMsw ^= 1 << bitPosition - 32;
                                    }
                                }
                                if (LFSR & 128) {
                                    LFSR = LFSR << 1 ^ 113;
                                } else {
                                    LFSR <<= 1;
                                }
                            }
                            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
                        }
                    })();
                    var T = [];
                    (function() {
                        for (var i = 0; i < 25; i++) {
                            T[i] = X64Word.create();
                        }
                    })();
                    var SHA3 = C_algo.SHA3 = Hasher.extend({
                        cfg: Hasher.cfg.extend({
                            outputLength: 512
                        }),
                        _doReset: function() {
                            var state = this._state = [];
                            for (var i = 0; i < 25; i++) {
                                state[i] = new X64Word.init;
                            }
                            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                        },
                        _doProcessBlock: function(M, offset) {
                            var state = this._state;
                            var nBlockSizeLanes = this.blockSize / 2;
                            for (var i = 0; i < nBlockSizeLanes; i++) {
                                var M2i = M[offset + 2 * i];
                                var M2i1 = M[offset + 2 * i + 1];
                                M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
                                M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
                                var lane = state[i];
                                lane.high ^= M2i1;
                                lane.low ^= M2i;
                            }
                            for (var round = 0; round < 24; round++) {
                                for (var x = 0; x < 5; x++) {
                                    var tMsw = 0, tLsw = 0;
                                    for (var y = 0; y < 5; y++) {
                                        var lane = state[x + 5 * y];
                                        tMsw ^= lane.high;
                                        tLsw ^= lane.low;
                                    }
                                    var Tx = T[x];
                                    Tx.high = tMsw;
                                    Tx.low = tLsw;
                                }
                                for (var x = 0; x < 5; x++) {
                                    var Tx4 = T[(x + 4) % 5];
                                    var Tx1 = T[(x + 1) % 5];
                                    var Tx1Msw = Tx1.high;
                                    var Tx1Lsw = Tx1.low;
                                    var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                                    var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                                    for (var y = 0; y < 5; y++) {
                                        var lane = state[x + 5 * y];
                                        lane.high ^= tMsw;
                                        lane.low ^= tLsw;
                                    }
                                }
                                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                                    var tMsw;
                                    var tLsw;
                                    var lane = state[laneIndex];
                                    var laneMsw = lane.high;
                                    var laneLsw = lane.low;
                                    var rhoOffset = RHO_OFFSETS[laneIndex];
                                    if (rhoOffset < 32) {
                                        tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                                        tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                                    } else {
                                        tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                                        tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                                    }
                                    var TPiLane = T[PI_INDEXES[laneIndex]];
                                    TPiLane.high = tMsw;
                                    TPiLane.low = tLsw;
                                }
                                var T0 = T[0];
                                var state0 = state[0];
                                T0.high = state0.high;
                                T0.low = state0.low;
                                for (var x = 0; x < 5; x++) {
                                    for (var y = 0; y < 5; y++) {
                                        var laneIndex = x + 5 * y;
                                        var lane = state[laneIndex];
                                        var TLane = T[laneIndex];
                                        var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                                        var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                                        lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                                        lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                                    }
                                }
                                var lane = state[0];
                                var roundConstant = ROUND_CONSTANTS[round];
                                lane.high ^= roundConstant.high;
                                lane.low ^= roundConstant.low;
                            }
                        },
                        _doFinalize: function() {
                            var data = this._data;
                            var dataWords = data.words;
                            this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;
                            var blockSizeBits = this.blockSize * 32;
                            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
                            dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
                            data.sigBytes = dataWords.length * 4;
                            this._process();
                            var state = this._state;
                            var outputLengthBytes = this.cfg.outputLength / 8;
                            var outputLengthLanes = outputLengthBytes / 8;
                            var hashWords = [];
                            for (var i = 0; i < outputLengthLanes; i++) {
                                var lane = state[i];
                                var laneMsw = lane.high;
                                var laneLsw = lane.low;
                                laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
                                laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
                                hashWords.push(laneLsw);
                                hashWords.push(laneMsw);
                            }
                            return new WordArray.init(hashWords, outputLengthBytes);
                        },
                        clone: function() {
                            var clone = Hasher.clone.call(this);
                            var state = clone._state = this._state.slice(0);
                            for (var i = 0; i < 25; i++) {
                                state[i] = state[i].clone();
                            }
                            return clone;
                        }
                    });
                    C.SHA3 = Hasher._createHelper(SHA3);
                    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
                })(Math);
                return CryptoJS.SHA3;
            }));
        })(sha3);
        return sha3Exports;
    }
    var ripemd160Exports = {};
    var ripemd160 = {
        get exports() {
            return ripemd160Exports;
        },
        set exports(v) {
            ripemd160Exports = v;
        }
    };
    var hasRequiredRipemd160;
    function requireRipemd160() {
        if (hasRequiredRipemd160) return ripemd160Exports;
        hasRequiredRipemd160 = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory(requireCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                /** @preserve
				(c) 2012 by Cédric Mesnil. All rights reserved.

				Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

				    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
				    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

				THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*/
                (function(Math) {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var Hasher = C_lib.Hasher;
                    var C_algo = C.algo;
                    var _zl = WordArray.create([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13 ]);
                    var _zr = WordArray.create([ 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11 ]);
                    var _sl = WordArray.create([ 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6 ]);
                    var _sr = WordArray.create([ 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11 ]);
                    var _hl = WordArray.create([ 0, 1518500249, 1859775393, 2400959708, 2840853838 ]);
                    var _hr = WordArray.create([ 1352829926, 1548603684, 1836072691, 2053994217, 0 ]);
                    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
                        _doReset: function() {
                            this._hash = WordArray.create([ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ]);
                        },
                        _doProcessBlock: function(M, offset) {
                            for (var i = 0; i < 16; i++) {
                                var offset_i = offset + i;
                                var M_offset_i = M[offset_i];
                                M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
                            }
                            var H = this._hash.words;
                            var hl = _hl.words;
                            var hr = _hr.words;
                            var zl = _zl.words;
                            var zr = _zr.words;
                            var sl = _sl.words;
                            var sr = _sr.words;
                            var al, bl, cl, dl, el;
                            var ar, br, cr, dr, er;
                            ar = al = H[0];
                            br = bl = H[1];
                            cr = cl = H[2];
                            dr = dl = H[3];
                            er = el = H[4];
                            var t;
                            for (var i = 0; i < 80; i += 1) {
                                t = al + M[offset + zl[i]] | 0;
                                if (i < 16) {
                                    t += f1(bl, cl, dl) + hl[0];
                                } else if (i < 32) {
                                    t += f2(bl, cl, dl) + hl[1];
                                } else if (i < 48) {
                                    t += f3(bl, cl, dl) + hl[2];
                                } else if (i < 64) {
                                    t += f4(bl, cl, dl) + hl[3];
                                } else {
                                    t += f5(bl, cl, dl) + hl[4];
                                }
                                t = t | 0;
                                t = rotl(t, sl[i]);
                                t = t + el | 0;
                                al = el;
                                el = dl;
                                dl = rotl(cl, 10);
                                cl = bl;
                                bl = t;
                                t = ar + M[offset + zr[i]] | 0;
                                if (i < 16) {
                                    t += f5(br, cr, dr) + hr[0];
                                } else if (i < 32) {
                                    t += f4(br, cr, dr) + hr[1];
                                } else if (i < 48) {
                                    t += f3(br, cr, dr) + hr[2];
                                } else if (i < 64) {
                                    t += f2(br, cr, dr) + hr[3];
                                } else {
                                    t += f1(br, cr, dr) + hr[4];
                                }
                                t = t | 0;
                                t = rotl(t, sr[i]);
                                t = t + er | 0;
                                ar = er;
                                er = dr;
                                dr = rotl(cr, 10);
                                cr = br;
                                br = t;
                            }
                            t = H[1] + cl + dr | 0;
                            H[1] = H[2] + dl + er | 0;
                            H[2] = H[3] + el + ar | 0;
                            H[3] = H[4] + al + br | 0;
                            H[4] = H[0] + bl + cr | 0;
                            H[0] = t;
                        },
                        _doFinalize: function() {
                            var data = this._data;
                            var dataWords = data.words;
                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;
                            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
                            data.sigBytes = (dataWords.length + 1) * 4;
                            this._process();
                            var hash = this._hash;
                            var H = hash.words;
                            for (var i = 0; i < 5; i++) {
                                var H_i = H[i];
                                H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
                            }
                            return hash;
                        },
                        clone: function() {
                            var clone = Hasher.clone.call(this);
                            clone._hash = this._hash.clone();
                            return clone;
                        }
                    });
                    function f1(x, y, z) {
                        return x ^ y ^ z;
                    }
                    function f2(x, y, z) {
                        return x & y | ~x & z;
                    }
                    function f3(x, y, z) {
                        return (x | ~y) ^ z;
                    }
                    function f4(x, y, z) {
                        return x & z | y & ~z;
                    }
                    function f5(x, y, z) {
                        return x ^ (y | ~z);
                    }
                    function rotl(x, n) {
                        return x << n | x >>> 32 - n;
                    }
                    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
                    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
                })();
                return CryptoJS.RIPEMD160;
            }));
        })(ripemd160);
        return ripemd160Exports;
    }
    var hmacExports = {};
    var hmac = {
        get exports() {
            return hmacExports;
        },
        set exports(v) {
            hmacExports = v;
        }
    };
    var hasRequiredHmac;
    function requireHmac() {
        if (hasRequiredHmac) return hmacExports;
        hasRequiredHmac = 1;
        (function(module, exports) {
            (function(root, factory) {
                {
                    module.exports = factory(requireCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Base = C_lib.Base;
                    var C_enc = C.enc;
                    var Utf8 = C_enc.Utf8;
                    var C_algo = C.algo;
                    C_algo.HMAC = Base.extend({
                        init: function(hasher, key) {
                            hasher = this._hasher = new hasher.init;
                            if (typeof key == "string") {
                                key = Utf8.parse(key);
                            }
                            var hasherBlockSize = hasher.blockSize;
                            var hasherBlockSizeBytes = hasherBlockSize * 4;
                            if (key.sigBytes > hasherBlockSizeBytes) {
                                key = hasher.finalize(key);
                            }
                            key.clamp();
                            var oKey = this._oKey = key.clone();
                            var iKey = this._iKey = key.clone();
                            var oKeyWords = oKey.words;
                            var iKeyWords = iKey.words;
                            for (var i = 0; i < hasherBlockSize; i++) {
                                oKeyWords[i] ^= 1549556828;
                                iKeyWords[i] ^= 909522486;
                            }
                            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
                            this.reset();
                        },
                        reset: function() {
                            var hasher = this._hasher;
                            hasher.reset();
                            hasher.update(this._iKey);
                        },
                        update: function(messageUpdate) {
                            this._hasher.update(messageUpdate);
                            return this;
                        },
                        finalize: function(messageUpdate) {
                            var hasher = this._hasher;
                            var innerHash = hasher.finalize(messageUpdate);
                            hasher.reset();
                            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
                            return hmac;
                        }
                    });
                })();
            }));
        })(hmac);
        return hmacExports;
    }
    var pbkdf2Exports = {};
    var pbkdf2 = {
        get exports() {
            return pbkdf2Exports;
        },
        set exports(v) {
            pbkdf2Exports = v;
        }
    };
    var hasRequiredPbkdf2;
    function requirePbkdf2() {
        if (hasRequiredPbkdf2) return pbkdf2Exports;
        hasRequiredPbkdf2 = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireSha1(), requireHmac());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Base = C_lib.Base;
                    var WordArray = C_lib.WordArray;
                    var C_algo = C.algo;
                    var SHA1 = C_algo.SHA1;
                    var HMAC = C_algo.HMAC;
                    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
                        cfg: Base.extend({
                            keySize: 128 / 32,
                            hasher: SHA1,
                            iterations: 1
                        }),
                        init: function(cfg) {
                            this.cfg = this.cfg.extend(cfg);
                        },
                        compute: function(password, salt) {
                            var cfg = this.cfg;
                            var hmac = HMAC.create(cfg.hasher, password);
                            var derivedKey = WordArray.create();
                            var blockIndex = WordArray.create([ 1 ]);
                            var derivedKeyWords = derivedKey.words;
                            var blockIndexWords = blockIndex.words;
                            var keySize = cfg.keySize;
                            var iterations = cfg.iterations;
                            while (derivedKeyWords.length < keySize) {
                                var block = hmac.update(salt).finalize(blockIndex);
                                hmac.reset();
                                var blockWords = block.words;
                                var blockWordsLength = blockWords.length;
                                var intermediate = block;
                                for (var i = 1; i < iterations; i++) {
                                    intermediate = hmac.finalize(intermediate);
                                    hmac.reset();
                                    var intermediateWords = intermediate.words;
                                    for (var j = 0; j < blockWordsLength; j++) {
                                        blockWords[j] ^= intermediateWords[j];
                                    }
                                }
                                derivedKey.concat(block);
                                blockIndexWords[0]++;
                            }
                            derivedKey.sigBytes = keySize * 4;
                            return derivedKey;
                        }
                    });
                    C.PBKDF2 = function(password, salt, cfg) {
                        return PBKDF2.create(cfg).compute(password, salt);
                    };
                })();
                return CryptoJS.PBKDF2;
            }));
        })(pbkdf2);
        return pbkdf2Exports;
    }
    var evpkdfExports = {};
    var evpkdf = {
        get exports() {
            return evpkdfExports;
        },
        set exports(v) {
            evpkdfExports = v;
        }
    };
    var hasRequiredEvpkdf;
    function requireEvpkdf() {
        if (hasRequiredEvpkdf) return evpkdfExports;
        hasRequiredEvpkdf = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireSha1(), requireHmac());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Base = C_lib.Base;
                    var WordArray = C_lib.WordArray;
                    var C_algo = C.algo;
                    var MD5 = C_algo.MD5;
                    var EvpKDF = C_algo.EvpKDF = Base.extend({
                        cfg: Base.extend({
                            keySize: 128 / 32,
                            hasher: MD5,
                            iterations: 1
                        }),
                        init: function(cfg) {
                            this.cfg = this.cfg.extend(cfg);
                        },
                        compute: function(password, salt) {
                            var block;
                            var cfg = this.cfg;
                            var hasher = cfg.hasher.create();
                            var derivedKey = WordArray.create();
                            var derivedKeyWords = derivedKey.words;
                            var keySize = cfg.keySize;
                            var iterations = cfg.iterations;
                            while (derivedKeyWords.length < keySize) {
                                if (block) {
                                    hasher.update(block);
                                }
                                block = hasher.update(password).finalize(salt);
                                hasher.reset();
                                for (var i = 1; i < iterations; i++) {
                                    block = hasher.finalize(block);
                                    hasher.reset();
                                }
                                derivedKey.concat(block);
                            }
                            derivedKey.sigBytes = keySize * 4;
                            return derivedKey;
                        }
                    });
                    C.EvpKDF = function(password, salt, cfg) {
                        return EvpKDF.create(cfg).compute(password, salt);
                    };
                })();
                return CryptoJS.EvpKDF;
            }));
        })(evpkdf);
        return evpkdfExports;
    }
    var cipherCoreExports = {};
    var cipherCore = {
        get exports() {
            return cipherCoreExports;
        },
        set exports(v) {
            cipherCoreExports = v;
        }
    };
    var hasRequiredCipherCore;
    function requireCipherCore() {
        if (hasRequiredCipherCore) return cipherCoreExports;
        hasRequiredCipherCore = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireEvpkdf());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                CryptoJS.lib.Cipher || function(undefined$1) {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Base = C_lib.Base;
                    var WordArray = C_lib.WordArray;
                    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
                    var C_enc = C.enc;
                    C_enc.Utf8;
                    var Base64 = C_enc.Base64;
                    var C_algo = C.algo;
                    var EvpKDF = C_algo.EvpKDF;
                    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
                        cfg: Base.extend(),
                        createEncryptor: function(key, cfg) {
                            return this.create(this._ENC_XFORM_MODE, key, cfg);
                        },
                        createDecryptor: function(key, cfg) {
                            return this.create(this._DEC_XFORM_MODE, key, cfg);
                        },
                        init: function(xformMode, key, cfg) {
                            this.cfg = this.cfg.extend(cfg);
                            this._xformMode = xformMode;
                            this._key = key;
                            this.reset();
                        },
                        reset: function() {
                            BufferedBlockAlgorithm.reset.call(this);
                            this._doReset();
                        },
                        process: function(dataUpdate) {
                            this._append(dataUpdate);
                            return this._process();
                        },
                        finalize: function(dataUpdate) {
                            if (dataUpdate) {
                                this._append(dataUpdate);
                            }
                            var finalProcessedData = this._doFinalize();
                            return finalProcessedData;
                        },
                        keySize: 128 / 32,
                        ivSize: 128 / 32,
                        _ENC_XFORM_MODE: 1,
                        _DEC_XFORM_MODE: 2,
                        _createHelper: function() {
                            function selectCipherStrategy(key) {
                                if (typeof key == "string") {
                                    return PasswordBasedCipher;
                                } else {
                                    return SerializableCipher;
                                }
                            }
                            return function(cipher) {
                                return {
                                    encrypt: function(message, key, cfg) {
                                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                                    },
                                    decrypt: function(ciphertext, key, cfg) {
                                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                                    }
                                };
                            };
                        }()
                    });
                    C_lib.StreamCipher = Cipher.extend({
                        _doFinalize: function() {
                            var finalProcessedBlocks = this._process(!!"flush");
                            return finalProcessedBlocks;
                        },
                        blockSize: 1
                    });
                    var C_mode = C.mode = {};
                    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
                        createEncryptor: function(cipher, iv) {
                            return this.Encryptor.create(cipher, iv);
                        },
                        createDecryptor: function(cipher, iv) {
                            return this.Decryptor.create(cipher, iv);
                        },
                        init: function(cipher, iv) {
                            this._cipher = cipher;
                            this._iv = iv;
                        }
                    });
                    var CBC = C_mode.CBC = function() {
                        var CBC = BlockCipherMode.extend();
                        CBC.Encryptor = CBC.extend({
                            processBlock: function(words, offset) {
                                var cipher = this._cipher;
                                var blockSize = cipher.blockSize;
                                xorBlock.call(this, words, offset, blockSize);
                                cipher.encryptBlock(words, offset);
                                this._prevBlock = words.slice(offset, offset + blockSize);
                            }
                        });
                        CBC.Decryptor = CBC.extend({
                            processBlock: function(words, offset) {
                                var cipher = this._cipher;
                                var blockSize = cipher.blockSize;
                                var thisBlock = words.slice(offset, offset + blockSize);
                                cipher.decryptBlock(words, offset);
                                xorBlock.call(this, words, offset, blockSize);
                                this._prevBlock = thisBlock;
                            }
                        });
                        function xorBlock(words, offset, blockSize) {
                            var block;
                            var iv = this._iv;
                            if (iv) {
                                block = iv;
                                this._iv = undefined$1;
                            } else {
                                block = this._prevBlock;
                            }
                            for (var i = 0; i < blockSize; i++) {
                                words[offset + i] ^= block[i];
                            }
                        }
                        return CBC;
                    }();
                    var C_pad = C.pad = {};
                    var Pkcs7 = C_pad.Pkcs7 = {
                        pad: function(data, blockSize) {
                            var blockSizeBytes = blockSize * 4;
                            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
                            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
                            var paddingWords = [];
                            for (var i = 0; i < nPaddingBytes; i += 4) {
                                paddingWords.push(paddingWord);
                            }
                            var padding = WordArray.create(paddingWords, nPaddingBytes);
                            data.concat(padding);
                        },
                        unpad: function(data) {
                            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
                            data.sigBytes -= nPaddingBytes;
                        }
                    };
                    C_lib.BlockCipher = Cipher.extend({
                        cfg: Cipher.cfg.extend({
                            mode: CBC,
                            padding: Pkcs7
                        }),
                        reset: function() {
                            var modeCreator;
                            Cipher.reset.call(this);
                            var cfg = this.cfg;
                            var iv = cfg.iv;
                            var mode = cfg.mode;
                            if (this._xformMode == this._ENC_XFORM_MODE) {
                                modeCreator = mode.createEncryptor;
                            } else {
                                modeCreator = mode.createDecryptor;
                                this._minBufferSize = 1;
                            }
                            if (this._mode && this._mode.__creator == modeCreator) {
                                this._mode.init(this, iv && iv.words);
                            } else {
                                this._mode = modeCreator.call(mode, this, iv && iv.words);
                                this._mode.__creator = modeCreator;
                            }
                        },
                        _doProcessBlock: function(words, offset) {
                            this._mode.processBlock(words, offset);
                        },
                        _doFinalize: function() {
                            var finalProcessedBlocks;
                            var padding = this.cfg.padding;
                            if (this._xformMode == this._ENC_XFORM_MODE) {
                                padding.pad(this._data, this.blockSize);
                                finalProcessedBlocks = this._process(!!"flush");
                            } else {
                                finalProcessedBlocks = this._process(!!"flush");
                                padding.unpad(finalProcessedBlocks);
                            }
                            return finalProcessedBlocks;
                        },
                        blockSize: 128 / 32
                    });
                    var CipherParams = C_lib.CipherParams = Base.extend({
                        init: function(cipherParams) {
                            this.mixIn(cipherParams);
                        },
                        toString: function(formatter) {
                            return (formatter || this.formatter).stringify(this);
                        }
                    });
                    var C_format = C.format = {};
                    var OpenSSLFormatter = C_format.OpenSSL = {
                        stringify: function(cipherParams) {
                            var wordArray;
                            var ciphertext = cipherParams.ciphertext;
                            var salt = cipherParams.salt;
                            if (salt) {
                                wordArray = WordArray.create([ 1398893684, 1701076831 ]).concat(salt).concat(ciphertext);
                            } else {
                                wordArray = ciphertext;
                            }
                            return wordArray.toString(Base64);
                        },
                        parse: function(openSSLStr) {
                            var salt;
                            var ciphertext = Base64.parse(openSSLStr);
                            var ciphertextWords = ciphertext.words;
                            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
                                salt = WordArray.create(ciphertextWords.slice(2, 4));
                                ciphertextWords.splice(0, 4);
                                ciphertext.sigBytes -= 16;
                            }
                            return CipherParams.create({
                                ciphertext: ciphertext,
                                salt: salt
                            });
                        }
                    };
                    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
                        cfg: Base.extend({
                            format: OpenSSLFormatter
                        }),
                        encrypt: function(cipher, message, key, cfg) {
                            cfg = this.cfg.extend(cfg);
                            var encryptor = cipher.createEncryptor(key, cfg);
                            var ciphertext = encryptor.finalize(message);
                            var cipherCfg = encryptor.cfg;
                            return CipherParams.create({
                                ciphertext: ciphertext,
                                key: key,
                                iv: cipherCfg.iv,
                                algorithm: cipher,
                                mode: cipherCfg.mode,
                                padding: cipherCfg.padding,
                                blockSize: cipher.blockSize,
                                formatter: cfg.format
                            });
                        },
                        decrypt: function(cipher, ciphertext, key, cfg) {
                            cfg = this.cfg.extend(cfg);
                            ciphertext = this._parse(ciphertext, cfg.format);
                            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
                            return plaintext;
                        },
                        _parse: function(ciphertext, format) {
                            if (typeof ciphertext == "string") {
                                return format.parse(ciphertext, this);
                            } else {
                                return ciphertext;
                            }
                        }
                    });
                    var C_kdf = C.kdf = {};
                    var OpenSSLKdf = C_kdf.OpenSSL = {
                        execute: function(password, keySize, ivSize, salt) {
                            if (!salt) {
                                salt = WordArray.random(64 / 8);
                            }
                            var key = EvpKDF.create({
                                keySize: keySize + ivSize
                            }).compute(password, salt);
                            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
                            key.sigBytes = keySize * 4;
                            return CipherParams.create({
                                key: key,
                                iv: iv,
                                salt: salt
                            });
                        }
                    };
                    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
                        cfg: SerializableCipher.cfg.extend({
                            kdf: OpenSSLKdf
                        }),
                        encrypt: function(cipher, message, password, cfg) {
                            cfg = this.cfg.extend(cfg);
                            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
                            cfg.iv = derivedParams.iv;
                            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
                            ciphertext.mixIn(derivedParams);
                            return ciphertext;
                        },
                        decrypt: function(cipher, ciphertext, password, cfg) {
                            cfg = this.cfg.extend(cfg);
                            ciphertext = this._parse(ciphertext, cfg.format);
                            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
                            cfg.iv = derivedParams.iv;
                            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
                            return plaintext;
                        }
                    });
                }();
            }));
        })(cipherCore);
        return cipherCoreExports;
    }
    var modeCfbExports = {};
    var modeCfb = {
        get exports() {
            return modeCfbExports;
        },
        set exports(v) {
            modeCfbExports = v;
        }
    };
    var hasRequiredModeCfb;
    function requireModeCfb() {
        if (hasRequiredModeCfb) return modeCfbExports;
        hasRequiredModeCfb = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                CryptoJS.mode.CFB = function() {
                    var CFB = CryptoJS.lib.BlockCipherMode.extend();
                    CFB.Encryptor = CFB.extend({
                        processBlock: function(words, offset) {
                            var cipher = this._cipher;
                            var blockSize = cipher.blockSize;
                            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
                            this._prevBlock = words.slice(offset, offset + blockSize);
                        }
                    });
                    CFB.Decryptor = CFB.extend({
                        processBlock: function(words, offset) {
                            var cipher = this._cipher;
                            var blockSize = cipher.blockSize;
                            var thisBlock = words.slice(offset, offset + blockSize);
                            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
                            this._prevBlock = thisBlock;
                        }
                    });
                    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
                        var keystream;
                        var iv = this._iv;
                        if (iv) {
                            keystream = iv.slice(0);
                            this._iv = undefined;
                        } else {
                            keystream = this._prevBlock;
                        }
                        cipher.encryptBlock(keystream, 0);
                        for (var i = 0; i < blockSize; i++) {
                            words[offset + i] ^= keystream[i];
                        }
                    }
                    return CFB;
                }();
                return CryptoJS.mode.CFB;
            }));
        })(modeCfb);
        return modeCfbExports;
    }
    var modeCtrExports = {};
    var modeCtr = {
        get exports() {
            return modeCtrExports;
        },
        set exports(v) {
            modeCtrExports = v;
        }
    };
    var hasRequiredModeCtr;
    function requireModeCtr() {
        if (hasRequiredModeCtr) return modeCtrExports;
        hasRequiredModeCtr = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                CryptoJS.mode.CTR = function() {
                    var CTR = CryptoJS.lib.BlockCipherMode.extend();
                    var Encryptor = CTR.Encryptor = CTR.extend({
                        processBlock: function(words, offset) {
                            var cipher = this._cipher;
                            var blockSize = cipher.blockSize;
                            var iv = this._iv;
                            var counter = this._counter;
                            if (iv) {
                                counter = this._counter = iv.slice(0);
                                this._iv = undefined;
                            }
                            var keystream = counter.slice(0);
                            cipher.encryptBlock(keystream, 0);
                            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
                            for (var i = 0; i < blockSize; i++) {
                                words[offset + i] ^= keystream[i];
                            }
                        }
                    });
                    CTR.Decryptor = Encryptor;
                    return CTR;
                }();
                return CryptoJS.mode.CTR;
            }));
        })(modeCtr);
        return modeCtrExports;
    }
    var modeCtrGladmanExports = {};
    var modeCtrGladman = {
        get exports() {
            return modeCtrGladmanExports;
        },
        set exports(v) {
            modeCtrGladmanExports = v;
        }
    };
    var hasRequiredModeCtrGladman;
    function requireModeCtrGladman() {
        if (hasRequiredModeCtrGladman) return modeCtrGladmanExports;
        hasRequiredModeCtrGladman = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                /** @preserve
				 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
				 * derived from CryptoJS.mode.CTR
				 * Jan Hruby jhruby.web@gmail.com
				 */
                CryptoJS.mode.CTRGladman = function() {
                    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
                    function incWord(word) {
                        if ((word >> 24 & 255) === 255) {
                            var b1 = word >> 16 & 255;
                            var b2 = word >> 8 & 255;
                            var b3 = word & 255;
                            if (b1 === 255) {
                                b1 = 0;
                                if (b2 === 255) {
                                    b2 = 0;
                                    if (b3 === 255) {
                                        b3 = 0;
                                    } else {
                                        ++b3;
                                    }
                                } else {
                                    ++b2;
                                }
                            } else {
                                ++b1;
                            }
                            word = 0;
                            word += b1 << 16;
                            word += b2 << 8;
                            word += b3;
                        } else {
                            word += 1 << 24;
                        }
                        return word;
                    }
                    function incCounter(counter) {
                        if ((counter[0] = incWord(counter[0])) === 0) {
                            counter[1] = incWord(counter[1]);
                        }
                        return counter;
                    }
                    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
                        processBlock: function(words, offset) {
                            var cipher = this._cipher;
                            var blockSize = cipher.blockSize;
                            var iv = this._iv;
                            var counter = this._counter;
                            if (iv) {
                                counter = this._counter = iv.slice(0);
                                this._iv = undefined;
                            }
                            incCounter(counter);
                            var keystream = counter.slice(0);
                            cipher.encryptBlock(keystream, 0);
                            for (var i = 0; i < blockSize; i++) {
                                words[offset + i] ^= keystream[i];
                            }
                        }
                    });
                    CTRGladman.Decryptor = Encryptor;
                    return CTRGladman;
                }();
                return CryptoJS.mode.CTRGladman;
            }));
        })(modeCtrGladman);
        return modeCtrGladmanExports;
    }
    var modeOfbExports = {};
    var modeOfb = {
        get exports() {
            return modeOfbExports;
        },
        set exports(v) {
            modeOfbExports = v;
        }
    };
    var hasRequiredModeOfb;
    function requireModeOfb() {
        if (hasRequiredModeOfb) return modeOfbExports;
        hasRequiredModeOfb = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                CryptoJS.mode.OFB = function() {
                    var OFB = CryptoJS.lib.BlockCipherMode.extend();
                    var Encryptor = OFB.Encryptor = OFB.extend({
                        processBlock: function(words, offset) {
                            var cipher = this._cipher;
                            var blockSize = cipher.blockSize;
                            var iv = this._iv;
                            var keystream = this._keystream;
                            if (iv) {
                                keystream = this._keystream = iv.slice(0);
                                this._iv = undefined;
                            }
                            cipher.encryptBlock(keystream, 0);
                            for (var i = 0; i < blockSize; i++) {
                                words[offset + i] ^= keystream[i];
                            }
                        }
                    });
                    OFB.Decryptor = Encryptor;
                    return OFB;
                }();
                return CryptoJS.mode.OFB;
            }));
        })(modeOfb);
        return modeOfbExports;
    }
    var modeEcbExports = {};
    var modeEcb = {
        get exports() {
            return modeEcbExports;
        },
        set exports(v) {
            modeEcbExports = v;
        }
    };
    var hasRequiredModeEcb;
    function requireModeEcb() {
        if (hasRequiredModeEcb) return modeEcbExports;
        hasRequiredModeEcb = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                CryptoJS.mode.ECB = function() {
                    var ECB = CryptoJS.lib.BlockCipherMode.extend();
                    ECB.Encryptor = ECB.extend({
                        processBlock: function(words, offset) {
                            this._cipher.encryptBlock(words, offset);
                        }
                    });
                    ECB.Decryptor = ECB.extend({
                        processBlock: function(words, offset) {
                            this._cipher.decryptBlock(words, offset);
                        }
                    });
                    return ECB;
                }();
                return CryptoJS.mode.ECB;
            }));
        })(modeEcb);
        return modeEcbExports;
    }
    var padAnsix923Exports = {};
    var padAnsix923 = {
        get exports() {
            return padAnsix923Exports;
        },
        set exports(v) {
            padAnsix923Exports = v;
        }
    };
    var hasRequiredPadAnsix923;
    function requirePadAnsix923() {
        if (hasRequiredPadAnsix923) return padAnsix923Exports;
        hasRequiredPadAnsix923 = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                CryptoJS.pad.AnsiX923 = {
                    pad: function(data, blockSize) {
                        var dataSigBytes = data.sigBytes;
                        var blockSizeBytes = blockSize * 4;
                        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
                        var lastBytePos = dataSigBytes + nPaddingBytes - 1;
                        data.clamp();
                        data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
                        data.sigBytes += nPaddingBytes;
                    },
                    unpad: function(data) {
                        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
                        data.sigBytes -= nPaddingBytes;
                    }
                };
                return CryptoJS.pad.Ansix923;
            }));
        })(padAnsix923);
        return padAnsix923Exports;
    }
    var padIso10126Exports = {};
    var padIso10126 = {
        get exports() {
            return padIso10126Exports;
        },
        set exports(v) {
            padIso10126Exports = v;
        }
    };
    var hasRequiredPadIso10126;
    function requirePadIso10126() {
        if (hasRequiredPadIso10126) return padIso10126Exports;
        hasRequiredPadIso10126 = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                CryptoJS.pad.Iso10126 = {
                    pad: function(data, blockSize) {
                        var blockSizeBytes = blockSize * 4;
                        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
                        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([ nPaddingBytes << 24 ], 1));
                    },
                    unpad: function(data) {
                        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
                        data.sigBytes -= nPaddingBytes;
                    }
                };
                return CryptoJS.pad.Iso10126;
            }));
        })(padIso10126);
        return padIso10126Exports;
    }
    var padIso97971Exports = {};
    var padIso97971 = {
        get exports() {
            return padIso97971Exports;
        },
        set exports(v) {
            padIso97971Exports = v;
        }
    };
    var hasRequiredPadIso97971;
    function requirePadIso97971() {
        if (hasRequiredPadIso97971) return padIso97971Exports;
        hasRequiredPadIso97971 = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                CryptoJS.pad.Iso97971 = {
                    pad: function(data, blockSize) {
                        data.concat(CryptoJS.lib.WordArray.create([ 2147483648 ], 1));
                        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
                    },
                    unpad: function(data) {
                        CryptoJS.pad.ZeroPadding.unpad(data);
                        data.sigBytes--;
                    }
                };
                return CryptoJS.pad.Iso97971;
            }));
        })(padIso97971);
        return padIso97971Exports;
    }
    var padZeropaddingExports = {};
    var padZeropadding = {
        get exports() {
            return padZeropaddingExports;
        },
        set exports(v) {
            padZeropaddingExports = v;
        }
    };
    var hasRequiredPadZeropadding;
    function requirePadZeropadding() {
        if (hasRequiredPadZeropadding) return padZeropaddingExports;
        hasRequiredPadZeropadding = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                CryptoJS.pad.ZeroPadding = {
                    pad: function(data, blockSize) {
                        var blockSizeBytes = blockSize * 4;
                        data.clamp();
                        data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
                    },
                    unpad: function(data) {
                        var dataWords = data.words;
                        var i = data.sigBytes - 1;
                        for (var i = data.sigBytes - 1; i >= 0; i--) {
                            if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255) {
                                data.sigBytes = i + 1;
                                break;
                            }
                        }
                    }
                };
                return CryptoJS.pad.ZeroPadding;
            }));
        })(padZeropadding);
        return padZeropaddingExports;
    }
    var padNopaddingExports = {};
    var padNopadding = {
        get exports() {
            return padNopaddingExports;
        },
        set exports(v) {
            padNopaddingExports = v;
        }
    };
    var hasRequiredPadNopadding;
    function requirePadNopadding() {
        if (hasRequiredPadNopadding) return padNopaddingExports;
        hasRequiredPadNopadding = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                CryptoJS.pad.NoPadding = {
                    pad: function() {},
                    unpad: function() {}
                };
                return CryptoJS.pad.NoPadding;
            }));
        })(padNopadding);
        return padNopaddingExports;
    }
    var formatHexExports = {};
    var formatHex = {
        get exports() {
            return formatHexExports;
        },
        set exports(v) {
            formatHexExports = v;
        }
    };
    var hasRequiredFormatHex;
    function requireFormatHex() {
        if (hasRequiredFormatHex) return formatHexExports;
        hasRequiredFormatHex = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function(undefined$1) {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var CipherParams = C_lib.CipherParams;
                    var C_enc = C.enc;
                    var Hex = C_enc.Hex;
                    var C_format = C.format;
                    C_format.Hex = {
                        stringify: function(cipherParams) {
                            return cipherParams.ciphertext.toString(Hex);
                        },
                        parse: function(input) {
                            var ciphertext = Hex.parse(input);
                            return CipherParams.create({
                                ciphertext: ciphertext
                            });
                        }
                    };
                })();
                return CryptoJS.format.Hex;
            }));
        })(formatHex);
        return formatHexExports;
    }
    var aesExports = {};
    var aes = {
        get exports() {
            return aesExports;
        },
        set exports(v) {
            aesExports = v;
        }
    };
    var hasRequiredAes;
    function requireAes() {
        if (hasRequiredAes) return aesExports;
        hasRequiredAes = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var BlockCipher = C_lib.BlockCipher;
                    var C_algo = C.algo;
                    var SBOX = [];
                    var INV_SBOX = [];
                    var SUB_MIX_0 = [];
                    var SUB_MIX_1 = [];
                    var SUB_MIX_2 = [];
                    var SUB_MIX_3 = [];
                    var INV_SUB_MIX_0 = [];
                    var INV_SUB_MIX_1 = [];
                    var INV_SUB_MIX_2 = [];
                    var INV_SUB_MIX_3 = [];
                    (function() {
                        var d = [];
                        for (var i = 0; i < 256; i++) {
                            if (i < 128) {
                                d[i] = i << 1;
                            } else {
                                d[i] = i << 1 ^ 283;
                            }
                        }
                        var x = 0;
                        var xi = 0;
                        for (var i = 0; i < 256; i++) {
                            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
                            sx = sx >>> 8 ^ sx & 255 ^ 99;
                            SBOX[x] = sx;
                            INV_SBOX[sx] = x;
                            var x2 = d[x];
                            var x4 = d[x2];
                            var x8 = d[x4];
                            var t = d[sx] * 257 ^ sx * 16843008;
                            SUB_MIX_0[x] = t << 24 | t >>> 8;
                            SUB_MIX_1[x] = t << 16 | t >>> 16;
                            SUB_MIX_2[x] = t << 8 | t >>> 24;
                            SUB_MIX_3[x] = t;
                            var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
                            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
                            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
                            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
                            INV_SUB_MIX_3[sx] = t;
                            if (!x) {
                                x = xi = 1;
                            } else {
                                x = x2 ^ d[d[d[x8 ^ x2]]];
                                xi ^= d[d[xi]];
                            }
                        }
                    })();
                    var RCON = [ 0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54 ];
                    var AES = C_algo.AES = BlockCipher.extend({
                        _doReset: function() {
                            var t;
                            if (this._nRounds && this._keyPriorReset === this._key) {
                                return;
                            }
                            var key = this._keyPriorReset = this._key;
                            var keyWords = key.words;
                            var keySize = key.sigBytes / 4;
                            var nRounds = this._nRounds = keySize + 6;
                            var ksRows = (nRounds + 1) * 4;
                            var keySchedule = this._keySchedule = [];
                            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                                if (ksRow < keySize) {
                                    keySchedule[ksRow] = keyWords[ksRow];
                                } else {
                                    t = keySchedule[ksRow - 1];
                                    if (!(ksRow % keySize)) {
                                        t = t << 8 | t >>> 24;
                                        t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                                        t ^= RCON[ksRow / keySize | 0] << 24;
                                    } else if (keySize > 6 && ksRow % keySize == 4) {
                                        t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                                    }
                                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                                }
                            }
                            var invKeySchedule = this._invKeySchedule = [];
                            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                                var ksRow = ksRows - invKsRow;
                                if (invKsRow % 4) {
                                    var t = keySchedule[ksRow];
                                } else {
                                    var t = keySchedule[ksRow - 4];
                                }
                                if (invKsRow < 4 || ksRow <= 4) {
                                    invKeySchedule[invKsRow] = t;
                                } else {
                                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
                                }
                            }
                        },
                        encryptBlock: function(M, offset) {
                            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
                        },
                        decryptBlock: function(M, offset) {
                            var t = M[offset + 1];
                            M[offset + 1] = M[offset + 3];
                            M[offset + 3] = t;
                            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                            var t = M[offset + 1];
                            M[offset + 1] = M[offset + 3];
                            M[offset + 3] = t;
                        },
                        _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
                            var nRounds = this._nRounds;
                            var s0 = M[offset] ^ keySchedule[0];
                            var s1 = M[offset + 1] ^ keySchedule[1];
                            var s2 = M[offset + 2] ^ keySchedule[2];
                            var s3 = M[offset + 3] ^ keySchedule[3];
                            var ksRow = 4;
                            for (var round = 1; round < nRounds; round++) {
                                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 255] ^ SUB_MIX_2[s2 >>> 8 & 255] ^ SUB_MIX_3[s3 & 255] ^ keySchedule[ksRow++];
                                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 255] ^ SUB_MIX_2[s3 >>> 8 & 255] ^ SUB_MIX_3[s0 & 255] ^ keySchedule[ksRow++];
                                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 255] ^ SUB_MIX_2[s0 >>> 8 & 255] ^ SUB_MIX_3[s1 & 255] ^ keySchedule[ksRow++];
                                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 255] ^ SUB_MIX_2[s1 >>> 8 & 255] ^ SUB_MIX_3[s2 & 255] ^ keySchedule[ksRow++];
                                s0 = t0;
                                s1 = t1;
                                s2 = t2;
                                s3 = t3;
                            }
                            var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
                            var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
                            var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
                            var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
                            M[offset] = t0;
                            M[offset + 1] = t1;
                            M[offset + 2] = t2;
                            M[offset + 3] = t3;
                        },
                        keySize: 256 / 32
                    });
                    C.AES = BlockCipher._createHelper(AES);
                })();
                return CryptoJS.AES;
            }));
        })(aes);
        return aesExports;
    }
    var tripledesExports = {};
    var tripledes = {
        get exports() {
            return tripledesExports;
        },
        set exports(v) {
            tripledesExports = v;
        }
    };
    var hasRequiredTripledes;
    function requireTripledes() {
        if (hasRequiredTripledes) return tripledesExports;
        hasRequiredTripledes = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var BlockCipher = C_lib.BlockCipher;
                    var C_algo = C.algo;
                    var PC1 = [ 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 ];
                    var PC2 = [ 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 ];
                    var BIT_SHIFTS = [ 1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28 ];
                    var SBOX_P = [ {
                        0: 8421888,
                        268435456: 32768,
                        536870912: 8421378,
                        805306368: 2,
                        1073741824: 512,
                        1342177280: 8421890,
                        1610612736: 8389122,
                        1879048192: 8388608,
                        2147483648: 514,
                        2415919104: 8389120,
                        2684354560: 33280,
                        2952790016: 8421376,
                        3221225472: 32770,
                        3489660928: 8388610,
                        3758096384: 0,
                        4026531840: 33282,
                        134217728: 0,
                        402653184: 8421890,
                        671088640: 33282,
                        939524096: 32768,
                        1207959552: 8421888,
                        1476395008: 512,
                        1744830464: 8421378,
                        2013265920: 2,
                        2281701376: 8389120,
                        2550136832: 33280,
                        2818572288: 8421376,
                        3087007744: 8389122,
                        3355443200: 8388610,
                        3623878656: 32770,
                        3892314112: 514,
                        4160749568: 8388608,
                        1: 32768,
                        268435457: 2,
                        536870913: 8421888,
                        805306369: 8388608,
                        1073741825: 8421378,
                        1342177281: 33280,
                        1610612737: 512,
                        1879048193: 8389122,
                        2147483649: 8421890,
                        2415919105: 8421376,
                        2684354561: 8388610,
                        2952790017: 33282,
                        3221225473: 514,
                        3489660929: 8389120,
                        3758096385: 32770,
                        4026531841: 0,
                        134217729: 8421890,
                        402653185: 8421376,
                        671088641: 8388608,
                        939524097: 512,
                        1207959553: 32768,
                        1476395009: 8388610,
                        1744830465: 2,
                        2013265921: 33282,
                        2281701377: 32770,
                        2550136833: 8389122,
                        2818572289: 514,
                        3087007745: 8421888,
                        3355443201: 8389120,
                        3623878657: 0,
                        3892314113: 33280,
                        4160749569: 8421378
                    }, {
                        0: 1074282512,
                        16777216: 16384,
                        33554432: 524288,
                        50331648: 1074266128,
                        67108864: 1073741840,
                        83886080: 1074282496,
                        100663296: 1073758208,
                        117440512: 16,
                        134217728: 540672,
                        150994944: 1073758224,
                        167772160: 1073741824,
                        184549376: 540688,
                        201326592: 524304,
                        218103808: 0,
                        234881024: 16400,
                        251658240: 1074266112,
                        8388608: 1073758208,
                        25165824: 540688,
                        41943040: 16,
                        58720256: 1073758224,
                        75497472: 1074282512,
                        92274688: 1073741824,
                        109051904: 524288,
                        125829120: 1074266128,
                        142606336: 524304,
                        159383552: 0,
                        176160768: 16384,
                        192937984: 1074266112,
                        209715200: 1073741840,
                        226492416: 540672,
                        243269632: 1074282496,
                        260046848: 16400,
                        268435456: 0,
                        285212672: 1074266128,
                        301989888: 1073758224,
                        318767104: 1074282496,
                        335544320: 1074266112,
                        352321536: 16,
                        369098752: 540688,
                        385875968: 16384,
                        402653184: 16400,
                        419430400: 524288,
                        436207616: 524304,
                        452984832: 1073741840,
                        469762048: 540672,
                        486539264: 1073758208,
                        503316480: 1073741824,
                        520093696: 1074282512,
                        276824064: 540688,
                        293601280: 524288,
                        310378496: 1074266112,
                        327155712: 16384,
                        343932928: 1073758208,
                        360710144: 1074282512,
                        377487360: 16,
                        394264576: 1073741824,
                        411041792: 1074282496,
                        427819008: 1073741840,
                        444596224: 1073758224,
                        461373440: 524304,
                        478150656: 0,
                        494927872: 16400,
                        511705088: 1074266128,
                        528482304: 540672
                    }, {
                        0: 260,
                        1048576: 0,
                        2097152: 67109120,
                        3145728: 65796,
                        4194304: 65540,
                        5242880: 67108868,
                        6291456: 67174660,
                        7340032: 67174400,
                        8388608: 67108864,
                        9437184: 67174656,
                        10485760: 65792,
                        11534336: 67174404,
                        12582912: 67109124,
                        13631488: 65536,
                        14680064: 4,
                        15728640: 256,
                        524288: 67174656,
                        1572864: 67174404,
                        2621440: 0,
                        3670016: 67109120,
                        4718592: 67108868,
                        5767168: 65536,
                        6815744: 65540,
                        7864320: 260,
                        8912896: 4,
                        9961472: 256,
                        11010048: 67174400,
                        12058624: 65796,
                        13107200: 65792,
                        14155776: 67109124,
                        15204352: 67174660,
                        16252928: 67108864,
                        16777216: 67174656,
                        17825792: 65540,
                        18874368: 65536,
                        19922944: 67109120,
                        20971520: 256,
                        22020096: 67174660,
                        23068672: 67108868,
                        24117248: 0,
                        25165824: 67109124,
                        26214400: 67108864,
                        27262976: 4,
                        28311552: 65792,
                        29360128: 67174400,
                        30408704: 260,
                        31457280: 65796,
                        32505856: 67174404,
                        17301504: 67108864,
                        18350080: 260,
                        19398656: 67174656,
                        20447232: 0,
                        21495808: 65540,
                        22544384: 67109120,
                        23592960: 256,
                        24641536: 67174404,
                        25690112: 65536,
                        26738688: 67174660,
                        27787264: 65796,
                        28835840: 67108868,
                        29884416: 67109124,
                        30932992: 67174400,
                        31981568: 4,
                        33030144: 65792
                    }, {
                        0: 2151682048,
                        65536: 2147487808,
                        131072: 4198464,
                        196608: 2151677952,
                        262144: 0,
                        327680: 4198400,
                        393216: 2147483712,
                        458752: 4194368,
                        524288: 2147483648,
                        589824: 4194304,
                        655360: 64,
                        720896: 2147487744,
                        786432: 2151678016,
                        851968: 4160,
                        917504: 4096,
                        983040: 2151682112,
                        32768: 2147487808,
                        98304: 64,
                        163840: 2151678016,
                        229376: 2147487744,
                        294912: 4198400,
                        360448: 2151682112,
                        425984: 0,
                        491520: 2151677952,
                        557056: 4096,
                        622592: 2151682048,
                        688128: 4194304,
                        753664: 4160,
                        819200: 2147483648,
                        884736: 4194368,
                        950272: 4198464,
                        1015808: 2147483712,
                        1048576: 4194368,
                        1114112: 4198400,
                        1179648: 2147483712,
                        1245184: 0,
                        1310720: 4160,
                        1376256: 2151678016,
                        1441792: 2151682048,
                        1507328: 2147487808,
                        1572864: 2151682112,
                        1638400: 2147483648,
                        1703936: 2151677952,
                        1769472: 4198464,
                        1835008: 2147487744,
                        1900544: 4194304,
                        1966080: 64,
                        2031616: 4096,
                        1081344: 2151677952,
                        1146880: 2151682112,
                        1212416: 0,
                        1277952: 4198400,
                        1343488: 4194368,
                        1409024: 2147483648,
                        1474560: 2147487808,
                        1540096: 64,
                        1605632: 2147483712,
                        1671168: 4096,
                        1736704: 2147487744,
                        1802240: 2151678016,
                        1867776: 4160,
                        1933312: 2151682048,
                        1998848: 4194304,
                        2064384: 4198464
                    }, {
                        0: 128,
                        4096: 17039360,
                        8192: 262144,
                        12288: 536870912,
                        16384: 537133184,
                        20480: 16777344,
                        24576: 553648256,
                        28672: 262272,
                        32768: 16777216,
                        36864: 537133056,
                        40960: 536871040,
                        45056: 553910400,
                        49152: 553910272,
                        53248: 0,
                        57344: 17039488,
                        61440: 553648128,
                        2048: 17039488,
                        6144: 553648256,
                        10240: 128,
                        14336: 17039360,
                        18432: 262144,
                        22528: 537133184,
                        26624: 553910272,
                        30720: 536870912,
                        34816: 537133056,
                        38912: 0,
                        43008: 553910400,
                        47104: 16777344,
                        51200: 536871040,
                        55296: 553648128,
                        59392: 16777216,
                        63488: 262272,
                        65536: 262144,
                        69632: 128,
                        73728: 536870912,
                        77824: 553648256,
                        81920: 16777344,
                        86016: 553910272,
                        90112: 537133184,
                        94208: 16777216,
                        98304: 553910400,
                        102400: 553648128,
                        106496: 17039360,
                        110592: 537133056,
                        114688: 262272,
                        118784: 536871040,
                        122880: 0,
                        126976: 17039488,
                        67584: 553648256,
                        71680: 16777216,
                        75776: 17039360,
                        79872: 537133184,
                        83968: 536870912,
                        88064: 17039488,
                        92160: 128,
                        96256: 553910272,
                        100352: 262272,
                        104448: 553910400,
                        108544: 0,
                        112640: 553648128,
                        116736: 16777344,
                        120832: 262144,
                        124928: 537133056,
                        129024: 536871040
                    }, {
                        0: 268435464,
                        256: 8192,
                        512: 270532608,
                        768: 270540808,
                        1024: 268443648,
                        1280: 2097152,
                        1536: 2097160,
                        1792: 268435456,
                        2048: 0,
                        2304: 268443656,
                        2560: 2105344,
                        2816: 8,
                        3072: 270532616,
                        3328: 2105352,
                        3584: 8200,
                        3840: 270540800,
                        128: 270532608,
                        384: 270540808,
                        640: 8,
                        896: 2097152,
                        1152: 2105352,
                        1408: 268435464,
                        1664: 268443648,
                        1920: 8200,
                        2176: 2097160,
                        2432: 8192,
                        2688: 268443656,
                        2944: 270532616,
                        3200: 0,
                        3456: 270540800,
                        3712: 2105344,
                        3968: 268435456,
                        4096: 268443648,
                        4352: 270532616,
                        4608: 270540808,
                        4864: 8200,
                        5120: 2097152,
                        5376: 268435456,
                        5632: 268435464,
                        5888: 2105344,
                        6144: 2105352,
                        6400: 0,
                        6656: 8,
                        6912: 270532608,
                        7168: 8192,
                        7424: 268443656,
                        7680: 270540800,
                        7936: 2097160,
                        4224: 8,
                        4480: 2105344,
                        4736: 2097152,
                        4992: 268435464,
                        5248: 268443648,
                        5504: 8200,
                        5760: 270540808,
                        6016: 270532608,
                        6272: 270540800,
                        6528: 270532616,
                        6784: 8192,
                        7040: 2105352,
                        7296: 2097160,
                        7552: 0,
                        7808: 268435456,
                        8064: 268443656
                    }, {
                        0: 1048576,
                        16: 33555457,
                        32: 1024,
                        48: 1049601,
                        64: 34604033,
                        80: 0,
                        96: 1,
                        112: 34603009,
                        128: 33555456,
                        144: 1048577,
                        160: 33554433,
                        176: 34604032,
                        192: 34603008,
                        208: 1025,
                        224: 1049600,
                        240: 33554432,
                        8: 34603009,
                        24: 0,
                        40: 33555457,
                        56: 34604032,
                        72: 1048576,
                        88: 33554433,
                        104: 33554432,
                        120: 1025,
                        136: 1049601,
                        152: 33555456,
                        168: 34603008,
                        184: 1048577,
                        200: 1024,
                        216: 34604033,
                        232: 1,
                        248: 1049600,
                        256: 33554432,
                        272: 1048576,
                        288: 33555457,
                        304: 34603009,
                        320: 1048577,
                        336: 33555456,
                        352: 34604032,
                        368: 1049601,
                        384: 1025,
                        400: 34604033,
                        416: 1049600,
                        432: 1,
                        448: 0,
                        464: 34603008,
                        480: 33554433,
                        496: 1024,
                        264: 1049600,
                        280: 33555457,
                        296: 34603009,
                        312: 1,
                        328: 33554432,
                        344: 1048576,
                        360: 1025,
                        376: 34604032,
                        392: 33554433,
                        408: 34603008,
                        424: 0,
                        440: 34604033,
                        456: 1049601,
                        472: 1024,
                        488: 33555456,
                        504: 1048577
                    }, {
                        0: 134219808,
                        1: 131072,
                        2: 134217728,
                        3: 32,
                        4: 131104,
                        5: 134350880,
                        6: 134350848,
                        7: 2048,
                        8: 134348800,
                        9: 134219776,
                        10: 133120,
                        11: 134348832,
                        12: 2080,
                        13: 0,
                        14: 134217760,
                        15: 133152,
                        2147483648: 2048,
                        2147483649: 134350880,
                        2147483650: 134219808,
                        2147483651: 134217728,
                        2147483652: 134348800,
                        2147483653: 133120,
                        2147483654: 133152,
                        2147483655: 32,
                        2147483656: 134217760,
                        2147483657: 2080,
                        2147483658: 131104,
                        2147483659: 134350848,
                        2147483660: 0,
                        2147483661: 134348832,
                        2147483662: 134219776,
                        2147483663: 131072,
                        16: 133152,
                        17: 134350848,
                        18: 32,
                        19: 2048,
                        20: 134219776,
                        21: 134217760,
                        22: 134348832,
                        23: 131072,
                        24: 0,
                        25: 131104,
                        26: 134348800,
                        27: 134219808,
                        28: 134350880,
                        29: 133120,
                        30: 2080,
                        31: 134217728,
                        2147483664: 131072,
                        2147483665: 2048,
                        2147483666: 134348832,
                        2147483667: 133152,
                        2147483668: 32,
                        2147483669: 134348800,
                        2147483670: 134217728,
                        2147483671: 134219808,
                        2147483672: 134350880,
                        2147483673: 134217760,
                        2147483674: 134219776,
                        2147483675: 0,
                        2147483676: 133120,
                        2147483677: 2080,
                        2147483678: 131104,
                        2147483679: 134350848
                    } ];
                    var SBOX_MASK = [ 4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504, 2147483679 ];
                    var DES = C_algo.DES = BlockCipher.extend({
                        _doReset: function() {
                            var key = this._key;
                            var keyWords = key.words;
                            var keyBits = [];
                            for (var i = 0; i < 56; i++) {
                                var keyBitPos = PC1[i] - 1;
                                keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
                            }
                            var subKeys = this._subKeys = [];
                            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                                var subKey = subKeys[nSubKey] = [];
                                var bitShift = BIT_SHIFTS[nSubKey];
                                for (var i = 0; i < 24; i++) {
                                    subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                                    subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
                                }
                                subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
                                for (var i = 1; i < 7; i++) {
                                    subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
                                }
                                subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
                            }
                            var invSubKeys = this._invSubKeys = [];
                            for (var i = 0; i < 16; i++) {
                                invSubKeys[i] = subKeys[15 - i];
                            }
                        },
                        encryptBlock: function(M, offset) {
                            this._doCryptBlock(M, offset, this._subKeys);
                        },
                        decryptBlock: function(M, offset) {
                            this._doCryptBlock(M, offset, this._invSubKeys);
                        },
                        _doCryptBlock: function(M, offset, subKeys) {
                            this._lBlock = M[offset];
                            this._rBlock = M[offset + 1];
                            exchangeLR.call(this, 4, 252645135);
                            exchangeLR.call(this, 16, 65535);
                            exchangeRL.call(this, 2, 858993459);
                            exchangeRL.call(this, 8, 16711935);
                            exchangeLR.call(this, 1, 1431655765);
                            for (var round = 0; round < 16; round++) {
                                var subKey = subKeys[round];
                                var lBlock = this._lBlock;
                                var rBlock = this._rBlock;
                                var f = 0;
                                for (var i = 0; i < 8; i++) {
                                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                                }
                                this._lBlock = rBlock;
                                this._rBlock = lBlock ^ f;
                            }
                            var t = this._lBlock;
                            this._lBlock = this._rBlock;
                            this._rBlock = t;
                            exchangeLR.call(this, 1, 1431655765);
                            exchangeRL.call(this, 8, 16711935);
                            exchangeRL.call(this, 2, 858993459);
                            exchangeLR.call(this, 16, 65535);
                            exchangeLR.call(this, 4, 252645135);
                            M[offset] = this._lBlock;
                            M[offset + 1] = this._rBlock;
                        },
                        keySize: 64 / 32,
                        ivSize: 64 / 32,
                        blockSize: 64 / 32
                    });
                    function exchangeLR(offset, mask) {
                        var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
                        this._rBlock ^= t;
                        this._lBlock ^= t << offset;
                    }
                    function exchangeRL(offset, mask) {
                        var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
                        this._lBlock ^= t;
                        this._rBlock ^= t << offset;
                    }
                    C.DES = BlockCipher._createHelper(DES);
                    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
                        _doReset: function() {
                            var key = this._key;
                            var keyWords = key.words;
                            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
                                throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
                            }
                            var key1 = keyWords.slice(0, 2);
                            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
                            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
                            this._des1 = DES.createEncryptor(WordArray.create(key1));
                            this._des2 = DES.createEncryptor(WordArray.create(key2));
                            this._des3 = DES.createEncryptor(WordArray.create(key3));
                        },
                        encryptBlock: function(M, offset) {
                            this._des1.encryptBlock(M, offset);
                            this._des2.decryptBlock(M, offset);
                            this._des3.encryptBlock(M, offset);
                        },
                        decryptBlock: function(M, offset) {
                            this._des3.decryptBlock(M, offset);
                            this._des2.encryptBlock(M, offset);
                            this._des1.decryptBlock(M, offset);
                        },
                        keySize: 192 / 32,
                        ivSize: 64 / 32,
                        blockSize: 64 / 32
                    });
                    C.TripleDES = BlockCipher._createHelper(TripleDES);
                })();
                return CryptoJS.TripleDES;
            }));
        })(tripledes);
        return tripledesExports;
    }
    var rc4Exports = {};
    var rc4 = {
        get exports() {
            return rc4Exports;
        },
        set exports(v) {
            rc4Exports = v;
        }
    };
    var hasRequiredRc4;
    function requireRc4() {
        if (hasRequiredRc4) return rc4Exports;
        hasRequiredRc4 = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var StreamCipher = C_lib.StreamCipher;
                    var C_algo = C.algo;
                    var RC4 = C_algo.RC4 = StreamCipher.extend({
                        _doReset: function() {
                            var key = this._key;
                            var keyWords = key.words;
                            var keySigBytes = key.sigBytes;
                            var S = this._S = [];
                            for (var i = 0; i < 256; i++) {
                                S[i] = i;
                            }
                            for (var i = 0, j = 0; i < 256; i++) {
                                var keyByteIndex = i % keySigBytes;
                                var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
                                j = (j + S[i] + keyByte) % 256;
                                var t = S[i];
                                S[i] = S[j];
                                S[j] = t;
                            }
                            this._i = this._j = 0;
                        },
                        _doProcessBlock: function(M, offset) {
                            M[offset] ^= generateKeystreamWord.call(this);
                        },
                        keySize: 256 / 32,
                        ivSize: 0
                    });
                    function generateKeystreamWord() {
                        var S = this._S;
                        var i = this._i;
                        var j = this._j;
                        var keystreamWord = 0;
                        for (var n = 0; n < 4; n++) {
                            i = (i + 1) % 256;
                            j = (j + S[i]) % 256;
                            var t = S[i];
                            S[i] = S[j];
                            S[j] = t;
                            keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
                        }
                        this._i = i;
                        this._j = j;
                        return keystreamWord;
                    }
                    C.RC4 = StreamCipher._createHelper(RC4);
                    var RC4Drop = C_algo.RC4Drop = RC4.extend({
                        cfg: RC4.cfg.extend({
                            drop: 192
                        }),
                        _doReset: function() {
                            RC4._doReset.call(this);
                            for (var i = this.cfg.drop; i > 0; i--) {
                                generateKeystreamWord.call(this);
                            }
                        }
                    });
                    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
                })();
                return CryptoJS.RC4;
            }));
        })(rc4);
        return rc4Exports;
    }
    var rabbitExports = {};
    var rabbit = {
        get exports() {
            return rabbitExports;
        },
        set exports(v) {
            rabbitExports = v;
        }
    };
    var hasRequiredRabbit;
    function requireRabbit() {
        if (hasRequiredRabbit) return rabbitExports;
        hasRequiredRabbit = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var StreamCipher = C_lib.StreamCipher;
                    var C_algo = C.algo;
                    var S = [];
                    var C_ = [];
                    var G = [];
                    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
                        _doReset: function() {
                            var K = this._key.words;
                            var iv = this.cfg.iv;
                            for (var i = 0; i < 4; i++) {
                                K[i] = (K[i] << 8 | K[i] >>> 24) & 16711935 | (K[i] << 24 | K[i] >>> 8) & 4278255360;
                            }
                            var X = this._X = [ K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16 ];
                            var C = this._C = [ K[2] << 16 | K[2] >>> 16, K[0] & 4294901760 | K[1] & 65535, K[3] << 16 | K[3] >>> 16, K[1] & 4294901760 | K[2] & 65535, K[0] << 16 | K[0] >>> 16, K[2] & 4294901760 | K[3] & 65535, K[1] << 16 | K[1] >>> 16, K[3] & 4294901760 | K[0] & 65535 ];
                            this._b = 0;
                            for (var i = 0; i < 4; i++) {
                                nextState.call(this);
                            }
                            for (var i = 0; i < 8; i++) {
                                C[i] ^= X[i + 4 & 7];
                            }
                            if (iv) {
                                var IV = iv.words;
                                var IV_0 = IV[0];
                                var IV_1 = IV[1];
                                var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
                                var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
                                var i1 = i0 >>> 16 | i2 & 4294901760;
                                var i3 = i2 << 16 | i0 & 65535;
                                C[0] ^= i0;
                                C[1] ^= i1;
                                C[2] ^= i2;
                                C[3] ^= i3;
                                C[4] ^= i0;
                                C[5] ^= i1;
                                C[6] ^= i2;
                                C[7] ^= i3;
                                for (var i = 0; i < 4; i++) {
                                    nextState.call(this);
                                }
                            }
                        },
                        _doProcessBlock: function(M, offset) {
                            var X = this._X;
                            nextState.call(this);
                            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
                            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
                            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
                            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
                            for (var i = 0; i < 4; i++) {
                                S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
                                M[offset + i] ^= S[i];
                            }
                        },
                        blockSize: 128 / 32,
                        ivSize: 64 / 32
                    });
                    function nextState() {
                        var X = this._X;
                        var C = this._C;
                        for (var i = 0; i < 8; i++) {
                            C_[i] = C[i];
                        }
                        C[0] = C[0] + 1295307597 + this._b | 0;
                        C[1] = C[1] + 3545052371 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
                        C[2] = C[2] + 886263092 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
                        C[3] = C[3] + 1295307597 + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
                        C[4] = C[4] + 3545052371 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
                        C[5] = C[5] + 886263092 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
                        C[6] = C[6] + 1295307597 + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
                        C[7] = C[7] + 3545052371 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
                        this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
                        for (var i = 0; i < 8; i++) {
                            var gx = X[i] + C[i];
                            var ga = gx & 65535;
                            var gb = gx >>> 16;
                            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
                            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
                            G[i] = gh ^ gl;
                        }
                        X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
                        X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
                        X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
                        X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
                        X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
                        X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
                        X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
                        X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
                    }
                    C.Rabbit = StreamCipher._createHelper(Rabbit);
                })();
                return CryptoJS.Rabbit;
            }));
        })(rabbit);
        return rabbitExports;
    }
    var rabbitLegacyExports = {};
    var rabbitLegacy = {
        get exports() {
            return rabbitLegacyExports;
        },
        set exports(v) {
            rabbitLegacyExports = v;
        }
    };
    var hasRequiredRabbitLegacy;
    function requireRabbitLegacy() {
        if (hasRequiredRabbitLegacy) return rabbitLegacyExports;
        hasRequiredRabbitLegacy = 1;
        (function(module, exports) {
            (function(root, factory, undef) {
                {
                    module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
                }
            })(commonjsGlobal, (function(CryptoJS) {
                (function() {
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var StreamCipher = C_lib.StreamCipher;
                    var C_algo = C.algo;
                    var S = [];
                    var C_ = [];
                    var G = [];
                    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
                        _doReset: function() {
                            var K = this._key.words;
                            var iv = this.cfg.iv;
                            var X = this._X = [ K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16 ];
                            var C = this._C = [ K[2] << 16 | K[2] >>> 16, K[0] & 4294901760 | K[1] & 65535, K[3] << 16 | K[3] >>> 16, K[1] & 4294901760 | K[2] & 65535, K[0] << 16 | K[0] >>> 16, K[2] & 4294901760 | K[3] & 65535, K[1] << 16 | K[1] >>> 16, K[3] & 4294901760 | K[0] & 65535 ];
                            this._b = 0;
                            for (var i = 0; i < 4; i++) {
                                nextState.call(this);
                            }
                            for (var i = 0; i < 8; i++) {
                                C[i] ^= X[i + 4 & 7];
                            }
                            if (iv) {
                                var IV = iv.words;
                                var IV_0 = IV[0];
                                var IV_1 = IV[1];
                                var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
                                var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
                                var i1 = i0 >>> 16 | i2 & 4294901760;
                                var i3 = i2 << 16 | i0 & 65535;
                                C[0] ^= i0;
                                C[1] ^= i1;
                                C[2] ^= i2;
                                C[3] ^= i3;
                                C[4] ^= i0;
                                C[5] ^= i1;
                                C[6] ^= i2;
                                C[7] ^= i3;
                                for (var i = 0; i < 4; i++) {
                                    nextState.call(this);
                                }
                            }
                        },
                        _doProcessBlock: function(M, offset) {
                            var X = this._X;
                            nextState.call(this);
                            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
                            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
                            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
                            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
                            for (var i = 0; i < 4; i++) {
                                S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
                                M[offset + i] ^= S[i];
                            }
                        },
                        blockSize: 128 / 32,
                        ivSize: 64 / 32
                    });
                    function nextState() {
                        var X = this._X;
                        var C = this._C;
                        for (var i = 0; i < 8; i++) {
                            C_[i] = C[i];
                        }
                        C[0] = C[0] + 1295307597 + this._b | 0;
                        C[1] = C[1] + 3545052371 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
                        C[2] = C[2] + 886263092 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
                        C[3] = C[3] + 1295307597 + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
                        C[4] = C[4] + 3545052371 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
                        C[5] = C[5] + 886263092 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
                        C[6] = C[6] + 1295307597 + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
                        C[7] = C[7] + 3545052371 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
                        this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
                        for (var i = 0; i < 8; i++) {
                            var gx = X[i] + C[i];
                            var ga = gx & 65535;
                            var gb = gx >>> 16;
                            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
                            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
                            G[i] = gh ^ gl;
                        }
                        X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
                        X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
                        X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
                        X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
                        X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
                        X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
                        X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
                        X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
                    }
                    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
                })();
                return CryptoJS.RabbitLegacy;
            }));
        })(rabbitLegacy);
        return rabbitLegacyExports;
    }
    (function(module, exports) {
        (function(root, factory, undef) {
            {
                module.exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy());
            }
        })(commonjsGlobal, (function(CryptoJS) {
            return CryptoJS;
        }));
    })(cryptoJs);
    var CryptoJS = cryptoJsExports;
    const getSign = (body, secretKey) => {
        const jsonBody = JSON.stringify(body);
        const timestamp = (new Date).toISOString().substring(0, 10).split("-").join("");
        const finalSignString = secretKey.toString() + jsonBody.toString() + timestamp.toString();
        const checkCode = CryptoJS.SHA256(encodeURIComponent(finalSignString).toLowerCase()).toString(CryptoJS.enc.Hex).toUpperCase();
        return checkCode;
    };
    function cc(names) {
        if (typeof names === "string" || typeof names === "number") return "" + names;
        let out = "";
        if (Array.isArray(names)) {
            for (let i = 0, tmp; i < names.length; i++) {
                if ((tmp = cc(names[i])) !== "") {
                    out += (out && " ") + tmp;
                }
            }
        } else {
            for (let k in names) {
                if (names[k]) out += (out && " ") + k;
            }
        }
        return out;
    }
    const createStoreImpl = createState => {
        let state;
        const listeners = new Set;
        const setState = (partial, replace) => {
            const nextState = typeof partial === "function" ? partial(state) : partial;
            if (!Object.is(nextState, state)) {
                const previousState = state;
                state = (replace != null ? replace : typeof nextState !== "object") ? nextState : Object.assign({}, state, nextState);
                listeners.forEach((listener => listener(state, previousState)));
            }
        };
        const getState = () => state;
        const subscribe = listener => {
            listeners.add(listener);
            return () => listeners.delete(listener);
        };
        const destroy = () => listeners.clear();
        const api = {
            setState: setState,
            getState: getState,
            subscribe: subscribe,
            destroy: destroy
        };
        state = createState(setState, getState, api);
        return api;
    };
    const createStore = createState => createState ? createStoreImpl(createState) : createStoreImpl;
    var withSelectorExports = {};
    var withSelector = {
        get exports() {
            return withSelectorExports;
        },
        set exports(v) {
            withSelectorExports = v;
        }
    };
    var shimExports = {};
    var shim = {
        get exports() {
            return shimExports;
        },
        set exports(v) {
            shimExports = v;
        }
    };
    var useSyncExternalStoreShim_development = {};
    /**
	 * @license React
	 * use-sync-external-store-shim.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */    var hasRequiredUseSyncExternalStoreShim_development;
    function requireUseSyncExternalStoreShim_development() {
        if (hasRequiredUseSyncExternalStoreShim_development) return useSyncExternalStoreShim_development;
        hasRequiredUseSyncExternalStoreShim_development = 1;
        {
            (function() {
                if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
                }
                var React = reactExports;
                var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
                function error(format) {
                    {
                        {
                            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                                args[_key2 - 1] = arguments[_key2];
                            }
                            printWarning("error", format, args);
                        }
                    }
                }
                function printWarning(level, format, args) {
                    {
                        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                        var stack = ReactDebugCurrentFrame.getStackAddendum();
                        if (stack !== "") {
                            format += "%s";
                            args = args.concat([ stack ]);
                        }
                        var argsWithFormat = args.map((function(item) {
                            return String(item);
                        }));
                        argsWithFormat.unshift("Warning: " + format);
                        Function.prototype.apply.call(console[level], console, argsWithFormat);
                    }
                }
                function is(x, y) {
                    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
                }
                var objectIs = typeof Object.is === "function" ? Object.is : is;
                var useState = React.useState, useEffect = React.useEffect, useLayoutEffect = React.useLayoutEffect, useDebugValue = React.useDebugValue;
                var didWarnOld18Alpha = false;
                var didWarnUncachedGetSnapshot = false;
                function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                    {
                        if (!didWarnOld18Alpha) {
                            if (React.startTransition !== undefined) {
                                didWarnOld18Alpha = true;
                                error("You are using an outdated, pre-release alpha of React 18 that " + "does not support useSyncExternalStore. The " + "use-sync-external-store shim will not work correctly. Upgrade " + "to a newer pre-release.");
                            }
                        }
                    }
                    var value = getSnapshot();
                    {
                        if (!didWarnUncachedGetSnapshot) {
                            var cachedValue = getSnapshot();
                            if (!objectIs(value, cachedValue)) {
                                error("The result of getSnapshot should be cached to avoid an infinite loop");
                                didWarnUncachedGetSnapshot = true;
                            }
                        }
                    }
                    var _useState = useState({
                        inst: {
                            value: value,
                            getSnapshot: getSnapshot
                        }
                    }), inst = _useState[0].inst, forceUpdate = _useState[1];
                    useLayoutEffect((function() {
                        inst.value = value;
                        inst.getSnapshot = getSnapshot;
                        if (checkIfSnapshotChanged(inst)) {
                            forceUpdate({
                                inst: inst
                            });
                        }
                    }), [ subscribe, value, getSnapshot ]);
                    useEffect((function() {
                        if (checkIfSnapshotChanged(inst)) {
                            forceUpdate({
                                inst: inst
                            });
                        }
                        var handleStoreChange = function() {
                            if (checkIfSnapshotChanged(inst)) {
                                forceUpdate({
                                    inst: inst
                                });
                            }
                        };
                        return subscribe(handleStoreChange);
                    }), [ subscribe ]);
                    useDebugValue(value);
                    return value;
                }
                function checkIfSnapshotChanged(inst) {
                    var latestGetSnapshot = inst.getSnapshot;
                    var prevValue = inst.value;
                    try {
                        var nextValue = latestGetSnapshot();
                        return !objectIs(prevValue, nextValue);
                    } catch (error) {
                        return true;
                    }
                }
                function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
                    return getSnapshot();
                }
                var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
                var isServerEnvironment = !canUseDOM;
                var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
                var useSyncExternalStore$2 = React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;
                useSyncExternalStoreShim_development.useSyncExternalStore = useSyncExternalStore$2;
                if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
                }
            })();
        }
        return useSyncExternalStoreShim_development;
    }
    var hasRequiredShim;
    function requireShim() {
        if (hasRequiredShim) return shimExports;
        hasRequiredShim = 1;
        (function(module) {
            {
                module.exports = requireUseSyncExternalStoreShim_development();
            }
        })(shim);
        return shimExports;
    }
    var withSelector_development = {};
    /**
	 * @license React
	 * use-sync-external-store-shim/with-selector.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */    var hasRequiredWithSelector_development;
    function requireWithSelector_development() {
        if (hasRequiredWithSelector_development) return withSelector_development;
        hasRequiredWithSelector_development = 1;
        {
            (function() {
                if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
                }
                var React = reactExports;
                var shim = requireShim();
                function is(x, y) {
                    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
                }
                var objectIs = typeof Object.is === "function" ? Object.is : is;
                var useSyncExternalStore = shim.useSyncExternalStore;
                var useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue = React.useDebugValue;
                function useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
                    var instRef = useRef(null);
                    var inst;
                    if (instRef.current === null) {
                        inst = {
                            hasValue: false,
                            value: null
                        };
                        instRef.current = inst;
                    } else {
                        inst = instRef.current;
                    }
                    var _useMemo = useMemo((function() {
                        var hasMemo = false;
                        var memoizedSnapshot;
                        var memoizedSelection;
                        var memoizedSelector = function(nextSnapshot) {
                            if (!hasMemo) {
                                hasMemo = true;
                                memoizedSnapshot = nextSnapshot;
                                var _nextSelection = selector(nextSnapshot);
                                if (isEqual !== undefined) {
                                    if (inst.hasValue) {
                                        var currentSelection = inst.value;
                                        if (isEqual(currentSelection, _nextSelection)) {
                                            memoizedSelection = currentSelection;
                                            return currentSelection;
                                        }
                                    }
                                }
                                memoizedSelection = _nextSelection;
                                return _nextSelection;
                            }
                            var prevSnapshot = memoizedSnapshot;
                            var prevSelection = memoizedSelection;
                            if (objectIs(prevSnapshot, nextSnapshot)) {
                                return prevSelection;
                            }
                            var nextSelection = selector(nextSnapshot);
                            if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {
                                return prevSelection;
                            }
                            memoizedSnapshot = nextSnapshot;
                            memoizedSelection = nextSelection;
                            return nextSelection;
                        };
                        var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;
                        var getSnapshotWithSelector = function() {
                            return memoizedSelector(getSnapshot());
                        };
                        var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function() {
                            return memoizedSelector(maybeGetServerSnapshot());
                        };
                        return [ getSnapshotWithSelector, getServerSnapshotWithSelector ];
                    }), [ getSnapshot, getServerSnapshot, selector, isEqual ]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
                    var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
                    useEffect((function() {
                        inst.hasValue = true;
                        inst.value = value;
                    }), [ value ]);
                    useDebugValue(value);
                    return value;
                }
                withSelector_development.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;
                if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
                }
            })();
        }
        return withSelector_development;
    }
    (function(module) {
        {
            module.exports = requireWithSelector_development();
        }
    })(withSelector);
    var useSyncExternalStoreExports = getDefaultExportFromCjs(withSelectorExports);
    const {useSyncExternalStoreWithSelector: useSyncExternalStoreWithSelector} = useSyncExternalStoreExports;
    function useStore$1(api, selector = api.getState, equalityFn) {
        const slice = useSyncExternalStoreWithSelector(api.subscribe, api.getState, api.getServerState || api.getState, selector, equalityFn);
        reactExports.useDebugValue(slice);
        return slice;
    }
    function shallow(objA, objB) {
        if (Object.is(objA, objB)) {
            return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
        }
        if (objA instanceof Map && objB instanceof Map) {
            if (objA.size !== objB.size) return false;
            for (const [key, value] of objA) {
                if (!Object.is(value, objB.get(key))) {
                    return false;
                }
            }
            return true;
        }
        if (objA instanceof Set && objB instanceof Set) {
            if (objA.size !== objB.size) return false;
            for (const value of objA) {
                if (!objB.has(value)) {
                    return false;
                }
            }
            return true;
        }
        const keysA = Object.keys(objA);
        if (keysA.length !== Object.keys(objB).length) {
            return false;
        }
        for (let i = 0; i < keysA.length; i++) {
            if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {
                return false;
            }
        }
        return true;
    }
    var noop$1 = {
        value: () => {}
    };
    function dispatch() {
        for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
            if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
            _[t] = [];
        }
        return new Dispatch(_);
    }
    function Dispatch(_) {
        this._ = _;
    }
    function parseTypenames$1(typenames, types) {
        return typenames.trim().split(/^|\s+/).map((function(t) {
            var name = "", i = t.indexOf(".");
            if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
            if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
            return {
                type: t,
                name: name
            };
        }));
    }
    Dispatch.prototype = dispatch.prototype = {
        constructor: Dispatch,
        on: function(typename, callback) {
            var _ = this._, T = parseTypenames$1(typename + "", _), t, i = -1, n = T.length;
            if (arguments.length < 2) {
                while (++i < n) if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name))) return t;
                return;
            }
            if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
            while (++i < n) {
                if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback); else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);
            }
            return this;
        },
        copy: function() {
            var copy = {}, _ = this._;
            for (var t in _) copy[t] = _[t].slice();
            return new Dispatch(copy);
        },
        call: function(type, that) {
            if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
            if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
            for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
        },
        apply: function(type, that, args) {
            if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
            for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
        }
    };
    function get$1(type, name) {
        for (var i = 0, n = type.length, c; i < n; ++i) {
            if ((c = type[i]).name === name) {
                return c.value;
            }
        }
    }
    function set$1(type, name, callback) {
        for (var i = 0, n = type.length; i < n; ++i) {
            if (type[i].name === name) {
                type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
                break;
            }
        }
        if (callback != null) type.push({
            name: name,
            value: callback
        });
        return type;
    }
    var xhtml = "http://www.w3.org/1999/xhtml";
    var namespaces = {
        svg: "http://www.w3.org/2000/svg",
        xhtml: xhtml,
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace",
        xmlns: "http://www.w3.org/2000/xmlns/"
    };
    function namespace(name) {
        var prefix = name += "", i = prefix.indexOf(":");
        if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
        return namespaces.hasOwnProperty(prefix) ? {
            space: namespaces[prefix],
            local: name
        } : name;
    }
    function creatorInherit(name) {
        return function() {
            var document = this.ownerDocument, uri = this.namespaceURI;
            return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
        };
    }
    function creatorFixed(fullname) {
        return function() {
            return this.ownerDocument.createElementNS(fullname.space, fullname.local);
        };
    }
    function creator(name) {
        var fullname = namespace(name);
        return (fullname.local ? creatorFixed : creatorInherit)(fullname);
    }
    function none() {}
    function selector(selector) {
        return selector == null ? none : function() {
            return this.querySelector(selector);
        };
    }
    function selection_select(select) {
        if (typeof select !== "function") select = selector(select);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
                if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                    if ("__data__" in node) subnode.__data__ = node.__data__;
                    subgroup[i] = subnode;
                }
            }
        }
        return new Selection$1(subgroups, this._parents);
    }
    function array(x) {
        return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
    }
    function empty() {
        return [];
    }
    function selectorAll(selector) {
        return selector == null ? empty : function() {
            return this.querySelectorAll(selector);
        };
    }
    function arrayAll(select) {
        return function() {
            return array(select.apply(this, arguments));
        };
    }
    function selection_selectAll(select) {
        if (typeof select === "function") select = arrayAll(select); else select = selectorAll(select);
        for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                if (node = group[i]) {
                    subgroups.push(select.call(node, node.__data__, i, group));
                    parents.push(node);
                }
            }
        }
        return new Selection$1(subgroups, parents);
    }
    function matcher(selector) {
        return function() {
            return this.matches(selector);
        };
    }
    function childMatcher(selector) {
        return function(node) {
            return node.matches(selector);
        };
    }
    var find = Array.prototype.find;
    function childFind(match) {
        return function() {
            return find.call(this.children, match);
        };
    }
    function childFirst() {
        return this.firstElementChild;
    }
    function selection_selectChild(match) {
        return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
    }
    var filter = Array.prototype.filter;
    function children() {
        return Array.from(this.children);
    }
    function childrenFilter(match) {
        return function() {
            return filter.call(this.children, match);
        };
    }
    function selection_selectChildren(match) {
        return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
    }
    function selection_filter(match) {
        if (typeof match !== "function") match = matcher(match);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
                if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                    subgroup.push(node);
                }
            }
        }
        return new Selection$1(subgroups, this._parents);
    }
    function sparse(update) {
        return new Array(update.length);
    }
    function selection_enter() {
        return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
    }
    function EnterNode(parent, datum) {
        this.ownerDocument = parent.ownerDocument;
        this.namespaceURI = parent.namespaceURI;
        this._next = null;
        this._parent = parent;
        this.__data__ = datum;
    }
    EnterNode.prototype = {
        constructor: EnterNode,
        appendChild: function(child) {
            return this._parent.insertBefore(child, this._next);
        },
        insertBefore: function(child, next) {
            return this._parent.insertBefore(child, next);
        },
        querySelector: function(selector) {
            return this._parent.querySelector(selector);
        },
        querySelectorAll: function(selector) {
            return this._parent.querySelectorAll(selector);
        }
    };
    function constant$3(x) {
        return function() {
            return x;
        };
    }
    function bindIndex(parent, group, enter, update, exit, data) {
        var i = 0, node, groupLength = group.length, dataLength = data.length;
        for (;i < dataLength; ++i) {
            if (node = group[i]) {
                node.__data__ = data[i];
                update[i] = node;
            } else {
                enter[i] = new EnterNode(parent, data[i]);
            }
        }
        for (;i < groupLength; ++i) {
            if (node = group[i]) {
                exit[i] = node;
            }
        }
    }
    function bindKey(parent, group, enter, update, exit, data, key) {
        var i, node, nodeByKeyValue = new Map, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
        for (i = 0; i < groupLength; ++i) {
            if (node = group[i]) {
                keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
                if (nodeByKeyValue.has(keyValue)) {
                    exit[i] = node;
                } else {
                    nodeByKeyValue.set(keyValue, node);
                }
            }
        }
        for (i = 0; i < dataLength; ++i) {
            keyValue = key.call(parent, data[i], i, data) + "";
            if (node = nodeByKeyValue.get(keyValue)) {
                update[i] = node;
                node.__data__ = data[i];
                nodeByKeyValue.delete(keyValue);
            } else {
                enter[i] = new EnterNode(parent, data[i]);
            }
        }
        for (i = 0; i < groupLength; ++i) {
            if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
                exit[i] = node;
            }
        }
    }
    function datum(node) {
        return node.__data__;
    }
    function selection_data(value, key) {
        if (!arguments.length) return Array.from(this, datum);
        var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
        if (typeof value !== "function") value = constant$3(value);
        for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
            var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
            bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
            for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
                if (previous = enterGroup[i0]) {
                    if (i0 >= i1) i1 = i0 + 1;
                    while (!(next = updateGroup[i1]) && ++i1 < dataLength) ;
                    previous._next = next || null;
                }
            }
        }
        update = new Selection$1(update, parents);
        update._enter = enter;
        update._exit = exit;
        return update;
    }
    function arraylike(data) {
        return typeof data === "object" && "length" in data ? data : Array.from(data);
    }
    function selection_exit() {
        return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
    }
    function selection_join(onenter, onupdate, onexit) {
        var enter = this.enter(), update = this, exit = this.exit();
        if (typeof onenter === "function") {
            enter = onenter(enter);
            if (enter) enter = enter.selection();
        } else {
            enter = enter.append(onenter + "");
        }
        if (onupdate != null) {
            update = onupdate(update);
            if (update) update = update.selection();
        }
        if (onexit == null) exit.remove(); else onexit(exit);
        return enter && update ? enter.merge(update).order() : update;
    }
    function selection_merge(context) {
        var selection = context.selection ? context.selection() : context;
        for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
            for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
                if (node = group0[i] || group1[i]) {
                    merge[i] = node;
                }
            }
        }
        for (;j < m0; ++j) {
            merges[j] = groups0[j];
        }
        return new Selection$1(merges, this._parents);
    }
    function selection_order() {
        for (var groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
            for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
                if (node = group[i]) {
                    if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
                    next = node;
                }
            }
        }
        return this;
    }
    function selection_sort(compare) {
        if (!compare) compare = ascending;
        function compareNode(a, b) {
            return a && b ? compare(a.__data__, b.__data__) : !a - !b;
        }
        for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
                if (node = group[i]) {
                    sortgroup[i] = node;
                }
            }
            sortgroup.sort(compareNode);
        }
        return new Selection$1(sortgroups, this._parents).order();
    }
    function ascending(a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }
    function selection_call() {
        var callback = arguments[0];
        arguments[0] = this;
        callback.apply(null, arguments);
        return this;
    }
    function selection_nodes() {
        return Array.from(this);
    }
    function selection_node() {
        for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
            for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
                var node = group[i];
                if (node) return node;
            }
        }
        return null;
    }
    function selection_size() {
        let size = 0;
        for (const node of this) ++size;
        return size;
    }
    function selection_empty() {
        return !this.node();
    }
    function selection_each(callback) {
        for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
            for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
                if (node = group[i]) callback.call(node, node.__data__, i, group);
            }
        }
        return this;
    }
    function attrRemove$1(name) {
        return function() {
            this.removeAttribute(name);
        };
    }
    function attrRemoveNS$1(fullname) {
        return function() {
            this.removeAttributeNS(fullname.space, fullname.local);
        };
    }
    function attrConstant$1(name, value) {
        return function() {
            this.setAttribute(name, value);
        };
    }
    function attrConstantNS$1(fullname, value) {
        return function() {
            this.setAttributeNS(fullname.space, fullname.local, value);
        };
    }
    function attrFunction$1(name, value) {
        return function() {
            var v = value.apply(this, arguments);
            if (v == null) this.removeAttribute(name); else this.setAttribute(name, v);
        };
    }
    function attrFunctionNS$1(fullname, value) {
        return function() {
            var v = value.apply(this, arguments);
            if (v == null) this.removeAttributeNS(fullname.space, fullname.local); else this.setAttributeNS(fullname.space, fullname.local, v);
        };
    }
    function selection_attr(name, value) {
        var fullname = namespace(name);
        if (arguments.length < 2) {
            var node = this.node();
            return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
        }
        return this.each((value == null ? fullname.local ? attrRemoveNS$1 : attrRemove$1 : typeof value === "function" ? fullname.local ? attrFunctionNS$1 : attrFunction$1 : fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, value));
    }
    function defaultView(node) {
        return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
    }
    function styleRemove$1(name) {
        return function() {
            this.style.removeProperty(name);
        };
    }
    function styleConstant$1(name, value, priority) {
        return function() {
            this.style.setProperty(name, value, priority);
        };
    }
    function styleFunction$1(name, value, priority) {
        return function() {
            var v = value.apply(this, arguments);
            if (v == null) this.style.removeProperty(name); else this.style.setProperty(name, v, priority);
        };
    }
    function selection_style(name, value, priority) {
        return arguments.length > 1 ? this.each((value == null ? styleRemove$1 : typeof value === "function" ? styleFunction$1 : styleConstant$1)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
    }
    function styleValue(node, name) {
        return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
    }
    function propertyRemove(name) {
        return function() {
            delete this[name];
        };
    }
    function propertyConstant(name, value) {
        return function() {
            this[name] = value;
        };
    }
    function propertyFunction(name, value) {
        return function() {
            var v = value.apply(this, arguments);
            if (v == null) delete this[name]; else this[name] = v;
        };
    }
    function selection_property(name, value) {
        return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
    }
    function classArray(string) {
        return string.trim().split(/^|\s+/);
    }
    function classList(node) {
        return node.classList || new ClassList(node);
    }
    function ClassList(node) {
        this._node = node;
        this._names = classArray(node.getAttribute("class") || "");
    }
    ClassList.prototype = {
        add: function(name) {
            var i = this._names.indexOf(name);
            if (i < 0) {
                this._names.push(name);
                this._node.setAttribute("class", this._names.join(" "));
            }
        },
        remove: function(name) {
            var i = this._names.indexOf(name);
            if (i >= 0) {
                this._names.splice(i, 1);
                this._node.setAttribute("class", this._names.join(" "));
            }
        },
        contains: function(name) {
            return this._names.indexOf(name) >= 0;
        }
    };
    function classedAdd(node, names) {
        var list = classList(node), i = -1, n = names.length;
        while (++i < n) list.add(names[i]);
    }
    function classedRemove(node, names) {
        var list = classList(node), i = -1, n = names.length;
        while (++i < n) list.remove(names[i]);
    }
    function classedTrue(names) {
        return function() {
            classedAdd(this, names);
        };
    }
    function classedFalse(names) {
        return function() {
            classedRemove(this, names);
        };
    }
    function classedFunction(names, value) {
        return function() {
            (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
        };
    }
    function selection_classed(name, value) {
        var names = classArray(name + "");
        if (arguments.length < 2) {
            var list = classList(this.node()), i = -1, n = names.length;
            while (++i < n) if (!list.contains(names[i])) return false;
            return true;
        }
        return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
    }
    function textRemove() {
        this.textContent = "";
    }
    function textConstant$1(value) {
        return function() {
            this.textContent = value;
        };
    }
    function textFunction$1(value) {
        return function() {
            var v = value.apply(this, arguments);
            this.textContent = v == null ? "" : v;
        };
    }
    function selection_text(value) {
        return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction$1 : textConstant$1)(value)) : this.node().textContent;
    }
    function htmlRemove() {
        this.innerHTML = "";
    }
    function htmlConstant(value) {
        return function() {
            this.innerHTML = value;
        };
    }
    function htmlFunction(value) {
        return function() {
            var v = value.apply(this, arguments);
            this.innerHTML = v == null ? "" : v;
        };
    }
    function selection_html(value) {
        return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
    }
    function raise() {
        if (this.nextSibling) this.parentNode.appendChild(this);
    }
    function selection_raise() {
        return this.each(raise);
    }
    function lower() {
        if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
    }
    function selection_lower() {
        return this.each(lower);
    }
    function selection_append(name) {
        var create = typeof name === "function" ? name : creator(name);
        return this.select((function() {
            return this.appendChild(create.apply(this, arguments));
        }));
    }
    function constantNull() {
        return null;
    }
    function selection_insert(name, before) {
        var create = typeof name === "function" ? name : creator(name), select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
        return this.select((function() {
            return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
        }));
    }
    function remove() {
        var parent = this.parentNode;
        if (parent) parent.removeChild(this);
    }
    function selection_remove() {
        return this.each(remove);
    }
    function selection_cloneShallow() {
        var clone = this.cloneNode(false), parent = this.parentNode;
        return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }
    function selection_cloneDeep() {
        var clone = this.cloneNode(true), parent = this.parentNode;
        return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }
    function selection_clone(deep) {
        return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
    }
    function selection_datum(value) {
        return arguments.length ? this.property("__data__", value) : this.node().__data__;
    }
    function contextListener(listener) {
        return function(event) {
            listener.call(this, event, this.__data__);
        };
    }
    function parseTypenames(typenames) {
        return typenames.trim().split(/^|\s+/).map((function(t) {
            var name = "", i = t.indexOf(".");
            if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
            return {
                type: t,
                name: name
            };
        }));
    }
    function onRemove(typename) {
        return function() {
            var on = this.__on;
            if (!on) return;
            for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
                if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
                    this.removeEventListener(o.type, o.listener, o.options);
                } else {
                    on[++i] = o;
                }
            }
            if (++i) on.length = i; else delete this.__on;
        };
    }
    function onAdd(typename, value, options) {
        return function() {
            var on = this.__on, o, listener = contextListener(value);
            if (on) for (var j = 0, m = on.length; j < m; ++j) {
                if ((o = on[j]).type === typename.type && o.name === typename.name) {
                    this.removeEventListener(o.type, o.listener, o.options);
                    this.addEventListener(o.type, o.listener = listener, o.options = options);
                    o.value = value;
                    return;
                }
            }
            this.addEventListener(typename.type, listener, options);
            o = {
                type: typename.type,
                name: typename.name,
                value: value,
                listener: listener,
                options: options
            };
            if (!on) this.__on = [ o ]; else on.push(o);
        };
    }
    function selection_on(typename, value, options) {
        var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;
        if (arguments.length < 2) {
            var on = this.node().__on;
            if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
                for (i = 0, o = on[j]; i < n; ++i) {
                    if ((t = typenames[i]).type === o.type && t.name === o.name) {
                        return o.value;
                    }
                }
            }
            return;
        }
        on = value ? onAdd : onRemove;
        for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
        return this;
    }
    function dispatchEvent(node, type, params) {
        var window = defaultView(node), event = window.CustomEvent;
        if (typeof event === "function") {
            event = new event(type, params);
        } else {
            event = window.document.createEvent("Event");
            if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail; else event.initEvent(type, false, false);
        }
        node.dispatchEvent(event);
    }
    function dispatchConstant(type, params) {
        return function() {
            return dispatchEvent(this, type, params);
        };
    }
    function dispatchFunction(type, params) {
        return function() {
            return dispatchEvent(this, type, params.apply(this, arguments));
        };
    }
    function selection_dispatch(type, params) {
        return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
    }
    function* selection_iterator() {
        for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
            for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
                if (node = group[i]) yield node;
            }
        }
    }
    var root = [ null ];
    function Selection$1(groups, parents) {
        this._groups = groups;
        this._parents = parents;
    }
    function selection() {
        return new Selection$1([ [ document.documentElement ] ], root);
    }
    function selection_selection() {
        return this;
    }
    Selection$1.prototype = selection.prototype = {
        constructor: Selection$1,
        select: selection_select,
        selectAll: selection_selectAll,
        selectChild: selection_selectChild,
        selectChildren: selection_selectChildren,
        filter: selection_filter,
        data: selection_data,
        enter: selection_enter,
        exit: selection_exit,
        join: selection_join,
        merge: selection_merge,
        selection: selection_selection,
        order: selection_order,
        sort: selection_sort,
        call: selection_call,
        nodes: selection_nodes,
        node: selection_node,
        size: selection_size,
        empty: selection_empty,
        each: selection_each,
        attr: selection_attr,
        style: selection_style,
        property: selection_property,
        classed: selection_classed,
        text: selection_text,
        html: selection_html,
        raise: selection_raise,
        lower: selection_lower,
        append: selection_append,
        insert: selection_insert,
        remove: selection_remove,
        clone: selection_clone,
        datum: selection_datum,
        on: selection_on,
        dispatch: selection_dispatch,
        [Symbol.iterator]: selection_iterator
    };
    function select(selector) {
        return typeof selector === "string" ? new Selection$1([ [ document.querySelector(selector) ] ], [ document.documentElement ]) : new Selection$1([ [ selector ] ], root);
    }
    var nextId = 0;
    function Local() {
        this._ = "@" + (++nextId).toString(36);
    }
    Local.prototype = {
        constructor: Local,
        get: function(node) {
            var id = this._;
            while (!(id in node)) if (!(node = node.parentNode)) return;
            return node[id];
        },
        set: function(node, value) {
            return node[this._] = value;
        },
        remove: function(node) {
            return this._ in node && delete node[this._];
        },
        toString: function() {
            return this._;
        }
    };
    function sourceEvent(event) {
        let sourceEvent;
        while (sourceEvent = event.sourceEvent) event = sourceEvent;
        return event;
    }
    function pointer(event, node) {
        event = sourceEvent(event);
        if (node === undefined) node = event.currentTarget;
        if (node) {
            var svg = node.ownerSVGElement || node;
            if (svg.createSVGPoint) {
                var point = svg.createSVGPoint();
                point.x = event.clientX, point.y = event.clientY;
                point = point.matrixTransform(node.getScreenCTM().inverse());
                return [ point.x, point.y ];
            }
            if (node.getBoundingClientRect) {
                var rect = node.getBoundingClientRect();
                return [ event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop ];
            }
        }
        return [ event.pageX, event.pageY ];
    }
    const nonpassive = {
        passive: false
    };
    const nonpassivecapture = {
        capture: true,
        passive: false
    };
    function nopropagation$1(event) {
        event.stopImmediatePropagation();
    }
    function noevent$1(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
    }
    function dragDisable(view) {
        var root = view.document.documentElement, selection = select(view).on("dragstart.drag", noevent$1, nonpassivecapture);
        if ("onselectstart" in root) {
            selection.on("selectstart.drag", noevent$1, nonpassivecapture);
        } else {
            root.__noselect = root.style.MozUserSelect;
            root.style.MozUserSelect = "none";
        }
    }
    function yesdrag(view, noclick) {
        var root = view.document.documentElement, selection = select(view).on("dragstart.drag", null);
        if (noclick) {
            selection.on("click.drag", noevent$1, nonpassivecapture);
            setTimeout((function() {
                selection.on("click.drag", null);
            }), 0);
        }
        if ("onselectstart" in root) {
            selection.on("selectstart.drag", null);
        } else {
            root.style.MozUserSelect = root.__noselect;
            delete root.__noselect;
        }
    }
    var constant$2 = x => () => x;
    function DragEvent(type, {sourceEvent: sourceEvent, subject: subject, target: target, identifier: identifier, active: active, x: x, y: y, dx: dx, dy: dy, dispatch: dispatch}) {
        Object.defineProperties(this, {
            type: {
                value: type,
                enumerable: true,
                configurable: true
            },
            sourceEvent: {
                value: sourceEvent,
                enumerable: true,
                configurable: true
            },
            subject: {
                value: subject,
                enumerable: true,
                configurable: true
            },
            target: {
                value: target,
                enumerable: true,
                configurable: true
            },
            identifier: {
                value: identifier,
                enumerable: true,
                configurable: true
            },
            active: {
                value: active,
                enumerable: true,
                configurable: true
            },
            x: {
                value: x,
                enumerable: true,
                configurable: true
            },
            y: {
                value: y,
                enumerable: true,
                configurable: true
            },
            dx: {
                value: dx,
                enumerable: true,
                configurable: true
            },
            dy: {
                value: dy,
                enumerable: true,
                configurable: true
            },
            _: {
                value: dispatch
            }
        });
    }
    DragEvent.prototype.on = function() {
        var value = this._.on.apply(this._, arguments);
        return value === this._ ? this : value;
    };
    function defaultFilter$1(event) {
        return !event.ctrlKey && !event.button;
    }
    function defaultContainer() {
        return this.parentNode;
    }
    function defaultSubject(event, d) {
        return d == null ? {
            x: event.x,
            y: event.y
        } : d;
    }
    function defaultTouchable$1() {
        return navigator.maxTouchPoints || "ontouchstart" in this;
    }
    function drag() {
        var filter = defaultFilter$1, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable$1, gestures = {}, listeners = dispatch("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
        function drag(selection) {
            selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
        }
        function mousedowned(event, d) {
            if (touchending || !filter.call(this, event, d)) return;
            var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
            if (!gesture) return;
            select(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
            dragDisable(event.view);
            nopropagation$1(event);
            mousemoving = false;
            mousedownx = event.clientX;
            mousedowny = event.clientY;
            gesture("start", event);
        }
        function mousemoved(event) {
            noevent$1(event);
            if (!mousemoving) {
                var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
                mousemoving = dx * dx + dy * dy > clickDistance2;
            }
            gestures.mouse("drag", event);
        }
        function mouseupped(event) {
            select(event.view).on("mousemove.drag mouseup.drag", null);
            yesdrag(event.view, mousemoving);
            noevent$1(event);
            gestures.mouse("end", event);
        }
        function touchstarted(event, d) {
            if (!filter.call(this, event, d)) return;
            var touches = event.changedTouches, c = container.call(this, event, d), n = touches.length, i, gesture;
            for (i = 0; i < n; ++i) {
                if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {
                    nopropagation$1(event);
                    gesture("start", event, touches[i]);
                }
            }
        }
        function touchmoved(event) {
            var touches = event.changedTouches, n = touches.length, i, gesture;
            for (i = 0; i < n; ++i) {
                if (gesture = gestures[touches[i].identifier]) {
                    noevent$1(event);
                    gesture("drag", event, touches[i]);
                }
            }
        }
        function touchended(event) {
            var touches = event.changedTouches, n = touches.length, i, gesture;
            if (touchending) clearTimeout(touchending);
            touchending = setTimeout((function() {
                touchending = null;
            }), 500);
            for (i = 0; i < n; ++i) {
                if (gesture = gestures[touches[i].identifier]) {
                    nopropagation$1(event);
                    gesture("end", event, touches[i]);
                }
            }
        }
        function beforestart(that, container, event, d, identifier, touch) {
            var dispatch = listeners.copy(), p = pointer(touch || event, container), dx, dy, s;
            if ((s = subject.call(that, new DragEvent("beforestart", {
                sourceEvent: event,
                target: drag,
                identifier: identifier,
                active: active,
                x: p[0],
                y: p[1],
                dx: 0,
                dy: 0,
                dispatch: dispatch
            }), d)) == null) return;
            dx = s.x - p[0] || 0;
            dy = s.y - p[1] || 0;
            return function gesture(type, event, touch) {
                var p0 = p, n;
                switch (type) {
                  case "start":
                    gestures[identifier] = gesture, n = active++;
                    break;

                  case "end":
                    delete gestures[identifier], --active;

                  case "drag":
                    p = pointer(touch || event, container), n = active;
                    break;
                }
                dispatch.call(type, that, new DragEvent(type, {
                    sourceEvent: event,
                    subject: s,
                    target: drag,
                    identifier: identifier,
                    active: n,
                    x: p[0] + dx,
                    y: p[1] + dy,
                    dx: p[0] - p0[0],
                    dy: p[1] - p0[1],
                    dispatch: dispatch
                }), d);
            };
        }
        drag.filter = function(_) {
            return arguments.length ? (filter = typeof _ === "function" ? _ : constant$2(!!_), 
            drag) : filter;
        };
        drag.container = function(_) {
            return arguments.length ? (container = typeof _ === "function" ? _ : constant$2(_), 
            drag) : container;
        };
        drag.subject = function(_) {
            return arguments.length ? (subject = typeof _ === "function" ? _ : constant$2(_), 
            drag) : subject;
        };
        drag.touchable = function(_) {
            return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$2(!!_), 
            drag) : touchable;
        };
        drag.on = function() {
            var value = listeners.on.apply(listeners, arguments);
            return value === listeners ? drag : value;
        };
        drag.clickDistance = function(_) {
            return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
        };
        return drag;
    }
    function define(constructor, factory, prototype) {
        constructor.prototype = factory.prototype = prototype;
        prototype.constructor = constructor;
    }
    function extend(parent, definition) {
        var prototype = Object.create(parent.prototype);
        for (var key in definition) prototype[key] = definition[key];
        return prototype;
    }
    function Color() {}
    var darker = .7;
    var brighter = 1 / darker;
    var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`), reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`), reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`), reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`), reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`), reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
    var named = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
    };
    define(Color, color, {
        copy(channels) {
            return Object.assign(new this.constructor, this, channels);
        },
        displayable() {
            return this.rgb().displayable();
        },
        hex: color_formatHex,
        formatHex: color_formatHex,
        formatHex8: color_formatHex8,
        formatHsl: color_formatHsl,
        formatRgb: color_formatRgb,
        toString: color_formatRgb
    });
    function color_formatHex() {
        return this.rgb().formatHex();
    }
    function color_formatHex8() {
        return this.rgb().formatHex8();
    }
    function color_formatHsl() {
        return hslConvert(this).formatHsl();
    }
    function color_formatRgb() {
        return this.rgb().formatRgb();
    }
    function color(format) {
        var m, l;
        format = (format + "").trim().toLowerCase();
        return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
    }
    function rgbn(n) {
        return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
    }
    function rgba(r, g, b, a) {
        if (a <= 0) r = g = b = NaN;
        return new Rgb(r, g, b, a);
    }
    function rgbConvert(o) {
        if (!(o instanceof Color)) o = color(o);
        if (!o) return new Rgb;
        o = o.rgb();
        return new Rgb(o.r, o.g, o.b, o.opacity);
    }
    function rgb(r, g, b, opacity) {
        return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }
    function Rgb(r, g, b, opacity) {
        this.r = +r;
        this.g = +g;
        this.b = +b;
        this.opacity = +opacity;
    }
    define(Rgb, rgb, extend(Color, {
        brighter(k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        darker(k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        rgb() {
            return this;
        },
        clamp() {
            return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
        },
        displayable() {
            return -.5 <= this.r && this.r < 255.5 && (-.5 <= this.g && this.g < 255.5) && (-.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
        },
        hex: rgb_formatHex,
        formatHex: rgb_formatHex,
        formatHex8: rgb_formatHex8,
        formatRgb: rgb_formatRgb,
        toString: rgb_formatRgb
    }));
    function rgb_formatHex() {
        return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
    }
    function rgb_formatHex8() {
        return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
    }
    function rgb_formatRgb() {
        const a = clampa(this.opacity);
        return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
    }
    function clampa(opacity) {
        return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
    }
    function clampi(value) {
        return Math.max(0, Math.min(255, Math.round(value) || 0));
    }
    function hex(value) {
        value = clampi(value);
        return (value < 16 ? "0" : "") + value.toString(16);
    }
    function hsla(h, s, l, a) {
        if (a <= 0) h = s = l = NaN; else if (l <= 0 || l >= 1) h = s = NaN; else if (s <= 0) h = NaN;
        return new Hsl(h, s, l, a);
    }
    function hslConvert(o) {
        if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Color)) o = color(o);
        if (!o) return new Hsl;
        if (o instanceof Hsl) return o;
        o = o.rgb();
        var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
        if (s) {
            if (r === max) h = (g - b) / s + (g < b) * 6; else if (g === max) h = (b - r) / s + 2; else h = (r - g) / s + 4;
            s /= l < .5 ? max + min : 2 - max - min;
            h *= 60;
        } else {
            s = l > 0 && l < 1 ? 0 : h;
        }
        return new Hsl(h, s, l, o.opacity);
    }
    function hsl(h, s, l, opacity) {
        return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }
    function Hsl(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity;
    }
    define(Hsl, hsl, extend(Color, {
        brighter(k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        darker(k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        rgb() {
            var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < .5 ? l : 1 - l) * s, m1 = 2 * l - m2;
            return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
        },
        clamp() {
            return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
        },
        displayable() {
            return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
        },
        formatHsl() {
            const a = clampa(this.opacity);
            return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
        }
    }));
    function clamph(value) {
        value = (value || 0) % 360;
        return value < 0 ? value + 360 : value;
    }
    function clampt(value) {
        return Math.max(0, Math.min(1, value || 0));
    }
    function hsl2rgb(h, m1, m2) {
        return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
    }
    const radians = Math.PI / 180;
    const degrees$1 = 180 / Math.PI;
    const K = 18, Xn = .96422, Yn = 1, Zn = .82521, t0 = 4 / 29, t1 = 6 / 29, t2 = 3 * t1 * t1, t3 = t1 * t1 * t1;
    function labConvert(o) {
        if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
        if (o instanceof Hcl) return hcl2lab(o);
        if (!(o instanceof Rgb)) o = rgbConvert(o);
        var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y = xyz2lab((.2225045 * r + .7168786 * g + .0606169 * b) / Yn), x, z;
        if (r === g && g === b) x = z = y; else {
            x = xyz2lab((.4360747 * r + .3850649 * g + .1430804 * b) / Xn);
            z = xyz2lab((.0139322 * r + .0971045 * g + .7141733 * b) / Zn);
        }
        return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
    }
    function lab(l, a, b, opacity) {
        return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
    }
    function Lab(l, a, b, opacity) {
        this.l = +l;
        this.a = +a;
        this.b = +b;
        this.opacity = +opacity;
    }
    define(Lab, lab, extend(Color, {
        brighter(k) {
            return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
        },
        darker(k) {
            return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
        },
        rgb() {
            var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
            x = Xn * lab2xyz(x);
            y = Yn * lab2xyz(y);
            z = Zn * lab2xyz(z);
            return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - .4906146 * z), lrgb2rgb(-.9787684 * x + 1.9161415 * y + .033454 * z), lrgb2rgb(.0719453 * x - .2289914 * y + 1.4052427 * z), this.opacity);
        }
    }));
    function xyz2lab(t) {
        return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
    }
    function lab2xyz(t) {
        return t > t1 ? t * t * t : t2 * (t - t0);
    }
    function lrgb2rgb(x) {
        return 255 * (x <= .0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - .055);
    }
    function rgb2lrgb(x) {
        return (x /= 255) <= .04045 ? x / 12.92 : Math.pow((x + .055) / 1.055, 2.4);
    }
    function hclConvert(o) {
        if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
        if (!(o instanceof Lab)) o = labConvert(o);
        if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
        var h = Math.atan2(o.b, o.a) * degrees$1;
        return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
    }
    function hcl(h, c, l, opacity) {
        return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }
    function Hcl(h, c, l, opacity) {
        this.h = +h;
        this.c = +c;
        this.l = +l;
        this.opacity = +opacity;
    }
    function hcl2lab(o) {
        if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
        var h = o.h * radians;
        return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
    }
    define(Hcl, hcl, extend(Color, {
        brighter(k) {
            return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
        },
        darker(k) {
            return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
        },
        rgb() {
            return hcl2lab(this).rgb();
        }
    }));
    var A = -.14861, B = +1.78277, C = -.29227, D = -.90649, E = +1.97294, ED = E * D, EB = E * B, BC_DA = B * C - D * A;
    function cubehelixConvert(o) {
        if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Rgb)) o = rgbConvert(o);
        var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), h = s ? Math.atan2(k, bl) * degrees$1 - 120 : NaN;
        return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
    }
    function cubehelix$1(h, s, l, opacity) {
        return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
    }
    function Cubehelix(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity;
    }
    define(Cubehelix, cubehelix$1, extend(Color, {
        brighter(k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
        },
        darker(k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
        },
        rgb() {
            var h = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
            return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
        }
    }));
    var constant$1 = x => () => x;
    function linear(a, d) {
        return function(t) {
            return a + t * d;
        };
    }
    function exponential(a, b, y) {
        return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
            return Math.pow(a + t * b, y);
        };
    }
    function hue(a, b) {
        var d = b - a;
        return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$1(isNaN(a) ? b : a);
    }
    function gamma(y) {
        return (y = +y) === 1 ? nogamma : function(a, b) {
            return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
        };
    }
    function nogamma(a, b) {
        var d = b - a;
        return d ? linear(a, d) : constant$1(isNaN(a) ? b : a);
    }
    var interpolateRgb = function rgbGamma(y) {
        var color = gamma(y);
        function rgb$1(start, end) {
            var r = color((start = rgb(start)).r, (end = rgb(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
            return function(t) {
                start.r = r(t);
                start.g = g(t);
                start.b = b(t);
                start.opacity = opacity(t);
                return start + "";
            };
        }
        rgb$1.gamma = rgbGamma;
        return rgb$1;
    }(1);
    function interpolateNumber(a, b) {
        return a = +a, b = +b, function(t) {
            return a * (1 - t) + b * t;
        };
    }
    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
    function zero(b) {
        return function() {
            return b;
        };
    }
    function one(b) {
        return function(t) {
            return b(t) + "";
        };
    }
    function interpolateString(a, b) {
        var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
        a = a + "", b = b + "";
        while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
            if ((bs = bm.index) > bi) {
                bs = b.slice(bi, bs);
                if (s[i]) s[i] += bs; else s[++i] = bs;
            }
            if ((am = am[0]) === (bm = bm[0])) {
                if (s[i]) s[i] += bm; else s[++i] = bm;
            } else {
                s[++i] = null;
                q.push({
                    i: i,
                    x: interpolateNumber(am, bm)
                });
            }
            bi = reB.lastIndex;
        }
        if (bi < b.length) {
            bs = b.slice(bi);
            if (s[i]) s[i] += bs; else s[++i] = bs;
        }
        return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
            return s.join("");
        });
    }
    var degrees = 180 / Math.PI;
    var identity$1 = {
        translateX: 0,
        translateY: 0,
        rotate: 0,
        skewX: 0,
        scaleX: 1,
        scaleY: 1
    };
    function decompose(a, b, c, d, e, f) {
        var scaleX, scaleY, skewX;
        if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
        if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
        if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
        if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
        return {
            translateX: e,
            translateY: f,
            rotate: Math.atan2(b, a) * degrees,
            skewX: Math.atan(skewX) * degrees,
            scaleX: scaleX,
            scaleY: scaleY
        };
    }
    var svgNode;
    function parseCss(value) {
        const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
        return m.isIdentity ? identity$1 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
    }
    function parseSvg(value) {
        if (value == null) return identity$1;
        if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
        svgNode.setAttribute("transform", value);
        if (!(value = svgNode.transform.baseVal.consolidate())) return identity$1;
        value = value.matrix;
        return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
    }
    function interpolateTransform(parse, pxComma, pxParen, degParen) {
        function pop(s) {
            return s.length ? s.pop() + " " : "";
        }
        function translate(xa, ya, xb, yb, s, q) {
            if (xa !== xb || ya !== yb) {
                var i = s.push("translate(", null, pxComma, null, pxParen);
                q.push({
                    i: i - 4,
                    x: interpolateNumber(xa, xb)
                }, {
                    i: i - 2,
                    x: interpolateNumber(ya, yb)
                });
            } else if (xb || yb) {
                s.push("translate(" + xb + pxComma + yb + pxParen);
            }
        }
        function rotate(a, b, s, q) {
            if (a !== b) {
                if (a - b > 180) b += 360; else if (b - a > 180) a += 360;
                q.push({
                    i: s.push(pop(s) + "rotate(", null, degParen) - 2,
                    x: interpolateNumber(a, b)
                });
            } else if (b) {
                s.push(pop(s) + "rotate(" + b + degParen);
            }
        }
        function skewX(a, b, s, q) {
            if (a !== b) {
                q.push({
                    i: s.push(pop(s) + "skewX(", null, degParen) - 2,
                    x: interpolateNumber(a, b)
                });
            } else if (b) {
                s.push(pop(s) + "skewX(" + b + degParen);
            }
        }
        function scale(xa, ya, xb, yb, s, q) {
            if (xa !== xb || ya !== yb) {
                var i = s.push(pop(s) + "scale(", null, ",", null, ")");
                q.push({
                    i: i - 4,
                    x: interpolateNumber(xa, xb)
                }, {
                    i: i - 2,
                    x: interpolateNumber(ya, yb)
                });
            } else if (xb !== 1 || yb !== 1) {
                s.push(pop(s) + "scale(" + xb + "," + yb + ")");
            }
        }
        return function(a, b) {
            var s = [], q = [];
            a = parse(a), b = parse(b);
            translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
            rotate(a.rotate, b.rotate, s, q);
            skewX(a.skewX, b.skewX, s, q);
            scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
            a = b = null;
            return function(t) {
                var i = -1, n = q.length, o;
                while (++i < n) s[(o = q[i]).i] = o.x(t);
                return s.join("");
            };
        };
    }
    var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
    var epsilon2 = 1e-12;
    function cosh(x) {
        return ((x = Math.exp(x)) + 1 / x) / 2;
    }
    function sinh(x) {
        return ((x = Math.exp(x)) - 1 / x) / 2;
    }
    function tanh(x) {
        return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }
    var interpolateZoom = function zoomRho(rho, rho2, rho4) {
        function zoom(p0, p1) {
            var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
            if (d2 < epsilon2) {
                S = Math.log(w1 / w0) / rho;
                i = function(t) {
                    return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S) ];
                };
            } else {
                var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
                S = (r1 - r0) / rho;
                i = function(t) {
                    var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
                    return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0) ];
                };
            }
            i.duration = S * 1e3 * rho / Math.SQRT2;
            return i;
        }
        zoom.rho = function(_) {
            var _1 = Math.max(.001, +_), _2 = _1 * _1, _4 = _2 * _2;
            return zoomRho(_1, _2, _4);
        };
        return zoom;
    }(Math.SQRT2, 2, 4);
    function cubehelix(hue) {
        return function cubehelixGamma(y) {
            y = +y;
            function cubehelix(start, end) {
                var h = hue((start = cubehelix$1(start)).h, (end = cubehelix$1(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
                return function(t) {
                    start.h = h(t);
                    start.s = s(t);
                    start.l = l(Math.pow(t, y));
                    start.opacity = opacity(t);
                    return start + "";
                };
            }
            cubehelix.gamma = cubehelixGamma;
            return cubehelix;
        }(1);
    }
    cubehelix(hue);
    cubehelix(nogamma);
    var frame = 0, timeout$1 = 0, interval = 0, pokeDelay = 1e3, taskHead, taskTail, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance === "object" && performance.now ? performance : Date, setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
        setTimeout(f, 17);
    };
    function now() {
        return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
    }
    function clearNow() {
        clockNow = 0;
    }
    function Timer() {
        this._call = this._time = this._next = null;
    }
    Timer.prototype = timer.prototype = {
        constructor: Timer,
        restart: function(callback, delay, time) {
            if (typeof callback !== "function") throw new TypeError("callback is not a function");
            time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
            if (!this._next && taskTail !== this) {
                if (taskTail) taskTail._next = this; else taskHead = this;
                taskTail = this;
            }
            this._call = callback;
            this._time = time;
            sleep();
        },
        stop: function() {
            if (this._call) {
                this._call = null;
                this._time = Infinity;
                sleep();
            }
        }
    };
    function timer(callback, delay, time) {
        var t = new Timer;
        t.restart(callback, delay, time);
        return t;
    }
    function timerFlush() {
        now();
        ++frame;
        var t = taskHead, e;
        while (t) {
            if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
            t = t._next;
        }
        --frame;
    }
    function wake() {
        clockNow = (clockLast = clock.now()) + clockSkew;
        frame = timeout$1 = 0;
        try {
            timerFlush();
        } finally {
            frame = 0;
            nap();
            clockNow = 0;
        }
    }
    function poke() {
        var now = clock.now(), delay = now - clockLast;
        if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
    }
    function nap() {
        var t0, t1 = taskHead, t2, time = Infinity;
        while (t1) {
            if (t1._call) {
                if (time > t1._time) time = t1._time;
                t0 = t1, t1 = t1._next;
            } else {
                t2 = t1._next, t1._next = null;
                t1 = t0 ? t0._next = t2 : taskHead = t2;
            }
        }
        taskTail = t0;
        sleep(time);
    }
    function sleep(time) {
        if (frame) return;
        if (timeout$1) timeout$1 = clearTimeout(timeout$1);
        var delay = time - clockNow;
        if (delay > 24) {
            if (time < Infinity) timeout$1 = setTimeout(wake, time - clock.now() - clockSkew);
            if (interval) interval = clearInterval(interval);
        } else {
            if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
            frame = 1, setFrame(wake);
        }
    }
    function timeout(callback, delay, time) {
        var t = new Timer;
        delay = delay == null ? 0 : +delay;
        t.restart((elapsed => {
            t.stop();
            callback(elapsed + delay);
        }), delay, time);
        return t;
    }
    var emptyOn = dispatch("start", "end", "cancel", "interrupt");
    var emptyTween = [];
    var CREATED = 0;
    var SCHEDULED = 1;
    var STARTING = 2;
    var STARTED = 3;
    var RUNNING = 4;
    var ENDING = 5;
    var ENDED = 6;
    function schedule(node, name, id, index, group, timing) {
        var schedules = node.__transition;
        if (!schedules) node.__transition = {}; else if (id in schedules) return;
        create(node, id, {
            name: name,
            index: index,
            group: group,
            on: emptyOn,
            tween: emptyTween,
            time: timing.time,
            delay: timing.delay,
            duration: timing.duration,
            ease: timing.ease,
            timer: null,
            state: CREATED
        });
    }
    function init(node, id) {
        var schedule = get(node, id);
        if (schedule.state > CREATED) throw new Error("too late; already scheduled");
        return schedule;
    }
    function set(node, id) {
        var schedule = get(node, id);
        if (schedule.state > STARTED) throw new Error("too late; already running");
        return schedule;
    }
    function get(node, id) {
        var schedule = node.__transition;
        if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
        return schedule;
    }
    function create(node, id, self) {
        var schedules = node.__transition, tween;
        schedules[id] = self;
        self.timer = timer(schedule, 0, self.time);
        function schedule(elapsed) {
            self.state = SCHEDULED;
            self.timer.restart(start, self.delay, self.time);
            if (self.delay <= elapsed) start(elapsed - self.delay);
        }
        function start(elapsed) {
            var i, j, n, o;
            if (self.state !== SCHEDULED) return stop();
            for (i in schedules) {
                o = schedules[i];
                if (o.name !== self.name) continue;
                if (o.state === STARTED) return timeout(start);
                if (o.state === RUNNING) {
                    o.state = ENDED;
                    o.timer.stop();
                    o.on.call("interrupt", node, node.__data__, o.index, o.group);
                    delete schedules[i];
                } else if (+i < id) {
                    o.state = ENDED;
                    o.timer.stop();
                    o.on.call("cancel", node, node.__data__, o.index, o.group);
                    delete schedules[i];
                }
            }
            timeout((function() {
                if (self.state === STARTED) {
                    self.state = RUNNING;
                    self.timer.restart(tick, self.delay, self.time);
                    tick(elapsed);
                }
            }));
            self.state = STARTING;
            self.on.call("start", node, node.__data__, self.index, self.group);
            if (self.state !== STARTING) return;
            self.state = STARTED;
            tween = new Array(n = self.tween.length);
            for (i = 0, j = -1; i < n; ++i) {
                if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
                    tween[++j] = o;
                }
            }
            tween.length = j + 1;
        }
        function tick(elapsed) {
            var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), 
            self.state = ENDING, 1), i = -1, n = tween.length;
            while (++i < n) {
                tween[i].call(node, t);
            }
            if (self.state === ENDING) {
                self.on.call("end", node, node.__data__, self.index, self.group);
                stop();
            }
        }
        function stop() {
            self.state = ENDED;
            self.timer.stop();
            delete schedules[id];
            for (var i in schedules) return;
            delete node.__transition;
        }
    }
    function interrupt(node, name) {
        var schedules = node.__transition, schedule, active, empty = true, i;
        if (!schedules) return;
        name = name == null ? null : name + "";
        for (i in schedules) {
            if ((schedule = schedules[i]).name !== name) {
                empty = false;
                continue;
            }
            active = schedule.state > STARTING && schedule.state < ENDING;
            schedule.state = ENDED;
            schedule.timer.stop();
            schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
            delete schedules[i];
        }
        if (empty) delete node.__transition;
    }
    function selection_interrupt(name) {
        return this.each((function() {
            interrupt(this, name);
        }));
    }
    function tweenRemove(id, name) {
        var tween0, tween1;
        return function() {
            var schedule = set(this, id), tween = schedule.tween;
            if (tween !== tween0) {
                tween1 = tween0 = tween;
                for (var i = 0, n = tween1.length; i < n; ++i) {
                    if (tween1[i].name === name) {
                        tween1 = tween1.slice();
                        tween1.splice(i, 1);
                        break;
                    }
                }
            }
            schedule.tween = tween1;
        };
    }
    function tweenFunction(id, name, value) {
        var tween0, tween1;
        if (typeof value !== "function") throw new Error;
        return function() {
            var schedule = set(this, id), tween = schedule.tween;
            if (tween !== tween0) {
                tween1 = (tween0 = tween).slice();
                for (var t = {
                    name: name,
                    value: value
                }, i = 0, n = tween1.length; i < n; ++i) {
                    if (tween1[i].name === name) {
                        tween1[i] = t;
                        break;
                    }
                }
                if (i === n) tween1.push(t);
            }
            schedule.tween = tween1;
        };
    }
    function transition_tween(name, value) {
        var id = this._id;
        name += "";
        if (arguments.length < 2) {
            var tween = get(this.node(), id).tween;
            for (var i = 0, n = tween.length, t; i < n; ++i) {
                if ((t = tween[i]).name === name) {
                    return t.value;
                }
            }
            return null;
        }
        return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
    }
    function tweenValue(transition, name, value) {
        var id = transition._id;
        transition.each((function() {
            var schedule = set(this, id);
            (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
        }));
        return function(node) {
            return get(node, id).value[name];
        };
    }
    function interpolate(a, b) {
        var c;
        return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, 
        interpolateRgb) : interpolateString)(a, b);
    }
    function attrRemove(name) {
        return function() {
            this.removeAttribute(name);
        };
    }
    function attrRemoveNS(fullname) {
        return function() {
            this.removeAttributeNS(fullname.space, fullname.local);
        };
    }
    function attrConstant(name, interpolate, value1) {
        var string00, string1 = value1 + "", interpolate0;
        return function() {
            var string0 = this.getAttribute(name);
            return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
        };
    }
    function attrConstantNS(fullname, interpolate, value1) {
        var string00, string1 = value1 + "", interpolate0;
        return function() {
            var string0 = this.getAttributeNS(fullname.space, fullname.local);
            return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
        };
    }
    function attrFunction(name, interpolate, value) {
        var string00, string10, interpolate0;
        return function() {
            var string0, value1 = value(this), string1;
            if (value1 == null) return void this.removeAttribute(name);
            string0 = this.getAttribute(name);
            string1 = value1 + "";
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, 
            interpolate0 = interpolate(string00 = string0, value1));
        };
    }
    function attrFunctionNS(fullname, interpolate, value) {
        var string00, string10, interpolate0;
        return function() {
            var string0, value1 = value(this), string1;
            if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
            string0 = this.getAttributeNS(fullname.space, fullname.local);
            string1 = value1 + "";
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, 
            interpolate0 = interpolate(string00 = string0, value1));
        };
    }
    function transition_attr(name, value) {
        var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate;
        return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
    }
    function attrInterpolate(name, i) {
        return function(t) {
            this.setAttribute(name, i.call(this, t));
        };
    }
    function attrInterpolateNS(fullname, i) {
        return function(t) {
            this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
        };
    }
    function attrTweenNS(fullname, value) {
        var t0, i0;
        function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
            return t0;
        }
        tween._value = value;
        return tween;
    }
    function attrTween(name, value) {
        var t0, i0;
        function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
            return t0;
        }
        tween._value = value;
        return tween;
    }
    function transition_attrTween(name, value) {
        var key = "attr." + name;
        if (arguments.length < 2) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error;
        var fullname = namespace(name);
        return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
    }
    function delayFunction(id, value) {
        return function() {
            init(this, id).delay = +value.apply(this, arguments);
        };
    }
    function delayConstant(id, value) {
        return value = +value, function() {
            init(this, id).delay = value;
        };
    }
    function transition_delay(value) {
        var id = this._id;
        return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : get(this.node(), id).delay;
    }
    function durationFunction(id, value) {
        return function() {
            set(this, id).duration = +value.apply(this, arguments);
        };
    }
    function durationConstant(id, value) {
        return value = +value, function() {
            set(this, id).duration = value;
        };
    }
    function transition_duration(value) {
        var id = this._id;
        return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : get(this.node(), id).duration;
    }
    function easeConstant(id, value) {
        if (typeof value !== "function") throw new Error;
        return function() {
            set(this, id).ease = value;
        };
    }
    function transition_ease(value) {
        var id = this._id;
        return arguments.length ? this.each(easeConstant(id, value)) : get(this.node(), id).ease;
    }
    function easeVarying(id, value) {
        return function() {
            var v = value.apply(this, arguments);
            if (typeof v !== "function") throw new Error;
            set(this, id).ease = v;
        };
    }
    function transition_easeVarying(value) {
        if (typeof value !== "function") throw new Error;
        return this.each(easeVarying(this._id, value));
    }
    function transition_filter(match) {
        if (typeof match !== "function") match = matcher(match);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
                if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                    subgroup.push(node);
                }
            }
        }
        return new Transition(subgroups, this._parents, this._name, this._id);
    }
    function transition_merge(transition) {
        if (transition._id !== this._id) throw new Error;
        for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
            for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
                if (node = group0[i] || group1[i]) {
                    merge[i] = node;
                }
            }
        }
        for (;j < m0; ++j) {
            merges[j] = groups0[j];
        }
        return new Transition(merges, this._parents, this._name, this._id);
    }
    function start(name) {
        return (name + "").trim().split(/^|\s+/).every((function(t) {
            var i = t.indexOf(".");
            if (i >= 0) t = t.slice(0, i);
            return !t || t === "start";
        }));
    }
    function onFunction(id, name, listener) {
        var on0, on1, sit = start(name) ? init : set;
        return function() {
            var schedule = sit(this, id), on = schedule.on;
            if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
            schedule.on = on1;
        };
    }
    function transition_on(name, listener) {
        var id = this._id;
        return arguments.length < 2 ? get(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
    }
    function removeFunction(id) {
        return function() {
            var parent = this.parentNode;
            for (var i in this.__transition) if (+i !== id) return;
            if (parent) parent.removeChild(this);
        };
    }
    function transition_remove() {
        return this.on("end.remove", removeFunction(this._id));
    }
    function transition_select(select) {
        var name = this._name, id = this._id;
        if (typeof select !== "function") select = selector(select);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
                if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                    if ("__data__" in node) subnode.__data__ = node.__data__;
                    subgroup[i] = subnode;
                    schedule(subgroup[i], name, id, i, subgroup, get(node, id));
                }
            }
        }
        return new Transition(subgroups, this._parents, name, id);
    }
    function transition_selectAll(select) {
        var name = this._name, id = this._id;
        if (typeof select !== "function") select = selectorAll(select);
        for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                if (node = group[i]) {
                    for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
                        if (child = children[k]) {
                            schedule(child, name, id, k, children, inherit);
                        }
                    }
                    subgroups.push(children);
                    parents.push(node);
                }
            }
        }
        return new Transition(subgroups, parents, name, id);
    }
    var Selection = selection.prototype.constructor;
    function transition_selection() {
        return new Selection(this._groups, this._parents);
    }
    function styleNull(name, interpolate) {
        var string00, string10, interpolate0;
        return function() {
            var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), 
            styleValue(this, name));
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
        };
    }
    function styleRemove(name) {
        return function() {
            this.style.removeProperty(name);
        };
    }
    function styleConstant(name, interpolate, value1) {
        var string00, string1 = value1 + "", interpolate0;
        return function() {
            var string0 = styleValue(this, name);
            return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
        };
    }
    function styleFunction(name, interpolate, value) {
        var string00, string10, interpolate0;
        return function() {
            var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
            if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, 
            interpolate0 = interpolate(string00 = string0, value1));
        };
    }
    function styleMaybeRemove(id, name) {
        var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
        return function() {
            var schedule = set(this, id), on = schedule.on, listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;
            if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
            schedule.on = on1;
        };
    }
    function transition_style(name, value, priority) {
        var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
        return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
    }
    function styleInterpolate(name, i, priority) {
        return function(t) {
            this.style.setProperty(name, i.call(this, t), priority);
        };
    }
    function styleTween(name, value, priority) {
        var t, i0;
        function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
            return t;
        }
        tween._value = value;
        return tween;
    }
    function transition_styleTween(name, value, priority) {
        var key = "style." + (name += "");
        if (arguments.length < 2) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error;
        return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
    }
    function textConstant(value) {
        return function() {
            this.textContent = value;
        };
    }
    function textFunction(value) {
        return function() {
            var value1 = value(this);
            this.textContent = value1 == null ? "" : value1;
        };
    }
    function transition_text(value) {
        return this.tween("text", typeof value === "function" ? textFunction(tweenValue(this, "text", value)) : textConstant(value == null ? "" : value + ""));
    }
    function textInterpolate(i) {
        return function(t) {
            this.textContent = i.call(this, t);
        };
    }
    function textTween(value) {
        var t0, i0;
        function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
            return t0;
        }
        tween._value = value;
        return tween;
    }
    function transition_textTween(value) {
        var key = "text";
        if (arguments.length < 1) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error;
        return this.tween(key, textTween(value));
    }
    function transition_transition() {
        var name = this._name, id0 = this._id, id1 = newId();
        for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                if (node = group[i]) {
                    var inherit = get(node, id0);
                    schedule(node, name, id1, i, group, {
                        time: inherit.time + inherit.delay + inherit.duration,
                        delay: 0,
                        duration: inherit.duration,
                        ease: inherit.ease
                    });
                }
            }
        }
        return new Transition(groups, this._parents, name, id1);
    }
    function transition_end() {
        var on0, on1, that = this, id = that._id, size = that.size();
        return new Promise((function(resolve, reject) {
            var cancel = {
                value: reject
            }, end = {
                value: function() {
                    if (--size === 0) resolve();
                }
            };
            that.each((function() {
                var schedule = set(this, id), on = schedule.on;
                if (on !== on0) {
                    on1 = (on0 = on).copy();
                    on1._.cancel.push(cancel);
                    on1._.interrupt.push(cancel);
                    on1._.end.push(end);
                }
                schedule.on = on1;
            }));
            if (size === 0) resolve();
        }));
    }
    var id = 0;
    function Transition(groups, parents, name, id) {
        this._groups = groups;
        this._parents = parents;
        this._name = name;
        this._id = id;
    }
    function newId() {
        return ++id;
    }
    var selection_prototype = selection.prototype;
    Transition.prototype = {
        constructor: Transition,
        select: transition_select,
        selectAll: transition_selectAll,
        selectChild: selection_prototype.selectChild,
        selectChildren: selection_prototype.selectChildren,
        filter: transition_filter,
        merge: transition_merge,
        selection: transition_selection,
        transition: transition_transition,
        call: selection_prototype.call,
        nodes: selection_prototype.nodes,
        node: selection_prototype.node,
        size: selection_prototype.size,
        empty: selection_prototype.empty,
        each: selection_prototype.each,
        on: transition_on,
        attr: transition_attr,
        attrTween: transition_attrTween,
        style: transition_style,
        styleTween: transition_styleTween,
        text: transition_text,
        textTween: transition_textTween,
        remove: transition_remove,
        tween: transition_tween,
        delay: transition_delay,
        duration: transition_duration,
        ease: transition_ease,
        easeVarying: transition_easeVarying,
        end: transition_end,
        [Symbol.iterator]: selection_prototype[Symbol.iterator]
    };
    function cubicInOut(t) {
        return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
    }
    var exponent = 3;
    (function custom(e) {
        e = +e;
        function polyIn(t) {
            return Math.pow(t, e);
        }
        polyIn.exponent = custom;
        return polyIn;
    })(exponent);
    (function custom(e) {
        e = +e;
        function polyOut(t) {
            return 1 - Math.pow(1 - t, e);
        }
        polyOut.exponent = custom;
        return polyOut;
    })(exponent);
    (function custom(e) {
        e = +e;
        function polyInOut(t) {
            return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
        }
        polyInOut.exponent = custom;
        return polyInOut;
    })(exponent);
    function tpmt(x) {
        return (Math.pow(2, -10 * x) - .0009765625) * 1.0009775171065494;
    }
    var overshoot = 1.70158;
    (function custom(s) {
        s = +s;
        function backIn(t) {
            return (t = +t) * t * (s * (t - 1) + t);
        }
        backIn.overshoot = custom;
        return backIn;
    })(overshoot);
    (function custom(s) {
        s = +s;
        function backOut(t) {
            return --t * t * ((t + 1) * s + t) + 1;
        }
        backOut.overshoot = custom;
        return backOut;
    })(overshoot);
    (function custom(s) {
        s = +s;
        function backInOut(t) {
            return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
        }
        backInOut.overshoot = custom;
        return backInOut;
    })(overshoot);
    var tau = 2 * Math.PI, amplitude = 1, period = .3;
    (function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticIn(t) {
            return a * tpmt(- --t) * Math.sin((s - t) / p);
        }
        elasticIn.amplitude = function(a) {
            return custom(a, p * tau);
        };
        elasticIn.period = function(p) {
            return custom(a, p);
        };
        return elasticIn;
    })(amplitude, period);
    (function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticOut(t) {
            return 1 - a * tpmt(t = +t) * Math.sin((t + s) / p);
        }
        elasticOut.amplitude = function(a) {
            return custom(a, p * tau);
        };
        elasticOut.period = function(p) {
            return custom(a, p);
        };
        return elasticOut;
    })(amplitude, period);
    (function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticInOut(t) {
            return ((t = t * 2 - 1) < 0 ? a * tpmt(-t) * Math.sin((s - t) / p) : 2 - a * tpmt(t) * Math.sin((s + t) / p)) / 2;
        }
        elasticInOut.amplitude = function(a) {
            return custom(a, p * tau);
        };
        elasticInOut.period = function(p) {
            return custom(a, p);
        };
        return elasticInOut;
    })(amplitude, period);
    var defaultTiming = {
        time: null,
        delay: 0,
        duration: 250,
        ease: cubicInOut
    };
    function inherit(node, id) {
        var timing;
        while (!(timing = node.__transition) || !(timing = timing[id])) {
            if (!(node = node.parentNode)) {
                throw new Error(`transition ${id} not found`);
            }
        }
        return timing;
    }
    function selection_transition(name) {
        var id, timing;
        if (name instanceof Transition) {
            id = name._id, name = name._name;
        } else {
            id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
        }
        for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                if (node = group[i]) {
                    schedule(node, name, id, i, group, timing || inherit(node, id));
                }
            }
        }
        return new Transition(groups, this._parents, name, id);
    }
    selection.prototype.interrupt = selection_interrupt;
    selection.prototype.transition = selection_transition;
    var constant = x => () => x;
    function ZoomEvent(type, {sourceEvent: sourceEvent, target: target, transform: transform, dispatch: dispatch}) {
        Object.defineProperties(this, {
            type: {
                value: type,
                enumerable: true,
                configurable: true
            },
            sourceEvent: {
                value: sourceEvent,
                enumerable: true,
                configurable: true
            },
            target: {
                value: target,
                enumerable: true,
                configurable: true
            },
            transform: {
                value: transform,
                enumerable: true,
                configurable: true
            },
            _: {
                value: dispatch
            }
        });
    }
    function Transform(k, x, y) {
        this.k = k;
        this.x = x;
        this.y = y;
    }
    Transform.prototype = {
        constructor: Transform,
        scale: function(k) {
            return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
        },
        translate: function(x, y) {
            return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
        },
        apply: function(point) {
            return [ point[0] * this.k + this.x, point[1] * this.k + this.y ];
        },
        applyX: function(x) {
            return x * this.k + this.x;
        },
        applyY: function(y) {
            return y * this.k + this.y;
        },
        invert: function(location) {
            return [ (location[0] - this.x) / this.k, (location[1] - this.y) / this.k ];
        },
        invertX: function(x) {
            return (x - this.x) / this.k;
        },
        invertY: function(y) {
            return (y - this.y) / this.k;
        },
        rescaleX: function(x) {
            return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
        },
        rescaleY: function(y) {
            return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
        },
        toString: function() {
            return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
        }
    };
    var identity = new Transform(1, 0, 0);
    Transform.prototype;
    function nopropagation(event) {
        event.stopImmediatePropagation();
    }
    function noevent(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
    }
    function defaultFilter(event) {
        return (!event.ctrlKey || event.type === "wheel") && !event.button;
    }
    function defaultExtent() {
        var e = this;
        if (e instanceof SVGElement) {
            e = e.ownerSVGElement || e;
            if (e.hasAttribute("viewBox")) {
                e = e.viewBox.baseVal;
                return [ [ e.x, e.y ], [ e.x + e.width, e.y + e.height ] ];
            }
            return [ [ 0, 0 ], [ e.width.baseVal.value, e.height.baseVal.value ] ];
        }
        return [ [ 0, 0 ], [ e.clientWidth, e.clientHeight ] ];
    }
    function defaultTransform() {
        return this.__zoom || identity;
    }
    function defaultWheelDelta(event) {
        return -event.deltaY * (event.deltaMode === 1 ? .05 : event.deltaMode ? 1 : .002) * (event.ctrlKey ? 10 : 1);
    }
    function defaultTouchable() {
        return navigator.maxTouchPoints || "ontouchstart" in this;
    }
    function defaultConstrain(transform, extent, translateExtent) {
        var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
        return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
    }
    function zoom() {
        var filter = defaultFilter, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable, scaleExtent = [ 0, Infinity ], translateExtent = [ [ -Infinity, -Infinity ], [ Infinity, Infinity ] ], duration = 250, interpolate = interpolateZoom, listeners = dispatch("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
        function zoom(selection) {
            selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, {
                passive: false
            }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
        }
        zoom.transform = function(collection, transform, point, event) {
            var selection = collection.selection ? collection.selection() : collection;
            selection.property("__zoom", defaultTransform);
            if (collection !== selection) {
                schedule(collection, transform, point, event);
            } else {
                selection.interrupt().each((function() {
                    gesture(this, arguments).event(event).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
                }));
            }
        };
        zoom.scaleBy = function(selection, k, p, event) {
            zoom.scaleTo(selection, (function() {
                var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
                return k0 * k1;
            }), p, event);
        };
        zoom.scaleTo = function(selection, k, p, event) {
            zoom.transform(selection, (function() {
                var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
                return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
            }), p, event);
        };
        zoom.translateBy = function(selection, x, y, event) {
            zoom.transform(selection, (function() {
                return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
            }), null, event);
        };
        zoom.translateTo = function(selection, x, y, p, event) {
            zoom.transform(selection, (function() {
                var e = extent.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
                return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
            }), p, event);
        };
        function scale(transform, k) {
            k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
            return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
        }
        function translate(transform, p0, p1) {
            var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
            return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
        }
        function centroid(extent) {
            return [ (+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2 ];
        }
        function schedule(transition, transform, point, event) {
            transition.on("start.zoom", (function() {
                gesture(this, arguments).event(event).start();
            })).on("interrupt.zoom end.zoom", (function() {
                gesture(this, arguments).event(event).end();
            })).tween("zoom", (function() {
                var that = this, args = arguments, g = gesture(that, args).event(event), e = extent.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform === "function" ? transform.apply(that, args) : transform, i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
                return function(t) {
                    if (t === 1) t = b; else {
                        var l = i(t), k = w / l[2];
                        t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
                    }
                    g.zoom(null, t);
                };
            }));
        }
        function gesture(that, args, clean) {
            return !clean && that.__zooming || new Gesture(that, args);
        }
        function Gesture(that, args) {
            this.that = that;
            this.args = args;
            this.active = 0;
            this.sourceEvent = null;
            this.extent = extent.apply(that, args);
            this.taps = 0;
        }
        Gesture.prototype = {
            event: function(event) {
                if (event) this.sourceEvent = event;
                return this;
            },
            start: function() {
                if (++this.active === 1) {
                    this.that.__zooming = this;
                    this.emit("start");
                }
                return this;
            },
            zoom: function(key, transform) {
                if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
                if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
                if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
                this.that.__zoom = transform;
                this.emit("zoom");
                return this;
            },
            end: function() {
                if (--this.active === 0) {
                    delete this.that.__zooming;
                    this.emit("end");
                }
                return this;
            },
            emit: function(type) {
                var d = select(this.that).datum();
                listeners.call(type, this.that, new ZoomEvent(type, {
                    sourceEvent: this.sourceEvent,
                    target: zoom,
                    type: type,
                    transform: this.that.__zoom,
                    dispatch: listeners
                }), d);
            }
        };
        function wheeled(event, ...args) {
            if (!filter.apply(this, arguments)) return;
            var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer(event);
            if (g.wheel) {
                if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
                    g.mouse[1] = t.invert(g.mouse[0] = p);
                }
                clearTimeout(g.wheel);
            } else if (t.k === k) return; else {
                g.mouse = [ p, t.invert(p) ];
                interrupt(this);
                g.start();
            }
            noevent(event);
            g.wheel = setTimeout(wheelidled, wheelDelay);
            g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
            function wheelidled() {
                g.wheel = null;
                g.end();
            }
        }
        function mousedowned(event, ...args) {
            if (touchending || !filter.apply(this, arguments)) return;
            var currentTarget = event.currentTarget, g = gesture(this, args, true).event(event), v = select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
            dragDisable(event.view);
            nopropagation(event);
            g.mouse = [ p, this.__zoom.invert(p) ];
            interrupt(this);
            g.start();
            function mousemoved(event) {
                noevent(event);
                if (!g.moved) {
                    var dx = event.clientX - x0, dy = event.clientY - y0;
                    g.moved = dx * dx + dy * dy > clickDistance2;
                }
                g.event(event).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));
            }
            function mouseupped(event) {
                v.on("mousemove.zoom mouseup.zoom", null);
                yesdrag(event.view, g.moved);
                noevent(event);
                g.event(event).end();
            }
        }
        function dblclicked(event, ...args) {
            if (!filter.apply(this, arguments)) return;
            var t0 = this.__zoom, p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? .5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
            noevent(event);
            if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event); else select(this).call(zoom.transform, t1, p0, event);
        }
        function touchstarted(event, ...args) {
            if (!filter.apply(this, arguments)) return;
            var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
            nopropagation(event);
            for (i = 0; i < n; ++i) {
                t = touches[i], p = pointer(t, this);
                p = [ p, this.__zoom.invert(p), t.identifier ];
                if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting; else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, 
                g.taps = 0;
            }
            if (touchstarting) touchstarting = clearTimeout(touchstarting);
            if (started) {
                if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout((function() {
                    touchstarting = null;
                }), touchDelay);
                interrupt(this);
                g.start();
            }
        }
        function touchmoved(event, ...args) {
            if (!this.__zooming) return;
            var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
            noevent(event);
            for (i = 0; i < n; ++i) {
                t = touches[i], p = pointer(t, this);
                if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p; else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
            }
            t = g.that.__zoom;
            if (g.touch1) {
                var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
                t = scale(t, Math.sqrt(dp / dl));
                p = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
                l = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
            } else if (g.touch0) p = g.touch0[0], l = g.touch0[1]; else return;
            g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
        }
        function touchended(event, ...args) {
            if (!this.__zooming) return;
            var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
            nopropagation(event);
            if (touchending) clearTimeout(touchending);
            touchending = setTimeout((function() {
                touchending = null;
            }), touchDelay);
            for (i = 0; i < n; ++i) {
                t = touches[i];
                if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0; else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
            }
            if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
            if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]); else {
                g.end();
                if (g.taps === 2) {
                    t = pointer(t, this);
                    if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
                        var p = select(this).on("dblclick.zoom");
                        if (p) p.apply(this, arguments);
                    }
                }
            }
        }
        zoom.wheelDelta = function(_) {
            return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), 
            zoom) : wheelDelta;
        };
        zoom.filter = function(_) {
            return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), 
            zoom) : filter;
        };
        zoom.touchable = function(_) {
            return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), 
            zoom) : touchable;
        };
        zoom.extent = function(_) {
            return arguments.length ? (extent = typeof _ === "function" ? _ : constant([ [ +_[0][0], +_[0][1] ], [ +_[1][0], +_[1][1] ] ]), 
            zoom) : extent;
        };
        zoom.scaleExtent = function(_) {
            return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [ scaleExtent[0], scaleExtent[1] ];
        };
        zoom.translateExtent = function(_) {
            return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], 
            translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [ [ translateExtent[0][0], translateExtent[0][1] ], [ translateExtent[1][0], translateExtent[1][1] ] ];
        };
        zoom.constrain = function(_) {
            return arguments.length ? (constrain = _, zoom) : constrain;
        };
        zoom.duration = function(_) {
            return arguments.length ? (duration = +_, zoom) : duration;
        };
        zoom.interpolate = function(_) {
            return arguments.length ? (interpolate = _, zoom) : interpolate;
        };
        zoom.on = function() {
            var value = listeners.on.apply(listeners, arguments);
            return value === listeners ? zoom : value;
        };
        zoom.clickDistance = function(_) {
            return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
        };
        zoom.tapDistance = function(_) {
            return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
        };
        return zoom;
    }
    const StoreContext = reactExports.createContext(null);
    const Provider$1 = StoreContext.Provider;
    const errorMessage = "[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#100";
    function useStore(selector, equalityFn) {
        const store = reactExports.useContext(StoreContext);
        if (store === null) {
            throw new Error(errorMessage);
        }
        return useStore$1(store, selector, equalityFn);
    }
    const useStoreApi = () => {
        const store = reactExports.useContext(StoreContext);
        if (store === null) {
            throw new Error(errorMessage);
        }
        return reactExports.useMemo((() => ({
            getState: store.getState,
            setState: store.setState,
            subscribe: store.subscribe,
            destroy: store.destroy
        })), [ store ]);
    };
    const selector$f = s => s.userSelectionActive ? "none" : "all";
    function Panel({position: position, children: children, className: className, style: style, ...rest}) {
        const pointerEvents = useStore(selector$f);
        const positionClasses = `${position}`.split("-");
        return jsxRuntimeExports.jsx("div", {
            className: cc([ "react-flow__panel", className, ...positionClasses ]),
            style: {
                ...style,
                pointerEvents: pointerEvents
            },
            ...rest,
            children: children
        });
    }
    function Attribution({proOptions: proOptions, position: position = "bottom-right"}) {
        if (proOptions?.hideAttribution) {
            return null;
        }
        return jsxRuntimeExports.jsx(Panel, {
            position: position,
            className: "react-flow__attribution",
            "data-message": "Please only hide this attribution when you are subscribed to React Flow Pro: https://pro.reactflow.dev",
            children: jsxRuntimeExports.jsx("a", {
                href: "https://reactflow.dev",
                target: "_blank",
                rel: "noopener noreferrer",
                "aria-label": "React Flow attribution",
                children: "React Flow"
            })
        });
    }
    const EdgeText = ({x: x, y: y, label: label, labelStyle: labelStyle = {}, labelShowBg: labelShowBg = true, labelBgStyle: labelBgStyle = {}, labelBgPadding: labelBgPadding = [ 2, 4 ], labelBgBorderRadius: labelBgBorderRadius = 2, children: children, className: className, ...rest}) => {
        const edgeRef = reactExports.useRef(null);
        const [edgeTextBbox, setEdgeTextBbox] = reactExports.useState({
            x: 0,
            y: 0,
            width: 0,
            height: 0
        });
        const edgeTextClasses = cc([ "react-flow__edge-textwrapper", className ]);
        reactExports.useEffect((() => {
            if (edgeRef.current) {
                const textBbox = edgeRef.current.getBBox();
                setEdgeTextBbox({
                    x: textBbox.x,
                    y: textBbox.y,
                    width: textBbox.width,
                    height: textBbox.height
                });
            }
        }), [ label ]);
        if (typeof label === "undefined" || !label) {
            return null;
        }
        return jsxRuntimeExports.jsxs("g", {
            transform: `translate(${x - edgeTextBbox.width / 2} ${y - edgeTextBbox.height / 2})`,
            className: edgeTextClasses,
            visibility: edgeTextBbox.width ? "visible" : "hidden",
            ...rest,
            children: [ labelShowBg && jsxRuntimeExports.jsx("rect", {
                width: edgeTextBbox.width + 2 * labelBgPadding[0],
                x: -labelBgPadding[0],
                y: -labelBgPadding[1],
                height: edgeTextBbox.height + 2 * labelBgPadding[1],
                className: "react-flow__edge-textbg",
                style: labelBgStyle,
                rx: labelBgBorderRadius,
                ry: labelBgBorderRadius
            }), jsxRuntimeExports.jsx("text", {
                className: "react-flow__edge-text",
                y: edgeTextBbox.height / 2,
                dy: "0.3em",
                ref: edgeRef,
                style: labelStyle,
                children: label
            }), children ]
        });
    };
    var EdgeText$1 = reactExports.memo(EdgeText);
    const getDimensions = node => ({
        width: node.offsetWidth,
        height: node.offsetHeight
    });
    const clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);
    const clampPosition = (position = {
        x: 0,
        y: 0
    }, extent) => ({
        x: clamp(position.x, extent[0][0], extent[1][0]),
        y: clamp(position.y, extent[0][1], extent[1][1])
    });
    const getHostForElement = element => element.getRootNode?.() || window?.document;
    const getBoundsOfBoxes = (box1, box2) => ({
        x: Math.min(box1.x, box2.x),
        y: Math.min(box1.y, box2.y),
        x2: Math.max(box1.x2, box2.x2),
        y2: Math.max(box1.y2, box2.y2)
    });
    const rectToBox = ({x: x, y: y, width: width, height: height}) => ({
        x: x,
        y: y,
        x2: x + width,
        y2: y + height
    });
    const boxToRect = ({x: x, y: y, x2: x2, y2: y2}) => ({
        x: x,
        y: y,
        width: x2 - x,
        height: y2 - y
    });
    const nodeToRect = node => ({
        ...node.positionAbsolute || {
            x: 0,
            y: 0
        },
        width: node.width || 0,
        height: node.height || 0
    });
    const getOverlappingArea = (rectA, rectB) => {
        const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));
        const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));
        return Math.ceil(xOverlap * yOverlap);
    };
    const isRectObject = obj => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);
    const isNumeric = n => !isNaN(n) && isFinite(n);
    const internalsSymbol = Symbol.for("internals");
    const elementSelectionKeys = [ "Enter", " ", "Escape" ];
    const devWarn = message => {};
    const isReactKeyboardEvent = event => "nativeEvent" in event;
    function isInputDOMNode(event) {
        const kbEvent = isReactKeyboardEvent(event) ? event.nativeEvent : event;
        const target = kbEvent.composedPath?.()?.[0] || event.target;
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
            return false;
        }
        return [ "INPUT", "SELECT", "TEXTAREA" ].includes(target?.nodeName) || target?.hasAttribute("contenteditable") || !!target?.closest(".nokey");
    }
    const BaseEdge = ({path: path, labelX: labelX, labelY: labelY, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, markerEnd: markerEnd, markerStart: markerStart, interactionWidth: interactionWidth = 20}) => jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [ jsxRuntimeExports.jsx("path", {
            style: style,
            d: path,
            fill: "none",
            className: "react-flow__edge-path",
            markerEnd: markerEnd,
            markerStart: markerStart
        }), interactionWidth && jsxRuntimeExports.jsx("path", {
            d: path,
            fill: "none",
            strokeOpacity: 0,
            strokeWidth: interactionWidth,
            className: "react-flow__edge-interaction"
        }), label && isNumeric(labelX) && isNumeric(labelY) ? jsxRuntimeExports.jsx(EdgeText$1, {
            x: labelX,
            y: labelY,
            label: label,
            labelStyle: labelStyle,
            labelShowBg: labelShowBg,
            labelBgStyle: labelBgStyle,
            labelBgPadding: labelBgPadding,
            labelBgBorderRadius: labelBgBorderRadius
        }) : null ]
    });
    BaseEdge.displayName = "BaseEdge";
    function getMouseHandler$1(id, getState, handler) {
        return handler === undefined ? handler : event => {
            const edge = getState().edges.find((e => e.id === id));
            if (edge) {
                handler(event, {
                    ...edge
                });
            }
        };
    }
    function getEdgeCenter({sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY}) {
        const xOffset = Math.abs(targetX - sourceX) / 2;
        const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;
        const yOffset = Math.abs(targetY - sourceY) / 2;
        const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;
        return [ centerX, centerY, xOffset, yOffset ];
    }
    function getBezierEdgeCenter({sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY, sourceControlX: sourceControlX, sourceControlY: sourceControlY, targetControlX: targetControlX, targetControlY: targetControlY}) {
        const centerX = sourceX * .125 + sourceControlX * .375 + targetControlX * .375 + targetX * .125;
        const centerY = sourceY * .125 + sourceControlY * .375 + targetControlY * .375 + targetY * .125;
        const offsetX = Math.abs(centerX - sourceX);
        const offsetY = Math.abs(centerY - sourceY);
        return [ centerX, centerY, offsetX, offsetY ];
    }
    var ConnectionMode;
    (function(ConnectionMode) {
        ConnectionMode["Strict"] = "strict";
        ConnectionMode["Loose"] = "loose";
    })(ConnectionMode || (ConnectionMode = {}));
    var PanOnScrollMode;
    (function(PanOnScrollMode) {
        PanOnScrollMode["Free"] = "free";
        PanOnScrollMode["Vertical"] = "vertical";
        PanOnScrollMode["Horizontal"] = "horizontal";
    })(PanOnScrollMode || (PanOnScrollMode = {}));
    var SelectionMode;
    (function(SelectionMode) {
        SelectionMode["Partial"] = "partial";
        SelectionMode["Full"] = "full";
    })(SelectionMode || (SelectionMode = {}));
    var ConnectionLineType;
    (function(ConnectionLineType) {
        ConnectionLineType["Bezier"] = "default";
        ConnectionLineType["Straight"] = "straight";
        ConnectionLineType["Step"] = "step";
        ConnectionLineType["SmoothStep"] = "smoothstep";
        ConnectionLineType["SimpleBezier"] = "simplebezier";
    })(ConnectionLineType || (ConnectionLineType = {}));
    var MarkerType;
    (function(MarkerType) {
        MarkerType["Arrow"] = "arrow";
        MarkerType["ArrowClosed"] = "arrowclosed";
    })(MarkerType || (MarkerType = {}));
    var Position;
    (function(Position) {
        Position["Left"] = "left";
        Position["Top"] = "top";
        Position["Right"] = "right";
        Position["Bottom"] = "bottom";
    })(Position || (Position = {}));
    function getControl({pos: pos, x1: x1, y1: y1, x2: x2, y2: y2}) {
        if (pos === Position.Left || pos === Position.Right) {
            return [ .5 * (x1 + x2), y1 ];
        }
        return [ x1, .5 * (y1 + y2) ];
    }
    function getSimpleBezierPath({sourceX: sourceX, sourceY: sourceY, sourcePosition: sourcePosition = Position.Bottom, targetX: targetX, targetY: targetY, targetPosition: targetPosition = Position.Top}) {
        const [sourceControlX, sourceControlY] = getControl({
            pos: sourcePosition,
            x1: sourceX,
            y1: sourceY,
            x2: targetX,
            y2: targetY
        });
        const [targetControlX, targetControlY] = getControl({
            pos: targetPosition,
            x1: targetX,
            y1: targetY,
            x2: sourceX,
            y2: sourceY
        });
        const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({
            sourceX: sourceX,
            sourceY: sourceY,
            targetX: targetX,
            targetY: targetY,
            sourceControlX: sourceControlX,
            sourceControlY: sourceControlY,
            targetControlX: targetControlX,
            targetControlY: targetControlY
        });
        return [ `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY ];
    }
    const SimpleBezierEdge = reactExports.memo((({sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY, sourcePosition: sourcePosition = Position.Bottom, targetPosition: targetPosition = Position.Top, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, markerEnd: markerEnd, markerStart: markerStart, interactionWidth: interactionWidth}) => {
        const [path, labelX, labelY] = getSimpleBezierPath({
            sourceX: sourceX,
            sourceY: sourceY,
            sourcePosition: sourcePosition,
            targetX: targetX,
            targetY: targetY,
            targetPosition: targetPosition
        });
        return jsxRuntimeExports.jsx(BaseEdge, {
            path: path,
            labelX: labelX,
            labelY: labelY,
            label: label,
            labelStyle: labelStyle,
            labelShowBg: labelShowBg,
            labelBgStyle: labelBgStyle,
            labelBgPadding: labelBgPadding,
            labelBgBorderRadius: labelBgBorderRadius,
            style: style,
            markerEnd: markerEnd,
            markerStart: markerStart,
            interactionWidth: interactionWidth
        });
    }));
    SimpleBezierEdge.displayName = "SimpleBezierEdge";
    const handleDirections = {
        [Position.Left]: {
            x: -1,
            y: 0
        },
        [Position.Right]: {
            x: 1,
            y: 0
        },
        [Position.Top]: {
            x: 0,
            y: -1
        },
        [Position.Bottom]: {
            x: 0,
            y: 1
        }
    };
    const getDirection = ({source: source, sourcePosition: sourcePosition = Position.Bottom, target: target}) => {
        if (sourcePosition === Position.Left || sourcePosition === Position.Right) {
            return source.x < target.x ? {
                x: 1,
                y: 0
            } : {
                x: -1,
                y: 0
            };
        }
        return source.y < target.y ? {
            x: 0,
            y: 1
        } : {
            x: 0,
            y: -1
        };
    };
    const distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));
    function getPoints({source: source, sourcePosition: sourcePosition = Position.Bottom, target: target, targetPosition: targetPosition = Position.Top, center: center, offset: offset}) {
        const sourceDir = handleDirections[sourcePosition];
        const targetDir = handleDirections[targetPosition];
        const sourceGapped = {
            x: source.x + sourceDir.x * offset,
            y: source.y + sourceDir.y * offset
        };
        const targetGapped = {
            x: target.x + targetDir.x * offset,
            y: target.y + targetDir.y * offset
        };
        const dir = getDirection({
            source: sourceGapped,
            sourcePosition: sourcePosition,
            target: targetGapped
        });
        const dirAccessor = dir.x !== 0 ? "x" : "y";
        const currDir = dir[dirAccessor];
        let points = [];
        let centerX, centerY;
        const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({
            sourceX: source.x,
            sourceY: source.y,
            targetX: target.x,
            targetY: target.y
        });
        if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {
            centerX = center.x || defaultCenterX;
            centerY = center.y || defaultCenterY;
            const verticalSplit = [ {
                x: centerX,
                y: sourceGapped.y
            }, {
                x: centerX,
                y: targetGapped.y
            } ];
            const horizontalSplit = [ {
                x: sourceGapped.x,
                y: centerY
            }, {
                x: targetGapped.x,
                y: centerY
            } ];
            if (sourceDir[dirAccessor] === currDir) {
                points = dirAccessor === "x" ? verticalSplit : horizontalSplit;
            } else {
                points = dirAccessor === "x" ? horizontalSplit : verticalSplit;
            }
        } else {
            const sourceTarget = [ {
                x: sourceGapped.x,
                y: targetGapped.y
            } ];
            const targetSource = [ {
                x: targetGapped.x,
                y: sourceGapped.y
            } ];
            if (dirAccessor === "x") {
                points = sourceDir.x === currDir ? targetSource : sourceTarget;
            } else {
                points = sourceDir.y === currDir ? sourceTarget : targetSource;
            }
            if (sourcePosition !== targetPosition) {
                const dirAccessorOpposite = dirAccessor === "x" ? "y" : "x";
                const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];
                const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];
                const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];
                const flipSourceTarget = sourceDir[dirAccessor] === 1 && (!isSameDir && sourceGtTargetOppo || isSameDir && sourceLtTargetOppo) || sourceDir[dirAccessor] !== 1 && (!isSameDir && sourceLtTargetOppo || isSameDir && sourceGtTargetOppo);
                if (flipSourceTarget) {
                    points = dirAccessor === "x" ? sourceTarget : targetSource;
                }
            }
            centerX = points[0].x;
            centerY = points[0].y;
        }
        const pathPoints = [ source, sourceGapped, ...points, targetGapped, target ];
        return [ pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY ];
    }
    function getBend(a, b, c, size) {
        const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);
        const {x: x, y: y} = b;
        if (a.x === x && x === c.x || a.y === y && y === c.y) {
            return `L${x} ${y}`;
        }
        if (a.y === y) {
            const xDir = a.x < c.x ? -1 : 1;
            const yDir = a.y < c.y ? 1 : -1;
            return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;
        }
        const xDir = a.x < c.x ? 1 : -1;
        const yDir = a.y < c.y ? -1 : 1;
        return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;
    }
    function getSmoothStepPath({sourceX: sourceX, sourceY: sourceY, sourcePosition: sourcePosition = Position.Bottom, targetX: targetX, targetY: targetY, targetPosition: targetPosition = Position.Top, borderRadius: borderRadius = 5, centerX: centerX, centerY: centerY, offset: offset = 20}) {
        const [points, labelX, labelY, offsetX, offsetY] = getPoints({
            source: {
                x: sourceX,
                y: sourceY
            },
            sourcePosition: sourcePosition,
            target: {
                x: targetX,
                y: targetY
            },
            targetPosition: targetPosition,
            center: {
                x: centerX,
                y: centerY
            },
            offset: offset
        });
        const path = points.reduce(((res, p, i) => {
            let segment = "";
            if (i > 0 && i < points.length - 1) {
                segment = getBend(points[i - 1], p, points[i + 1], borderRadius);
            } else {
                segment = `${i === 0 ? "M" : "L"}${p.x} ${p.y}`;
            }
            res += segment;
            return res;
        }), "");
        return [ path, labelX, labelY, offsetX, offsetY ];
    }
    const SmoothStepEdge = reactExports.memo((({sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, sourcePosition: sourcePosition = Position.Bottom, targetPosition: targetPosition = Position.Top, markerEnd: markerEnd, markerStart: markerStart, pathOptions: pathOptions, interactionWidth: interactionWidth}) => {
        const [path, labelX, labelY] = getSmoothStepPath({
            sourceX: sourceX,
            sourceY: sourceY,
            sourcePosition: sourcePosition,
            targetX: targetX,
            targetY: targetY,
            targetPosition: targetPosition,
            borderRadius: pathOptions?.borderRadius,
            offset: pathOptions?.offset
        });
        return jsxRuntimeExports.jsx(BaseEdge, {
            path: path,
            labelX: labelX,
            labelY: labelY,
            label: label,
            labelStyle: labelStyle,
            labelShowBg: labelShowBg,
            labelBgStyle: labelBgStyle,
            labelBgPadding: labelBgPadding,
            labelBgBorderRadius: labelBgBorderRadius,
            style: style,
            markerEnd: markerEnd,
            markerStart: markerStart,
            interactionWidth: interactionWidth
        });
    }));
    SmoothStepEdge.displayName = "SmoothStepEdge";
    const StepEdge = reactExports.memo((props => jsxRuntimeExports.jsx(SmoothStepEdge, {
        ...props,
        pathOptions: reactExports.useMemo((() => ({
            borderRadius: 0,
            offset: props.pathOptions?.offset
        })), [ props.pathOptions?.offset ])
    })));
    StepEdge.displayName = "StepEdge";
    function getStraightPath({sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY}) {
        const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({
            sourceX: sourceX,
            sourceY: sourceY,
            targetX: targetX,
            targetY: targetY
        });
        return [ `M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY ];
    }
    const StraightEdge = reactExports.memo((({sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, markerEnd: markerEnd, markerStart: markerStart, interactionWidth: interactionWidth}) => {
        const [path, labelX, labelY] = getStraightPath({
            sourceX: sourceX,
            sourceY: sourceY,
            targetX: targetX,
            targetY: targetY
        });
        return jsxRuntimeExports.jsx(BaseEdge, {
            path: path,
            labelX: labelX,
            labelY: labelY,
            label: label,
            labelStyle: labelStyle,
            labelShowBg: labelShowBg,
            labelBgStyle: labelBgStyle,
            labelBgPadding: labelBgPadding,
            labelBgBorderRadius: labelBgBorderRadius,
            style: style,
            markerEnd: markerEnd,
            markerStart: markerStart,
            interactionWidth: interactionWidth
        });
    }));
    StraightEdge.displayName = "StraightEdge";
    function calculateControlOffset(distance, curvature) {
        if (distance >= 0) {
            return .5 * distance;
        }
        return curvature * 25 * Math.sqrt(-distance);
    }
    function getControlWithCurvature({pos: pos, x1: x1, y1: y1, x2: x2, y2: y2, c: c}) {
        switch (pos) {
          case Position.Left:
            return [ x1 - calculateControlOffset(x1 - x2, c), y1 ];

          case Position.Right:
            return [ x1 + calculateControlOffset(x2 - x1, c), y1 ];

          case Position.Top:
            return [ x1, y1 - calculateControlOffset(y1 - y2, c) ];

          case Position.Bottom:
            return [ x1, y1 + calculateControlOffset(y2 - y1, c) ];
        }
    }
    function getBezierPath({sourceX: sourceX, sourceY: sourceY, sourcePosition: sourcePosition = Position.Bottom, targetX: targetX, targetY: targetY, targetPosition: targetPosition = Position.Top, curvature: curvature = .25}) {
        const [sourceControlX, sourceControlY] = getControlWithCurvature({
            pos: sourcePosition,
            x1: sourceX,
            y1: sourceY,
            x2: targetX,
            y2: targetY,
            c: curvature
        });
        const [targetControlX, targetControlY] = getControlWithCurvature({
            pos: targetPosition,
            x1: targetX,
            y1: targetY,
            x2: sourceX,
            y2: sourceY,
            c: curvature
        });
        const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({
            sourceX: sourceX,
            sourceY: sourceY,
            targetX: targetX,
            targetY: targetY,
            sourceControlX: sourceControlX,
            sourceControlY: sourceControlY,
            targetControlX: targetControlX,
            targetControlY: targetControlY
        });
        return [ `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY ];
    }
    const BezierEdge = reactExports.memo((({sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY, sourcePosition: sourcePosition = Position.Bottom, targetPosition: targetPosition = Position.Top, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, markerEnd: markerEnd, markerStart: markerStart, pathOptions: pathOptions, interactionWidth: interactionWidth}) => {
        const [path, labelX, labelY] = getBezierPath({
            sourceX: sourceX,
            sourceY: sourceY,
            sourcePosition: sourcePosition,
            targetX: targetX,
            targetY: targetY,
            targetPosition: targetPosition,
            curvature: pathOptions?.curvature
        });
        return jsxRuntimeExports.jsx(BaseEdge, {
            path: path,
            labelX: labelX,
            labelY: labelY,
            label: label,
            labelStyle: labelStyle,
            labelShowBg: labelShowBg,
            labelBgStyle: labelBgStyle,
            labelBgPadding: labelBgPadding,
            labelBgBorderRadius: labelBgBorderRadius,
            style: style,
            markerEnd: markerEnd,
            markerStart: markerStart,
            interactionWidth: interactionWidth
        });
    }));
    BezierEdge.displayName = "BezierEdge";
    const NodeIdContext = reactExports.createContext(null);
    const Provider = NodeIdContext.Provider;
    NodeIdContext.Consumer;
    const useNodeId = () => {
        const nodeId = reactExports.useContext(NodeIdContext);
        return nodeId;
    };
    function checkElementBelowIsValid(event, connectionMode, isTarget, nodeId, handleId, isValidConnection, doc) {
        const elementBelow = doc.elementFromPoint(event.clientX, event.clientY);
        const elementBelowIsTarget = elementBelow?.classList.contains("target") || false;
        const elementBelowIsSource = elementBelow?.classList.contains("source") || false;
        const result = {
            elementBelow: elementBelow,
            isValid: false,
            connection: {
                source: null,
                target: null,
                sourceHandle: null,
                targetHandle: null
            },
            isHoveringHandle: false
        };
        if (elementBelow && (elementBelowIsTarget || elementBelowIsSource)) {
            result.isHoveringHandle = true;
            const elementBelowNodeId = elementBelow.getAttribute("data-nodeid");
            const elementBelowHandleId = elementBelow.getAttribute("data-handleid");
            const connection = isTarget ? {
                source: elementBelowNodeId,
                sourceHandle: elementBelowHandleId,
                target: nodeId,
                targetHandle: handleId
            } : {
                source: nodeId,
                sourceHandle: handleId,
                target: elementBelowNodeId,
                targetHandle: elementBelowHandleId
            };
            result.connection = connection;
            const isValid = connectionMode === ConnectionMode.Strict ? isTarget && elementBelowIsSource || !isTarget && elementBelowIsTarget : elementBelowNodeId !== nodeId || elementBelowHandleId !== handleId;
            if (isValid) {
                result.isValid = isValidConnection(connection);
            }
        }
        return result;
    }
    function resetRecentHandle(hoveredHandle) {
        hoveredHandle?.classList.remove("react-flow__handle-valid");
        hoveredHandle?.classList.remove("react-flow__handle-connecting");
    }
    function handleMouseDown({event: event, handleId: handleId, nodeId: nodeId, onConnect: onConnect, isTarget: isTarget, getState: getState, setState: setState, isValidConnection: isValidConnection, elementEdgeUpdaterType: elementEdgeUpdaterType, onEdgeUpdateEnd: onEdgeUpdateEnd}) {
        const reactFlowNode = event.target.closest(".react-flow");
        const doc = getHostForElement(event.target);
        if (!doc) {
            return;
        }
        const elementBelow = doc.elementFromPoint(event.clientX, event.clientY);
        const elementBelowIsTarget = elementBelow?.classList.contains("target");
        const elementBelowIsSource = elementBelow?.classList.contains("source");
        if (!reactFlowNode || !elementBelowIsTarget && !elementBelowIsSource && !elementEdgeUpdaterType) {
            return;
        }
        const {onConnectStart: onConnectStart, connectionMode: connectionMode} = getState();
        const handleType = elementEdgeUpdaterType ? elementEdgeUpdaterType : elementBelowIsTarget ? "target" : "source";
        const containerBounds = reactFlowNode.getBoundingClientRect();
        let recentHoveredHandle;
        setState({
            connectionPosition: {
                x: event.clientX - containerBounds.left,
                y: event.clientY - containerBounds.top
            },
            connectionNodeId: nodeId,
            connectionHandleId: handleId,
            connectionHandleType: handleType
        });
        onConnectStart?.(event, {
            nodeId: nodeId,
            handleId: handleId,
            handleType: handleType
        });
        function onMouseMove(event) {
            setState({
                connectionPosition: {
                    x: event.clientX - containerBounds.left,
                    y: event.clientY - containerBounds.top
                }
            });
            const {connection: connection, elementBelow: elementBelow, isValid: isValid, isHoveringHandle: isHoveringHandle} = checkElementBelowIsValid(event, connectionMode, isTarget, nodeId, handleId, isValidConnection, doc);
            if (!isHoveringHandle) {
                return resetRecentHandle(recentHoveredHandle);
            }
            if (connection.source !== connection.target && elementBelow) {
                resetRecentHandle(recentHoveredHandle);
                recentHoveredHandle = elementBelow;
                elementBelow.classList.add("react-flow__handle-connecting");
                elementBelow.classList.toggle("react-flow__handle-valid", isValid);
            }
        }
        function onMouseUp(event) {
            const {connection: connection, isValid: isValid} = checkElementBelowIsValid(event, connectionMode, isTarget, nodeId, handleId, isValidConnection, doc);
            if (isValid) {
                onConnect?.(connection);
            }
            getState().onConnectEnd?.(event);
            if (elementEdgeUpdaterType && onEdgeUpdateEnd) {
                onEdgeUpdateEnd(event);
            }
            resetRecentHandle(recentHoveredHandle);
            setState({
                connectionNodeId: null,
                connectionHandleId: null,
                connectionHandleType: null
            });
            doc.removeEventListener("mousemove", onMouseMove);
            doc.removeEventListener("mouseup", onMouseUp);
        }
        doc.addEventListener("mousemove", onMouseMove);
        doc.addEventListener("mouseup", onMouseUp);
    }
    const isEdge = element => "id" in element && "source" in element && "target" in element;
    const getEdgeId = ({source: source, sourceHandle: sourceHandle, target: target, targetHandle: targetHandle}) => `reactflow__edge-${source}${sourceHandle || ""}-${target}${targetHandle || ""}`;
    const getMarkerId = (marker, rfId) => {
        if (typeof marker === "undefined") {
            return "";
        }
        if (typeof marker === "string") {
            return marker;
        }
        const idPrefix = rfId ? `${rfId}__` : "";
        return `${idPrefix}${Object.keys(marker).sort().map((key => `${key}=${marker[key]}`)).join("&")}`;
    };
    const connectionExists = (edge, edges) => edges.some((el => el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle)));
    const addEdge = (edgeParams, edges) => {
        if (!edgeParams.source || !edgeParams.target) {
            return edges;
        }
        let edge;
        if (isEdge(edgeParams)) {
            edge = {
                ...edgeParams
            };
        } else {
            edge = {
                ...edgeParams,
                id: getEdgeId(edgeParams)
            };
        }
        if (connectionExists(edge, edges)) {
            return edges;
        }
        return edges.concat(edge);
    };
    const pointToRendererPoint = ({x: x, y: y}, [tx, ty, tScale], snapToGrid, [snapX, snapY]) => {
        const position = {
            x: (x - tx) / tScale,
            y: (y - ty) / tScale
        };
        if (snapToGrid) {
            return {
                x: snapX * Math.round(position.x / snapX),
                y: snapY * Math.round(position.y / snapY)
            };
        }
        return position;
    };
    const getNodePositionWithOrigin = (node, nodeOrigin = [ 0, 0 ]) => {
        if (!node) {
            return {
                x: 0,
                y: 0,
                positionAbsolute: {
                    x: 0,
                    y: 0
                }
            };
        }
        const offsetX = (node.width ?? 0) * nodeOrigin[0];
        const offsetY = (node.height ?? 0) * nodeOrigin[1];
        const position = {
            x: node.position.x - offsetX,
            y: node.position.y - offsetY
        };
        return {
            ...position,
            positionAbsolute: node.positionAbsolute ? {
                x: node.positionAbsolute.x - offsetX,
                y: node.positionAbsolute.y - offsetY
            } : position
        };
    };
    const getRectOfNodes = (nodes, nodeOrigin = [ 0, 0 ]) => {
        if (nodes.length === 0) {
            return {
                x: 0,
                y: 0,
                width: 0,
                height: 0
            };
        }
        const box = nodes.reduce(((currBox, node) => {
            const {x: x, y: y} = getNodePositionWithOrigin(node, nodeOrigin).positionAbsolute;
            return getBoundsOfBoxes(currBox, rectToBox({
                x: x,
                y: y,
                width: node.width || 0,
                height: node.height || 0
            }));
        }), {
            x: Infinity,
            y: Infinity,
            x2: -Infinity,
            y2: -Infinity
        });
        return boxToRect(box);
    };
    const getNodesInside = (nodeInternals, rect, [tx, ty, tScale] = [ 0, 0, 1 ], partially = false, excludeNonSelectableNodes = false, nodeOrigin = [ 0, 0 ]) => {
        const paneRect = {
            x: (rect.x - tx) / tScale,
            y: (rect.y - ty) / tScale,
            width: rect.width / tScale,
            height: rect.height / tScale
        };
        const visibleNodes = [];
        nodeInternals.forEach((node => {
            const {width: width, height: height, selectable: selectable = true, hidden: hidden = false} = node;
            if (excludeNonSelectableNodes && !selectable || hidden) {
                return false;
            }
            const {positionAbsolute: positionAbsolute} = getNodePositionWithOrigin(node, nodeOrigin);
            const nodeRect = {
                x: positionAbsolute.x,
                y: positionAbsolute.y,
                width: width || 0,
                height: height || 0
            };
            const overlappingArea = getOverlappingArea(paneRect, nodeRect);
            const notInitialized = typeof width === "undefined" || typeof height === "undefined" || width === null || height === null;
            const partiallyVisible = partially && overlappingArea > 0;
            const area = (width || 0) * (height || 0);
            const isVisible = notInitialized || partiallyVisible || overlappingArea >= area;
            if (isVisible || node.dragging) {
                visibleNodes.push(node);
            }
        }));
        return visibleNodes;
    };
    const getConnectedEdges = (nodes, edges) => {
        const nodeIds = nodes.map((node => node.id));
        return edges.filter((edge => nodeIds.includes(edge.source) || nodeIds.includes(edge.target)));
    };
    const getTransformForBounds = (bounds, width, height, minZoom, maxZoom, padding = .1) => {
        const xZoom = width / (bounds.width * (1 + padding));
        const yZoom = height / (bounds.height * (1 + padding));
        const zoom = Math.min(xZoom, yZoom);
        const clampedZoom = clamp(zoom, minZoom, maxZoom);
        const boundsCenterX = bounds.x + bounds.width / 2;
        const boundsCenterY = bounds.y + bounds.height / 2;
        const x = width / 2 - boundsCenterX * clampedZoom;
        const y = height / 2 - boundsCenterY * clampedZoom;
        return [ x, y, clampedZoom ];
    };
    const getD3Transition = (selection, duration = 0) => selection.transition().duration(duration);
    const alwaysValid = () => true;
    const selector$e = s => ({
        connectionStartHandle: s.connectionStartHandle,
        connectOnClick: s.connectOnClick,
        noPanClassName: s.noPanClassName
    });
    const Handle = reactExports.forwardRef((({type: type = "source", position: position = Position.Top, isValidConnection: isValidConnection = alwaysValid, isConnectable: isConnectable = true, id: id, onConnect: onConnect, children: children, className: className, onMouseDown: onMouseDown, ...rest}, ref) => {
        const store = useStoreApi();
        const nodeId = useNodeId();
        const {connectionStartHandle: connectionStartHandle, connectOnClick: connectOnClick, noPanClassName: noPanClassName} = useStore(selector$e, shallow);
        const handleId = id || null;
        const isTarget = type === "target";
        const onConnectExtended = params => {
            const {defaultEdgeOptions: defaultEdgeOptions, onConnect: onConnectAction, hasDefaultEdges: hasDefaultEdges} = store.getState();
            const edgeParams = {
                ...defaultEdgeOptions,
                ...params
            };
            if (hasDefaultEdges) {
                const {edges: edges} = store.getState();
                store.setState({
                    edges: addEdge(edgeParams, edges)
                });
            }
            onConnectAction?.(edgeParams);
            onConnect?.(edgeParams);
        };
        const onMouseDownHandler = event => {
            if (event.button === 0) {
                handleMouseDown({
                    event: event,
                    handleId: handleId,
                    nodeId: nodeId,
                    onConnect: onConnectExtended,
                    isTarget: isTarget,
                    getState: store.getState,
                    setState: store.setState,
                    isValidConnection: isValidConnection
                });
            }
            onMouseDown?.(event);
        };
        const onClick = event => {
            const {onClickConnectStart: onClickConnectStart, onClickConnectEnd: onClickConnectEnd, connectionMode: connectionMode} = store.getState();
            if (!connectionStartHandle) {
                onClickConnectStart?.(event, {
                    nodeId: nodeId,
                    handleId: handleId,
                    handleType: type
                });
                store.setState({
                    connectionStartHandle: {
                        nodeId: nodeId,
                        type: type,
                        handleId: handleId
                    }
                });
                return;
            }
            const doc = getHostForElement(event.target);
            const {connection: connection, isValid: isValid} = checkElementBelowIsValid(event, connectionMode, connectionStartHandle.type === "target", connectionStartHandle.nodeId, connectionStartHandle.handleId || null, isValidConnection, doc);
            if (isValid) {
                onConnectExtended(connection);
            }
            onClickConnectEnd?.(event);
            store.setState({
                connectionStartHandle: null
            });
        };
        return jsxRuntimeExports.jsx("div", {
            "data-handleid": handleId,
            "data-nodeid": nodeId,
            "data-handlepos": position,
            className: cc([ "react-flow__handle", `react-flow__handle-${position}`, "nodrag", noPanClassName, className, {
                source: !isTarget,
                target: isTarget,
                connectable: isConnectable,
                connecting: connectionStartHandle?.nodeId === nodeId && connectionStartHandle?.handleId === handleId && connectionStartHandle?.type === type
            } ]),
            onMouseDown: onMouseDownHandler,
            onClick: connectOnClick ? onClick : undefined,
            ref: ref,
            ...rest,
            children: children
        });
    }));
    Handle.displayName = "Handle";
    var Handle$1 = reactExports.memo(Handle);
    const DefaultNode = ({data: data, isConnectable: isConnectable, targetPosition: targetPosition = Position.Top, sourcePosition: sourcePosition = Position.Bottom}) => jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [ jsxRuntimeExports.jsx(Handle$1, {
            type: "target",
            position: targetPosition,
            isConnectable: isConnectable
        }), data?.label, jsxRuntimeExports.jsx(Handle$1, {
            type: "source",
            position: sourcePosition,
            isConnectable: isConnectable
        }) ]
    });
    DefaultNode.displayName = "DefaultNode";
    var DefaultNode$1 = reactExports.memo(DefaultNode);
    const InputNode = ({data: data, isConnectable: isConnectable, sourcePosition: sourcePosition = Position.Bottom}) => jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [ data?.label, jsxRuntimeExports.jsx(Handle$1, {
            type: "source",
            position: sourcePosition,
            isConnectable: isConnectable
        }) ]
    });
    InputNode.displayName = "InputNode";
    var InputNode$1 = reactExports.memo(InputNode);
    const OutputNode = ({data: data, isConnectable: isConnectable, targetPosition: targetPosition = Position.Top}) => jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [ jsxRuntimeExports.jsx(Handle$1, {
            type: "target",
            position: targetPosition,
            isConnectable: isConnectable
        }), data?.label ]
    });
    OutputNode.displayName = "OutputNode";
    var OutputNode$1 = reactExports.memo(OutputNode);
    const GroupNode = () => null;
    GroupNode.displayName = "GroupNode";
    const selector$d = s => ({
        selectedNodes: s.getNodes().filter((n => n.selected)),
        selectedEdges: s.edges.filter((e => e.selected))
    });
    const selectId = obj => obj.id;
    function areEqual(a, b) {
        return shallow(a.selectedNodes.map(selectId), b.selectedNodes.map(selectId)) && shallow(a.selectedEdges.map(selectId), b.selectedEdges.map(selectId));
    }
    const SelectionListener = reactExports.memo((({onSelectionChange: onSelectionChange}) => {
        const store = useStoreApi();
        const {selectedNodes: selectedNodes, selectedEdges: selectedEdges} = useStore(selector$d, areEqual);
        reactExports.useEffect((() => {
            const params = {
                nodes: selectedNodes,
                edges: selectedEdges
            };
            onSelectionChange?.(params);
            store.getState().onSelectionChange?.(params);
        }), [ selectedNodes, selectedEdges, onSelectionChange ]);
        return null;
    }));
    SelectionListener.displayName = "SelectionListener";
    const changeSelector = s => !!s.onSelectionChange;
    function Wrapper$1({onSelectionChange: onSelectionChange}) {
        const storeHasSelectionChange = useStore(changeSelector);
        if (onSelectionChange || storeHasSelectionChange) {
            return jsxRuntimeExports.jsx(SelectionListener, {
                onSelectionChange: onSelectionChange
            });
        }
        return null;
    }
    const selector$c = s => ({
        setNodes: s.setNodes,
        setEdges: s.setEdges,
        setDefaultNodesAndEdges: s.setDefaultNodesAndEdges,
        setMinZoom: s.setMinZoom,
        setMaxZoom: s.setMaxZoom,
        setTranslateExtent: s.setTranslateExtent,
        setNodeExtent: s.setNodeExtent,
        reset: s.reset
    });
    function useStoreUpdater(value, setStoreState) {
        reactExports.useEffect((() => {
            if (typeof value !== "undefined") {
                setStoreState(value);
            }
        }), [ value ]);
    }
    function useDirectStoreUpdater(key, value, setState) {
        reactExports.useEffect((() => {
            if (typeof value !== "undefined") {
                setState({
                    [key]: value
                });
            }
        }), [ value ]);
    }
    const StoreUpdater = ({nodes: nodes, edges: edges, defaultNodes: defaultNodes, defaultEdges: defaultEdges, onConnect: onConnect, onConnectStart: onConnectStart, onConnectEnd: onConnectEnd, onClickConnectStart: onClickConnectStart, onClickConnectEnd: onClickConnectEnd, nodesDraggable: nodesDraggable, nodesConnectable: nodesConnectable, nodesFocusable: nodesFocusable, edgesFocusable: edgesFocusable, elevateNodesOnSelect: elevateNodesOnSelect, minZoom: minZoom, maxZoom: maxZoom, nodeExtent: nodeExtent, onNodesChange: onNodesChange, onEdgesChange: onEdgesChange, elementsSelectable: elementsSelectable, connectionMode: connectionMode, snapGrid: snapGrid, snapToGrid: snapToGrid, translateExtent: translateExtent, connectOnClick: connectOnClick, defaultEdgeOptions: defaultEdgeOptions, fitView: fitView, fitViewOptions: fitViewOptions, onNodesDelete: onNodesDelete, onEdgesDelete: onEdgesDelete, onNodeDrag: onNodeDrag, onNodeDragStart: onNodeDragStart, onNodeDragStop: onNodeDragStop, onSelectionDrag: onSelectionDrag, onSelectionDragStart: onSelectionDragStart, onSelectionDragStop: onSelectionDragStop, noPanClassName: noPanClassName, nodeOrigin: nodeOrigin, rfId: rfId}) => {
        const {setNodes: setNodes, setEdges: setEdges, setDefaultNodesAndEdges: setDefaultNodesAndEdges, setMinZoom: setMinZoom, setMaxZoom: setMaxZoom, setTranslateExtent: setTranslateExtent, setNodeExtent: setNodeExtent, reset: reset} = useStore(selector$c, shallow);
        const store = useStoreApi();
        reactExports.useEffect((() => {
            const edgesWithDefaults = defaultEdges?.map((e => ({
                ...e,
                ...defaultEdgeOptions
            })));
            setDefaultNodesAndEdges(defaultNodes, edgesWithDefaults);
            return () => {
                reset();
            };
        }), []);
        useDirectStoreUpdater("defaultEdgeOptions", defaultEdgeOptions, store.setState);
        useDirectStoreUpdater("connectionMode", connectionMode, store.setState);
        useDirectStoreUpdater("onConnect", onConnect, store.setState);
        useDirectStoreUpdater("onConnectStart", onConnectStart, store.setState);
        useDirectStoreUpdater("onConnectEnd", onConnectEnd, store.setState);
        useDirectStoreUpdater("onClickConnectStart", onClickConnectStart, store.setState);
        useDirectStoreUpdater("onClickConnectEnd", onClickConnectEnd, store.setState);
        useDirectStoreUpdater("nodesDraggable", nodesDraggable, store.setState);
        useDirectStoreUpdater("nodesConnectable", nodesConnectable, store.setState);
        useDirectStoreUpdater("nodesFocusable", nodesFocusable, store.setState);
        useDirectStoreUpdater("edgesFocusable", edgesFocusable, store.setState);
        useDirectStoreUpdater("elementsSelectable", elementsSelectable, store.setState);
        useDirectStoreUpdater("elevateNodesOnSelect", elevateNodesOnSelect, store.setState);
        useDirectStoreUpdater("snapToGrid", snapToGrid, store.setState);
        useDirectStoreUpdater("snapGrid", snapGrid, store.setState);
        useDirectStoreUpdater("onNodesChange", onNodesChange, store.setState);
        useDirectStoreUpdater("onEdgesChange", onEdgesChange, store.setState);
        useDirectStoreUpdater("connectOnClick", connectOnClick, store.setState);
        useDirectStoreUpdater("fitViewOnInit", fitView, store.setState);
        useDirectStoreUpdater("fitViewOnInitOptions", fitViewOptions, store.setState);
        useDirectStoreUpdater("onNodesDelete", onNodesDelete, store.setState);
        useDirectStoreUpdater("onEdgesDelete", onEdgesDelete, store.setState);
        useDirectStoreUpdater("onNodeDrag", onNodeDrag, store.setState);
        useDirectStoreUpdater("onNodeDragStart", onNodeDragStart, store.setState);
        useDirectStoreUpdater("onNodeDragStop", onNodeDragStop, store.setState);
        useDirectStoreUpdater("onSelectionDrag", onSelectionDrag, store.setState);
        useDirectStoreUpdater("onSelectionDragStart", onSelectionDragStart, store.setState);
        useDirectStoreUpdater("onSelectionDragStop", onSelectionDragStop, store.setState);
        useDirectStoreUpdater("noPanClassName", noPanClassName, store.setState);
        useDirectStoreUpdater("nodeOrigin", nodeOrigin, store.setState);
        useDirectStoreUpdater("rfId", rfId, store.setState);
        useStoreUpdater(nodes, setNodes);
        useStoreUpdater(edges, setEdges);
        useStoreUpdater(minZoom, setMinZoom);
        useStoreUpdater(maxZoom, setMaxZoom);
        useStoreUpdater(translateExtent, setTranslateExtent);
        useStoreUpdater(nodeExtent, setNodeExtent);
        return null;
    };
    const style = {
        display: "none"
    };
    const ariaLiveStyle = {
        position: "absolute",
        width: 1,
        height: 1,
        margin: -1,
        border: 0,
        padding: 0,
        overflow: "hidden",
        clip: "rect(0px, 0px, 0px, 0px)",
        clipPath: "inset(100%)"
    };
    const ARIA_NODE_DESC_KEY = "react-flow__node-desc";
    const ARIA_EDGE_DESC_KEY = "react-flow__edge-desc";
    const ARIA_LIVE_MESSAGE = "react-flow__aria-live";
    const selector$b = s => s.ariaLiveMessage;
    function AriaLiveMessage({rfId: rfId}) {
        const ariaLiveMessage = useStore(selector$b);
        return jsxRuntimeExports.jsx("div", {
            id: `${ARIA_LIVE_MESSAGE}-${rfId}`,
            "aria-live": "assertive",
            "aria-atomic": "true",
            style: ariaLiveStyle,
            children: ariaLiveMessage
        });
    }
    function A11yDescriptions({rfId: rfId, disableKeyboardA11y: disableKeyboardA11y}) {
        return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [ jsxRuntimeExports.jsxs("div", {
                id: `${ARIA_NODE_DESC_KEY}-${rfId}`,
                style: style,
                children: [ "Press enter or space to select a node.", !disableKeyboardA11y && "You can then use the arrow keys to move the node around.", " Press delete to remove it and escape to cancel.", " " ]
            }), jsxRuntimeExports.jsx("div", {
                id: `${ARIA_EDGE_DESC_KEY}-${rfId}`,
                style: style,
                children: "Press enter or space to select an edge. You can then press delete to remove it or escape to cancel."
            }), !disableKeyboardA11y && jsxRuntimeExports.jsx(AriaLiveMessage, {
                rfId: rfId
            }) ]
        });
    }
    const shiftX = (x, shift, position) => {
        if (position === Position.Left) return x - shift;
        if (position === Position.Right) return x + shift;
        return x;
    };
    const shiftY = (y, shift, position) => {
        if (position === Position.Top) return y - shift;
        if (position === Position.Bottom) return y + shift;
        return y;
    };
    const EdgeUpdaterClassName = "react-flow__edgeupdater";
    const EdgeAnchor = ({position: position, centerX: centerX, centerY: centerY, radius: radius = 10, onMouseDown: onMouseDown, onMouseEnter: onMouseEnter, onMouseOut: onMouseOut, type: type}) => jsxRuntimeExports.jsx("circle", {
        onMouseDown: onMouseDown,
        onMouseEnter: onMouseEnter,
        onMouseOut: onMouseOut,
        className: cc([ EdgeUpdaterClassName, `${EdgeUpdaterClassName}-${type}` ]),
        cx: shiftX(centerX, radius, position),
        cy: shiftY(centerY, radius, position),
        r: radius,
        stroke: "transparent",
        fill: "transparent"
    });
    var wrapEdge = EdgeComponent => {
        const EdgeWrapper = ({id: id, className: className, type: type, data: data, onClick: onClick, onEdgeDoubleClick: onEdgeDoubleClick, selected: selected, animated: animated, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, source: source, target: target, sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY, sourcePosition: sourcePosition, targetPosition: targetPosition, elementsSelectable: elementsSelectable, hidden: hidden, sourceHandleId: sourceHandleId, targetHandleId: targetHandleId, onContextMenu: onContextMenu, onMouseEnter: onMouseEnter, onMouseMove: onMouseMove, onMouseLeave: onMouseLeave, edgeUpdaterRadius: edgeUpdaterRadius, onEdgeUpdate: onEdgeUpdate, onEdgeUpdateStart: onEdgeUpdateStart, onEdgeUpdateEnd: onEdgeUpdateEnd, markerEnd: markerEnd, markerStart: markerStart, rfId: rfId, ariaLabel: ariaLabel, isFocusable: isFocusable, pathOptions: pathOptions, interactionWidth: interactionWidth}) => {
            const edgeRef = reactExports.useRef(null);
            const [updateHover, setUpdateHover] = reactExports.useState(false);
            const [updating, setUpdating] = reactExports.useState(false);
            const store = useStoreApi();
            const markerStartUrl = reactExports.useMemo((() => `url(#${getMarkerId(markerStart, rfId)})`), [ markerStart, rfId ]);
            const markerEndUrl = reactExports.useMemo((() => `url(#${getMarkerId(markerEnd, rfId)})`), [ markerEnd, rfId ]);
            if (hidden) {
                return null;
            }
            const onEdgeClick = event => {
                const {edges: edges, addSelectedEdges: addSelectedEdges} = store.getState();
                if (elementsSelectable) {
                    store.setState({
                        nodesSelectionActive: false
                    });
                    addSelectedEdges([ id ]);
                }
                if (onClick) {
                    const edge = edges.find((e => e.id === id));
                    onClick(event, edge);
                }
            };
            const onEdgeDoubleClickHandler = getMouseHandler$1(id, store.getState, onEdgeDoubleClick);
            const onEdgeContextMenu = getMouseHandler$1(id, store.getState, onContextMenu);
            const onEdgeMouseEnter = getMouseHandler$1(id, store.getState, onMouseEnter);
            const onEdgeMouseMove = getMouseHandler$1(id, store.getState, onMouseMove);
            const onEdgeMouseLeave = getMouseHandler$1(id, store.getState, onMouseLeave);
            const handleEdgeUpdater = (event, isSourceHandle) => {
                const nodeId = isSourceHandle ? target : source;
                const handleId = (isSourceHandle ? targetHandleId : sourceHandleId) || null;
                const handleType = isSourceHandle ? "target" : "source";
                const isValidConnection = () => true;
                const isTarget = isSourceHandle;
                const edge = store.getState().edges.find((e => e.id === id));
                setUpdating(true);
                onEdgeUpdateStart?.(event, edge, handleType);
                const _onEdgeUpdateEnd = evt => {
                    setUpdating(false);
                    onEdgeUpdateEnd?.(evt, edge, handleType);
                };
                const onConnectEdge = connection => onEdgeUpdate?.(edge, connection);
                handleMouseDown({
                    event: event,
                    handleId: handleId,
                    nodeId: nodeId,
                    onConnect: onConnectEdge,
                    isTarget: isTarget,
                    getState: store.getState,
                    setState: store.setState,
                    isValidConnection: isValidConnection,
                    elementEdgeUpdaterType: handleType,
                    onEdgeUpdateEnd: _onEdgeUpdateEnd
                });
            };
            const onEdgeUpdaterSourceMouseDown = event => handleEdgeUpdater(event, true);
            const onEdgeUpdaterTargetMouseDown = event => handleEdgeUpdater(event, false);
            const onEdgeUpdaterMouseEnter = () => setUpdateHover(true);
            const onEdgeUpdaterMouseOut = () => setUpdateHover(false);
            const inactive = !elementsSelectable && !onClick;
            const handleEdgeUpdate = typeof onEdgeUpdate !== "undefined";
            const onKeyDown = event => {
                if (elementSelectionKeys.includes(event.key) && elementsSelectable) {
                    const {unselectNodesAndEdges: unselectNodesAndEdges, addSelectedEdges: addSelectedEdges, edges: edges} = store.getState();
                    const unselect = event.key === "Escape";
                    if (unselect) {
                        edgeRef.current?.blur();
                        unselectNodesAndEdges({
                            edges: [ edges.find((e => e.id === id)) ]
                        });
                    } else {
                        addSelectedEdges([ id ]);
                    }
                }
            };
            return jsxRuntimeExports.jsxs("g", {
                className: cc([ "react-flow__edge", `react-flow__edge-${type}`, className, {
                    selected: selected,
                    animated: animated,
                    inactive: inactive,
                    updating: updateHover
                } ]),
                onClick: onEdgeClick,
                onDoubleClick: onEdgeDoubleClickHandler,
                onContextMenu: onEdgeContextMenu,
                onMouseEnter: onEdgeMouseEnter,
                onMouseMove: onEdgeMouseMove,
                onMouseLeave: onEdgeMouseLeave,
                onKeyDown: isFocusable ? onKeyDown : undefined,
                tabIndex: isFocusable ? 0 : undefined,
                role: isFocusable ? "button" : undefined,
                "data-testid": `rf__edge-${id}`,
                "aria-label": ariaLabel === null ? undefined : ariaLabel ? ariaLabel : `Edge from ${source} to ${target}`,
                "aria-describedby": isFocusable ? `${ARIA_EDGE_DESC_KEY}-${rfId}` : undefined,
                ref: edgeRef,
                children: [ !updating && jsxRuntimeExports.jsx(EdgeComponent, {
                    id: id,
                    source: source,
                    target: target,
                    selected: selected,
                    animated: animated,
                    label: label,
                    labelStyle: labelStyle,
                    labelShowBg: labelShowBg,
                    labelBgStyle: labelBgStyle,
                    labelBgPadding: labelBgPadding,
                    labelBgBorderRadius: labelBgBorderRadius,
                    data: data,
                    style: style,
                    sourceX: sourceX,
                    sourceY: sourceY,
                    targetX: targetX,
                    targetY: targetY,
                    sourcePosition: sourcePosition,
                    targetPosition: targetPosition,
                    sourceHandleId: sourceHandleId,
                    targetHandleId: targetHandleId,
                    markerStart: markerStartUrl,
                    markerEnd: markerEndUrl,
                    pathOptions: pathOptions,
                    interactionWidth: interactionWidth
                }), handleEdgeUpdate && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [ jsxRuntimeExports.jsx(EdgeAnchor, {
                        position: sourcePosition,
                        centerX: sourceX,
                        centerY: sourceY,
                        radius: edgeUpdaterRadius,
                        onMouseDown: onEdgeUpdaterSourceMouseDown,
                        onMouseEnter: onEdgeUpdaterMouseEnter,
                        onMouseOut: onEdgeUpdaterMouseOut,
                        type: "source"
                    }), jsxRuntimeExports.jsx(EdgeAnchor, {
                        position: targetPosition,
                        centerX: targetX,
                        centerY: targetY,
                        radius: edgeUpdaterRadius,
                        onMouseDown: onEdgeUpdaterTargetMouseDown,
                        onMouseEnter: onEdgeUpdaterMouseEnter,
                        onMouseOut: onEdgeUpdaterMouseOut,
                        type: "target"
                    }) ]
                }) ]
            });
        };
        EdgeWrapper.displayName = "EdgeWrapper";
        return reactExports.memo(EdgeWrapper);
    };
    function createEdgeTypes(edgeTypes) {
        const standardTypes = {
            default: wrapEdge(edgeTypes.default || BezierEdge),
            straight: wrapEdge(edgeTypes.bezier || StraightEdge),
            step: wrapEdge(edgeTypes.step || StepEdge),
            smoothstep: wrapEdge(edgeTypes.step || SmoothStepEdge),
            simplebezier: wrapEdge(edgeTypes.simplebezier || SimpleBezierEdge)
        };
        const wrappedTypes = {};
        const specialTypes = Object.keys(edgeTypes).filter((k => ![ "default", "bezier" ].includes(k))).reduce(((res, key) => {
            res[key] = wrapEdge(edgeTypes[key] || BezierEdge);
            return res;
        }), wrappedTypes);
        return {
            ...standardTypes,
            ...specialTypes
        };
    }
    function getHandlePosition(position, nodeRect, handle = null) {
        const x = (handle?.x || 0) + nodeRect.x;
        const y = (handle?.y || 0) + nodeRect.y;
        const width = handle?.width || nodeRect.width;
        const height = handle?.height || nodeRect.height;
        switch (position) {
          case Position.Top:
            return {
                x: x + width / 2,
                y: y
            };

          case Position.Right:
            return {
                x: x + width,
                y: y + height / 2
            };

          case Position.Bottom:
            return {
                x: x + width / 2,
                y: y + height
            };

          case Position.Left:
            return {
                x: x,
                y: y + height / 2
            };
        }
    }
    function getHandle(bounds, handleId) {
        if (!bounds) {
            return null;
        }
        let handle = null;
        if (bounds.length === 1 || !handleId) {
            handle = bounds[0];
        } else if (handleId) {
            handle = bounds.find((d => d.id === handleId));
        }
        return typeof handle === "undefined" ? null : handle;
    }
    const getEdgePositions = (sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition) => {
        const sourceHandlePos = getHandlePosition(sourcePosition, sourceNodeRect, sourceHandle);
        const targetHandlePos = getHandlePosition(targetPosition, targetNodeRect, targetHandle);
        return {
            sourceX: sourceHandlePos.x,
            sourceY: sourceHandlePos.y,
            targetX: targetHandlePos.x,
            targetY: targetHandlePos.y
        };
    };
    function isEdgeVisible({sourcePos: sourcePos, targetPos: targetPos, sourceWidth: sourceWidth, sourceHeight: sourceHeight, targetWidth: targetWidth, targetHeight: targetHeight, width: width, height: height, transform: transform}) {
        const edgeBox = {
            x: Math.min(sourcePos.x, targetPos.x),
            y: Math.min(sourcePos.y, targetPos.y),
            x2: Math.max(sourcePos.x + sourceWidth, targetPos.x + targetWidth),
            y2: Math.max(sourcePos.y + sourceHeight, targetPos.y + targetHeight)
        };
        if (edgeBox.x === edgeBox.x2) {
            edgeBox.x2 += 1;
        }
        if (edgeBox.y === edgeBox.y2) {
            edgeBox.y2 += 1;
        }
        const viewBox = rectToBox({
            x: (0 - transform[0]) / transform[2],
            y: (0 - transform[1]) / transform[2],
            width: width / transform[2],
            height: height / transform[2]
        });
        const xOverlap = Math.max(0, Math.min(viewBox.x2, edgeBox.x2) - Math.max(viewBox.x, edgeBox.x));
        const yOverlap = Math.max(0, Math.min(viewBox.y2, edgeBox.y2) - Math.max(viewBox.y, edgeBox.y));
        const overlappingArea = Math.ceil(xOverlap * yOverlap);
        return overlappingArea > 0;
    }
    function getNodeData(node) {
        const handleBounds = node?.[internalsSymbol]?.handleBounds || null;
        const isInvalid = !node || !handleBounds || !node.width || !node.height || typeof node.positionAbsolute?.x === "undefined" || typeof node.positionAbsolute?.y === "undefined";
        return [ {
            x: node?.positionAbsolute?.x || 0,
            y: node?.positionAbsolute?.y || 0,
            width: node?.width || 0,
            height: node?.height || 0
        }, handleBounds, !isInvalid ];
    }
    function isParentSelected(node, nodeInternals) {
        if (!node.parentNode) {
            return false;
        }
        const parentNode = nodeInternals.get(node.parentNode);
        if (!parentNode) {
            return false;
        }
        if (parentNode.selected) {
            return true;
        }
        return isParentSelected(parentNode, nodeInternals);
    }
    function hasSelector(target, selector, nodeRef) {
        let current = target;
        do {
            if (current?.matches(selector)) return true;
            if (current === nodeRef.current) return false;
            current = current.parentElement;
        } while (current);
        return false;
    }
    function getDragItems(nodeInternals, mousePos, nodeId) {
        return Array.from(nodeInternals.values()).filter((n => (n.selected || n.id === nodeId) && (!n.parentNode || !isParentSelected(n, nodeInternals)))).map((n => ({
            id: n.id,
            position: n.position || {
                x: 0,
                y: 0
            },
            positionAbsolute: n.positionAbsolute || {
                x: 0,
                y: 0
            },
            distance: {
                x: mousePos.x - (n.positionAbsolute?.x ?? 0),
                y: mousePos.y - (n.positionAbsolute?.y ?? 0)
            },
            delta: {
                x: 0,
                y: 0
            },
            extent: n.extent,
            parentNode: n.parentNode,
            width: n.width,
            height: n.height
        })));
    }
    function calcNextPosition(node, nextPosition, nodeInternals, nodeExtent, nodeOrigin = [ 0, 0 ]) {
        let currentExtent = node.extent || nodeExtent;
        if (node.extent === "parent") {
            if (node.parentNode && node.width && node.height) {
                const parent = nodeInternals.get(node.parentNode);
                const {x: parentX, y: parentY} = getNodePositionWithOrigin(parent, nodeOrigin).positionAbsolute;
                currentExtent = parent && isNumeric(parentX) && isNumeric(parentY) && isNumeric(parent.width) && isNumeric(parent.height) ? [ [ parentX + node.width * nodeOrigin[0], parentY + node.height * nodeOrigin[1] ], [ parentX + parent.width - node.width + node.width * nodeOrigin[0], parentY + parent.height - node.height + node.height * nodeOrigin[1] ] ] : currentExtent;
            } else {
                currentExtent = nodeExtent;
            }
        } else if (node.extent && node.parentNode) {
            const parent = nodeInternals.get(node.parentNode);
            const {x: parentX, y: parentY} = getNodePositionWithOrigin(parent, nodeOrigin).positionAbsolute;
            currentExtent = [ [ node.extent[0][0] + parentX, node.extent[0][1] + parentY ], [ node.extent[1][0] + parentX, node.extent[1][1] + parentY ] ];
        }
        let parentPosition = {
            x: 0,
            y: 0
        };
        if (node.parentNode) {
            const parentNode = nodeInternals.get(node.parentNode);
            parentPosition = getNodePositionWithOrigin(parentNode, nodeOrigin).positionAbsolute;
        }
        const positionAbsolute = currentExtent ? clampPosition(nextPosition, currentExtent) : nextPosition;
        return {
            position: {
                x: positionAbsolute.x - parentPosition.x,
                y: positionAbsolute.y - parentPosition.y
            },
            positionAbsolute: positionAbsolute
        };
    }
    function getEventHandlerParams({nodeId: nodeId, dragItems: dragItems, nodeInternals: nodeInternals}) {
        const extentedDragItems = dragItems.map((n => {
            const node = nodeInternals.get(n.id);
            return {
                ...node,
                position: n.position,
                positionAbsolute: n.positionAbsolute
            };
        }));
        return [ nodeId ? extentedDragItems.find((n => n.id === nodeId)) : extentedDragItems[0], extentedDragItems ];
    }
    const getHandleBounds = (selector, nodeElement, zoom, nodeOrigin) => {
        const handles = nodeElement.querySelectorAll(selector);
        if (!handles || !handles.length) {
            return null;
        }
        const handlesArray = Array.from(handles);
        const nodeBounds = nodeElement.getBoundingClientRect();
        const nodeOffset = {
            x: nodeBounds.width * nodeOrigin[0],
            y: nodeBounds.height * nodeOrigin[1]
        };
        return handlesArray.map((handle => {
            const handleBounds = handle.getBoundingClientRect();
            return {
                id: handle.getAttribute("data-handleid"),
                position: handle.getAttribute("data-handlepos"),
                x: (handleBounds.left - nodeBounds.left - nodeOffset.x) / zoom,
                y: (handleBounds.top - nodeBounds.top - nodeOffset.y) / zoom,
                ...getDimensions(handle)
            };
        }));
    };
    function getMouseHandler(id, getState, handler) {
        return handler === undefined ? handler : event => {
            const node = getState().nodeInternals.get(id);
            handler(event, {
                ...node
            });
        };
    }
    function handleNodeClick({id: id, store: store, unselect: unselect = false}) {
        const {addSelectedNodes: addSelectedNodes, unselectNodesAndEdges: unselectNodesAndEdges, multiSelectionActive: multiSelectionActive, nodeInternals: nodeInternals} = store.getState();
        const node = nodeInternals.get(id);
        store.setState({
            nodesSelectionActive: false
        });
        if (!node.selected) {
            addSelectedNodes([ id ]);
        } else if (unselect || node.selected && multiSelectionActive) {
            unselectNodesAndEdges({
                nodes: [ node ]
            });
        }
    }
    function useGetPointerPosition() {
        const store = useStoreApi();
        const getPointerPosition = reactExports.useCallback((({sourceEvent: sourceEvent}) => {
            const {transform: transform, snapGrid: snapGrid, snapToGrid: snapToGrid} = store.getState();
            const x = sourceEvent.touches ? sourceEvent.touches[0].clientX : sourceEvent.clientX;
            const y = sourceEvent.touches ? sourceEvent.touches[0].clientY : sourceEvent.clientY;
            const pointerPos = {
                x: (x - transform[0]) / transform[2],
                y: (y - transform[1]) / transform[2]
            };
            return {
                xSnapped: snapToGrid ? snapGrid[0] * Math.round(pointerPos.x / snapGrid[0]) : pointerPos.x,
                ySnapped: snapToGrid ? snapGrid[1] * Math.round(pointerPos.y / snapGrid[1]) : pointerPos.y,
                ...pointerPos
            };
        }), []);
        return getPointerPosition;
    }
    function wrapSelectionDragFunc(selectionFunc) {
        return (event, _, nodes) => selectionFunc?.(event, nodes);
    }
    function useDrag({nodeRef: nodeRef, disabled: disabled = false, noDragClassName: noDragClassName, handleSelector: handleSelector, nodeId: nodeId, isSelectable: isSelectable, selectNodesOnDrag: selectNodesOnDrag}) {
        const [dragging, setDragging] = reactExports.useState(false);
        const store = useStoreApi();
        const dragItems = reactExports.useRef();
        const lastPos = reactExports.useRef({
            x: null,
            y: null
        });
        const getPointerPosition = useGetPointerPosition();
        reactExports.useEffect((() => {
            if (nodeRef?.current) {
                const selection = select(nodeRef.current);
                if (disabled) {
                    selection.on(".drag", null);
                } else {
                    const dragHandler = drag().on("start", (event => {
                        const {nodeInternals: nodeInternals, multiSelectionActive: multiSelectionActive, unselectNodesAndEdges: unselectNodesAndEdges, onNodeDragStart: onNodeDragStart, onSelectionDragStart: onSelectionDragStart} = store.getState();
                        const onStart = nodeId ? onNodeDragStart : wrapSelectionDragFunc(onSelectionDragStart);
                        if (!selectNodesOnDrag && !multiSelectionActive && nodeId) {
                            if (!nodeInternals.get(nodeId)?.selected) {
                                unselectNodesAndEdges();
                            }
                        }
                        if (nodeId && isSelectable && selectNodesOnDrag) {
                            handleNodeClick({
                                id: nodeId,
                                store: store
                            });
                        }
                        const pointerPos = getPointerPosition(event);
                        lastPos.current = pointerPos;
                        dragItems.current = getDragItems(nodeInternals, pointerPos, nodeId);
                        if (onStart && dragItems.current) {
                            const [currentNode, nodes] = getEventHandlerParams({
                                nodeId: nodeId,
                                dragItems: dragItems.current,
                                nodeInternals: nodeInternals
                            });
                            onStart(event.sourceEvent, currentNode, nodes);
                        }
                    })).on("drag", (event => {
                        const {updateNodePositions: updateNodePositions, nodeInternals: nodeInternals, nodeExtent: nodeExtent, onNodeDrag: onNodeDrag, onSelectionDrag: onSelectionDrag, snapGrid: snapGrid, snapToGrid: snapToGrid, nodeOrigin: nodeOrigin} = store.getState();
                        const pointerPos = getPointerPosition(event);
                        if ((lastPos.current.x !== pointerPos.xSnapped || lastPos.current.y !== pointerPos.ySnapped) && dragItems.current) {
                            lastPos.current = {
                                x: pointerPos.xSnapped,
                                y: pointerPos.ySnapped
                            };
                            let hasChange = false;
                            dragItems.current = dragItems.current.map((n => {
                                const nextPosition = {
                                    x: pointerPos.x - n.distance.x,
                                    y: pointerPos.y - n.distance.y
                                };
                                if (snapToGrid) {
                                    nextPosition.x = snapGrid[0] * Math.round(nextPosition.x / snapGrid[0]);
                                    nextPosition.y = snapGrid[1] * Math.round(nextPosition.y / snapGrid[1]);
                                }
                                const updatedPos = calcNextPosition(n, nextPosition, nodeInternals, nodeExtent, nodeOrigin);
                                hasChange = hasChange || n.position.x !== updatedPos.position.x || n.position.y !== updatedPos.position.y;
                                n.position = updatedPos.position;
                                n.positionAbsolute = updatedPos.positionAbsolute;
                                return n;
                            }));
                            if (!hasChange) {
                                return;
                            }
                            const onDrag = nodeId ? onNodeDrag : wrapSelectionDragFunc(onSelectionDrag);
                            updateNodePositions(dragItems.current, true, true);
                            setDragging(true);
                            if (onDrag) {
                                const [currentNode, nodes] = getEventHandlerParams({
                                    nodeId: nodeId,
                                    dragItems: dragItems.current,
                                    nodeInternals: nodeInternals
                                });
                                onDrag(event.sourceEvent, currentNode, nodes);
                            }
                        }
                    })).on("end", (event => {
                        setDragging(false);
                        if (dragItems.current) {
                            const {updateNodePositions: updateNodePositions, nodeInternals: nodeInternals, onNodeDragStop: onNodeDragStop, onSelectionDragStop: onSelectionDragStop} = store.getState();
                            const onStop = nodeId ? onNodeDragStop : wrapSelectionDragFunc(onSelectionDragStop);
                            updateNodePositions(dragItems.current, false, false);
                            if (onStop) {
                                const [currentNode, nodes] = getEventHandlerParams({
                                    nodeId: nodeId,
                                    dragItems: dragItems.current,
                                    nodeInternals: nodeInternals
                                });
                                onStop(event.sourceEvent, currentNode, nodes);
                            }
                        }
                    })).filter((event => {
                        const target = event.target;
                        const isDraggable = !event.button && (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, nodeRef)) && (!handleSelector || hasSelector(target, handleSelector, nodeRef));
                        return isDraggable;
                    }));
                    selection.call(dragHandler);
                    return () => {
                        selection.on(".drag", null);
                    };
                }
            }
        }), [ nodeRef, disabled, noDragClassName, handleSelector, isSelectable, store, nodeId, selectNodesOnDrag, getPointerPosition ]);
        return dragging;
    }
    function useUpdateNodePositions() {
        const store = useStoreApi();
        const updatePositions = reactExports.useCallback((params => {
            const {nodeInternals: nodeInternals, nodeExtent: nodeExtent, updateNodePositions: updateNodePositions, getNodes: getNodes, snapToGrid: snapToGrid, snapGrid: snapGrid} = store.getState();
            const selectedNodes = getNodes().filter((n => n.selected));
            const xVelo = snapToGrid ? snapGrid[0] : 5;
            const yVelo = snapToGrid ? snapGrid[1] : 5;
            const factor = params.isShiftPressed ? 4 : 1;
            const positionDiffX = params.x * xVelo * factor;
            const positionDiffY = params.y * yVelo * factor;
            const nodeUpdates = selectedNodes.map((n => {
                if (n.positionAbsolute) {
                    const nextPosition = {
                        x: n.positionAbsolute.x + positionDiffX,
                        y: n.positionAbsolute.y + positionDiffY
                    };
                    if (snapToGrid) {
                        nextPosition.x = snapGrid[0] * Math.round(nextPosition.x / snapGrid[0]);
                        nextPosition.y = snapGrid[1] * Math.round(nextPosition.y / snapGrid[1]);
                    }
                    const updatedPos = calcNextPosition(n, nextPosition, nodeInternals, nodeExtent);
                    n.position = updatedPos.position;
                    n.positionAbsolute = updatedPos.positionAbsolute;
                }
                return n;
            }));
            updateNodePositions(nodeUpdates, true, false);
        }), []);
        return updatePositions;
    }
    const arrowKeyDiffs = {
        ArrowUp: {
            x: 0,
            y: -1
        },
        ArrowDown: {
            x: 0,
            y: 1
        },
        ArrowLeft: {
            x: -1,
            y: 0
        },
        ArrowRight: {
            x: 1,
            y: 0
        }
    };
    var wrapNode = NodeComponent => {
        const NodeWrapper = ({id: id, type: type, data: data, xPos: xPos, yPos: yPos, xPosOrigin: xPosOrigin, yPosOrigin: yPosOrigin, selected: selected, onClick: onClick, onMouseEnter: onMouseEnter, onMouseMove: onMouseMove, onMouseLeave: onMouseLeave, onContextMenu: onContextMenu, onDoubleClick: onDoubleClick, style: style, className: className, isDraggable: isDraggable, isSelectable: isSelectable, isConnectable: isConnectable, isFocusable: isFocusable, selectNodesOnDrag: selectNodesOnDrag, sourcePosition: sourcePosition, targetPosition: targetPosition, hidden: hidden, resizeObserver: resizeObserver, dragHandle: dragHandle, zIndex: zIndex, isParent: isParent, noDragClassName: noDragClassName, noPanClassName: noPanClassName, initialized: initialized, disableKeyboardA11y: disableKeyboardA11y, ariaLabel: ariaLabel, rfId: rfId}) => {
            const store = useStoreApi();
            const nodeRef = reactExports.useRef(null);
            const prevSourcePosition = reactExports.useRef(sourcePosition);
            const prevTargetPosition = reactExports.useRef(targetPosition);
            const prevType = reactExports.useRef(type);
            const hasPointerEvents = isSelectable || isDraggable || onClick || onMouseEnter || onMouseMove || onMouseLeave;
            const updatePositions = useUpdateNodePositions();
            const onMouseEnterHandler = getMouseHandler(id, store.getState, onMouseEnter);
            const onMouseMoveHandler = getMouseHandler(id, store.getState, onMouseMove);
            const onMouseLeaveHandler = getMouseHandler(id, store.getState, onMouseLeave);
            const onContextMenuHandler = getMouseHandler(id, store.getState, onContextMenu);
            const onDoubleClickHandler = getMouseHandler(id, store.getState, onDoubleClick);
            const onSelectNodeHandler = event => {
                if (isSelectable && (!selectNodesOnDrag || !isDraggable)) {
                    handleNodeClick({
                        id: id,
                        store: store
                    });
                }
                if (onClick) {
                    const node = store.getState().nodeInternals.get(id);
                    onClick(event, {
                        ...node
                    });
                }
            };
            const onKeyDown = event => {
                if (isInputDOMNode(event)) {
                    return;
                }
                if (elementSelectionKeys.includes(event.key) && isSelectable) {
                    const unselect = event.key === "Escape";
                    if (unselect) {
                        nodeRef.current?.blur();
                    }
                    handleNodeClick({
                        id: id,
                        store: store,
                        unselect: unselect
                    });
                } else if (!disableKeyboardA11y && isDraggable && selected && Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {
                    store.setState({
                        ariaLiveMessage: `Moved selected node ${event.key.replace("Arrow", "").toLowerCase()}. New position, x: ${~~xPos}, y: ${~~yPos}`
                    });
                    updatePositions({
                        x: arrowKeyDiffs[event.key].x,
                        y: arrowKeyDiffs[event.key].y,
                        isShiftPressed: event.shiftKey
                    });
                }
            };
            reactExports.useEffect((() => {
                if (nodeRef.current && !hidden) {
                    const currNode = nodeRef.current;
                    resizeObserver?.observe(currNode);
                    return () => resizeObserver?.unobserve(currNode);
                }
            }), [ hidden ]);
            reactExports.useEffect((() => {
                const typeChanged = prevType.current !== type;
                const sourcePosChanged = prevSourcePosition.current !== sourcePosition;
                const targetPosChanged = prevTargetPosition.current !== targetPosition;
                if (nodeRef.current && (typeChanged || sourcePosChanged || targetPosChanged)) {
                    if (typeChanged) {
                        prevType.current = type;
                    }
                    if (sourcePosChanged) {
                        prevSourcePosition.current = sourcePosition;
                    }
                    if (targetPosChanged) {
                        prevTargetPosition.current = targetPosition;
                    }
                    store.getState().updateNodeDimensions([ {
                        id: id,
                        nodeElement: nodeRef.current,
                        forceUpdate: true
                    } ]);
                }
            }), [ id, type, sourcePosition, targetPosition ]);
            const dragging = useDrag({
                nodeRef: nodeRef,
                disabled: hidden || !isDraggable,
                noDragClassName: noDragClassName,
                handleSelector: dragHandle,
                nodeId: id,
                isSelectable: isSelectable,
                selectNodesOnDrag: selectNodesOnDrag
            });
            if (hidden) {
                return null;
            }
            return jsxRuntimeExports.jsx("div", {
                className: cc([ "react-flow__node", `react-flow__node-${type}`, {
                    [noPanClassName]: isDraggable
                }, className, {
                    selected: selected,
                    selectable: isSelectable,
                    parent: isParent,
                    dragging: dragging
                } ]),
                ref: nodeRef,
                style: {
                    zIndex: zIndex,
                    transform: `translate(${xPosOrigin}px,${yPosOrigin}px)`,
                    pointerEvents: hasPointerEvents ? "all" : "none",
                    visibility: initialized ? "visible" : "hidden",
                    ...style
                },
                "data-id": id,
                "data-testid": `rf__node-${id}`,
                onMouseEnter: onMouseEnterHandler,
                onMouseMove: onMouseMoveHandler,
                onMouseLeave: onMouseLeaveHandler,
                onContextMenu: onContextMenuHandler,
                onClick: onSelectNodeHandler,
                onDoubleClick: onDoubleClickHandler,
                onKeyDown: isFocusable ? onKeyDown : undefined,
                tabIndex: isFocusable ? 0 : undefined,
                role: isFocusable ? "button" : undefined,
                "aria-describedby": disableKeyboardA11y ? undefined : `${ARIA_NODE_DESC_KEY}-${rfId}`,
                "aria-label": ariaLabel,
                children: jsxRuntimeExports.jsx(Provider, {
                    value: id,
                    children: jsxRuntimeExports.jsx(NodeComponent, {
                        id: id,
                        data: data,
                        type: type,
                        xPos: xPos,
                        yPos: yPos,
                        selected: selected,
                        isConnectable: isConnectable,
                        sourcePosition: sourcePosition,
                        targetPosition: targetPosition,
                        dragging: dragging,
                        dragHandle: dragHandle,
                        zIndex: zIndex
                    })
                })
            });
        };
        NodeWrapper.displayName = "NodeWrapper";
        return reactExports.memo(NodeWrapper);
    };
    function createNodeTypes(nodeTypes) {
        const standardTypes = {
            input: wrapNode(nodeTypes.input || InputNode$1),
            default: wrapNode(nodeTypes.default || DefaultNode$1),
            output: wrapNode(nodeTypes.output || OutputNode$1),
            group: wrapNode(nodeTypes.group || GroupNode)
        };
        const wrappedTypes = {};
        const specialTypes = Object.keys(nodeTypes).filter((k => ![ "input", "default", "output", "group" ].includes(k))).reduce(((res, key) => {
            res[key] = wrapNode(nodeTypes[key] || DefaultNode$1);
            return res;
        }), wrappedTypes);
        return {
            ...standardTypes,
            ...specialTypes
        };
    }
    const getPositionWithOrigin = ({x: x, y: y, width: width, height: height, origin: origin}) => {
        if (!width || !height) {
            return {
                x: x,
                y: y
            };
        }
        if (origin[0] < 0 || origin[1] < 0 || origin[0] > 1 || origin[1] > 1) {
            return {
                x: x,
                y: y
            };
        }
        return {
            x: x - width * origin[0],
            y: y - height * origin[1]
        };
    };
    const doc = typeof document !== "undefined" ? document : null;
    var useKeyPress = (keyCode = null, options = {
        target: doc
    }) => {
        const [keyPressed, setKeyPressed] = reactExports.useState(false);
        const pressedKeys = reactExports.useRef(new Set([]));
        const [keyCodes, keysToWatch] = reactExports.useMemo((() => {
            if (keyCode !== null) {
                const keyCodeArr = Array.isArray(keyCode) ? keyCode : [ keyCode ];
                const keys = keyCodeArr.filter((kc => typeof kc === "string")).map((kc => kc.split("+")));
                const keysFlat = keys.reduce(((res, item) => res.concat(...item)), []);
                return [ keys, keysFlat ];
            }
            return [ [], [] ];
        }), [ keyCode ]);
        reactExports.useEffect((() => {
            if (keyCode !== null) {
                const downHandler = event => {
                    if (isInputDOMNode(event)) {
                        return false;
                    }
                    const keyOrCode = useKeyOrCode(event.code, keysToWatch);
                    pressedKeys.current.add(event[keyOrCode]);
                    if (isMatchingKey(keyCodes, pressedKeys.current, false)) {
                        event.preventDefault();
                        setKeyPressed(true);
                    }
                };
                const upHandler = event => {
                    if (isInputDOMNode(event)) {
                        return false;
                    }
                    const keyOrCode = useKeyOrCode(event.code, keysToWatch);
                    if (isMatchingKey(keyCodes, pressedKeys.current, true)) {
                        setKeyPressed(false);
                        pressedKeys.current.clear();
                    } else {
                        pressedKeys.current.delete(event[keyOrCode]);
                    }
                };
                const resetHandler = () => {
                    pressedKeys.current.clear();
                    setKeyPressed(false);
                };
                options?.target?.addEventListener("keydown", downHandler);
                options?.target?.addEventListener("keyup", upHandler);
                window.addEventListener("blur", resetHandler);
                return () => {
                    options?.target?.removeEventListener("keydown", downHandler);
                    options?.target?.removeEventListener("keyup", upHandler);
                    window.removeEventListener("blur", resetHandler);
                };
            }
        }), [ keyCode, setKeyPressed ]);
        return keyPressed;
    };
    function isMatchingKey(keyCodes, pressedKeys, isUp) {
        return keyCodes.filter((keys => isUp || keys.length === pressedKeys.size)).some((keys => keys.every((k => pressedKeys.has(k)))));
    }
    function useKeyOrCode(eventCode, keysToWatch) {
        return keysToWatch.includes(eventCode) ? "code" : "key";
    }
    function calculateXYZPosition(node, nodeInternals, parentNodes, result, nodeOrigin) {
        if (!node.parentNode) {
            return result;
        }
        const parentNode = nodeInternals.get(node.parentNode);
        const parentNodePosition = getNodePositionWithOrigin(parentNode, nodeOrigin);
        return calculateXYZPosition(parentNode, nodeInternals, parentNodes, {
            x: (result.x ?? 0) + parentNodePosition.x,
            y: (result.y ?? 0) + parentNodePosition.y,
            z: (parentNode[internalsSymbol]?.z ?? 0) > (result.z ?? 0) ? parentNode[internalsSymbol]?.z ?? 0 : result.z ?? 0
        }, nodeOrigin);
    }
    function createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect) {
        const nextNodeInternals = new Map;
        const parentNodes = {};
        const selectedNodeZ = elevateNodesOnSelect ? 1e3 : 0;
        nodes.forEach((node => {
            const z = (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);
            const currInternals = nodeInternals.get(node.id);
            const internals = {
                width: currInternals?.width,
                height: currInternals?.height,
                ...node,
                positionAbsolute: {
                    x: node.position.x,
                    y: node.position.y
                }
            };
            if (node.parentNode) {
                internals.parentNode = node.parentNode;
                parentNodes[node.parentNode] = true;
            }
            Object.defineProperty(internals, internalsSymbol, {
                enumerable: false,
                value: {
                    handleBounds: currInternals?.[internalsSymbol]?.handleBounds,
                    z: z
                }
            });
            nextNodeInternals.set(node.id, internals);
        }));
        nextNodeInternals.forEach((node => {
            if (node.parentNode && !nextNodeInternals.has(node.parentNode)) {
                throw new Error(`Parent node ${node.parentNode} not found`);
            }
            if (node.parentNode || parentNodes[node.id]) {
                const {x: x, y: y, z: z} = calculateXYZPosition(node, nextNodeInternals, parentNodes, {
                    ...node.position,
                    z: node[internalsSymbol]?.z ?? 0
                }, nodeOrigin);
                node.positionAbsolute = {
                    x: x,
                    y: y
                };
                node[internalsSymbol].z = z;
                if (parentNodes[node.id]) {
                    node[internalsSymbol].isParent = true;
                }
            }
        }));
        return nextNodeInternals;
    }
    function fitView(get, options = {}) {
        const {getNodes: getNodes, width: width, height: height, minZoom: minZoom, maxZoom: maxZoom, d3Zoom: d3Zoom, d3Selection: d3Selection, fitViewOnInitDone: fitViewOnInitDone, fitViewOnInit: fitViewOnInit, nodeOrigin: nodeOrigin} = get();
        if (options.initial && !fitViewOnInitDone && fitViewOnInit || !options.initial) {
            if (d3Zoom && d3Selection) {
                const nodes = getNodes().filter((n => options.includeHiddenNodes ? n.width && n.height : !n.hidden));
                const nodesInitialized = nodes.every((n => n.width && n.height));
                if (nodes.length > 0 && nodesInitialized) {
                    const bounds = getRectOfNodes(nodes, nodeOrigin);
                    const [x, y, zoom] = getTransformForBounds(bounds, width, height, options.minZoom ?? minZoom, options.maxZoom ?? maxZoom, options.padding ?? .1);
                    const nextTransform = identity.translate(x, y).scale(zoom);
                    if (typeof options.duration === "number" && options.duration > 0) {
                        d3Zoom.transform(getD3Transition(d3Selection, options.duration), nextTransform);
                    } else {
                        d3Zoom.transform(d3Selection, nextTransform);
                    }
                    return true;
                }
            }
        }
        return false;
    }
    function handleControlledNodeSelectionChange(nodeChanges, nodeInternals) {
        nodeChanges.forEach((change => {
            const node = nodeInternals.get(change.id);
            if (node) {
                nodeInternals.set(node.id, {
                    ...node,
                    [internalsSymbol]: node[internalsSymbol],
                    selected: change.selected
                });
            }
        }));
        return new Map(nodeInternals);
    }
    function handleControlledEdgeSelectionChange(edgeChanges, edges) {
        return edges.map((e => {
            const change = edgeChanges.find((change => change.id === e.id));
            if (change) {
                e.selected = change.selected;
            }
            return e;
        }));
    }
    function updateNodesAndEdgesSelections({changedNodes: changedNodes, changedEdges: changedEdges, get: get, set: set}) {
        const {nodeInternals: nodeInternals, edges: edges, onNodesChange: onNodesChange, onEdgesChange: onEdgesChange, hasDefaultNodes: hasDefaultNodes, hasDefaultEdges: hasDefaultEdges} = get();
        if (changedNodes?.length) {
            if (hasDefaultNodes) {
                set({
                    nodeInternals: handleControlledNodeSelectionChange(changedNodes, nodeInternals)
                });
            }
            onNodesChange?.(changedNodes);
        }
        if (changedEdges?.length) {
            if (hasDefaultEdges) {
                set({
                    edges: handleControlledEdgeSelectionChange(changedEdges, edges)
                });
            }
            onEdgesChange?.(changedEdges);
        }
    }
    const noop = () => {};
    const initialViewportHelper = {
        zoomIn: noop,
        zoomOut: noop,
        zoomTo: noop,
        getZoom: () => 1,
        setViewport: noop,
        getViewport: () => ({
            x: 0,
            y: 0,
            zoom: 1
        }),
        fitView: noop,
        setCenter: noop,
        fitBounds: noop,
        project: position => position,
        viewportInitialized: false
    };
    const selector$a = s => ({
        d3Zoom: s.d3Zoom,
        d3Selection: s.d3Selection
    });
    const useViewportHelper = () => {
        const store = useStoreApi();
        const {d3Zoom: d3Zoom, d3Selection: d3Selection} = useStore(selector$a, shallow);
        const viewportHelperFunctions = reactExports.useMemo((() => {
            if (d3Selection && d3Zoom) {
                return {
                    zoomIn: options => d3Zoom.scaleBy(getD3Transition(d3Selection, options?.duration), 1.2),
                    zoomOut: options => d3Zoom.scaleBy(getD3Transition(d3Selection, options?.duration), 1 / 1.2),
                    zoomTo: (zoomLevel, options) => d3Zoom.scaleTo(getD3Transition(d3Selection, options?.duration), zoomLevel),
                    getZoom: () => store.getState().transform[2],
                    setViewport: (transform, options) => {
                        const [x, y, zoom] = store.getState().transform;
                        const nextTransform = identity.translate(transform.x ?? x, transform.y ?? y).scale(transform.zoom ?? zoom);
                        d3Zoom.transform(getD3Transition(d3Selection, options?.duration), nextTransform);
                    },
                    getViewport: () => {
                        const [x, y, zoom] = store.getState().transform;
                        return {
                            x: x,
                            y: y,
                            zoom: zoom
                        };
                    },
                    fitView: options => fitView(store.getState, options),
                    setCenter: (x, y, options) => {
                        const {width: width, height: height, maxZoom: maxZoom} = store.getState();
                        const nextZoom = typeof options?.zoom !== "undefined" ? options.zoom : maxZoom;
                        const centerX = width / 2 - x * nextZoom;
                        const centerY = height / 2 - y * nextZoom;
                        const transform = identity.translate(centerX, centerY).scale(nextZoom);
                        d3Zoom.transform(getD3Transition(d3Selection, options?.duration), transform);
                    },
                    fitBounds: (bounds, options) => {
                        const {width: width, height: height, minZoom: minZoom, maxZoom: maxZoom} = store.getState();
                        const [x, y, zoom] = getTransformForBounds(bounds, width, height, minZoom, maxZoom, options?.padding ?? .1);
                        const transform = identity.translate(x, y).scale(zoom);
                        d3Zoom.transform(getD3Transition(d3Selection, options?.duration), transform);
                    },
                    project: position => {
                        const {transform: transform, snapToGrid: snapToGrid, snapGrid: snapGrid} = store.getState();
                        return pointToRendererPoint(position, transform, snapToGrid, snapGrid);
                    },
                    viewportInitialized: true
                };
            }
            return initialViewportHelper;
        }), [ d3Zoom, d3Selection ]);
        return viewportHelperFunctions;
    };
    function useReactFlow() {
        const viewportHelper = useViewportHelper();
        const store = useStoreApi();
        const getNodes = reactExports.useCallback((() => store.getState().getNodes().map((n => ({
            ...n
        })))), []);
        const getNode = reactExports.useCallback((id => store.getState().nodeInternals.get(id)), []);
        const getEdges = reactExports.useCallback((() => {
            const {edges: edges = []} = store.getState();
            return edges.map((e => ({
                ...e
            })));
        }), []);
        const getEdge = reactExports.useCallback((id => {
            const {edges: edges = []} = store.getState();
            return edges.find((e => e.id === id));
        }), []);
        const setNodes = reactExports.useCallback((payload => {
            const {getNodes: getNodes, setNodes: setNodes, hasDefaultNodes: hasDefaultNodes, onNodesChange: onNodesChange} = store.getState();
            const nodes = getNodes();
            const nextNodes = typeof payload === "function" ? payload(nodes) : payload;
            if (hasDefaultNodes) {
                setNodes(nextNodes);
            } else if (onNodesChange) {
                const changes = nextNodes.length === 0 ? nodes.map((node => ({
                    type: "remove",
                    id: node.id
                }))) : nextNodes.map((node => ({
                    item: node,
                    type: "reset"
                })));
                onNodesChange(changes);
            }
        }), []);
        const setEdges = reactExports.useCallback((payload => {
            const {edges: edges = [], setEdges: setEdges, hasDefaultEdges: hasDefaultEdges, onEdgesChange: onEdgesChange} = store.getState();
            const nextEdges = typeof payload === "function" ? payload(edges) : payload;
            if (hasDefaultEdges) {
                setEdges(nextEdges);
            } else if (onEdgesChange) {
                const changes = nextEdges.length === 0 ? edges.map((edge => ({
                    type: "remove",
                    id: edge.id
                }))) : nextEdges.map((edge => ({
                    item: edge,
                    type: "reset"
                })));
                onEdgesChange(changes);
            }
        }), []);
        const addNodes = reactExports.useCallback((payload => {
            const nodes = Array.isArray(payload) ? payload : [ payload ];
            const {getNodes: getNodes, setNodes: setNodes, hasDefaultNodes: hasDefaultNodes, onNodesChange: onNodesChange} = store.getState();
            if (hasDefaultNodes) {
                const currentNodes = getNodes();
                const nextNodes = [ ...currentNodes, ...nodes ];
                setNodes(nextNodes);
            } else if (onNodesChange) {
                const changes = nodes.map((node => ({
                    item: node,
                    type: "add"
                })));
                onNodesChange(changes);
            }
        }), []);
        const addEdges = reactExports.useCallback((payload => {
            const nextEdges = Array.isArray(payload) ? payload : [ payload ];
            const {edges: edges = [], setEdges: setEdges, hasDefaultEdges: hasDefaultEdges, onEdgesChange: onEdgesChange} = store.getState();
            if (hasDefaultEdges) {
                setEdges([ ...edges, ...nextEdges ]);
            } else if (onEdgesChange) {
                const changes = nextEdges.map((edge => ({
                    item: edge,
                    type: "add"
                })));
                onEdgesChange(changes);
            }
        }), []);
        const toObject = reactExports.useCallback((() => {
            const {getNodes: getNodes, edges: edges = [], transform: transform} = store.getState();
            const [x, y, zoom] = transform;
            return {
                nodes: getNodes().map((n => ({
                    ...n
                }))),
                edges: edges.map((e => ({
                    ...e
                }))),
                viewport: {
                    x: x,
                    y: y,
                    zoom: zoom
                }
            };
        }), []);
        const deleteElements = reactExports.useCallback((({nodes: nodesDeleted, edges: edgesDeleted}) => {
            const {nodeInternals: nodeInternals, getNodes: getNodes, edges: edges, hasDefaultNodes: hasDefaultNodes, hasDefaultEdges: hasDefaultEdges, onNodesDelete: onNodesDelete, onEdgesDelete: onEdgesDelete, onNodesChange: onNodesChange, onEdgesChange: onEdgesChange} = store.getState();
            const nodeIds = (nodesDeleted || []).map((node => node.id));
            const edgeIds = (edgesDeleted || []).map((edge => edge.id));
            const nodesToRemove = getNodes().reduce(((res, node) => {
                const parentHit = !nodeIds.includes(node.id) && node.parentNode && res.find((n => n.id === node.parentNode));
                const deletable = typeof node.deletable === "boolean" ? node.deletable : true;
                if (deletable && (nodeIds.includes(node.id) || parentHit)) {
                    res.push(node);
                }
                return res;
            }), []);
            const deletableEdges = edges.filter((e => typeof e.deletable === "boolean" ? e.deletable : true));
            const initialHitEdges = deletableEdges.filter((e => edgeIds.includes(e.id)));
            if (nodesToRemove || initialHitEdges) {
                const connectedEdges = getConnectedEdges(nodesToRemove, deletableEdges);
                const edgesToRemove = [ ...initialHitEdges, ...connectedEdges ];
                const edgeIdsToRemove = edgesToRemove.reduce(((res, edge) => {
                    if (!res.includes(edge.id)) {
                        res.push(edge.id);
                    }
                    return res;
                }), []);
                if (hasDefaultEdges || hasDefaultNodes) {
                    if (hasDefaultEdges) {
                        store.setState({
                            edges: edges.filter((e => !edgeIdsToRemove.includes(e.id)))
                        });
                    }
                    if (hasDefaultNodes) {
                        nodesToRemove.forEach((node => {
                            nodeInternals.delete(node.id);
                        }));
                        store.setState({
                            nodeInternals: new Map(nodeInternals)
                        });
                    }
                }
                if (edgeIdsToRemove.length > 0) {
                    onEdgesDelete?.(edgesToRemove);
                    if (onEdgesChange) {
                        onEdgesChange(edgeIdsToRemove.map((id => ({
                            id: id,
                            type: "remove"
                        }))));
                    }
                }
                if (nodesToRemove.length > 0) {
                    onNodesDelete?.(nodesToRemove);
                    if (onNodesChange) {
                        const nodeChanges = nodesToRemove.map((n => ({
                            id: n.id,
                            type: "remove"
                        })));
                        onNodesChange(nodeChanges);
                    }
                }
            }
        }), []);
        const getNodeRect = reactExports.useCallback((nodeOrRect => {
            const isRect = isRectObject(nodeOrRect);
            const node = isRect ? null : store.getState().nodeInternals.get(nodeOrRect.id);
            const nodeRect = isRect ? nodeOrRect : nodeToRect(node);
            return [ nodeRect, node, isRect ];
        }), []);
        const getIntersectingNodes = reactExports.useCallback(((nodeOrRect, partially = true, nodes) => {
            const [nodeRect, node, isRect] = getNodeRect(nodeOrRect);
            if (!nodeRect) {
                return [];
            }
            return (nodes || store.getState().getNodes()).filter((n => {
                if (!isRect && (n.id === node.id || !n.positionAbsolute)) {
                    return false;
                }
                const currNodeRect = nodeToRect(n);
                const overlappingArea = getOverlappingArea(currNodeRect, nodeRect);
                const partiallyVisible = partially && overlappingArea > 0;
                return partiallyVisible || overlappingArea >= nodeOrRect.width * nodeOrRect.height;
            }));
        }), []);
        const isNodeIntersecting = reactExports.useCallback(((nodeOrRect, area, partially = true) => {
            const [nodeRect] = getNodeRect(nodeOrRect);
            if (!nodeRect) {
                return false;
            }
            const overlappingArea = getOverlappingArea(nodeRect, area);
            const partiallyVisible = partially && overlappingArea > 0;
            return partiallyVisible || overlappingArea >= nodeOrRect.width * nodeOrRect.height;
        }), []);
        return reactExports.useMemo((() => ({
            ...viewportHelper,
            getNodes: getNodes,
            getNode: getNode,
            getEdges: getEdges,
            getEdge: getEdge,
            setNodes: setNodes,
            setEdges: setEdges,
            addNodes: addNodes,
            addEdges: addEdges,
            toObject: toObject,
            deleteElements: deleteElements,
            getIntersectingNodes: getIntersectingNodes,
            isNodeIntersecting: isNodeIntersecting
        })), [ viewportHelper, getNodes, getNode, getEdges, getEdge, setNodes, setEdges, addNodes, addEdges, toObject, deleteElements, getIntersectingNodes, isNodeIntersecting ]);
    }
    var useGlobalKeyHandler = ({deleteKeyCode: deleteKeyCode, multiSelectionKeyCode: multiSelectionKeyCode}) => {
        const store = useStoreApi();
        const {deleteElements: deleteElements} = useReactFlow();
        const deleteKeyPressed = useKeyPress(deleteKeyCode);
        const multiSelectionKeyPressed = useKeyPress(multiSelectionKeyCode);
        reactExports.useEffect((() => {
            if (deleteKeyPressed) {
                const {edges: edges, getNodes: getNodes} = store.getState();
                const selectedNodes = getNodes().filter((node => node.selected));
                const selectedEdges = edges.filter((edge => edge.selected));
                deleteElements({
                    nodes: selectedNodes,
                    edges: selectedEdges
                });
                store.setState({
                    nodesSelectionActive: false
                });
            }
        }), [ deleteKeyPressed ]);
        reactExports.useEffect((() => {
            store.setState({
                multiSelectionActive: multiSelectionKeyPressed
            });
        }), [ multiSelectionKeyPressed ]);
    };
    function useResizeHandler(rendererNode) {
        const store = useStoreApi();
        reactExports.useEffect((() => {
            let resizeObserver;
            const updateDimensions = () => {
                if (!rendererNode.current) {
                    return;
                }
                const size = getDimensions(rendererNode.current);
                if (size.height === 0 || size.width === 0) ;
                store.setState({
                    width: size.width || 500,
                    height: size.height || 500
                });
            };
            updateDimensions();
            window.addEventListener("resize", updateDimensions);
            if (rendererNode.current) {
                resizeObserver = new ResizeObserver((() => updateDimensions()));
                resizeObserver.observe(rendererNode.current);
            }
            return () => {
                window.removeEventListener("resize", updateDimensions);
                if (resizeObserver && rendererNode.current) {
                    resizeObserver.unobserve(rendererNode.current);
                }
            };
        }), []);
    }
    const containerStyle = {
        position: "absolute",
        width: "100%",
        height: "100%",
        top: 0,
        left: 0
    };
    const viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;
    const eventToFlowTransform = eventViewport => ({
        x: eventViewport.x,
        y: eventViewport.y,
        zoom: eventViewport.k
    });
    const isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);
    const isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);
    const selector$9 = s => ({
        d3Zoom: s.d3Zoom,
        d3Selection: s.d3Selection,
        d3ZoomHandler: s.d3ZoomHandler,
        userSelectionActive: s.userSelectionActive
    });
    const ZoomPane = ({onMove: onMove, onMoveStart: onMoveStart, onMoveEnd: onMoveEnd, onPaneContextMenu: onPaneContextMenu, zoomOnScroll: zoomOnScroll = true, zoomOnPinch: zoomOnPinch = true, panOnScroll: panOnScroll = false, panOnScrollSpeed: panOnScrollSpeed = .5, panOnScrollMode: panOnScrollMode = PanOnScrollMode.Free, zoomOnDoubleClick: zoomOnDoubleClick = true, elementsSelectable: elementsSelectable, panOnDrag: panOnDrag = true, defaultViewport: defaultViewport, translateExtent: translateExtent, minZoom: minZoom, maxZoom: maxZoom, zoomActivationKeyCode: zoomActivationKeyCode, preventScrolling: preventScrolling = true, children: children, noWheelClassName: noWheelClassName, noPanClassName: noPanClassName}) => {
        const timerId = reactExports.useRef();
        const store = useStoreApi();
        const isZoomingOrPanning = reactExports.useRef(false);
        const zoomedWithRightMouseButton = reactExports.useRef(false);
        const zoomPane = reactExports.useRef(null);
        const prevTransform = reactExports.useRef({
            x: 0,
            y: 0,
            zoom: 0
        });
        const {d3Zoom: d3Zoom, d3Selection: d3Selection, d3ZoomHandler: d3ZoomHandler, userSelectionActive: userSelectionActive} = useStore(selector$9, shallow);
        const zoomActivationKeyPressed = useKeyPress(zoomActivationKeyCode);
        useResizeHandler(zoomPane);
        reactExports.useEffect((() => {
            if (zoomPane.current) {
                const bbox = zoomPane.current.getBoundingClientRect();
                const d3ZoomInstance = zoom().scaleExtent([ minZoom, maxZoom ]).translateExtent(translateExtent);
                const selection = select(zoomPane.current).call(d3ZoomInstance);
                const updatedTransform = identity.translate(defaultViewport.x, defaultViewport.y).scale(clamp(defaultViewport.zoom, minZoom, maxZoom));
                const extent = [ [ 0, 0 ], [ bbox.width, bbox.height ] ];
                const constrainedTransform = d3ZoomInstance.constrain()(updatedTransform, extent, translateExtent);
                d3ZoomInstance.transform(selection, constrainedTransform);
                store.setState({
                    d3Zoom: d3ZoomInstance,
                    d3Selection: selection,
                    d3ZoomHandler: selection.on("wheel.zoom"),
                    transform: [ constrainedTransform.x, constrainedTransform.y, constrainedTransform.k ],
                    domNode: zoomPane.current.closest(".react-flow")
                });
            }
        }), []);
        reactExports.useEffect((() => {
            if (d3Selection && d3Zoom) {
                if (panOnScroll && !zoomActivationKeyPressed && !userSelectionActive) {
                    d3Selection.on("wheel.zoom", (event => {
                        if (isWrappedWithClass(event, noWheelClassName)) {
                            return false;
                        }
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        const currentZoom = d3Selection.property("__zoom").k || 1;
                        if (event.ctrlKey && zoomOnPinch) {
                            const point = pointer(event);
                            const pinchDelta = -event.deltaY * (event.deltaMode === 1 ? .05 : event.deltaMode ? 1 : .002) * 10;
                            const zoom = currentZoom * Math.pow(2, pinchDelta);
                            d3Zoom.scaleTo(d3Selection, zoom, point);
                            return;
                        }
                        const deltaNormalize = event.deltaMode === 1 ? 20 : 1;
                        const deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;
                        const deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;
                        d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed);
                    }));
                } else if (typeof d3ZoomHandler !== "undefined") {
                    d3Selection.on("wheel.zoom", (function(event, d) {
                        if (!preventScrolling || isWrappedWithClass(event, noWheelClassName)) {
                            return null;
                        }
                        event.preventDefault();
                        d3ZoomHandler.call(this, event, d);
                    }));
                }
            }
        }), [ userSelectionActive, panOnScroll, panOnScrollMode, d3Selection, d3Zoom, d3ZoomHandler, zoomActivationKeyPressed, zoomOnPinch, preventScrolling, noWheelClassName ]);
        reactExports.useEffect((() => {
            if (d3Zoom) {
                if (userSelectionActive && !isZoomingOrPanning.current) {
                    d3Zoom.on("zoom", null);
                } else if (!userSelectionActive) {
                    d3Zoom.on("zoom", (event => {
                        const {onViewportChange: onViewportChange} = store.getState();
                        store.setState({
                            transform: [ event.transform.x, event.transform.y, event.transform.k ]
                        });
                        zoomedWithRightMouseButton.current = !!(onPaneContextMenu && isRightClickPan(panOnDrag, event.sourceEvent?.button));
                        if (onMove || onViewportChange) {
                            const flowTransform = eventToFlowTransform(event.transform);
                            onViewportChange?.(flowTransform);
                            onMove?.(event.sourceEvent, flowTransform);
                        }
                    }));
                }
            }
        }), [ userSelectionActive, d3Zoom, onMove, panOnDrag, onPaneContextMenu ]);
        reactExports.useEffect((() => {
            if (d3Zoom) {
                d3Zoom.on("start", (event => {
                    if (!event.sourceEvent) {
                        return null;
                    }
                    const {onViewportChangeStart: onViewportChangeStart} = store.getState();
                    isZoomingOrPanning.current = true;
                    if (event.sourceEvent?.type === "mousedown") {
                        store.setState({
                            paneDragging: true
                        });
                    }
                    if (onMoveStart || onViewportChangeStart) {
                        const flowTransform = eventToFlowTransform(event.transform);
                        prevTransform.current = flowTransform;
                        onViewportChangeStart?.(flowTransform);
                        onMoveStart?.(event.sourceEvent, flowTransform);
                    }
                }));
            }
        }), [ d3Zoom, onMoveStart ]);
        reactExports.useEffect((() => {
            if (d3Zoom) {
                d3Zoom.on("end", (event => {
                    if (!event.sourceEvent) {
                        return null;
                    }
                    const {onViewportChangeEnd: onViewportChangeEnd} = store.getState();
                    isZoomingOrPanning.current = false;
                    store.setState({
                        paneDragging: false
                    });
                    if (onPaneContextMenu && isRightClickPan(panOnDrag, event.sourceEvent?.button) && !zoomedWithRightMouseButton.current) {
                        onPaneContextMenu(event.sourceEvent);
                    }
                    zoomedWithRightMouseButton.current = false;
                    if ((onMoveEnd || onViewportChangeEnd) && viewChanged(prevTransform.current, event.transform)) {
                        const flowTransform = eventToFlowTransform(event.transform);
                        prevTransform.current = flowTransform;
                        clearTimeout(timerId.current);
                        timerId.current = setTimeout((() => {
                            onViewportChangeEnd?.(flowTransform);
                            onMoveEnd?.(event.sourceEvent, flowTransform);
                        }), panOnScroll ? 150 : 0);
                    }
                }));
            }
        }), [ d3Zoom, panOnScroll, panOnDrag, onMoveEnd, onPaneContextMenu ]);
        reactExports.useEffect((() => {
            if (d3Zoom) {
                d3Zoom.filter((event => {
                    const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;
                    const pinchZoom = zoomOnPinch && event.ctrlKey;
                    if (event.button === 1 && event.type === "mousedown" && (isWrappedWithClass(event, "react-flow__node") || isWrappedWithClass(event, "react-flow__edge"))) {
                        return true;
                    }
                    if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {
                        return false;
                    }
                    if (userSelectionActive) {
                        return false;
                    }
                    if (!zoomOnDoubleClick && event.type === "dblclick") {
                        return false;
                    }
                    if (isWrappedWithClass(event, noWheelClassName) && event.type === "wheel") {
                        return false;
                    }
                    if (isWrappedWithClass(event, noPanClassName) && event.type !== "wheel") {
                        return false;
                    }
                    if (!zoomOnPinch && event.ctrlKey && event.type === "wheel") {
                        return false;
                    }
                    if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === "wheel") {
                        return false;
                    }
                    if (!panOnDrag && (event.type === "mousedown" || event.type === "touchstart")) {
                        return false;
                    }
                    if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && (event.type === "mousedown" || event.type === "touchstart")) {
                        return false;
                    }
                    const buttonAllowed = Array.isArray(panOnDrag) && panOnDrag.includes(event.button) || !event.button || event.button <= 1;
                    return (!event.ctrlKey || event.type === "wheel") && buttonAllowed;
                }));
            }
        }), [ userSelectionActive, d3Zoom, zoomOnScroll, zoomOnPinch, panOnScroll, zoomOnDoubleClick, panOnDrag, elementsSelectable, zoomActivationKeyPressed ]);
        return jsxRuntimeExports.jsx("div", {
            className: "react-flow__renderer",
            ref: zoomPane,
            style: containerStyle,
            children: children
        });
    };
    const selector$8 = s => ({
        userSelectionActive: s.userSelectionActive,
        userSelectionRect: s.userSelectionRect
    });
    function UserSelection() {
        const {userSelectionActive: userSelectionActive, userSelectionRect: userSelectionRect} = useStore(selector$8, shallow);
        const showSelectionBox = userSelectionActive && userSelectionRect;
        if (!showSelectionBox) {
            return null;
        }
        return jsxRuntimeExports.jsx("div", {
            className: "react-flow__selection react-flow__container",
            style: {
                width: userSelectionRect.width,
                height: userSelectionRect.height,
                transform: `translate(${userSelectionRect.x}px, ${userSelectionRect.y}px)`
            }
        });
    }
    function handleParentExpand(res, updateItem) {
        const parent = res.find((e => e.id === updateItem.parentNode));
        if (parent) {
            const extendWidth = updateItem.position.x + updateItem.width - parent.width;
            const extendHeight = updateItem.position.y + updateItem.height - parent.height;
            if (extendWidth > 0 || extendHeight > 0 || updateItem.position.x < 0 || updateItem.position.y < 0) {
                parent.style = {
                    ...parent.style
                } || {};
                parent.style.width = parent.style.width ?? parent.width;
                parent.style.height = parent.style.height ?? parent.height;
                if (extendWidth > 0) {
                    parent.style.width += extendWidth;
                }
                if (extendHeight > 0) {
                    parent.style.height += extendHeight;
                }
                if (updateItem.position.x < 0) {
                    const xDiff = Math.abs(updateItem.position.x);
                    parent.position.x = parent.position.x - xDiff;
                    parent.style.width += xDiff;
                    updateItem.position.x = 0;
                }
                if (updateItem.position.y < 0) {
                    const yDiff = Math.abs(updateItem.position.y);
                    parent.position.y = parent.position.y - yDiff;
                    parent.style.height += yDiff;
                    updateItem.position.y = 0;
                }
                parent.width = parent.style.width;
                parent.height = parent.style.height;
            }
        }
    }
    function applyChanges(changes, elements) {
        if (changes.some((c => c.type === "reset"))) {
            return changes.filter((c => c.type === "reset")).map((c => c.item));
        }
        const initElements = changes.filter((c => c.type === "add")).map((c => c.item));
        return elements.reduce(((res, item) => {
            const currentChanges = changes.filter((c => c.id === item.id));
            if (currentChanges.length === 0) {
                res.push(item);
                return res;
            }
            const updateItem = {
                ...item
            };
            for (const currentChange of currentChanges) {
                if (currentChange) {
                    switch (currentChange.type) {
                      case "select":
                        {
                            updateItem.selected = currentChange.selected;
                            break;
                        }

                      case "position":
                        {
                            if (typeof currentChange.position !== "undefined") {
                                updateItem.position = currentChange.position;
                            }
                            if (typeof currentChange.positionAbsolute !== "undefined") {
                                updateItem.positionAbsolute = currentChange.positionAbsolute;
                            }
                            if (typeof currentChange.dragging !== "undefined") {
                                updateItem.dragging = currentChange.dragging;
                            }
                            if (updateItem.expandParent) {
                                handleParentExpand(res, updateItem);
                            }
                            break;
                        }

                      case "dimensions":
                        {
                            if (typeof currentChange.dimensions !== "undefined") {
                                updateItem.width = currentChange.dimensions.width;
                                updateItem.height = currentChange.dimensions.height;
                            }
                            if (typeof currentChange.updateStyle !== "undefined") {
                                updateItem.style = {
                                    ...updateItem.style || {},
                                    ...currentChange.dimensions
                                };
                            }
                            if (typeof currentChange.resizing === "boolean") {
                                updateItem.resizing = currentChange.resizing;
                            }
                            if (updateItem.expandParent) {
                                handleParentExpand(res, updateItem);
                            }
                            break;
                        }

                      case "remove":
                        {
                            return res;
                        }
                    }
                }
            }
            res.push(updateItem);
            return res;
        }), initElements);
    }
    function applyNodeChanges(changes, nodes) {
        return applyChanges(changes, nodes);
    }
    function applyEdgeChanges(changes, edges) {
        return applyChanges(changes, edges);
    }
    const createSelectionChange = (id, selected) => ({
        id: id,
        type: "select",
        selected: selected
    });
    function getSelectionChanges(items, selectedIds) {
        return items.reduce(((res, item) => {
            const willBeSelected = selectedIds.includes(item.id);
            if (!item.selected && willBeSelected) {
                item.selected = true;
                res.push(createSelectionChange(item.id, true));
            } else if (item.selected && !willBeSelected) {
                item.selected = false;
                res.push(createSelectionChange(item.id, false));
            }
            return res;
        }), []);
    }
    function getMousePosition(event, containerBounds) {
        return {
            x: event.clientX - containerBounds.left,
            y: event.clientY - containerBounds.top
        };
    }
    const wrapHandler = (handler, containerRef) => event => {
        if (event.target !== containerRef.current) {
            return;
        }
        handler?.(event);
    };
    const selector$7 = s => ({
        userSelectionActive: s.userSelectionActive,
        elementsSelectable: s.elementsSelectable,
        dragging: s.paneDragging
    });
    const Pane = reactExports.memo((({isSelecting: isSelecting, selectionMode: selectionMode = SelectionMode.Full, panOnDrag: panOnDrag, onSelectionStart: onSelectionStart, onSelectionEnd: onSelectionEnd, onPaneClick: onPaneClick, onPaneContextMenu: onPaneContextMenu, onPaneScroll: onPaneScroll, onPaneMouseEnter: onPaneMouseEnter, onPaneMouseMove: onPaneMouseMove, onPaneMouseLeave: onPaneMouseLeave, children: children}) => {
        const container = reactExports.useRef(null);
        const store = useStoreApi();
        const prevSelectedNodesCount = reactExports.useRef(0);
        const prevSelectedEdgesCount = reactExports.useRef(0);
        const containerBounds = reactExports.useRef();
        const {userSelectionActive: userSelectionActive, elementsSelectable: elementsSelectable, dragging: dragging} = useStore(selector$7, shallow);
        const resetUserSelection = () => {
            store.setState({
                userSelectionActive: false,
                userSelectionRect: null
            });
            prevSelectedNodesCount.current = 0;
            prevSelectedEdgesCount.current = 0;
        };
        const onClick = event => {
            onPaneClick?.(event);
            store.getState().resetSelectedElements();
            store.setState({
                nodesSelectionActive: false
            });
        };
        const onContextMenu = event => {
            if (Array.isArray(panOnDrag) && panOnDrag?.includes(2)) {
                event.preventDefault();
                return;
            }
            onPaneContextMenu?.(event);
        };
        const onWheel = onPaneScroll ? event => onPaneScroll(event) : undefined;
        const onMouseDown = event => {
            const {resetSelectedElements: resetSelectedElements, domNode: domNode} = store.getState();
            containerBounds.current = domNode?.getBoundingClientRect();
            if (!elementsSelectable || !isSelecting || event.button !== 0 || event.target !== container.current || !containerBounds.current) {
                return;
            }
            const {x: x, y: y} = getMousePosition(event, containerBounds.current);
            resetSelectedElements();
            store.setState({
                userSelectionRect: {
                    width: 0,
                    height: 0,
                    startX: x,
                    startY: y,
                    x: x,
                    y: y
                }
            });
            onSelectionStart?.(event);
        };
        const onMouseMove = event => {
            const {userSelectionRect: userSelectionRect, nodeInternals: nodeInternals, edges: edges, transform: transform, onNodesChange: onNodesChange, onEdgesChange: onEdgesChange, nodeOrigin: nodeOrigin, getNodes: getNodes} = store.getState();
            if (!isSelecting || !containerBounds.current || !userSelectionRect) {
                return;
            }
            store.setState({
                userSelectionActive: true,
                nodesSelectionActive: false
            });
            const mousePos = getMousePosition(event, containerBounds.current);
            const startX = userSelectionRect.startX ?? 0;
            const startY = userSelectionRect.startY ?? 0;
            const nextUserSelectRect = {
                ...userSelectionRect,
                x: mousePos.x < startX ? mousePos.x : startX,
                y: mousePos.y < startY ? mousePos.y : startY,
                width: Math.abs(mousePos.x - startX),
                height: Math.abs(mousePos.y - startY)
            };
            const nodes = getNodes();
            const selectedNodes = getNodesInside(nodeInternals, nextUserSelectRect, transform, selectionMode === SelectionMode.Partial, true, nodeOrigin);
            const selectedEdgeIds = getConnectedEdges(selectedNodes, edges).map((e => e.id));
            const selectedNodeIds = selectedNodes.map((n => n.id));
            if (prevSelectedNodesCount.current !== selectedNodeIds.length) {
                prevSelectedNodesCount.current = selectedNodeIds.length;
                const changes = getSelectionChanges(nodes, selectedNodeIds);
                if (changes.length) {
                    onNodesChange?.(changes);
                }
            }
            if (prevSelectedEdgesCount.current !== selectedEdgeIds.length) {
                prevSelectedEdgesCount.current = selectedEdgeIds.length;
                const changes = getSelectionChanges(edges, selectedEdgeIds);
                if (changes.length) {
                    onEdgesChange?.(changes);
                }
            }
            store.setState({
                userSelectionRect: nextUserSelectRect
            });
        };
        const onMouseUp = event => {
            const {userSelectionRect: userSelectionRect} = store.getState();
            if (!userSelectionActive && userSelectionRect && event.target === container.current) {
                onClick?.(event);
            }
            store.setState({
                nodesSelectionActive: prevSelectedNodesCount.current > 0
            });
            resetUserSelection();
            onSelectionEnd?.(event);
        };
        const onMouseLeave = event => {
            if (userSelectionActive) {
                store.setState({
                    nodesSelectionActive: prevSelectedNodesCount.current > 0
                });
                onSelectionEnd?.(event);
            }
            resetUserSelection();
        };
        const hasActiveSelection = elementsSelectable && (isSelecting || userSelectionActive);
        return jsxRuntimeExports.jsxs("div", {
            className: cc([ "react-flow__pane", {
                dragging: dragging,
                selection: isSelecting
            } ]),
            onClick: hasActiveSelection ? undefined : wrapHandler(onClick, container),
            onContextMenu: wrapHandler(onContextMenu, container),
            onWheel: wrapHandler(onWheel, container),
            onMouseEnter: hasActiveSelection ? undefined : onPaneMouseEnter,
            onMouseDown: hasActiveSelection ? onMouseDown : undefined,
            onMouseMove: hasActiveSelection ? onMouseMove : onPaneMouseMove,
            onMouseUp: hasActiveSelection ? onMouseUp : undefined,
            onMouseLeave: hasActiveSelection ? onMouseLeave : onPaneMouseLeave,
            ref: container,
            style: containerStyle,
            children: [ children, jsxRuntimeExports.jsx(UserSelection, {}) ]
        });
    }));
    Pane.displayName = "Pane";
    const selector$6 = s => ({
        transformString: `translate(${s.transform[0]}px,${s.transform[1]}px) scale(${s.transform[2]})`,
        userSelectionActive: s.userSelectionActive
    });
    const bboxSelector = s => {
        const selectedNodes = s.getNodes().filter((n => n.selected));
        return getRectOfNodes(selectedNodes, s.nodeOrigin);
    };
    function NodesSelection({onSelectionContextMenu: onSelectionContextMenu, noPanClassName: noPanClassName, disableKeyboardA11y: disableKeyboardA11y}) {
        const store = useStoreApi();
        const {transformString: transformString, userSelectionActive: userSelectionActive} = useStore(selector$6, shallow);
        const {width: width, height: height, x: left, y: top} = useStore(bboxSelector, shallow);
        const updatePositions = useUpdateNodePositions();
        const nodeRef = reactExports.useRef(null);
        reactExports.useEffect((() => {
            if (!disableKeyboardA11y) {
                nodeRef.current?.focus({
                    preventScroll: true
                });
            }
        }), [ disableKeyboardA11y ]);
        useDrag({
            nodeRef: nodeRef
        });
        if (userSelectionActive || !width || !height) {
            return null;
        }
        const onContextMenu = onSelectionContextMenu ? event => {
            const selectedNodes = store.getState().getNodes().filter((n => n.selected));
            onSelectionContextMenu(event, selectedNodes);
        } : undefined;
        const onKeyDown = event => {
            if (Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {
                updatePositions({
                    x: arrowKeyDiffs[event.key].x,
                    y: arrowKeyDiffs[event.key].y,
                    isShiftPressed: event.shiftKey
                });
            }
        };
        return jsxRuntimeExports.jsx("div", {
            className: cc([ "react-flow__nodesselection", "react-flow__container", noPanClassName ]),
            style: {
                transform: transformString
            },
            children: jsxRuntimeExports.jsx("div", {
                ref: nodeRef,
                className: "react-flow__nodesselection-rect",
                onContextMenu: onContextMenu,
                tabIndex: disableKeyboardA11y ? undefined : -1,
                onKeyDown: disableKeyboardA11y ? undefined : onKeyDown,
                style: {
                    width: width,
                    height: height,
                    top: top,
                    left: left
                }
            })
        });
    }
    var NodesSelection$1 = reactExports.memo(NodesSelection);
    const selector$5 = s => s.nodesSelectionActive;
    const FlowRenderer = ({children: children, onPaneClick: onPaneClick, onPaneMouseEnter: onPaneMouseEnter, onPaneMouseMove: onPaneMouseMove, onPaneMouseLeave: onPaneMouseLeave, onPaneContextMenu: onPaneContextMenu, onPaneScroll: onPaneScroll, deleteKeyCode: deleteKeyCode, onMove: onMove, onMoveStart: onMoveStart, onMoveEnd: onMoveEnd, selectionKeyCode: selectionKeyCode, selectionOnDrag: selectionOnDrag, selectionMode: selectionMode, onSelectionStart: onSelectionStart, onSelectionEnd: onSelectionEnd, multiSelectionKeyCode: multiSelectionKeyCode, panActivationKeyCode: panActivationKeyCode, zoomActivationKeyCode: zoomActivationKeyCode, elementsSelectable: elementsSelectable, zoomOnScroll: zoomOnScroll, zoomOnPinch: zoomOnPinch, panOnScroll: panOnScroll, panOnScrollSpeed: panOnScrollSpeed, panOnScrollMode: panOnScrollMode, zoomOnDoubleClick: zoomOnDoubleClick, panOnDrag: _panOnDrag, defaultViewport: defaultViewport, translateExtent: translateExtent, minZoom: minZoom, maxZoom: maxZoom, preventScrolling: preventScrolling, onSelectionContextMenu: onSelectionContextMenu, noWheelClassName: noWheelClassName, noPanClassName: noPanClassName, disableKeyboardA11y: disableKeyboardA11y}) => {
        const nodesSelectionActive = useStore(selector$5);
        const selectionKeyPressed = useKeyPress(selectionKeyCode);
        const panActivationKeyPressed = useKeyPress(panActivationKeyCode);
        const panOnDrag = panActivationKeyPressed || _panOnDrag;
        const isSelecting = selectionKeyPressed || selectionOnDrag && panOnDrag !== true;
        useGlobalKeyHandler({
            deleteKeyCode: deleteKeyCode,
            multiSelectionKeyCode: multiSelectionKeyCode
        });
        return jsxRuntimeExports.jsx(ZoomPane, {
            onMove: onMove,
            onMoveStart: onMoveStart,
            onMoveEnd: onMoveEnd,
            onPaneContextMenu: onPaneContextMenu,
            elementsSelectable: elementsSelectable,
            zoomOnScroll: zoomOnScroll,
            zoomOnPinch: zoomOnPinch,
            panOnScroll: panOnScroll,
            panOnScrollSpeed: panOnScrollSpeed,
            panOnScrollMode: panOnScrollMode,
            zoomOnDoubleClick: zoomOnDoubleClick,
            panOnDrag: !selectionKeyPressed && panOnDrag,
            defaultViewport: defaultViewport,
            translateExtent: translateExtent,
            minZoom: minZoom,
            maxZoom: maxZoom,
            zoomActivationKeyCode: zoomActivationKeyCode,
            preventScrolling: preventScrolling,
            noWheelClassName: noWheelClassName,
            noPanClassName: noPanClassName,
            children: jsxRuntimeExports.jsxs(Pane, {
                onSelectionStart: onSelectionStart,
                onSelectionEnd: onSelectionEnd,
                onPaneClick: onPaneClick,
                onPaneMouseEnter: onPaneMouseEnter,
                onPaneMouseMove: onPaneMouseMove,
                onPaneMouseLeave: onPaneMouseLeave,
                onPaneContextMenu: onPaneContextMenu,
                onPaneScroll: onPaneScroll,
                panOnDrag: panOnDrag,
                isSelecting: !!isSelecting,
                selectionMode: selectionMode,
                children: [ children, nodesSelectionActive && jsxRuntimeExports.jsx(NodesSelection$1, {
                    onSelectionContextMenu: onSelectionContextMenu,
                    noPanClassName: noPanClassName,
                    disableKeyboardA11y: disableKeyboardA11y
                }) ]
            })
        });
    };
    FlowRenderer.displayName = "FlowRenderer";
    var FlowRenderer$1 = reactExports.memo(FlowRenderer);
    function useVisibleNodes(onlyRenderVisible) {
        const nodes = useStore(reactExports.useCallback((s => onlyRenderVisible ? getNodesInside(s.nodeInternals, {
            x: 0,
            y: 0,
            width: s.width,
            height: s.height
        }, s.transform, true) : s.getNodes()), [ onlyRenderVisible ]));
        return nodes;
    }
    const selector$4 = s => ({
        nodesDraggable: s.nodesDraggable,
        nodesConnectable: s.nodesConnectable,
        nodesFocusable: s.nodesFocusable,
        elementsSelectable: s.elementsSelectable,
        updateNodeDimensions: s.updateNodeDimensions
    });
    const NodeRenderer = props => {
        const {nodesDraggable: nodesDraggable, nodesConnectable: nodesConnectable, nodesFocusable: nodesFocusable, elementsSelectable: elementsSelectable, updateNodeDimensions: updateNodeDimensions} = useStore(selector$4, shallow);
        const nodes = useVisibleNodes(props.onlyRenderVisibleElements);
        const resizeObserverRef = reactExports.useRef();
        const resizeObserver = reactExports.useMemo((() => {
            if (typeof ResizeObserver === "undefined") {
                return null;
            }
            const observer = new ResizeObserver((entries => {
                const updates = entries.map((entry => ({
                    id: entry.target.getAttribute("data-id"),
                    nodeElement: entry.target,
                    forceUpdate: true
                })));
                updateNodeDimensions(updates);
            }));
            resizeObserverRef.current = observer;
            return observer;
        }), []);
        reactExports.useEffect((() => () => {
            resizeObserverRef?.current?.disconnect();
        }), []);
        return jsxRuntimeExports.jsx("div", {
            className: "react-flow__nodes",
            style: containerStyle,
            children: nodes.map((node => {
                let nodeType = node.type || "default";
                if (!props.nodeTypes[nodeType]) {
                    nodeType = "default";
                }
                const NodeComponent = props.nodeTypes[nodeType] || props.nodeTypes.default;
                const isDraggable = !!(node.draggable || nodesDraggable && typeof node.draggable === "undefined");
                const isSelectable = !!(node.selectable || elementsSelectable && typeof node.selectable === "undefined");
                const isConnectable = !!(node.connectable || nodesConnectable && typeof node.connectable === "undefined");
                const isFocusable = !!(node.focusable || nodesFocusable && typeof node.focusable === "undefined");
                const clampedPosition = props.nodeExtent ? clampPosition(node.positionAbsolute, props.nodeExtent) : node.positionAbsolute;
                const posX = clampedPosition?.x ?? 0;
                const posY = clampedPosition?.y ?? 0;
                const posOrigin = getPositionWithOrigin({
                    x: posX,
                    y: posY,
                    width: node.width ?? 0,
                    height: node.height ?? 0,
                    origin: props.nodeOrigin
                });
                return jsxRuntimeExports.jsx(NodeComponent, {
                    id: node.id,
                    className: node.className,
                    style: node.style,
                    type: nodeType,
                    data: node.data,
                    sourcePosition: node.sourcePosition || Position.Bottom,
                    targetPosition: node.targetPosition || Position.Top,
                    hidden: node.hidden,
                    xPos: posX,
                    yPos: posY,
                    xPosOrigin: posOrigin.x,
                    yPosOrigin: posOrigin.y,
                    selectNodesOnDrag: props.selectNodesOnDrag,
                    onClick: props.onNodeClick,
                    onMouseEnter: props.onNodeMouseEnter,
                    onMouseMove: props.onNodeMouseMove,
                    onMouseLeave: props.onNodeMouseLeave,
                    onContextMenu: props.onNodeContextMenu,
                    onDoubleClick: props.onNodeDoubleClick,
                    selected: !!node.selected,
                    isDraggable: isDraggable,
                    isSelectable: isSelectable,
                    isConnectable: isConnectable,
                    isFocusable: isFocusable,
                    resizeObserver: resizeObserver,
                    dragHandle: node.dragHandle,
                    zIndex: node[internalsSymbol]?.z ?? 0,
                    isParent: !!node[internalsSymbol]?.isParent,
                    noDragClassName: props.noDragClassName,
                    noPanClassName: props.noPanClassName,
                    initialized: !!node.width && !!node.height,
                    rfId: props.rfId,
                    disableKeyboardA11y: props.disableKeyboardA11y,
                    ariaLabel: node.ariaLabel
                }, node.id);
            }))
        });
    };
    NodeRenderer.displayName = "NodeRenderer";
    var NodeRenderer$1 = reactExports.memo(NodeRenderer);
    const defaultEdgeTree = [ {
        level: 0,
        isMaxLevel: true,
        edges: []
    } ];
    function groupEdgesByZLevel(edges, nodeInternals, elevateEdgesOnSelect = false) {
        let maxLevel = -1;
        const levelLookup = edges.reduce(((tree, edge) => {
            const hasZIndex = isNumeric(edge.zIndex);
            let z = hasZIndex ? edge.zIndex : 0;
            if (elevateEdgesOnSelect) {
                z = hasZIndex ? edge.zIndex : Math.max(nodeInternals.get(edge.source)?.[internalsSymbol]?.z || 0, nodeInternals.get(edge.target)?.[internalsSymbol]?.z || 0);
            }
            if (tree[z]) {
                tree[z].push(edge);
            } else {
                tree[z] = [ edge ];
            }
            maxLevel = z > maxLevel ? z : maxLevel;
            return tree;
        }), {});
        const edgeTree = Object.entries(levelLookup).map((([key, edges]) => {
            const level = +key;
            return {
                edges: edges,
                level: level,
                isMaxLevel: level === maxLevel
            };
        }));
        if (edgeTree.length === 0) {
            return defaultEdgeTree;
        }
        return edgeTree;
    }
    function useVisibleEdges(onlyRenderVisible, nodeInternals, elevateEdgesOnSelect) {
        const edges = useStore(reactExports.useCallback((s => {
            if (!onlyRenderVisible) {
                return s.edges;
            }
            return s.edges.filter((e => {
                const sourceNode = nodeInternals.get(e.source);
                const targetNode = nodeInternals.get(e.target);
                return sourceNode?.width && sourceNode?.height && targetNode?.width && targetNode?.height && isEdgeVisible({
                    sourcePos: sourceNode.positionAbsolute || {
                        x: 0,
                        y: 0
                    },
                    targetPos: targetNode.positionAbsolute || {
                        x: 0,
                        y: 0
                    },
                    sourceWidth: sourceNode.width,
                    sourceHeight: sourceNode.height,
                    targetWidth: targetNode.width,
                    targetHeight: targetNode.height,
                    width: s.width,
                    height: s.height,
                    transform: s.transform
                });
            }));
        }), [ onlyRenderVisible, nodeInternals ]));
        return groupEdgesByZLevel(edges, nodeInternals, elevateEdgesOnSelect);
    }
    const oppositePosition = {
        [Position.Left]: Position.Right,
        [Position.Right]: Position.Left,
        [Position.Top]: Position.Bottom,
        [Position.Bottom]: Position.Top
    };
    const ConnectionLine = ({connectionNodeId: connectionNodeId, connectionHandleType: connectionHandleType, connectionLineStyle: connectionLineStyle, connectionLineType: connectionLineType = ConnectionLineType.Bezier, isConnectable: isConnectable, CustomConnectionLineComponent: CustomConnectionLineComponent}) => {
        const {fromNode: fromNode, handleId: handleId, toX: toX, toY: toY, connectionMode: connectionMode} = useStore(reactExports.useCallback((s => ({
            fromNode: s.nodeInternals.get(connectionNodeId),
            handleId: s.connectionHandleId,
            toX: (s.connectionPosition.x - s.transform[0]) / s.transform[2],
            toY: (s.connectionPosition.y - s.transform[1]) / s.transform[2],
            connectionMode: s.connectionMode
        })), [ connectionNodeId ]), shallow);
        const fromHandleBounds = fromNode?.[internalsSymbol]?.handleBounds;
        let handleBounds = fromHandleBounds?.[connectionHandleType];
        if (connectionMode === ConnectionMode.Loose) {
            handleBounds = handleBounds ? handleBounds : fromHandleBounds?.[connectionHandleType === "source" ? "target" : "source"];
        }
        if (!fromNode || !isConnectable || !handleBounds) {
            return null;
        }
        const fromHandle = handleId ? handleBounds.find((d => d.id === handleId)) : handleBounds[0];
        const fromHandleX = fromHandle ? fromHandle.x + fromHandle.width / 2 : (fromNode?.width ?? 0) / 2;
        const fromHandleY = fromHandle ? fromHandle.y + fromHandle.height / 2 : fromNode?.height ?? 0;
        const fromX = (fromNode?.positionAbsolute?.x || 0) + fromHandleX;
        const fromY = (fromNode?.positionAbsolute?.y || 0) + fromHandleY;
        const fromPosition = fromHandle?.position;
        if (!fromPosition) {
            return null;
        }
        const toPosition = oppositePosition[fromPosition];
        if (CustomConnectionLineComponent) {
            return jsxRuntimeExports.jsx("g", {
                className: "react-flow__connection",
                children: jsxRuntimeExports.jsx(CustomConnectionLineComponent, {
                    connectionLineType: connectionLineType,
                    connectionLineStyle: connectionLineStyle,
                    fromNode: fromNode,
                    fromHandle: fromHandle,
                    fromX: fromX,
                    fromY: fromY,
                    toX: toX,
                    toY: toY,
                    fromPosition: fromPosition,
                    toPosition: toPosition
                })
            });
        }
        let dAttr = "";
        const pathParams = {
            sourceX: fromX,
            sourceY: fromY,
            sourcePosition: fromPosition,
            targetX: toX,
            targetY: toY,
            targetPosition: toPosition
        };
        if (connectionLineType === ConnectionLineType.Bezier) {
            [dAttr] = getBezierPath(pathParams);
        } else if (connectionLineType === ConnectionLineType.Step) {
            [dAttr] = getSmoothStepPath({
                ...pathParams,
                borderRadius: 0
            });
        } else if (connectionLineType === ConnectionLineType.SmoothStep) {
            [dAttr] = getSmoothStepPath(pathParams);
        } else if (connectionLineType === ConnectionLineType.SimpleBezier) {
            [dAttr] = getSimpleBezierPath(pathParams);
        } else {
            dAttr = `M${fromX},${fromY} ${toX},${toY}`;
        }
        return jsxRuntimeExports.jsx("g", {
            className: "react-flow__connection",
            children: jsxRuntimeExports.jsx("path", {
                d: dAttr,
                fill: "none",
                className: "react-flow__connection-path",
                style: connectionLineStyle
            })
        });
    };
    ConnectionLine.displayName = "ConnectionLine";
    const ArrowSymbol = ({color: color = "none", strokeWidth: strokeWidth = 1}) => jsxRuntimeExports.jsx("polyline", {
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: strokeWidth,
        fill: "none",
        points: "-5,-4 0,0 -5,4"
    });
    const ArrowClosedSymbol = ({color: color = "none", strokeWidth: strokeWidth = 1}) => jsxRuntimeExports.jsx("polyline", {
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: strokeWidth,
        fill: color,
        points: "-5,-4 0,0 -5,4 -5,-4"
    });
    const MarkerSymbols = {
        [MarkerType.Arrow]: ArrowSymbol,
        [MarkerType.ArrowClosed]: ArrowClosedSymbol
    };
    function useMarkerSymbol(type) {
        const symbol = reactExports.useMemo((() => {
            const symbolExists = Object.prototype.hasOwnProperty.call(MarkerSymbols, type);
            if (!symbolExists) {
                return null;
            }
            return MarkerSymbols[type];
        }), [ type ]);
        return symbol;
    }
    const Marker = ({id: id, type: type, color: color, width: width = 12.5, height: height = 12.5, markerUnits: markerUnits = "strokeWidth", strokeWidth: strokeWidth, orient: orient = "auto-start-reverse"}) => {
        const Symbol = useMarkerSymbol(type);
        if (!Symbol) {
            return null;
        }
        return jsxRuntimeExports.jsx("marker", {
            className: "react-flow__arrowhead",
            id: id,
            markerWidth: `${width}`,
            markerHeight: `${height}`,
            viewBox: "-10 -10 20 20",
            markerUnits: markerUnits,
            orient: orient,
            refX: "0",
            refY: "0",
            children: jsxRuntimeExports.jsx(Symbol, {
                color: color,
                strokeWidth: strokeWidth
            })
        });
    };
    const markerSelector = ({defaultColor: defaultColor, rfId: rfId}) => s => {
        const ids = [];
        return s.edges.reduce(((markers, edge) => {
            [ edge.markerStart, edge.markerEnd ].forEach((marker => {
                if (marker && typeof marker === "object") {
                    const markerId = getMarkerId(marker, rfId);
                    if (!ids.includes(markerId)) {
                        markers.push({
                            id: markerId,
                            color: marker.color || defaultColor,
                            ...marker
                        });
                        ids.push(markerId);
                    }
                }
            }));
            return markers;
        }), []).sort(((a, b) => a.id.localeCompare(b.id)));
    };
    const MarkerDefinitions = ({defaultColor: defaultColor, rfId: rfId}) => {
        const markers = useStore(reactExports.useCallback(markerSelector({
            defaultColor: defaultColor,
            rfId: rfId
        }), [ defaultColor, rfId ]), ((a, b) => !(a.length !== b.length || a.some(((m, i) => m.id !== b[i].id)))));
        return jsxRuntimeExports.jsx("defs", {
            children: markers.map((marker => jsxRuntimeExports.jsx(Marker, {
                id: marker.id,
                type: marker.type,
                color: marker.color,
                width: marker.width,
                height: marker.height,
                markerUnits: marker.markerUnits,
                strokeWidth: marker.strokeWidth,
                orient: marker.orient
            }, marker.id)))
        });
    };
    MarkerDefinitions.displayName = "MarkerDefinitions";
    var MarkerDefinitions$1 = reactExports.memo(MarkerDefinitions);
    const selector$3 = s => ({
        connectionNodeId: s.connectionNodeId,
        connectionHandleType: s.connectionHandleType,
        nodesConnectable: s.nodesConnectable,
        edgesFocusable: s.edgesFocusable,
        elementsSelectable: s.elementsSelectable,
        width: s.width,
        height: s.height,
        connectionMode: s.connectionMode,
        nodeInternals: s.nodeInternals
    });
    const EdgeRenderer = props => {
        const {connectionNodeId: connectionNodeId, connectionHandleType: connectionHandleType, nodesConnectable: nodesConnectable, edgesFocusable: edgesFocusable, elementsSelectable: elementsSelectable, width: width, height: height, connectionMode: connectionMode, nodeInternals: nodeInternals} = useStore(selector$3, shallow);
        const edgeTree = useVisibleEdges(props.onlyRenderVisibleElements, nodeInternals, props.elevateEdgesOnSelect);
        if (!width) {
            return null;
        }
        const {connectionLineType: connectionLineType, defaultMarkerColor: defaultMarkerColor, connectionLineStyle: connectionLineStyle, connectionLineComponent: connectionLineComponent, connectionLineContainerStyle: connectionLineContainerStyle} = props;
        const renderConnectionLine = connectionNodeId && connectionHandleType;
        return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [ edgeTree.map((({level: level, edges: edges, isMaxLevel: isMaxLevel}) => jsxRuntimeExports.jsxs("svg", {
                style: {
                    zIndex: level
                },
                width: width,
                height: height,
                className: "react-flow__edges react-flow__container",
                children: [ isMaxLevel && jsxRuntimeExports.jsx(MarkerDefinitions$1, {
                    defaultColor: defaultMarkerColor,
                    rfId: props.rfId
                }), jsxRuntimeExports.jsx("g", {
                    children: edges.map((edge => {
                        const [sourceNodeRect, sourceHandleBounds, sourceIsValid] = getNodeData(nodeInternals.get(edge.source));
                        const [targetNodeRect, targetHandleBounds, targetIsValid] = getNodeData(nodeInternals.get(edge.target));
                        if (!sourceIsValid || !targetIsValid) {
                            return null;
                        }
                        let edgeType = edge.type || "default";
                        if (!props.edgeTypes[edgeType]) {
                            edgeType = "default";
                        }
                        const EdgeComponent = props.edgeTypes[edgeType] || props.edgeTypes.default;
                        const targetNodeHandles = connectionMode === ConnectionMode.Strict ? targetHandleBounds.target : targetHandleBounds.target || targetHandleBounds.source;
                        const sourceHandle = getHandle(sourceHandleBounds.source, edge.sourceHandle || null);
                        const targetHandle = getHandle(targetNodeHandles, edge.targetHandle || null);
                        const sourcePosition = sourceHandle?.position || Position.Bottom;
                        const targetPosition = targetHandle?.position || Position.Top;
                        const isFocusable = !!(edge.focusable || edgesFocusable && typeof edge.focusable === "undefined");
                        if (!sourceHandle || !targetHandle) {
                            devWarn(`Couldn't create edge for ${!sourceHandle ? "source" : "target"} handle id: ${!sourceHandle ? edge.sourceHandle : edge.targetHandle}; edge id: ${edge.id}. Help: https://reactflow.dev/error#800`);
                            return null;
                        }
                        const {sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY} = getEdgePositions(sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition);
                        return jsxRuntimeExports.jsx(EdgeComponent, {
                            id: edge.id,
                            className: cc([ edge.className, props.noPanClassName ]),
                            type: edgeType,
                            data: edge.data,
                            selected: !!edge.selected,
                            animated: !!edge.animated,
                            hidden: !!edge.hidden,
                            label: edge.label,
                            labelStyle: edge.labelStyle,
                            labelShowBg: edge.labelShowBg,
                            labelBgStyle: edge.labelBgStyle,
                            labelBgPadding: edge.labelBgPadding,
                            labelBgBorderRadius: edge.labelBgBorderRadius,
                            style: edge.style,
                            source: edge.source,
                            target: edge.target,
                            sourceHandleId: edge.sourceHandle,
                            targetHandleId: edge.targetHandle,
                            markerEnd: edge.markerEnd,
                            markerStart: edge.markerStart,
                            sourceX: sourceX,
                            sourceY: sourceY,
                            targetX: targetX,
                            targetY: targetY,
                            sourcePosition: sourcePosition,
                            targetPosition: targetPosition,
                            elementsSelectable: elementsSelectable,
                            onEdgeUpdate: props.onEdgeUpdate,
                            onContextMenu: props.onEdgeContextMenu,
                            onMouseEnter: props.onEdgeMouseEnter,
                            onMouseMove: props.onEdgeMouseMove,
                            onMouseLeave: props.onEdgeMouseLeave,
                            onClick: props.onEdgeClick,
                            edgeUpdaterRadius: props.edgeUpdaterRadius,
                            onEdgeDoubleClick: props.onEdgeDoubleClick,
                            onEdgeUpdateStart: props.onEdgeUpdateStart,
                            onEdgeUpdateEnd: props.onEdgeUpdateEnd,
                            rfId: props.rfId,
                            ariaLabel: edge.ariaLabel,
                            isFocusable: isFocusable,
                            pathOptions: "pathOptions" in edge ? edge.pathOptions : undefined,
                            interactionWidth: edge.interactionWidth
                        }, edge.id);
                    }))
                }) ]
            }, level))), renderConnectionLine && jsxRuntimeExports.jsx("svg", {
                style: connectionLineContainerStyle,
                width: width,
                height: height,
                className: "react-flow__edges react-flow__connectionline react-flow__container",
                children: jsxRuntimeExports.jsx(ConnectionLine, {
                    connectionNodeId: connectionNodeId,
                    connectionHandleType: connectionHandleType,
                    connectionLineStyle: connectionLineStyle,
                    connectionLineType: connectionLineType,
                    isConnectable: nodesConnectable,
                    CustomConnectionLineComponent: connectionLineComponent
                })
            }) ]
        });
    };
    EdgeRenderer.displayName = "EdgeRenderer";
    var EdgeRenderer$1 = reactExports.memo(EdgeRenderer);
    const selector$2 = s => `translate(${s.transform[0]}px,${s.transform[1]}px) scale(${s.transform[2]})`;
    function Viewport({children: children}) {
        const transform = useStore(selector$2);
        return jsxRuntimeExports.jsx("div", {
            className: "react-flow__viewport react-flow__container",
            style: {
                transform: transform
            },
            children: children
        });
    }
    function useOnInitHandler(onInit) {
        const rfInstance = useReactFlow();
        const isInitialized = reactExports.useRef(false);
        reactExports.useEffect((() => {
            if (!isInitialized.current && rfInstance.viewportInitialized && onInit) {
                setTimeout((() => onInit(rfInstance)), 1);
                isInitialized.current = true;
            }
        }), [ onInit, rfInstance.viewportInitialized ]);
    }
    const GraphView = ({nodeTypes: nodeTypes, edgeTypes: edgeTypes, onMove: onMove, onMoveStart: onMoveStart, onMoveEnd: onMoveEnd, onInit: onInit, onNodeClick: onNodeClick, onEdgeClick: onEdgeClick, onNodeDoubleClick: onNodeDoubleClick, onEdgeDoubleClick: onEdgeDoubleClick, onNodeMouseEnter: onNodeMouseEnter, onNodeMouseMove: onNodeMouseMove, onNodeMouseLeave: onNodeMouseLeave, onNodeContextMenu: onNodeContextMenu, onSelectionContextMenu: onSelectionContextMenu, onSelectionStart: onSelectionStart, onSelectionEnd: onSelectionEnd, connectionLineType: connectionLineType, connectionLineStyle: connectionLineStyle, connectionLineComponent: connectionLineComponent, connectionLineContainerStyle: connectionLineContainerStyle, selectionKeyCode: selectionKeyCode, selectionOnDrag: selectionOnDrag, selectionMode: selectionMode, multiSelectionKeyCode: multiSelectionKeyCode, panActivationKeyCode: panActivationKeyCode, zoomActivationKeyCode: zoomActivationKeyCode, deleteKeyCode: deleteKeyCode, onlyRenderVisibleElements: onlyRenderVisibleElements, elementsSelectable: elementsSelectable, selectNodesOnDrag: selectNodesOnDrag, defaultViewport: defaultViewport, translateExtent: translateExtent, minZoom: minZoom, maxZoom: maxZoom, preventScrolling: preventScrolling, defaultMarkerColor: defaultMarkerColor, zoomOnScroll: zoomOnScroll, zoomOnPinch: zoomOnPinch, panOnScroll: panOnScroll, panOnScrollSpeed: panOnScrollSpeed, panOnScrollMode: panOnScrollMode, zoomOnDoubleClick: zoomOnDoubleClick, panOnDrag: panOnDrag, onPaneClick: onPaneClick, onPaneMouseEnter: onPaneMouseEnter, onPaneMouseMove: onPaneMouseMove, onPaneMouseLeave: onPaneMouseLeave, onPaneScroll: onPaneScroll, onPaneContextMenu: onPaneContextMenu, onEdgeUpdate: onEdgeUpdate, onEdgeContextMenu: onEdgeContextMenu, onEdgeMouseEnter: onEdgeMouseEnter, onEdgeMouseMove: onEdgeMouseMove, onEdgeMouseLeave: onEdgeMouseLeave, edgeUpdaterRadius: edgeUpdaterRadius, onEdgeUpdateStart: onEdgeUpdateStart, onEdgeUpdateEnd: onEdgeUpdateEnd, noDragClassName: noDragClassName, noWheelClassName: noWheelClassName, noPanClassName: noPanClassName, elevateEdgesOnSelect: elevateEdgesOnSelect, disableKeyboardA11y: disableKeyboardA11y, nodeOrigin: nodeOrigin, nodeExtent: nodeExtent, rfId: rfId}) => {
        useOnInitHandler(onInit);
        return jsxRuntimeExports.jsx(FlowRenderer$1, {
            onPaneClick: onPaneClick,
            onPaneMouseEnter: onPaneMouseEnter,
            onPaneMouseMove: onPaneMouseMove,
            onPaneMouseLeave: onPaneMouseLeave,
            onPaneContextMenu: onPaneContextMenu,
            onPaneScroll: onPaneScroll,
            deleteKeyCode: deleteKeyCode,
            selectionKeyCode: selectionKeyCode,
            selectionOnDrag: selectionOnDrag,
            selectionMode: selectionMode,
            onSelectionStart: onSelectionStart,
            onSelectionEnd: onSelectionEnd,
            multiSelectionKeyCode: multiSelectionKeyCode,
            panActivationKeyCode: panActivationKeyCode,
            zoomActivationKeyCode: zoomActivationKeyCode,
            elementsSelectable: elementsSelectable,
            onMove: onMove,
            onMoveStart: onMoveStart,
            onMoveEnd: onMoveEnd,
            zoomOnScroll: zoomOnScroll,
            zoomOnPinch: zoomOnPinch,
            zoomOnDoubleClick: zoomOnDoubleClick,
            panOnScroll: panOnScroll,
            panOnScrollSpeed: panOnScrollSpeed,
            panOnScrollMode: panOnScrollMode,
            panOnDrag: panOnDrag,
            defaultViewport: defaultViewport,
            translateExtent: translateExtent,
            minZoom: minZoom,
            maxZoom: maxZoom,
            onSelectionContextMenu: onSelectionContextMenu,
            preventScrolling: preventScrolling,
            noDragClassName: noDragClassName,
            noWheelClassName: noWheelClassName,
            noPanClassName: noPanClassName,
            disableKeyboardA11y: disableKeyboardA11y,
            children: jsxRuntimeExports.jsxs(Viewport, {
                children: [ jsxRuntimeExports.jsx(EdgeRenderer$1, {
                    edgeTypes: edgeTypes,
                    onEdgeClick: onEdgeClick,
                    onEdgeDoubleClick: onEdgeDoubleClick,
                    connectionLineType: connectionLineType,
                    connectionLineStyle: connectionLineStyle,
                    connectionLineComponent: connectionLineComponent,
                    connectionLineContainerStyle: connectionLineContainerStyle,
                    onEdgeUpdate: onEdgeUpdate,
                    onlyRenderVisibleElements: onlyRenderVisibleElements,
                    onEdgeContextMenu: onEdgeContextMenu,
                    onEdgeMouseEnter: onEdgeMouseEnter,
                    onEdgeMouseMove: onEdgeMouseMove,
                    onEdgeMouseLeave: onEdgeMouseLeave,
                    onEdgeUpdateStart: onEdgeUpdateStart,
                    onEdgeUpdateEnd: onEdgeUpdateEnd,
                    edgeUpdaterRadius: edgeUpdaterRadius,
                    defaultMarkerColor: defaultMarkerColor,
                    noPanClassName: noPanClassName,
                    elevateEdgesOnSelect: !!elevateEdgesOnSelect,
                    disableKeyboardA11y: disableKeyboardA11y,
                    rfId: rfId
                }), jsxRuntimeExports.jsx("div", {
                    className: "react-flow__edgelabel-renderer"
                }), jsxRuntimeExports.jsx(NodeRenderer$1, {
                    nodeTypes: nodeTypes,
                    onNodeClick: onNodeClick,
                    onNodeDoubleClick: onNodeDoubleClick,
                    onNodeMouseEnter: onNodeMouseEnter,
                    onNodeMouseMove: onNodeMouseMove,
                    onNodeMouseLeave: onNodeMouseLeave,
                    onNodeContextMenu: onNodeContextMenu,
                    selectNodesOnDrag: selectNodesOnDrag,
                    onlyRenderVisibleElements: onlyRenderVisibleElements,
                    noPanClassName: noPanClassName,
                    noDragClassName: noDragClassName,
                    disableKeyboardA11y: disableKeyboardA11y,
                    nodeOrigin: nodeOrigin,
                    nodeExtent: nodeExtent,
                    rfId: rfId
                }) ]
            })
        });
    };
    GraphView.displayName = "GraphView";
    var GraphView$1 = reactExports.memo(GraphView);
    const infiniteExtent = [ [ Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY ], [ Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY ] ];
    const initialState = {
        rfId: "1",
        width: 0,
        height: 0,
        transform: [ 0, 0, 1 ],
        nodeInternals: new Map,
        edges: [],
        onNodesChange: null,
        onEdgesChange: null,
        hasDefaultNodes: false,
        hasDefaultEdges: false,
        d3Zoom: null,
        d3Selection: null,
        d3ZoomHandler: undefined,
        minZoom: .5,
        maxZoom: 2,
        translateExtent: infiniteExtent,
        nodeExtent: infiniteExtent,
        nodesSelectionActive: false,
        userSelectionActive: false,
        userSelectionRect: null,
        connectionNodeId: null,
        connectionHandleId: null,
        connectionHandleType: "source",
        connectionPosition: {
            x: 0,
            y: 0
        },
        connectionMode: ConnectionMode.Strict,
        domNode: null,
        paneDragging: false,
        noPanClassName: "nopan",
        nodeOrigin: [ 0, 0 ],
        snapGrid: [ 15, 15 ],
        snapToGrid: false,
        nodesDraggable: true,
        nodesConnectable: true,
        nodesFocusable: true,
        edgesFocusable: true,
        elementsSelectable: true,
        elevateNodesOnSelect: true,
        fitViewOnInit: false,
        fitViewOnInitDone: false,
        fitViewOnInitOptions: undefined,
        multiSelectionActive: false,
        connectionStartHandle: null,
        connectOnClick: true,
        ariaLiveMessage: ""
    };
    const createRFStore = () => createStore(((set, get) => ({
        ...initialState,
        setNodes: nodes => {
            const {nodeInternals: nodeInternals, nodeOrigin: nodeOrigin, elevateNodesOnSelect: elevateNodesOnSelect} = get();
            set({
                nodeInternals: createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect)
            });
        },
        getNodes: () => Array.from(get().nodeInternals.values()),
        setEdges: edges => {
            const {defaultEdgeOptions: defaultEdgeOptions = {}} = get();
            set({
                edges: edges.map((e => ({
                    ...defaultEdgeOptions,
                    ...e
                })))
            });
        },
        setDefaultNodesAndEdges: (nodes, edges) => {
            const hasDefaultNodes = typeof nodes !== "undefined";
            const hasDefaultEdges = typeof edges !== "undefined";
            const nodeInternals = hasDefaultNodes ? createNodeInternals(nodes, new Map, get().nodeOrigin, get().elevateNodesOnSelect) : new Map;
            const nextEdges = hasDefaultEdges ? edges : [];
            set({
                nodeInternals: nodeInternals,
                edges: nextEdges,
                hasDefaultNodes: hasDefaultNodes,
                hasDefaultEdges: hasDefaultEdges
            });
        },
        updateNodeDimensions: updates => {
            const {onNodesChange: onNodesChange, nodeInternals: nodeInternals, fitViewOnInit: fitViewOnInit, fitViewOnInitDone: fitViewOnInitDone, fitViewOnInitOptions: fitViewOnInitOptions, domNode: domNode, nodeOrigin: nodeOrigin} = get();
            const viewportNode = domNode?.querySelector(".react-flow__viewport");
            if (!viewportNode) {
                return;
            }
            const style = window.getComputedStyle(viewportNode);
            const {m22: zoom} = new window.DOMMatrixReadOnly(style.transform);
            const changes = updates.reduce(((res, update) => {
                const node = nodeInternals.get(update.id);
                if (node) {
                    const dimensions = getDimensions(update.nodeElement);
                    const doUpdate = !!(dimensions.width && dimensions.height && (node.width !== dimensions.width || node.height !== dimensions.height || update.forceUpdate));
                    if (doUpdate) {
                        nodeInternals.set(node.id, {
                            ...node,
                            [internalsSymbol]: {
                                ...node[internalsSymbol],
                                handleBounds: {
                                    source: getHandleBounds(".source", update.nodeElement, zoom, nodeOrigin),
                                    target: getHandleBounds(".target", update.nodeElement, zoom, nodeOrigin)
                                }
                            },
                            ...dimensions
                        });
                        res.push({
                            id: node.id,
                            type: "dimensions",
                            dimensions: dimensions
                        });
                    }
                }
                return res;
            }), []);
            const nextFitViewOnInitDone = fitViewOnInitDone || fitViewOnInit && !fitViewOnInitDone && fitView(get, {
                initial: true,
                ...fitViewOnInitOptions
            });
            set({
                nodeInternals: new Map(nodeInternals),
                fitViewOnInitDone: nextFitViewOnInitDone
            });
            if (changes?.length > 0) {
                onNodesChange?.(changes);
            }
        },
        updateNodePositions: (nodeDragItems, positionChanged = true, dragging = false) => {
            const {triggerNodeChanges: triggerNodeChanges} = get();
            const changes = nodeDragItems.map((node => {
                const change = {
                    id: node.id,
                    type: "position",
                    dragging: dragging
                };
                if (positionChanged) {
                    change.positionAbsolute = node.positionAbsolute;
                    change.position = node.position;
                }
                return change;
            }));
            triggerNodeChanges(changes);
        },
        triggerNodeChanges: changes => {
            const {onNodesChange: onNodesChange, nodeInternals: nodeInternals, hasDefaultNodes: hasDefaultNodes, nodeOrigin: nodeOrigin, getNodes: getNodes, elevateNodesOnSelect: elevateNodesOnSelect} = get();
            if (changes?.length) {
                if (hasDefaultNodes) {
                    const nodes = applyNodeChanges(changes, getNodes());
                    const nextNodeInternals = createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect);
                    set({
                        nodeInternals: nextNodeInternals
                    });
                }
                onNodesChange?.(changes);
            }
        },
        addSelectedNodes: selectedNodeIds => {
            const {multiSelectionActive: multiSelectionActive, edges: edges, getNodes: getNodes} = get();
            let changedNodes;
            let changedEdges = null;
            if (multiSelectionActive) {
                changedNodes = selectedNodeIds.map((nodeId => createSelectionChange(nodeId, true)));
            } else {
                changedNodes = getSelectionChanges(getNodes(), selectedNodeIds);
                changedEdges = getSelectionChanges(edges, []);
            }
            updateNodesAndEdgesSelections({
                changedNodes: changedNodes,
                changedEdges: changedEdges,
                get: get,
                set: set
            });
        },
        addSelectedEdges: selectedEdgeIds => {
            const {multiSelectionActive: multiSelectionActive, edges: edges, getNodes: getNodes} = get();
            let changedEdges;
            let changedNodes = null;
            if (multiSelectionActive) {
                changedEdges = selectedEdgeIds.map((edgeId => createSelectionChange(edgeId, true)));
            } else {
                changedEdges = getSelectionChanges(edges, selectedEdgeIds);
                changedNodes = getSelectionChanges(getNodes(), []);
            }
            updateNodesAndEdgesSelections({
                changedNodes: changedNodes,
                changedEdges: changedEdges,
                get: get,
                set: set
            });
        },
        unselectNodesAndEdges: ({nodes: nodes, edges: edges} = {}) => {
            const {edges: storeEdges, getNodes: getNodes} = get();
            const nodesToUnselect = nodes ? nodes : getNodes();
            const edgesToUnselect = edges ? edges : storeEdges;
            const changedNodes = nodesToUnselect.map((n => {
                n.selected = false;
                return createSelectionChange(n.id, false);
            }));
            const changedEdges = edgesToUnselect.map((edge => createSelectionChange(edge.id, false)));
            updateNodesAndEdgesSelections({
                changedNodes: changedNodes,
                changedEdges: changedEdges,
                get: get,
                set: set
            });
        },
        setMinZoom: minZoom => {
            const {d3Zoom: d3Zoom, maxZoom: maxZoom} = get();
            d3Zoom?.scaleExtent([ minZoom, maxZoom ]);
            set({
                minZoom: minZoom
            });
        },
        setMaxZoom: maxZoom => {
            const {d3Zoom: d3Zoom, minZoom: minZoom} = get();
            d3Zoom?.scaleExtent([ minZoom, maxZoom ]);
            set({
                maxZoom: maxZoom
            });
        },
        setTranslateExtent: translateExtent => {
            get().d3Zoom?.translateExtent(translateExtent);
            set({
                translateExtent: translateExtent
            });
        },
        resetSelectedElements: () => {
            const {edges: edges, getNodes: getNodes} = get();
            const nodes = getNodes();
            const nodesToUnselect = nodes.filter((e => e.selected)).map((n => createSelectionChange(n.id, false)));
            const edgesToUnselect = edges.filter((e => e.selected)).map((e => createSelectionChange(e.id, false)));
            updateNodesAndEdgesSelections({
                changedNodes: nodesToUnselect,
                changedEdges: edgesToUnselect,
                get: get,
                set: set
            });
        },
        setNodeExtent: nodeExtent => {
            const {nodeInternals: nodeInternals} = get();
            nodeInternals.forEach((node => {
                node.positionAbsolute = clampPosition(node.position, nodeExtent);
            }));
            set({
                nodeExtent: nodeExtent,
                nodeInternals: new Map(nodeInternals)
            });
        },
        cancelConnection: () => set({
            connectionNodeId: initialState.connectionNodeId,
            connectionHandleId: initialState.connectionHandleId
        }),
        reset: () => set({
            ...initialState
        })
    })));
    const ReactFlowProvider = ({children: children}) => {
        const storeRef = reactExports.useRef(null);
        if (!storeRef.current) {
            storeRef.current = createRFStore();
        }
        return jsxRuntimeExports.jsx(Provider$1, {
            value: storeRef.current,
            children: children
        });
    };
    ReactFlowProvider.displayName = "ReactFlowProvider";
    const Wrapper = ({children: children}) => {
        const isWrapped = reactExports.useContext(StoreContext);
        if (isWrapped) {
            return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                children: children
            });
        }
        return jsxRuntimeExports.jsx(ReactFlowProvider, {
            children: children
        });
    };
    Wrapper.displayName = "ReactFlowWrapper";
    function useNodeOrEdgeTypes(nodeOrEdgeTypes, createTypes) {
        reactExports.useRef(null);
        const typesParsed = reactExports.useMemo((() => createTypes(nodeOrEdgeTypes)), [ nodeOrEdgeTypes ]);
        return typesParsed;
    }
    const defaultNodeTypes = {
        input: InputNode$1,
        default: DefaultNode$1,
        output: OutputNode$1,
        group: GroupNode
    };
    const defaultEdgeTypes = {
        default: BezierEdge,
        straight: StraightEdge,
        step: StepEdge,
        smoothstep: SmoothStepEdge,
        simplebezier: SimpleBezierEdge
    };
    const initNodeOrigin = [ 0, 0 ];
    const initSnapGrid = [ 15, 15 ];
    const initDefaultViewport = {
        x: 0,
        y: 0,
        zoom: 1
    };
    const wrapperStyle = {
        width: "100%",
        height: "100%",
        overflow: "hidden",
        position: "relative",
        zIndex: 0
    };
    const ReactFlow = reactExports.forwardRef((({nodes: nodes, edges: edges, defaultNodes: defaultNodes, defaultEdges: defaultEdges, className: className, nodeTypes: nodeTypes = defaultNodeTypes, edgeTypes: edgeTypes = defaultEdgeTypes, onNodeClick: onNodeClick, onEdgeClick: onEdgeClick, onInit: onInit, onMove: onMove, onMoveStart: onMoveStart, onMoveEnd: onMoveEnd, onConnect: onConnect, onConnectStart: onConnectStart, onConnectEnd: onConnectEnd, onClickConnectStart: onClickConnectStart, onClickConnectEnd: onClickConnectEnd, onNodeMouseEnter: onNodeMouseEnter, onNodeMouseMove: onNodeMouseMove, onNodeMouseLeave: onNodeMouseLeave, onNodeContextMenu: onNodeContextMenu, onNodeDoubleClick: onNodeDoubleClick, onNodeDragStart: onNodeDragStart, onNodeDrag: onNodeDrag, onNodeDragStop: onNodeDragStop, onNodesDelete: onNodesDelete, onEdgesDelete: onEdgesDelete, onSelectionChange: onSelectionChange, onSelectionDragStart: onSelectionDragStart, onSelectionDrag: onSelectionDrag, onSelectionDragStop: onSelectionDragStop, onSelectionContextMenu: onSelectionContextMenu, onSelectionStart: onSelectionStart, onSelectionEnd: onSelectionEnd, connectionMode: connectionMode = ConnectionMode.Strict, connectionLineType: connectionLineType = ConnectionLineType.Bezier, connectionLineStyle: connectionLineStyle, connectionLineComponent: connectionLineComponent, connectionLineContainerStyle: connectionLineContainerStyle, deleteKeyCode: deleteKeyCode = "Backspace", selectionKeyCode: selectionKeyCode = "Shift", selectionOnDrag: selectionOnDrag = false, selectionMode: selectionMode = SelectionMode.Full, panActivationKeyCode: panActivationKeyCode = "Space", multiSelectionKeyCode: multiSelectionKeyCode = "Meta", zoomActivationKeyCode: zoomActivationKeyCode = "Meta", snapToGrid: snapToGrid = false, snapGrid: snapGrid = initSnapGrid, onlyRenderVisibleElements: onlyRenderVisibleElements = false, selectNodesOnDrag: selectNodesOnDrag = true, nodesDraggable: nodesDraggable, nodesConnectable: nodesConnectable, nodesFocusable: nodesFocusable, nodeOrigin: nodeOrigin = initNodeOrigin, edgesFocusable: edgesFocusable, elementsSelectable: elementsSelectable, defaultViewport: defaultViewport = initDefaultViewport, minZoom: minZoom = .5, maxZoom: maxZoom = 2, translateExtent: translateExtent = infiniteExtent, preventScrolling: preventScrolling = true, nodeExtent: nodeExtent, defaultMarkerColor: defaultMarkerColor = "#b1b1b7", zoomOnScroll: zoomOnScroll = true, zoomOnPinch: zoomOnPinch = true, panOnScroll: panOnScroll = false, panOnScrollSpeed: panOnScrollSpeed = .5, panOnScrollMode: panOnScrollMode = PanOnScrollMode.Free, zoomOnDoubleClick: zoomOnDoubleClick = true, panOnDrag: panOnDrag = true, onPaneClick: onPaneClick, onPaneMouseEnter: onPaneMouseEnter, onPaneMouseMove: onPaneMouseMove, onPaneMouseLeave: onPaneMouseLeave, onPaneScroll: onPaneScroll, onPaneContextMenu: onPaneContextMenu, children: children, onEdgeUpdate: onEdgeUpdate, onEdgeContextMenu: onEdgeContextMenu, onEdgeDoubleClick: onEdgeDoubleClick, onEdgeMouseEnter: onEdgeMouseEnter, onEdgeMouseMove: onEdgeMouseMove, onEdgeMouseLeave: onEdgeMouseLeave, onEdgeUpdateStart: onEdgeUpdateStart, onEdgeUpdateEnd: onEdgeUpdateEnd, edgeUpdaterRadius: edgeUpdaterRadius = 10, onNodesChange: onNodesChange, onEdgesChange: onEdgesChange, noDragClassName: noDragClassName = "nodrag", noWheelClassName: noWheelClassName = "nowheel", noPanClassName: noPanClassName = "nopan", fitView: fitView = false, fitViewOptions: fitViewOptions, connectOnClick: connectOnClick = true, attributionPosition: attributionPosition, proOptions: proOptions, defaultEdgeOptions: defaultEdgeOptions, elevateNodesOnSelect: elevateNodesOnSelect = true, elevateEdgesOnSelect: elevateEdgesOnSelect = false, disableKeyboardA11y: disableKeyboardA11y = false, style: style, id: id, ...rest}, ref) => {
        const nodeTypesWrapped = useNodeOrEdgeTypes(nodeTypes, createNodeTypes);
        const edgeTypesWrapped = useNodeOrEdgeTypes(edgeTypes, createEdgeTypes);
        const rfId = id || "1";
        return jsxRuntimeExports.jsx("div", {
            ...rest,
            style: {
                ...style,
                ...wrapperStyle
            },
            ref: ref,
            className: cc([ "react-flow", className ]),
            "data-testid": "rf__wrapper",
            id: id,
            children: jsxRuntimeExports.jsxs(Wrapper, {
                children: [ jsxRuntimeExports.jsx(GraphView$1, {
                    onInit: onInit,
                    onMove: onMove,
                    onMoveStart: onMoveStart,
                    onMoveEnd: onMoveEnd,
                    onNodeClick: onNodeClick,
                    onEdgeClick: onEdgeClick,
                    onNodeMouseEnter: onNodeMouseEnter,
                    onNodeMouseMove: onNodeMouseMove,
                    onNodeMouseLeave: onNodeMouseLeave,
                    onNodeContextMenu: onNodeContextMenu,
                    onNodeDoubleClick: onNodeDoubleClick,
                    nodeTypes: nodeTypesWrapped,
                    edgeTypes: edgeTypesWrapped,
                    connectionLineType: connectionLineType,
                    connectionLineStyle: connectionLineStyle,
                    connectionLineComponent: connectionLineComponent,
                    connectionLineContainerStyle: connectionLineContainerStyle,
                    selectionKeyCode: selectionKeyCode,
                    selectionOnDrag: selectionOnDrag,
                    selectionMode: selectionMode,
                    deleteKeyCode: deleteKeyCode,
                    multiSelectionKeyCode: multiSelectionKeyCode,
                    panActivationKeyCode: panActivationKeyCode,
                    zoomActivationKeyCode: zoomActivationKeyCode,
                    onlyRenderVisibleElements: onlyRenderVisibleElements,
                    selectNodesOnDrag: selectNodesOnDrag,
                    defaultViewport: defaultViewport,
                    translateExtent: translateExtent,
                    minZoom: minZoom,
                    maxZoom: maxZoom,
                    preventScrolling: preventScrolling,
                    zoomOnScroll: zoomOnScroll,
                    zoomOnPinch: zoomOnPinch,
                    zoomOnDoubleClick: zoomOnDoubleClick,
                    panOnScroll: panOnScroll,
                    panOnScrollSpeed: panOnScrollSpeed,
                    panOnScrollMode: panOnScrollMode,
                    panOnDrag: panOnDrag,
                    onPaneClick: onPaneClick,
                    onPaneMouseEnter: onPaneMouseEnter,
                    onPaneMouseMove: onPaneMouseMove,
                    onPaneMouseLeave: onPaneMouseLeave,
                    onPaneScroll: onPaneScroll,
                    onPaneContextMenu: onPaneContextMenu,
                    onSelectionContextMenu: onSelectionContextMenu,
                    onSelectionStart: onSelectionStart,
                    onSelectionEnd: onSelectionEnd,
                    onEdgeUpdate: onEdgeUpdate,
                    onEdgeContextMenu: onEdgeContextMenu,
                    onEdgeDoubleClick: onEdgeDoubleClick,
                    onEdgeMouseEnter: onEdgeMouseEnter,
                    onEdgeMouseMove: onEdgeMouseMove,
                    onEdgeMouseLeave: onEdgeMouseLeave,
                    onEdgeUpdateStart: onEdgeUpdateStart,
                    onEdgeUpdateEnd: onEdgeUpdateEnd,
                    edgeUpdaterRadius: edgeUpdaterRadius,
                    defaultMarkerColor: defaultMarkerColor,
                    noDragClassName: noDragClassName,
                    noWheelClassName: noWheelClassName,
                    noPanClassName: noPanClassName,
                    elevateEdgesOnSelect: elevateEdgesOnSelect,
                    rfId: rfId,
                    disableKeyboardA11y: disableKeyboardA11y,
                    nodeOrigin: nodeOrigin,
                    nodeExtent: nodeExtent
                }), jsxRuntimeExports.jsx(StoreUpdater, {
                    nodes: nodes,
                    edges: edges,
                    defaultNodes: defaultNodes,
                    defaultEdges: defaultEdges,
                    onConnect: onConnect,
                    onConnectStart: onConnectStart,
                    onConnectEnd: onConnectEnd,
                    onClickConnectStart: onClickConnectStart,
                    onClickConnectEnd: onClickConnectEnd,
                    nodesDraggable: nodesDraggable,
                    nodesConnectable: nodesConnectable,
                    nodesFocusable: nodesFocusable,
                    edgesFocusable: edgesFocusable,
                    elementsSelectable: elementsSelectable,
                    elevateNodesOnSelect: elevateNodesOnSelect,
                    minZoom: minZoom,
                    maxZoom: maxZoom,
                    nodeExtent: nodeExtent,
                    onNodesChange: onNodesChange,
                    onEdgesChange: onEdgesChange,
                    snapToGrid: snapToGrid,
                    snapGrid: snapGrid,
                    connectionMode: connectionMode,
                    translateExtent: translateExtent,
                    connectOnClick: connectOnClick,
                    defaultEdgeOptions: defaultEdgeOptions,
                    fitView: fitView,
                    fitViewOptions: fitViewOptions,
                    onNodesDelete: onNodesDelete,
                    onEdgesDelete: onEdgesDelete,
                    onNodeDragStart: onNodeDragStart,
                    onNodeDrag: onNodeDrag,
                    onNodeDragStop: onNodeDragStop,
                    onSelectionDrag: onSelectionDrag,
                    onSelectionDragStart: onSelectionDragStart,
                    onSelectionDragStop: onSelectionDragStop,
                    noPanClassName: noPanClassName,
                    nodeOrigin: nodeOrigin,
                    rfId: rfId
                }), jsxRuntimeExports.jsx(Wrapper$1, {
                    onSelectionChange: onSelectionChange
                }), children, jsxRuntimeExports.jsx(Attribution, {
                    proOptions: proOptions,
                    position: attributionPosition
                }), jsxRuntimeExports.jsx(A11yDescriptions, {
                    rfId: rfId,
                    disableKeyboardA11y: disableKeyboardA11y
                }) ]
            })
        });
    }));
    ReactFlow.displayName = "ReactFlow";
    function PlusIcon() {
        return jsxRuntimeExports.jsx("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 32 32",
            children: jsxRuntimeExports.jsx("path", {
                d: "M32 18.133H18.133V32h-4.266V18.133H0v-4.266h13.867V0h4.266v13.867H32z"
            })
        });
    }
    function MinusIcon() {
        return jsxRuntimeExports.jsx("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 32 5",
            children: jsxRuntimeExports.jsx("path", {
                d: "M0 0h32v4.2H0z"
            })
        });
    }
    function FitViewIcon() {
        return jsxRuntimeExports.jsx("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 32 30",
            children: jsxRuntimeExports.jsx("path", {
                d: "M3.692 4.63c0-.53.4-.938.939-.938h5.215V0H4.708C2.13 0 0 2.054 0 4.63v5.216h3.692V4.631zM27.354 0h-5.2v3.692h5.17c.53 0 .984.4.984.939v5.215H32V4.631A4.624 4.624 0 0027.354 0zm.954 24.83c0 .532-.4.94-.939.94h-5.215v3.768h5.215c2.577 0 4.631-2.13 4.631-4.707v-5.139h-3.692v5.139zm-23.677.94c-.531 0-.939-.4-.939-.94v-5.138H0v5.139c0 2.577 2.13 4.707 4.708 4.707h5.138V25.77H4.631z"
            })
        });
    }
    function LockIcon() {
        return jsxRuntimeExports.jsx("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 25 32",
            children: jsxRuntimeExports.jsx("path", {
                d: "M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0 8 0 4.571 3.429 4.571 7.619v3.048H3.048A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047zm4.724-13.866H7.467V7.619c0-2.59 2.133-4.724 4.723-4.724 2.591 0 4.724 2.133 4.724 4.724v3.048z"
            })
        });
    }
    function UnlockIcon() {
        return jsxRuntimeExports.jsx("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 25 32",
            children: jsxRuntimeExports.jsx("path", {
                d: "M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0c-4.114 1.828-1.37 2.133.305 2.438 1.676.305 4.42 2.59 4.42 5.181v3.048H3.047A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047z"
            })
        });
    }
    const ControlButton = ({children: children, className: className, ...rest}) => jsxRuntimeExports.jsx("button", {
        type: "button",
        className: cc([ "react-flow__controls-button", className ]),
        ...rest,
        children: children
    });
    ControlButton.displayName = "ControlButton";
    const isInteractiveSelector = s => s.nodesDraggable && s.nodesConnectable && s.elementsSelectable;
    const Controls = ({style: style, showZoom: showZoom = true, showFitView: showFitView = true, showInteractive: showInteractive = true, fitViewOptions: fitViewOptions, onZoomIn: onZoomIn, onZoomOut: onZoomOut, onFitView: onFitView, onInteractiveChange: onInteractiveChange, className: className, children: children, position: position = "bottom-left"}) => {
        const store = useStoreApi();
        const [isVisible, setIsVisible] = reactExports.useState(false);
        const isInteractive = useStore(isInteractiveSelector);
        const {zoomIn: zoomIn, zoomOut: zoomOut, fitView: fitView} = useReactFlow();
        reactExports.useEffect((() => {
            setIsVisible(true);
        }), []);
        if (!isVisible) {
            return null;
        }
        const onZoomInHandler = () => {
            zoomIn();
            onZoomIn?.();
        };
        const onZoomOutHandler = () => {
            zoomOut();
            onZoomOut?.();
        };
        const onFitViewHandler = () => {
            fitView(fitViewOptions);
            onFitView?.();
        };
        const onToggleInteractivity = () => {
            store.setState({
                nodesDraggable: !isInteractive,
                nodesConnectable: !isInteractive,
                elementsSelectable: !isInteractive
            });
            onInteractiveChange?.(!isInteractive);
        };
        return jsxRuntimeExports.jsxs(Panel, {
            className: cc([ "react-flow__controls", className ]),
            position: position,
            style: style,
            children: [ showZoom && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [ jsxRuntimeExports.jsx(ControlButton, {
                    onClick: onZoomInHandler,
                    className: "react-flow__controls-zoomin",
                    title: "zoom in",
                    "aria-label": "zoom in",
                    children: jsxRuntimeExports.jsx(PlusIcon, {})
                }), jsxRuntimeExports.jsx(ControlButton, {
                    onClick: onZoomOutHandler,
                    className: "react-flow__controls-zoomout",
                    title: "zoom out",
                    "aria-label": "zoom out",
                    children: jsxRuntimeExports.jsx(MinusIcon, {})
                }) ]
            }), showFitView && jsxRuntimeExports.jsx(ControlButton, {
                className: "react-flow__controls-fitview",
                onClick: onFitViewHandler,
                title: "fit view",
                "aria-label": "fit view",
                children: jsxRuntimeExports.jsx(FitViewIcon, {})
            }), showInteractive && jsxRuntimeExports.jsx(ControlButton, {
                className: "react-flow__controls-interactive",
                onClick: onToggleInteractivity,
                title: "toggle interactivity",
                "aria-label": "toggle interactivity",
                children: isInteractive ? jsxRuntimeExports.jsx(UnlockIcon, {}) : jsxRuntimeExports.jsx(LockIcon, {})
            }), children ]
        });
    };
    Controls.displayName = "Controls";
    var Controls$1 = reactExports.memo(Controls);
    const getStatuses = (transitions = []) => {
        const statuses = [];
        transitions.forEach((trans => {
            const {from: from, pass: pass, fail: fail} = trans;
            [ from, pass === null || pass === void 0 ? void 0 : pass.status, fail === null || fail === void 0 ? void 0 : fail.status ].forEach((status => {
                if (!status || statuses.includes(status)) return;
                statuses.push(status);
            }));
        }));
        return statuses;
    };
    const getHighLight = (status, highLight, transitions) => {
        var _a;
        if (status === null) return highLight;
        const hight = [ ...highLight ];
        let currentTransition = (_a = transitions.filter((el => {
            var _a, _b;
            return ((_a = el.pass) === null || _a === void 0 ? void 0 : _a.status) === status || ((_b = el.fail) === null || _b === void 0 ? void 0 : _b.status) === status;
        }))) === null || _a === void 0 ? void 0 : _a[0];
        if (currentTransition) {
            hight.push(currentTransition.from);
            return getHighLight(currentTransition.from, hight, transitions);
        } else {
            return hight;
        }
    };
    const edgeStyleOpts = {
        markerEnd: {
            type: MarkerType.ArrowClosed
        },
        labelBgPadding: [ 7.5, 4 ],
        labelBgBorderRadius: 10,
        labelBgStyle: {
            fill: "#d9dae4",
            width: 18,
            height: 18
        }
    };
    const refineFlow = (transitions, activeStatus) => {
        const statusList = getStatuses(transitions);
        const pastStatus = activeStatus ? getHighLight(activeStatus, [], transitions) : [];
        const nodes = refineNodes(statusList, activeStatus, pastStatus);
        const edges = refineEdges(transitions);
        return {
            nodes: nodes,
            edges: edges
        };
    };
    const refineNodes = (statuses, activeStatus = "", pastStatus = []) => statuses.map((s => ({
        id: s,
        data: {
            label: s
        },
        position: {
            x: 0,
            y: 0
        },
        style: Object.assign(Object.assign(Object.assign({
            fontSize: 16
        }, pastStatus.includes(s) && {
            backgroundColor: "#8cc34a"
        }), activeStatus === s && {
            backgroundColor: "#fde047"
        }), s === "ALL" && {
            backgroundColor: "black",
            color: "white",
            borderRadius: "50%",
            width: 46,
            height: 46
        }),
        labelStyle: {
            fontWeight: 700
        }
    })));
    const refineEdges = transitions => transitions.reduce(((lines, current) => {
        if (current.from === null) return lines;
        const line = [ current.pass, current.fail ].filter((l => l));
        const newLines = line.map((l => Object.assign({
            id: `${current.from}-${l.status}`,
            source: current.from,
            target: l.status,
            type: "smoothstep"
        }, edgeStyleOpts)));
        return [ ...lines, ...newLines ];
    }), []);
    var propTypesExports = {};
    var propTypes = {
        get exports() {
            return propTypesExports;
        },
        set exports(v) {
            propTypesExports = v;
        }
    };
    var reactIsExports = {};
    var reactIs = {
        get exports() {
            return reactIsExports;
        },
        set exports(v) {
            reactIsExports = v;
        }
    };
    var reactIs_development = {};
    /** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */    var hasRequiredReactIs_development;
    function requireReactIs_development() {
        if (hasRequiredReactIs_development) return reactIs_development;
        hasRequiredReactIs_development = 1;
        {
            (function() {
                var hasSymbol = typeof Symbol === "function" && Symbol.for;
                var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
                var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
                var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
                var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
                var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
                var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
                var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
                var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
                var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
                var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
                var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
                var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
                var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
                var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
                var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
                var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
                var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
                var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
                function isValidElementType(type) {
                    return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
                }
                function typeOf(object) {
                    if (typeof object === "object" && object !== null) {
                        var $$typeof = object.$$typeof;
                        switch ($$typeof) {
                          case REACT_ELEMENT_TYPE:
                            var type = object.type;
                            switch (type) {
                              case REACT_ASYNC_MODE_TYPE:
                              case REACT_CONCURRENT_MODE_TYPE:
                              case REACT_FRAGMENT_TYPE:
                              case REACT_PROFILER_TYPE:
                              case REACT_STRICT_MODE_TYPE:
                              case REACT_SUSPENSE_TYPE:
                                return type;

                              default:
                                var $$typeofType = type && type.$$typeof;
                                switch ($$typeofType) {
                                  case REACT_CONTEXT_TYPE:
                                  case REACT_FORWARD_REF_TYPE:
                                  case REACT_LAZY_TYPE:
                                  case REACT_MEMO_TYPE:
                                  case REACT_PROVIDER_TYPE:
                                    return $$typeofType;

                                  default:
                                    return $$typeof;
                                }
                            }

                          case REACT_PORTAL_TYPE:
                            return $$typeof;
                        }
                    }
                    return undefined;
                }
                var AsyncMode = REACT_ASYNC_MODE_TYPE;
                var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
                var ContextConsumer = REACT_CONTEXT_TYPE;
                var ContextProvider = REACT_PROVIDER_TYPE;
                var Element = REACT_ELEMENT_TYPE;
                var ForwardRef = REACT_FORWARD_REF_TYPE;
                var Fragment = REACT_FRAGMENT_TYPE;
                var Lazy = REACT_LAZY_TYPE;
                var Memo = REACT_MEMO_TYPE;
                var Portal = REACT_PORTAL_TYPE;
                var Profiler = REACT_PROFILER_TYPE;
                var StrictMode = REACT_STRICT_MODE_TYPE;
                var Suspense = REACT_SUSPENSE_TYPE;
                var hasWarnedAboutDeprecatedIsAsyncMode = false;
                function isAsyncMode(object) {
                    {
                        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                            hasWarnedAboutDeprecatedIsAsyncMode = true;
                            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, " + "and will be removed in React 17+. Update your code to use " + "ReactIs.isConcurrentMode() instead. It has the exact same API.");
                        }
                    }
                    return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
                }
                function isConcurrentMode(object) {
                    return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
                }
                function isContextConsumer(object) {
                    return typeOf(object) === REACT_CONTEXT_TYPE;
                }
                function isContextProvider(object) {
                    return typeOf(object) === REACT_PROVIDER_TYPE;
                }
                function isElement(object) {
                    return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                }
                function isForwardRef(object) {
                    return typeOf(object) === REACT_FORWARD_REF_TYPE;
                }
                function isFragment(object) {
                    return typeOf(object) === REACT_FRAGMENT_TYPE;
                }
                function isLazy(object) {
                    return typeOf(object) === REACT_LAZY_TYPE;
                }
                function isMemo(object) {
                    return typeOf(object) === REACT_MEMO_TYPE;
                }
                function isPortal(object) {
                    return typeOf(object) === REACT_PORTAL_TYPE;
                }
                function isProfiler(object) {
                    return typeOf(object) === REACT_PROFILER_TYPE;
                }
                function isStrictMode(object) {
                    return typeOf(object) === REACT_STRICT_MODE_TYPE;
                }
                function isSuspense(object) {
                    return typeOf(object) === REACT_SUSPENSE_TYPE;
                }
                reactIs_development.AsyncMode = AsyncMode;
                reactIs_development.ConcurrentMode = ConcurrentMode;
                reactIs_development.ContextConsumer = ContextConsumer;
                reactIs_development.ContextProvider = ContextProvider;
                reactIs_development.Element = Element;
                reactIs_development.ForwardRef = ForwardRef;
                reactIs_development.Fragment = Fragment;
                reactIs_development.Lazy = Lazy;
                reactIs_development.Memo = Memo;
                reactIs_development.Portal = Portal;
                reactIs_development.Profiler = Profiler;
                reactIs_development.StrictMode = StrictMode;
                reactIs_development.Suspense = Suspense;
                reactIs_development.isAsyncMode = isAsyncMode;
                reactIs_development.isConcurrentMode = isConcurrentMode;
                reactIs_development.isContextConsumer = isContextConsumer;
                reactIs_development.isContextProvider = isContextProvider;
                reactIs_development.isElement = isElement;
                reactIs_development.isForwardRef = isForwardRef;
                reactIs_development.isFragment = isFragment;
                reactIs_development.isLazy = isLazy;
                reactIs_development.isMemo = isMemo;
                reactIs_development.isPortal = isPortal;
                reactIs_development.isProfiler = isProfiler;
                reactIs_development.isStrictMode = isStrictMode;
                reactIs_development.isSuspense = isSuspense;
                reactIs_development.isValidElementType = isValidElementType;
                reactIs_development.typeOf = typeOf;
            })();
        }
        return reactIs_development;
    }
    var hasRequiredReactIs;
    function requireReactIs() {
        if (hasRequiredReactIs) return reactIsExports;
        hasRequiredReactIs = 1;
        (function(module) {
            {
                module.exports = requireReactIs_development();
            }
        })(reactIs);
        return reactIsExports;
    }
    /*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/    var objectAssign;
    var hasRequiredObjectAssign;
    function requireObjectAssign() {
        if (hasRequiredObjectAssign) return objectAssign;
        hasRequiredObjectAssign = 1;
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;
        function toObject(val) {
            if (val === null || val === undefined) {
                throw new TypeError("Object.assign cannot be called with null or undefined");
            }
            return Object(val);
        }
        function shouldUseNative() {
            try {
                if (!Object.assign) {
                    return false;
                }
                var test1 = new String("abc");
                test1[5] = "de";
                if (Object.getOwnPropertyNames(test1)[0] === "5") {
                    return false;
                }
                var test2 = {};
                for (var i = 0; i < 10; i++) {
                    test2["_" + String.fromCharCode(i)] = i;
                }
                var order2 = Object.getOwnPropertyNames(test2).map((function(n) {
                    return test2[n];
                }));
                if (order2.join("") !== "0123456789") {
                    return false;
                }
                var test3 = {};
                "abcdefghijklmnopqrst".split("").forEach((function(letter) {
                    test3[letter] = letter;
                }));
                if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
                    return false;
                }
                return true;
            } catch (err) {
                return false;
            }
        }
        objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
            var from;
            var to = toObject(target);
            var symbols;
            for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);
                for (var key in from) {
                    if (hasOwnProperty.call(from, key)) {
                        to[key] = from[key];
                    }
                }
                if (getOwnPropertySymbols) {
                    symbols = getOwnPropertySymbols(from);
                    for (var i = 0; i < symbols.length; i++) {
                        if (propIsEnumerable.call(from, symbols[i])) {
                            to[symbols[i]] = from[symbols[i]];
                        }
                    }
                }
            }
            return to;
        };
        return objectAssign;
    }
    var ReactPropTypesSecret_1;
    var hasRequiredReactPropTypesSecret;
    function requireReactPropTypesSecret() {
        if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
        hasRequiredReactPropTypesSecret = 1;
        var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
        ReactPropTypesSecret_1 = ReactPropTypesSecret;
        return ReactPropTypesSecret_1;
    }
    var has;
    var hasRequiredHas$1;
    function requireHas$1() {
        if (hasRequiredHas$1) return has;
        hasRequiredHas$1 = 1;
        has = Function.call.bind(Object.prototype.hasOwnProperty);
        return has;
    }
    var checkPropTypes_1;
    var hasRequiredCheckPropTypes;
    function requireCheckPropTypes() {
        if (hasRequiredCheckPropTypes) return checkPropTypes_1;
        hasRequiredCheckPropTypes = 1;
        var printWarning = function() {};
        {
            var ReactPropTypesSecret = requireReactPropTypesSecret();
            var loggedTypeFailures = {};
            var has = requireHas$1();
            printWarning = function(text) {
                var message = "Warning: " + text;
                if (typeof console !== "undefined") {
                    console.error(message);
                }
                try {
                    throw new Error(message);
                } catch (x) {}
            };
        }
        function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
            {
                for (var typeSpecName in typeSpecs) {
                    if (has(typeSpecs, typeSpecName)) {
                        var error;
                        try {
                            if (typeof typeSpecs[typeSpecName] !== "function") {
                                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                                err.name = "Invariant Violation";
                                throw err;
                            }
                            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                        } catch (ex) {
                            error = ex;
                        }
                        if (error && !(error instanceof Error)) {
                            printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker " + "function must return `null` or an `Error` but returned a " + typeof error + ". " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).");
                        }
                        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                            loggedTypeFailures[error.message] = true;
                            var stack = getStack ? getStack() : "";
                            printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
                        }
                    }
                }
            }
        }
        checkPropTypes.resetWarningCache = function() {
            {
                loggedTypeFailures = {};
            }
        };
        checkPropTypes_1 = checkPropTypes;
        return checkPropTypes_1;
    }
    var factoryWithTypeCheckers;
    var hasRequiredFactoryWithTypeCheckers;
    function requireFactoryWithTypeCheckers() {
        if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
        hasRequiredFactoryWithTypeCheckers = 1;
        var ReactIs = requireReactIs();
        var assign = requireObjectAssign();
        var ReactPropTypesSecret = requireReactPropTypesSecret();
        var has = requireHas$1();
        var checkPropTypes = requireCheckPropTypes();
        var printWarning = function() {};
        {
            printWarning = function(text) {
                var message = "Warning: " + text;
                if (typeof console !== "undefined") {
                    console.error(message);
                }
                try {
                    throw new Error(message);
                } catch (x) {}
            };
        }
        function emptyFunctionThatReturnsNull() {
            return null;
        }
        factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
            var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = "@@iterator";
            function getIteratorFn(maybeIterable) {
                var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
                if (typeof iteratorFn === "function") {
                    return iteratorFn;
                }
            }
            var ANONYMOUS = "<<anonymous>>";
            var ReactPropTypes = {
                array: createPrimitiveTypeChecker("array"),
                bigint: createPrimitiveTypeChecker("bigint"),
                bool: createPrimitiveTypeChecker("boolean"),
                func: createPrimitiveTypeChecker("function"),
                number: createPrimitiveTypeChecker("number"),
                object: createPrimitiveTypeChecker("object"),
                string: createPrimitiveTypeChecker("string"),
                symbol: createPrimitiveTypeChecker("symbol"),
                any: createAnyTypeChecker(),
                arrayOf: createArrayOfTypeChecker,
                element: createElementTypeChecker(),
                elementType: createElementTypeTypeChecker(),
                instanceOf: createInstanceTypeChecker,
                node: createNodeChecker(),
                objectOf: createObjectOfTypeChecker,
                oneOf: createEnumTypeChecker,
                oneOfType: createUnionTypeChecker,
                shape: createShapeTypeChecker,
                exact: createStrictShapeTypeChecker
            };
            function is(x, y) {
                if (x === y) {
                    return x !== 0 || 1 / x === 1 / y;
                } else {
                    return x !== x && y !== y;
                }
            }
            function PropTypeError(message, data) {
                this.message = message;
                this.data = data && typeof data === "object" ? data : {};
                this.stack = "";
            }
            PropTypeError.prototype = Error.prototype;
            function createChainableTypeChecker(validate) {
                {
                    var manualPropTypeCallCache = {};
                    var manualPropTypeWarningCount = 0;
                }
                function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                    componentName = componentName || ANONYMOUS;
                    propFullName = propFullName || propName;
                    if (secret !== ReactPropTypesSecret) {
                        if (throwOnDirectAccess) {
                            var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. " + "Use `PropTypes.checkPropTypes()` to call them. " + "Read more at http://fb.me/use-check-prop-types");
                            err.name = "Invariant Violation";
                            throw err;
                        } else if (typeof console !== "undefined") {
                            var cacheKey = componentName + ":" + propName;
                            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                                printWarning("You are manually calling a React.PropTypes validation " + "function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated " + "and will throw in the standalone `prop-types` package. " + "You may be seeing this warning due to a third-party PropTypes " + "library. See https://fb.me/react-warning-dont-call-proptypes " + "for details.");
                                manualPropTypeCallCache[cacheKey] = true;
                                manualPropTypeWarningCount++;
                            }
                        }
                    }
                    if (props[propName] == null) {
                        if (isRequired) {
                            if (props[propName] === null) {
                                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                            }
                            return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
                        }
                        return null;
                    } else {
                        return validate(props, propName, componentName, location, propFullName);
                    }
                }
                var chainedCheckType = checkType.bind(null, false);
                chainedCheckType.isRequired = checkType.bind(null, true);
                return chainedCheckType;
            }
            function createPrimitiveTypeChecker(expectedType) {
                function validate(props, propName, componentName, location, propFullName, secret) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== expectedType) {
                        var preciseType = getPreciseType(propValue);
                        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), {
                            expectedType: expectedType
                        });
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createAnyTypeChecker() {
                return createChainableTypeChecker(emptyFunctionThatReturnsNull);
            }
            function createArrayOfTypeChecker(typeChecker) {
                function validate(props, propName, componentName, location, propFullName) {
                    if (typeof typeChecker !== "function") {
                        return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
                    }
                    var propValue = props[propName];
                    if (!Array.isArray(propValue)) {
                        var propType = getPropType(propValue);
                        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
                    }
                    for (var i = 0; i < propValue.length; i++) {
                        var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
                        if (error instanceof Error) {
                            return error;
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createElementTypeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    if (!isValidElement(propValue)) {
                        var propType = getPropType(propValue);
                        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createElementTypeTypeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    if (!ReactIs.isValidElementType(propValue)) {
                        var propType = getPropType(propValue);
                        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createInstanceTypeChecker(expectedClass) {
                function validate(props, propName, componentName, location, propFullName) {
                    if (!(props[propName] instanceof expectedClass)) {
                        var expectedClassName = expectedClass.name || ANONYMOUS;
                        var actualClassName = getClassName(props[propName]);
                        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createEnumTypeChecker(expectedValues) {
                if (!Array.isArray(expectedValues)) {
                    {
                        if (arguments.length > 1) {
                            printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. " + "A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
                        } else {
                            printWarning("Invalid argument supplied to oneOf, expected an array.");
                        }
                    }
                    return emptyFunctionThatReturnsNull;
                }
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    for (var i = 0; i < expectedValues.length; i++) {
                        if (is(propValue, expectedValues[i])) {
                            return null;
                        }
                    }
                    var valuesString = JSON.stringify(expectedValues, (function replacer(key, value) {
                        var type = getPreciseType(value);
                        if (type === "symbol") {
                            return String(value);
                        }
                        return value;
                    }));
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
                }
                return createChainableTypeChecker(validate);
            }
            function createObjectOfTypeChecker(typeChecker) {
                function validate(props, propName, componentName, location, propFullName) {
                    if (typeof typeChecker !== "function") {
                        return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
                    }
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== "object") {
                        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
                    }
                    for (var key in propValue) {
                        if (has(propValue, key)) {
                            var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                            if (error instanceof Error) {
                                return error;
                            }
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createUnionTypeChecker(arrayOfTypeCheckers) {
                if (!Array.isArray(arrayOfTypeCheckers)) {
                    printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
                    return emptyFunctionThatReturnsNull;
                }
                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                    var checker = arrayOfTypeCheckers[i];
                    if (typeof checker !== "function") {
                        printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but " + "received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
                        return emptyFunctionThatReturnsNull;
                    }
                }
                function validate(props, propName, componentName, location, propFullName) {
                    var expectedTypes = [];
                    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                        var checker = arrayOfTypeCheckers[i];
                        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
                        if (checkerResult == null) {
                            return null;
                        }
                        if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                            expectedTypes.push(checkerResult.data.expectedType);
                        }
                    }
                    var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
                }
                return createChainableTypeChecker(validate);
            }
            function createNodeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                    if (!isNode(props[propName])) {
                        return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function invalidValidatorError(componentName, location, propFullName, key, type) {
                return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
            }
            function createShapeTypeChecker(shapeTypes) {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== "object") {
                        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
                    }
                    for (var key in shapeTypes) {
                        var checker = shapeTypes[key];
                        if (typeof checker !== "function") {
                            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                        }
                        var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                        if (error) {
                            return error;
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createStrictShapeTypeChecker(shapeTypes) {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== "object") {
                        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
                    }
                    var allKeys = assign({}, props[propName], shapeTypes);
                    for (var key in allKeys) {
                        var checker = shapeTypes[key];
                        if (has(shapeTypes, key) && typeof checker !== "function") {
                            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                        }
                        if (!checker) {
                            return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`." + "\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
                        }
                        var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                        if (error) {
                            return error;
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function isNode(propValue) {
                switch (typeof propValue) {
                  case "number":
                  case "string":
                  case "undefined":
                    return true;

                  case "boolean":
                    return !propValue;

                  case "object":
                    if (Array.isArray(propValue)) {
                        return propValue.every(isNode);
                    }
                    if (propValue === null || isValidElement(propValue)) {
                        return true;
                    }
                    var iteratorFn = getIteratorFn(propValue);
                    if (iteratorFn) {
                        var iterator = iteratorFn.call(propValue);
                        var step;
                        if (iteratorFn !== propValue.entries) {
                            while (!(step = iterator.next()).done) {
                                if (!isNode(step.value)) {
                                    return false;
                                }
                            }
                        } else {
                            while (!(step = iterator.next()).done) {
                                var entry = step.value;
                                if (entry) {
                                    if (!isNode(entry[1])) {
                                        return false;
                                    }
                                }
                            }
                        }
                    } else {
                        return false;
                    }
                    return true;

                  default:
                    return false;
                }
            }
            function isSymbol(propType, propValue) {
                if (propType === "symbol") {
                    return true;
                }
                if (!propValue) {
                    return false;
                }
                if (propValue["@@toStringTag"] === "Symbol") {
                    return true;
                }
                if (typeof Symbol === "function" && propValue instanceof Symbol) {
                    return true;
                }
                return false;
            }
            function getPropType(propValue) {
                var propType = typeof propValue;
                if (Array.isArray(propValue)) {
                    return "array";
                }
                if (propValue instanceof RegExp) {
                    return "object";
                }
                if (isSymbol(propType, propValue)) {
                    return "symbol";
                }
                return propType;
            }
            function getPreciseType(propValue) {
                if (typeof propValue === "undefined" || propValue === null) {
                    return "" + propValue;
                }
                var propType = getPropType(propValue);
                if (propType === "object") {
                    if (propValue instanceof Date) {
                        return "date";
                    } else if (propValue instanceof RegExp) {
                        return "regexp";
                    }
                }
                return propType;
            }
            function getPostfixForTypeWarning(value) {
                var type = getPreciseType(value);
                switch (type) {
                  case "array":
                  case "object":
                    return "an " + type;

                  case "boolean":
                  case "date":
                  case "regexp":
                    return "a " + type;

                  default:
                    return type;
                }
            }
            function getClassName(propValue) {
                if (!propValue.constructor || !propValue.constructor.name) {
                    return ANONYMOUS;
                }
                return propValue.constructor.name;
            }
            ReactPropTypes.checkPropTypes = checkPropTypes;
            ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
            ReactPropTypes.PropTypes = ReactPropTypes;
            return ReactPropTypes;
        };
        return factoryWithTypeCheckers;
    }
    {
        var ReactIs = requireReactIs();
        var throwOnDirectAccess = true;
        propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    }
    var _listCacheClear;
    var hasRequired_listCacheClear;
    function require_listCacheClear() {
        if (hasRequired_listCacheClear) return _listCacheClear;
        hasRequired_listCacheClear = 1;
        function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }
        _listCacheClear = listCacheClear;
        return _listCacheClear;
    }
    var eq_1;
    var hasRequiredEq;
    function requireEq() {
        if (hasRequiredEq) return eq_1;
        hasRequiredEq = 1;
        function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        eq_1 = eq;
        return eq_1;
    }
    var _assocIndexOf;
    var hasRequired_assocIndexOf;
    function require_assocIndexOf() {
        if (hasRequired_assocIndexOf) return _assocIndexOf;
        hasRequired_assocIndexOf = 1;
        var eq = requireEq();
        function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
                if (eq(array[length][0], key)) {
                    return length;
                }
            }
            return -1;
        }
        _assocIndexOf = assocIndexOf;
        return _assocIndexOf;
    }
    var _listCacheDelete;
    var hasRequired_listCacheDelete;
    function require_listCacheDelete() {
        if (hasRequired_listCacheDelete) return _listCacheDelete;
        hasRequired_listCacheDelete = 1;
        var assocIndexOf = require_assocIndexOf();
        var arrayProto = Array.prototype;
        var splice = arrayProto.splice;
        function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
                data.pop();
            } else {
                splice.call(data, index, 1);
            }
            --this.size;
            return true;
        }
        _listCacheDelete = listCacheDelete;
        return _listCacheDelete;
    }
    var _listCacheGet;
    var hasRequired_listCacheGet;
    function require_listCacheGet() {
        if (hasRequired_listCacheGet) return _listCacheGet;
        hasRequired_listCacheGet = 1;
        var assocIndexOf = require_assocIndexOf();
        function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        }
        _listCacheGet = listCacheGet;
        return _listCacheGet;
    }
    var _listCacheHas;
    var hasRequired_listCacheHas;
    function require_listCacheHas() {
        if (hasRequired_listCacheHas) return _listCacheHas;
        hasRequired_listCacheHas = 1;
        var assocIndexOf = require_assocIndexOf();
        function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }
        _listCacheHas = listCacheHas;
        return _listCacheHas;
    }
    var _listCacheSet;
    var hasRequired_listCacheSet;
    function require_listCacheSet() {
        if (hasRequired_listCacheSet) return _listCacheSet;
        hasRequired_listCacheSet = 1;
        var assocIndexOf = require_assocIndexOf();
        function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([ key, value ]);
            } else {
                data[index][1] = value;
            }
            return this;
        }
        _listCacheSet = listCacheSet;
        return _listCacheSet;
    }
    var _ListCache;
    var hasRequired_ListCache;
    function require_ListCache() {
        if (hasRequired_ListCache) return _ListCache;
        hasRequired_ListCache = 1;
        var listCacheClear = require_listCacheClear(), listCacheDelete = require_listCacheDelete(), listCacheGet = require_listCacheGet(), listCacheHas = require_listCacheHas(), listCacheSet = require_listCacheSet();
        function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        _ListCache = ListCache;
        return _ListCache;
    }
    var _stackClear;
    var hasRequired_stackClear;
    function require_stackClear() {
        if (hasRequired_stackClear) return _stackClear;
        hasRequired_stackClear = 1;
        var ListCache = require_ListCache();
        function stackClear() {
            this.__data__ = new ListCache;
            this.size = 0;
        }
        _stackClear = stackClear;
        return _stackClear;
    }
    var _stackDelete;
    var hasRequired_stackDelete;
    function require_stackDelete() {
        if (hasRequired_stackDelete) return _stackDelete;
        hasRequired_stackDelete = 1;
        function stackDelete(key) {
            var data = this.__data__, result = data["delete"](key);
            this.size = data.size;
            return result;
        }
        _stackDelete = stackDelete;
        return _stackDelete;
    }
    var _stackGet;
    var hasRequired_stackGet;
    function require_stackGet() {
        if (hasRequired_stackGet) return _stackGet;
        hasRequired_stackGet = 1;
        function stackGet(key) {
            return this.__data__.get(key);
        }
        _stackGet = stackGet;
        return _stackGet;
    }
    var _stackHas;
    var hasRequired_stackHas;
    function require_stackHas() {
        if (hasRequired_stackHas) return _stackHas;
        hasRequired_stackHas = 1;
        function stackHas(key) {
            return this.__data__.has(key);
        }
        _stackHas = stackHas;
        return _stackHas;
    }
    var _freeGlobal;
    var hasRequired_freeGlobal;
    function require_freeGlobal() {
        if (hasRequired_freeGlobal) return _freeGlobal;
        hasRequired_freeGlobal = 1;
        var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
        _freeGlobal = freeGlobal;
        return _freeGlobal;
    }
    var _root;
    var hasRequired_root;
    function require_root() {
        if (hasRequired_root) return _root;
        hasRequired_root = 1;
        var freeGlobal = require_freeGlobal();
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        _root = root;
        return _root;
    }
    var _Symbol;
    var hasRequired_Symbol;
    function require_Symbol() {
        if (hasRequired_Symbol) return _Symbol;
        hasRequired_Symbol = 1;
        var root = require_root();
        var Symbol = root.Symbol;
        _Symbol = Symbol;
        return _Symbol;
    }
    var _getRawTag;
    var hasRequired_getRawTag;
    function require_getRawTag() {
        if (hasRequired_getRawTag) return _getRawTag;
        hasRequired_getRawTag = 1;
        var Symbol = require_Symbol();
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var nativeObjectToString = objectProto.toString;
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {}
            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) {
                    value[symToStringTag] = tag;
                } else {
                    delete value[symToStringTag];
                }
            }
            return result;
        }
        _getRawTag = getRawTag;
        return _getRawTag;
    }
    var _objectToString;
    var hasRequired_objectToString;
    function require_objectToString() {
        if (hasRequired_objectToString) return _objectToString;
        hasRequired_objectToString = 1;
        var objectProto = Object.prototype;
        var nativeObjectToString = objectProto.toString;
        function objectToString(value) {
            return nativeObjectToString.call(value);
        }
        _objectToString = objectToString;
        return _objectToString;
    }
    var _baseGetTag;
    var hasRequired_baseGetTag;
    function require_baseGetTag() {
        if (hasRequired_baseGetTag) return _baseGetTag;
        hasRequired_baseGetTag = 1;
        var Symbol = require_Symbol(), getRawTag = require_getRawTag(), objectToString = require_objectToString();
        var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        function baseGetTag(value) {
            if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        _baseGetTag = baseGetTag;
        return _baseGetTag;
    }
    var isObject_1;
    var hasRequiredIsObject;
    function requireIsObject() {
        if (hasRequiredIsObject) return isObject_1;
        hasRequiredIsObject = 1;
        function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
        }
        isObject_1 = isObject;
        return isObject_1;
    }
    var isFunction_1;
    var hasRequiredIsFunction;
    function requireIsFunction() {
        if (hasRequiredIsFunction) return isFunction_1;
        hasRequiredIsFunction = 1;
        var baseGetTag = require_baseGetTag(), isObject = requireIsObject();
        var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
        function isFunction(value) {
            if (!isObject(value)) {
                return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        isFunction_1 = isFunction;
        return isFunction_1;
    }
    var _coreJsData;
    var hasRequired_coreJsData;
    function require_coreJsData() {
        if (hasRequired_coreJsData) return _coreJsData;
        hasRequired_coreJsData = 1;
        var root = require_root();
        var coreJsData = root["__core-js_shared__"];
        _coreJsData = coreJsData;
        return _coreJsData;
    }
    var _isMasked;
    var hasRequired_isMasked;
    function require_isMasked() {
        if (hasRequired_isMasked) return _isMasked;
        hasRequired_isMasked = 1;
        var coreJsData = require_coreJsData();
        var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
        }();
        function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }
        _isMasked = isMasked;
        return _isMasked;
    }
    var _toSource;
    var hasRequired_toSource;
    function require_toSource() {
        if (hasRequired_toSource) return _toSource;
        hasRequired_toSource = 1;
        var funcProto = Function.prototype;
        var funcToString = funcProto.toString;
        function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {}
                try {
                    return func + "";
                } catch (e) {}
            }
            return "";
        }
        _toSource = toSource;
        return _toSource;
    }
    var _baseIsNative;
    var hasRequired_baseIsNative;
    function require_baseIsNative() {
        if (hasRequired_baseIsNative) return _baseIsNative;
        hasRequired_baseIsNative = 1;
        var isFunction = requireIsFunction(), isMasked = require_isMasked(), isObject = requireIsObject(), toSource = require_toSource();
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var funcProto = Function.prototype, objectProto = Object.prototype;
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
                return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        _baseIsNative = baseIsNative;
        return _baseIsNative;
    }
    var _getValue;
    var hasRequired_getValue;
    function require_getValue() {
        if (hasRequired_getValue) return _getValue;
        hasRequired_getValue = 1;
        function getValue(object, key) {
            return object == null ? undefined : object[key];
        }
        _getValue = getValue;
        return _getValue;
    }
    var _getNative;
    var hasRequired_getNative;
    function require_getNative() {
        if (hasRequired_getNative) return _getNative;
        hasRequired_getNative = 1;
        var baseIsNative = require_baseIsNative(), getValue = require_getValue();
        function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        _getNative = getNative;
        return _getNative;
    }
    var _Map;
    var hasRequired_Map;
    function require_Map() {
        if (hasRequired_Map) return _Map;
        hasRequired_Map = 1;
        var getNative = require_getNative(), root = require_root();
        var Map = getNative(root, "Map");
        _Map = Map;
        return _Map;
    }
    var _nativeCreate;
    var hasRequired_nativeCreate;
    function require_nativeCreate() {
        if (hasRequired_nativeCreate) return _nativeCreate;
        hasRequired_nativeCreate = 1;
        var getNative = require_getNative();
        var nativeCreate = getNative(Object, "create");
        _nativeCreate = nativeCreate;
        return _nativeCreate;
    }
    var _hashClear;
    var hasRequired_hashClear;
    function require_hashClear() {
        if (hasRequired_hashClear) return _hashClear;
        hasRequired_hashClear = 1;
        var nativeCreate = require_nativeCreate();
        function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        }
        _hashClear = hashClear;
        return _hashClear;
    }
    var _hashDelete;
    var hasRequired_hashDelete;
    function require_hashDelete() {
        if (hasRequired_hashDelete) return _hashDelete;
        hasRequired_hashDelete = 1;
        function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }
        _hashDelete = hashDelete;
        return _hashDelete;
    }
    var _hashGet;
    var hasRequired_hashGet;
    function require_hashGet() {
        if (hasRequired_hashGet) return _hashGet;
        hasRequired_hashGet = 1;
        var nativeCreate = require_nativeCreate();
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        _hashGet = hashGet;
        return _hashGet;
    }
    var _hashHas;
    var hasRequired_hashHas;
    function require_hashHas() {
        if (hasRequired_hashHas) return _hashHas;
        hasRequired_hashHas = 1;
        var nativeCreate = require_nativeCreate();
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        _hashHas = hashHas;
        return _hashHas;
    }
    var _hashSet;
    var hasRequired_hashSet;
    function require_hashSet() {
        if (hasRequired_hashSet) return _hashSet;
        hasRequired_hashSet = 1;
        var nativeCreate = require_nativeCreate();
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }
        _hashSet = hashSet;
        return _hashSet;
    }
    var _Hash;
    var hasRequired_Hash;
    function require_Hash() {
        if (hasRequired_Hash) return _Hash;
        hasRequired_Hash = 1;
        var hashClear = require_hashClear(), hashDelete = require_hashDelete(), hashGet = require_hashGet(), hashHas = require_hashHas(), hashSet = require_hashSet();
        function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        _Hash = Hash;
        return _Hash;
    }
    var _mapCacheClear;
    var hasRequired_mapCacheClear;
    function require_mapCacheClear() {
        if (hasRequired_mapCacheClear) return _mapCacheClear;
        hasRequired_mapCacheClear = 1;
        var Hash = require_Hash(), ListCache = require_ListCache(), Map = require_Map();
        function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                hash: new Hash,
                map: new (Map || ListCache),
                string: new Hash
            };
        }
        _mapCacheClear = mapCacheClear;
        return _mapCacheClear;
    }
    var _isKeyable;
    var hasRequired_isKeyable;
    function require_isKeyable() {
        if (hasRequired_isKeyable) return _isKeyable;
        hasRequired_isKeyable = 1;
        function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        _isKeyable = isKeyable;
        return _isKeyable;
    }
    var _getMapData;
    var hasRequired_getMapData;
    function require_getMapData() {
        if (hasRequired_getMapData) return _getMapData;
        hasRequired_getMapData = 1;
        var isKeyable = require_isKeyable();
        function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        _getMapData = getMapData;
        return _getMapData;
    }
    var _mapCacheDelete;
    var hasRequired_mapCacheDelete;
    function require_mapCacheDelete() {
        if (hasRequired_mapCacheDelete) return _mapCacheDelete;
        hasRequired_mapCacheDelete = 1;
        var getMapData = require_getMapData();
        function mapCacheDelete(key) {
            var result = getMapData(this, key)["delete"](key);
            this.size -= result ? 1 : 0;
            return result;
        }
        _mapCacheDelete = mapCacheDelete;
        return _mapCacheDelete;
    }
    var _mapCacheGet;
    var hasRequired_mapCacheGet;
    function require_mapCacheGet() {
        if (hasRequired_mapCacheGet) return _mapCacheGet;
        hasRequired_mapCacheGet = 1;
        var getMapData = require_getMapData();
        function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }
        _mapCacheGet = mapCacheGet;
        return _mapCacheGet;
    }
    var _mapCacheHas;
    var hasRequired_mapCacheHas;
    function require_mapCacheHas() {
        if (hasRequired_mapCacheHas) return _mapCacheHas;
        hasRequired_mapCacheHas = 1;
        var getMapData = require_getMapData();
        function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }
        _mapCacheHas = mapCacheHas;
        return _mapCacheHas;
    }
    var _mapCacheSet;
    var hasRequired_mapCacheSet;
    function require_mapCacheSet() {
        if (hasRequired_mapCacheSet) return _mapCacheSet;
        hasRequired_mapCacheSet = 1;
        var getMapData = require_getMapData();
        function mapCacheSet(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }
        _mapCacheSet = mapCacheSet;
        return _mapCacheSet;
    }
    var _MapCache;
    var hasRequired_MapCache;
    function require_MapCache() {
        if (hasRequired_MapCache) return _MapCache;
        hasRequired_MapCache = 1;
        var mapCacheClear = require_mapCacheClear(), mapCacheDelete = require_mapCacheDelete(), mapCacheGet = require_mapCacheGet(), mapCacheHas = require_mapCacheHas(), mapCacheSet = require_mapCacheSet();
        function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        _MapCache = MapCache;
        return _MapCache;
    }
    var _stackSet;
    var hasRequired_stackSet;
    function require_stackSet() {
        if (hasRequired_stackSet) return _stackSet;
        hasRequired_stackSet = 1;
        var ListCache = require_ListCache(), Map = require_Map(), MapCache = require_MapCache();
        var LARGE_ARRAY_SIZE = 200;
        function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                    pairs.push([ key, value ]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }
        _stackSet = stackSet;
        return _stackSet;
    }
    var _Stack;
    var hasRequired_Stack;
    function require_Stack() {
        if (hasRequired_Stack) return _Stack;
        hasRequired_Stack = 1;
        var ListCache = require_ListCache(), stackClear = require_stackClear(), stackDelete = require_stackDelete(), stackGet = require_stackGet(), stackHas = require_stackHas(), stackSet = require_stackSet();
        function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        _Stack = Stack;
        return _Stack;
    }
    var _arrayEach;
    var hasRequired_arrayEach;
    function require_arrayEach() {
        if (hasRequired_arrayEach) return _arrayEach;
        hasRequired_arrayEach = 1;
        function arrayEach(array, iteratee) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
                if (iteratee(array[index], index, array) === false) {
                    break;
                }
            }
            return array;
        }
        _arrayEach = arrayEach;
        return _arrayEach;
    }
    var _defineProperty;
    var hasRequired_defineProperty;
    function require_defineProperty() {
        if (hasRequired_defineProperty) return _defineProperty;
        hasRequired_defineProperty = 1;
        var getNative = require_getNative();
        var defineProperty = function() {
            try {
                var func = getNative(Object, "defineProperty");
                func({}, "", {});
                return func;
            } catch (e) {}
        }();
        _defineProperty = defineProperty;
        return _defineProperty;
    }
    var _baseAssignValue;
    var hasRequired_baseAssignValue;
    function require_baseAssignValue() {
        if (hasRequired_baseAssignValue) return _baseAssignValue;
        hasRequired_baseAssignValue = 1;
        var defineProperty = require_defineProperty();
        function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
                defineProperty(object, key, {
                    configurable: true,
                    enumerable: true,
                    value: value,
                    writable: true
                });
            } else {
                object[key] = value;
            }
        }
        _baseAssignValue = baseAssignValue;
        return _baseAssignValue;
    }
    var _assignValue;
    var hasRequired_assignValue;
    function require_assignValue() {
        if (hasRequired_assignValue) return _assignValue;
        hasRequired_assignValue = 1;
        var baseAssignValue = require_baseAssignValue(), eq = requireEq();
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
                baseAssignValue(object, key, value);
            }
        }
        _assignValue = assignValue;
        return _assignValue;
    }
    var _copyObject;
    var hasRequired_copyObject;
    function require_copyObject() {
        if (hasRequired_copyObject) return _copyObject;
        hasRequired_copyObject = 1;
        var assignValue = require_assignValue(), baseAssignValue = require_baseAssignValue();
        function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                if (newValue === undefined) {
                    newValue = source[key];
                }
                if (isNew) {
                    baseAssignValue(object, key, newValue);
                } else {
                    assignValue(object, key, newValue);
                }
            }
            return object;
        }
        _copyObject = copyObject;
        return _copyObject;
    }
    var _baseTimes;
    var hasRequired_baseTimes;
    function require_baseTimes() {
        if (hasRequired_baseTimes) return _baseTimes;
        hasRequired_baseTimes = 1;
        function baseTimes(n, iteratee) {
            var index = -1, result = Array(n);
            while (++index < n) {
                result[index] = iteratee(index);
            }
            return result;
        }
        _baseTimes = baseTimes;
        return _baseTimes;
    }
    var isObjectLike_1;
    var hasRequiredIsObjectLike;
    function requireIsObjectLike() {
        if (hasRequiredIsObjectLike) return isObjectLike_1;
        hasRequiredIsObjectLike = 1;
        function isObjectLike(value) {
            return value != null && typeof value == "object";
        }
        isObjectLike_1 = isObjectLike;
        return isObjectLike_1;
    }
    var _baseIsArguments;
    var hasRequired_baseIsArguments;
    function require_baseIsArguments() {
        if (hasRequired_baseIsArguments) return _baseIsArguments;
        hasRequired_baseIsArguments = 1;
        var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
        var argsTag = "[object Arguments]";
        function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        _baseIsArguments = baseIsArguments;
        return _baseIsArguments;
    }
    var isArguments_1;
    var hasRequiredIsArguments;
    function requireIsArguments() {
        if (hasRequiredIsArguments) return isArguments_1;
        hasRequiredIsArguments = 1;
        var baseIsArguments = require_baseIsArguments(), isObjectLike = requireIsObjectLike();
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;
        var isArguments = baseIsArguments(function() {
            return arguments;
        }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        isArguments_1 = isArguments;
        return isArguments_1;
    }
    var isArray_1;
    var hasRequiredIsArray;
    function requireIsArray() {
        if (hasRequiredIsArray) return isArray_1;
        hasRequiredIsArray = 1;
        var isArray = Array.isArray;
        isArray_1 = isArray;
        return isArray_1;
    }
    var isBufferExports = {};
    var isBuffer = {
        get exports() {
            return isBufferExports;
        },
        set exports(v) {
            isBufferExports = v;
        }
    };
    var stubFalse_1;
    var hasRequiredStubFalse;
    function requireStubFalse() {
        if (hasRequiredStubFalse) return stubFalse_1;
        hasRequiredStubFalse = 1;
        function stubFalse() {
            return false;
        }
        stubFalse_1 = stubFalse;
        return stubFalse_1;
    }
    var hasRequiredIsBuffer;
    function requireIsBuffer() {
        if (hasRequiredIsBuffer) return isBufferExports;
        hasRequiredIsBuffer = 1;
        (function(module, exports) {
            var root = require_root(), stubFalse = requireStubFalse();
            var freeExports = exports && !exports.nodeType && exports;
            var freeModule = freeExports && "object" == "object" && module && !module.nodeType && module;
            var moduleExports = freeModule && freeModule.exports === freeExports;
            var Buffer = moduleExports ? root.Buffer : undefined;
            var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
            var isBuffer = nativeIsBuffer || stubFalse;
            module.exports = isBuffer;
        })(isBuffer, isBufferExports);
        return isBufferExports;
    }
    var _isIndex;
    var hasRequired_isIndex;
    function require_isIndex() {
        if (hasRequired_isIndex) return _isIndex;
        hasRequired_isIndex = 1;
        var MAX_SAFE_INTEGER = 9007199254740991;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        _isIndex = isIndex;
        return _isIndex;
    }
    var isLength_1;
    var hasRequiredIsLength;
    function requireIsLength() {
        if (hasRequiredIsLength) return isLength_1;
        hasRequiredIsLength = 1;
        var MAX_SAFE_INTEGER = 9007199254740991;
        function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        isLength_1 = isLength;
        return isLength_1;
    }
    var _baseIsTypedArray;
    var hasRequired_baseIsTypedArray;
    function require_baseIsTypedArray() {
        if (hasRequired_baseIsTypedArray) return _baseIsTypedArray;
        hasRequired_baseIsTypedArray = 1;
        var baseGetTag = require_baseGetTag(), isLength = requireIsLength(), isObjectLike = requireIsObjectLike();
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        _baseIsTypedArray = baseIsTypedArray;
        return _baseIsTypedArray;
    }
    var _baseUnary;
    var hasRequired_baseUnary;
    function require_baseUnary() {
        if (hasRequired_baseUnary) return _baseUnary;
        hasRequired_baseUnary = 1;
        function baseUnary(func) {
            return function(value) {
                return func(value);
            };
        }
        _baseUnary = baseUnary;
        return _baseUnary;
    }
    var _nodeUtilExports = {};
    var _nodeUtil = {
        get exports() {
            return _nodeUtilExports;
        },
        set exports(v) {
            _nodeUtilExports = v;
        }
    };
    var hasRequired_nodeUtil;
    function require_nodeUtil() {
        if (hasRequired_nodeUtil) return _nodeUtilExports;
        hasRequired_nodeUtil = 1;
        (function(module, exports) {
            var freeGlobal = require_freeGlobal();
            var freeExports = exports && !exports.nodeType && exports;
            var freeModule = freeExports && "object" == "object" && module && !module.nodeType && module;
            var moduleExports = freeModule && freeModule.exports === freeExports;
            var freeProcess = moduleExports && freeGlobal.process;
            var nodeUtil = function() {
                try {
                    var types = freeModule && freeModule.require && freeModule.require("util").types;
                    if (types) {
                        return types;
                    }
                    return freeProcess && freeProcess.binding && freeProcess.binding("util");
                } catch (e) {}
            }();
            module.exports = nodeUtil;
        })(_nodeUtil, _nodeUtilExports);
        return _nodeUtilExports;
    }
    var isTypedArray_1;
    var hasRequiredIsTypedArray;
    function requireIsTypedArray() {
        if (hasRequiredIsTypedArray) return isTypedArray_1;
        hasRequiredIsTypedArray = 1;
        var baseIsTypedArray = require_baseIsTypedArray(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        isTypedArray_1 = isTypedArray;
        return isTypedArray_1;
    }
    var _arrayLikeKeys;
    var hasRequired_arrayLikeKeys;
    function require_arrayLikeKeys() {
        if (hasRequired_arrayLikeKeys) return _arrayLikeKeys;
        hasRequired_arrayLikeKeys = 1;
        var baseTimes = require_baseTimes(), isArguments = requireIsArguments(), isArray = requireIsArray(), isBuffer = requireIsBuffer(), isIndex = require_isIndex(), isTypedArray = requireIsTypedArray();
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for (var key in value) {
                if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
                    result.push(key);
                }
            }
            return result;
        }
        _arrayLikeKeys = arrayLikeKeys;
        return _arrayLikeKeys;
    }
    var _isPrototype;
    var hasRequired_isPrototype;
    function require_isPrototype() {
        if (hasRequired_isPrototype) return _isPrototype;
        hasRequired_isPrototype = 1;
        var objectProto = Object.prototype;
        function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
        }
        _isPrototype = isPrototype;
        return _isPrototype;
    }
    var _overArg;
    var hasRequired_overArg;
    function require_overArg() {
        if (hasRequired_overArg) return _overArg;
        hasRequired_overArg = 1;
        function overArg(func, transform) {
            return function(arg) {
                return func(transform(arg));
            };
        }
        _overArg = overArg;
        return _overArg;
    }
    var _nativeKeys;
    var hasRequired_nativeKeys;
    function require_nativeKeys() {
        if (hasRequired_nativeKeys) return _nativeKeys;
        hasRequired_nativeKeys = 1;
        var overArg = require_overArg();
        var nativeKeys = overArg(Object.keys, Object);
        _nativeKeys = nativeKeys;
        return _nativeKeys;
    }
    var _baseKeys;
    var hasRequired_baseKeys;
    function require_baseKeys() {
        if (hasRequired_baseKeys) return _baseKeys;
        hasRequired_baseKeys = 1;
        var isPrototype = require_isPrototype(), nativeKeys = require_nativeKeys();
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function baseKeys(object) {
            if (!isPrototype(object)) {
                return nativeKeys(object);
            }
            var result = [];
            for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != "constructor") {
                    result.push(key);
                }
            }
            return result;
        }
        _baseKeys = baseKeys;
        return _baseKeys;
    }
    var isArrayLike_1;
    var hasRequiredIsArrayLike;
    function requireIsArrayLike() {
        if (hasRequiredIsArrayLike) return isArrayLike_1;
        hasRequiredIsArrayLike = 1;
        var isFunction = requireIsFunction(), isLength = requireIsLength();
        function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }
        isArrayLike_1 = isArrayLike;
        return isArrayLike_1;
    }
    var keys_1;
    var hasRequiredKeys;
    function requireKeys() {
        if (hasRequiredKeys) return keys_1;
        hasRequiredKeys = 1;
        var arrayLikeKeys = require_arrayLikeKeys(), baseKeys = require_baseKeys(), isArrayLike = requireIsArrayLike();
        function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        keys_1 = keys;
        return keys_1;
    }
    var _baseAssign;
    var hasRequired_baseAssign;
    function require_baseAssign() {
        if (hasRequired_baseAssign) return _baseAssign;
        hasRequired_baseAssign = 1;
        var copyObject = require_copyObject(), keys = requireKeys();
        function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        _baseAssign = baseAssign;
        return _baseAssign;
    }
    var _nativeKeysIn;
    var hasRequired_nativeKeysIn;
    function require_nativeKeysIn() {
        if (hasRequired_nativeKeysIn) return _nativeKeysIn;
        hasRequired_nativeKeysIn = 1;
        function nativeKeysIn(object) {
            var result = [];
            if (object != null) {
                for (var key in Object(object)) {
                    result.push(key);
                }
            }
            return result;
        }
        _nativeKeysIn = nativeKeysIn;
        return _nativeKeysIn;
    }
    var _baseKeysIn;
    var hasRequired_baseKeysIn;
    function require_baseKeysIn() {
        if (hasRequired_baseKeysIn) return _baseKeysIn;
        hasRequired_baseKeysIn = 1;
        var isObject = requireIsObject(), isPrototype = require_isPrototype(), nativeKeysIn = require_nativeKeysIn();
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function baseKeysIn(object) {
            if (!isObject(object)) {
                return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result = [];
            for (var key in object) {
                if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                    result.push(key);
                }
            }
            return result;
        }
        _baseKeysIn = baseKeysIn;
        return _baseKeysIn;
    }
    var keysIn_1;
    var hasRequiredKeysIn;
    function requireKeysIn() {
        if (hasRequiredKeysIn) return keysIn_1;
        hasRequiredKeysIn = 1;
        var arrayLikeKeys = require_arrayLikeKeys(), baseKeysIn = require_baseKeysIn(), isArrayLike = requireIsArrayLike();
        function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        keysIn_1 = keysIn;
        return keysIn_1;
    }
    var _baseAssignIn;
    var hasRequired_baseAssignIn;
    function require_baseAssignIn() {
        if (hasRequired_baseAssignIn) return _baseAssignIn;
        hasRequired_baseAssignIn = 1;
        var copyObject = require_copyObject(), keysIn = requireKeysIn();
        function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
        }
        _baseAssignIn = baseAssignIn;
        return _baseAssignIn;
    }
    var _cloneBufferExports = {};
    var _cloneBuffer = {
        get exports() {
            return _cloneBufferExports;
        },
        set exports(v) {
            _cloneBufferExports = v;
        }
    };
    var hasRequired_cloneBuffer;
    function require_cloneBuffer() {
        if (hasRequired_cloneBuffer) return _cloneBufferExports;
        hasRequired_cloneBuffer = 1;
        (function(module, exports) {
            var root = require_root();
            var freeExports = exports && !exports.nodeType && exports;
            var freeModule = freeExports && "object" == "object" && module && !module.nodeType && module;
            var moduleExports = freeModule && freeModule.exports === freeExports;
            var Buffer = moduleExports ? root.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
            function cloneBuffer(buffer, isDeep) {
                if (isDeep) {
                    return buffer.slice();
                }
                var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
                buffer.copy(result);
                return result;
            }
            module.exports = cloneBuffer;
        })(_cloneBuffer, _cloneBufferExports);
        return _cloneBufferExports;
    }
    var _copyArray;
    var hasRequired_copyArray;
    function require_copyArray() {
        if (hasRequired_copyArray) return _copyArray;
        hasRequired_copyArray = 1;
        function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            while (++index < length) {
                array[index] = source[index];
            }
            return array;
        }
        _copyArray = copyArray;
        return _copyArray;
    }
    var _arrayFilter;
    var hasRequired_arrayFilter;
    function require_arrayFilter() {
        if (hasRequired_arrayFilter) return _arrayFilter;
        hasRequired_arrayFilter = 1;
        function arrayFilter(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }
        _arrayFilter = arrayFilter;
        return _arrayFilter;
    }
    var stubArray_1;
    var hasRequiredStubArray;
    function requireStubArray() {
        if (hasRequiredStubArray) return stubArray_1;
        hasRequiredStubArray = 1;
        function stubArray() {
            return [];
        }
        stubArray_1 = stubArray;
        return stubArray_1;
    }
    var _getSymbols;
    var hasRequired_getSymbols;
    function require_getSymbols() {
        if (hasRequired_getSymbols) return _getSymbols;
        hasRequired_getSymbols = 1;
        var arrayFilter = require_arrayFilter(), stubArray = requireStubArray();
        var objectProto = Object.prototype;
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;
        var nativeGetSymbols = Object.getOwnPropertySymbols;
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
                return [];
            }
            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), (function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
            }));
        };
        _getSymbols = getSymbols;
        return _getSymbols;
    }
    var _copySymbols;
    var hasRequired_copySymbols;
    function require_copySymbols() {
        if (hasRequired_copySymbols) return _copySymbols;
        hasRequired_copySymbols = 1;
        var copyObject = require_copyObject(), getSymbols = require_getSymbols();
        function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
        }
        _copySymbols = copySymbols;
        return _copySymbols;
    }
    var _arrayPush;
    var hasRequired_arrayPush;
    function require_arrayPush() {
        if (hasRequired_arrayPush) return _arrayPush;
        hasRequired_arrayPush = 1;
        function arrayPush(array, values) {
            var index = -1, length = values.length, offset = array.length;
            while (++index < length) {
                array[offset + index] = values[index];
            }
            return array;
        }
        _arrayPush = arrayPush;
        return _arrayPush;
    }
    var _getPrototype;
    var hasRequired_getPrototype;
    function require_getPrototype() {
        if (hasRequired_getPrototype) return _getPrototype;
        hasRequired_getPrototype = 1;
        var overArg = require_overArg();
        var getPrototype = overArg(Object.getPrototypeOf, Object);
        _getPrototype = getPrototype;
        return _getPrototype;
    }
    var _getSymbolsIn;
    var hasRequired_getSymbolsIn;
    function require_getSymbolsIn() {
        if (hasRequired_getSymbolsIn) return _getSymbolsIn;
        hasRequired_getSymbolsIn = 1;
        var arrayPush = require_arrayPush(), getPrototype = require_getPrototype(), getSymbols = require_getSymbols(), stubArray = requireStubArray();
        var nativeGetSymbols = Object.getOwnPropertySymbols;
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result = [];
            while (object) {
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        };
        _getSymbolsIn = getSymbolsIn;
        return _getSymbolsIn;
    }
    var _copySymbolsIn;
    var hasRequired_copySymbolsIn;
    function require_copySymbolsIn() {
        if (hasRequired_copySymbolsIn) return _copySymbolsIn;
        hasRequired_copySymbolsIn = 1;
        var copyObject = require_copyObject(), getSymbolsIn = require_getSymbolsIn();
        function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
        }
        _copySymbolsIn = copySymbolsIn;
        return _copySymbolsIn;
    }
    var _baseGetAllKeys;
    var hasRequired_baseGetAllKeys;
    function require_baseGetAllKeys() {
        if (hasRequired_baseGetAllKeys) return _baseGetAllKeys;
        hasRequired_baseGetAllKeys = 1;
        var arrayPush = require_arrayPush(), isArray = requireIsArray();
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        _baseGetAllKeys = baseGetAllKeys;
        return _baseGetAllKeys;
    }
    var _getAllKeys;
    var hasRequired_getAllKeys;
    function require_getAllKeys() {
        if (hasRequired_getAllKeys) return _getAllKeys;
        hasRequired_getAllKeys = 1;
        var baseGetAllKeys = require_baseGetAllKeys(), getSymbols = require_getSymbols(), keys = requireKeys();
        function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        _getAllKeys = getAllKeys;
        return _getAllKeys;
    }
    var _getAllKeysIn;
    var hasRequired_getAllKeysIn;
    function require_getAllKeysIn() {
        if (hasRequired_getAllKeysIn) return _getAllKeysIn;
        hasRequired_getAllKeysIn = 1;
        var baseGetAllKeys = require_baseGetAllKeys(), getSymbolsIn = require_getSymbolsIn(), keysIn = requireKeysIn();
        function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        _getAllKeysIn = getAllKeysIn;
        return _getAllKeysIn;
    }
    var _DataView;
    var hasRequired_DataView;
    function require_DataView() {
        if (hasRequired_DataView) return _DataView;
        hasRequired_DataView = 1;
        var getNative = require_getNative(), root = require_root();
        var DataView = getNative(root, "DataView");
        _DataView = DataView;
        return _DataView;
    }
    var _Promise;
    var hasRequired_Promise;
    function require_Promise() {
        if (hasRequired_Promise) return _Promise;
        hasRequired_Promise = 1;
        var getNative = require_getNative(), root = require_root();
        var Promise = getNative(root, "Promise");
        _Promise = Promise;
        return _Promise;
    }
    var _Set;
    var hasRequired_Set;
    function require_Set() {
        if (hasRequired_Set) return _Set;
        hasRequired_Set = 1;
        var getNative = require_getNative(), root = require_root();
        var Set = getNative(root, "Set");
        _Set = Set;
        return _Set;
    }
    var _WeakMap;
    var hasRequired_WeakMap;
    function require_WeakMap() {
        if (hasRequired_WeakMap) return _WeakMap;
        hasRequired_WeakMap = 1;
        var getNative = require_getNative(), root = require_root();
        var WeakMap = getNative(root, "WeakMap");
        _WeakMap = WeakMap;
        return _WeakMap;
    }
    var _getTag;
    var hasRequired_getTag;
    function require_getTag() {
        if (hasRequired_getTag) return _getTag;
        hasRequired_getTag = 1;
        var DataView = require_DataView(), Map = require_Map(), Promise = require_Promise(), Set = require_Set(), WeakMap = require_WeakMap(), baseGetTag = require_baseGetTag(), toSource = require_toSource();
        var mapTag = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
        var dataViewTag = "[object DataView]";
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) {
            getTag = function(value) {
                var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : "";
                if (ctorString) {
                    switch (ctorString) {
                      case dataViewCtorString:
                        return dataViewTag;

                      case mapCtorString:
                        return mapTag;

                      case promiseCtorString:
                        return promiseTag;

                      case setCtorString:
                        return setTag;

                      case weakMapCtorString:
                        return weakMapTag;
                    }
                }
                return result;
            };
        }
        _getTag = getTag;
        return _getTag;
    }
    var _initCloneArray;
    var hasRequired_initCloneArray;
    function require_initCloneArray() {
        if (hasRequired_initCloneArray) return _initCloneArray;
        hasRequired_initCloneArray = 1;
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function initCloneArray(array) {
            var length = array.length, result = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        _initCloneArray = initCloneArray;
        return _initCloneArray;
    }
    var _Uint8Array;
    var hasRequired_Uint8Array;
    function require_Uint8Array() {
        if (hasRequired_Uint8Array) return _Uint8Array;
        hasRequired_Uint8Array = 1;
        var root = require_root();
        var Uint8Array = root.Uint8Array;
        _Uint8Array = Uint8Array;
        return _Uint8Array;
    }
    var _cloneArrayBuffer;
    var hasRequired_cloneArrayBuffer;
    function require_cloneArrayBuffer() {
        if (hasRequired_cloneArrayBuffer) return _cloneArrayBuffer;
        hasRequired_cloneArrayBuffer = 1;
        var Uint8Array = require_Uint8Array();
        function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        _cloneArrayBuffer = cloneArrayBuffer;
        return _cloneArrayBuffer;
    }
    var _cloneDataView;
    var hasRequired_cloneDataView;
    function require_cloneDataView() {
        if (hasRequired_cloneDataView) return _cloneDataView;
        hasRequired_cloneDataView = 1;
        var cloneArrayBuffer = require_cloneArrayBuffer();
        function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        _cloneDataView = cloneDataView;
        return _cloneDataView;
    }
    var _cloneRegExp;
    var hasRequired_cloneRegExp;
    function require_cloneRegExp() {
        if (hasRequired_cloneRegExp) return _cloneRegExp;
        hasRequired_cloneRegExp = 1;
        var reFlags = /\w*$/;
        function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }
        _cloneRegExp = cloneRegExp;
        return _cloneRegExp;
    }
    var _cloneSymbol;
    var hasRequired_cloneSymbol;
    function require_cloneSymbol() {
        if (hasRequired_cloneSymbol) return _cloneSymbol;
        hasRequired_cloneSymbol = 1;
        var Symbol = require_Symbol();
        var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
        function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }
        _cloneSymbol = cloneSymbol;
        return _cloneSymbol;
    }
    var _cloneTypedArray;
    var hasRequired_cloneTypedArray;
    function require_cloneTypedArray() {
        if (hasRequired_cloneTypedArray) return _cloneTypedArray;
        hasRequired_cloneTypedArray = 1;
        var cloneArrayBuffer = require_cloneArrayBuffer();
        function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        _cloneTypedArray = cloneTypedArray;
        return _cloneTypedArray;
    }
    var _initCloneByTag;
    var hasRequired_initCloneByTag;
    function require_initCloneByTag() {
        if (hasRequired_initCloneByTag) return _initCloneByTag;
        hasRequired_initCloneByTag = 1;
        var cloneArrayBuffer = require_cloneArrayBuffer(), cloneDataView = require_cloneDataView(), cloneRegExp = require_cloneRegExp(), cloneSymbol = require_cloneSymbol(), cloneTypedArray = require_cloneTypedArray();
        var boolTag = "[object Boolean]", dateTag = "[object Date]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);

              case boolTag:
              case dateTag:
                return new Ctor(+object);

              case dataViewTag:
                return cloneDataView(object, isDeep);

              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);

              case mapTag:
                return new Ctor;

              case numberTag:
              case stringTag:
                return new Ctor(object);

              case regexpTag:
                return cloneRegExp(object);

              case setTag:
                return new Ctor;

              case symbolTag:
                return cloneSymbol(object);
            }
        }
        _initCloneByTag = initCloneByTag;
        return _initCloneByTag;
    }
    var _baseCreate;
    var hasRequired_baseCreate;
    function require_baseCreate() {
        if (hasRequired_baseCreate) return _baseCreate;
        hasRequired_baseCreate = 1;
        var isObject = requireIsObject();
        var objectCreate = Object.create;
        var baseCreate = function() {
            function object() {}
            return function(proto) {
                if (!isObject(proto)) {
                    return {};
                }
                if (objectCreate) {
                    return objectCreate(proto);
                }
                object.prototype = proto;
                var result = new object;
                object.prototype = undefined;
                return result;
            };
        }();
        _baseCreate = baseCreate;
        return _baseCreate;
    }
    var _initCloneObject;
    var hasRequired_initCloneObject;
    function require_initCloneObject() {
        if (hasRequired_initCloneObject) return _initCloneObject;
        hasRequired_initCloneObject = 1;
        var baseCreate = require_baseCreate(), getPrototype = require_getPrototype(), isPrototype = require_isPrototype();
        function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        _initCloneObject = initCloneObject;
        return _initCloneObject;
    }
    var _baseIsMap;
    var hasRequired_baseIsMap;
    function require_baseIsMap() {
        if (hasRequired_baseIsMap) return _baseIsMap;
        hasRequired_baseIsMap = 1;
        var getTag = require_getTag(), isObjectLike = requireIsObjectLike();
        var mapTag = "[object Map]";
        function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        }
        _baseIsMap = baseIsMap;
        return _baseIsMap;
    }
    var isMap_1;
    var hasRequiredIsMap;
    function requireIsMap() {
        if (hasRequiredIsMap) return isMap_1;
        hasRequiredIsMap = 1;
        var baseIsMap = require_baseIsMap(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
        var nodeIsMap = nodeUtil && nodeUtil.isMap;
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        isMap_1 = isMap;
        return isMap_1;
    }
    var _baseIsSet;
    var hasRequired_baseIsSet;
    function require_baseIsSet() {
        if (hasRequired_baseIsSet) return _baseIsSet;
        hasRequired_baseIsSet = 1;
        var getTag = require_getTag(), isObjectLike = requireIsObjectLike();
        var setTag = "[object Set]";
        function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        }
        _baseIsSet = baseIsSet;
        return _baseIsSet;
    }
    var isSet_1;
    var hasRequiredIsSet;
    function requireIsSet() {
        if (hasRequiredIsSet) return isSet_1;
        hasRequiredIsSet = 1;
        var baseIsSet = require_baseIsSet(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
        var nodeIsSet = nodeUtil && nodeUtil.isSet;
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        isSet_1 = isSet;
        return isSet_1;
    }
    var _baseClone;
    var hasRequired_baseClone;
    function require_baseClone() {
        if (hasRequired_baseClone) return _baseClone;
        hasRequired_baseClone = 1;
        var Stack = require_Stack(), arrayEach = require_arrayEach(), assignValue = require_assignValue(), baseAssign = require_baseAssign(), baseAssignIn = require_baseAssignIn(), cloneBuffer = require_cloneBuffer(), copyArray = require_copyArray(), copySymbols = require_copySymbols(), copySymbolsIn = require_copySymbolsIn(), getAllKeys = require_getAllKeys(), getAllKeysIn = require_getAllKeysIn(), getTag = require_getTag(), initCloneArray = require_initCloneArray(), initCloneByTag = require_initCloneByTag(), initCloneObject = require_initCloneObject(), isArray = requireIsArray(), isBuffer = requireIsBuffer(), isMap = requireIsMap(), isObject = requireIsObject(), isSet = requireIsSet(), keys = requireKeys(), keysIn = requireKeysIn();
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        function baseClone(value, bitmask, customizer, key, object, stack) {
            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
                result = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result !== undefined) {
                return result;
            }
            if (!isObject(value)) {
                return value;
            }
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) {
                    return copyArray(value, result);
                }
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) {
                    return cloneBuffer(value, isDeep);
                }
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = isFlat || isFunc ? {} : initCloneObject(value);
                    if (!isDeep) {
                        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                    }
                } else {
                    if (!cloneableTags[tag]) {
                        return object ? value : {};
                    }
                    result = initCloneByTag(value, tag, isDeep);
                }
            }
            stack || (stack = new Stack);
            var stacked = stack.get(value);
            if (stacked) {
                return stacked;
            }
            stack.set(value, result);
            if (isSet(value)) {
                value.forEach((function(subValue) {
                    result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                }));
            } else if (isMap(value)) {
                value.forEach((function(subValue, key) {
                    result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                }));
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, (function(subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            }));
            return result;
        }
        _baseClone = baseClone;
        return _baseClone;
    }
    var clone_1;
    var hasRequiredClone;
    function requireClone() {
        if (hasRequiredClone) return clone_1;
        hasRequiredClone = 1;
        var baseClone = require_baseClone();
        var CLONE_SYMBOLS_FLAG = 4;
        function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        clone_1 = clone;
        return clone_1;
    }
    var constant_1;
    var hasRequiredConstant;
    function requireConstant() {
        if (hasRequiredConstant) return constant_1;
        hasRequiredConstant = 1;
        function constant(value) {
            return function() {
                return value;
            };
        }
        constant_1 = constant;
        return constant_1;
    }
    var eachExports = {};
    var each = {
        get exports() {
            return eachExports;
        },
        set exports(v) {
            eachExports = v;
        }
    };
    var _createBaseFor;
    var hasRequired_createBaseFor;
    function require_createBaseFor() {
        if (hasRequired_createBaseFor) return _createBaseFor;
        hasRequired_createBaseFor = 1;
        function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                while (length--) {
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                    }
                }
                return object;
            };
        }
        _createBaseFor = createBaseFor;
        return _createBaseFor;
    }
    var _baseFor;
    var hasRequired_baseFor;
    function require_baseFor() {
        if (hasRequired_baseFor) return _baseFor;
        hasRequired_baseFor = 1;
        var createBaseFor = require_createBaseFor();
        var baseFor = createBaseFor();
        _baseFor = baseFor;
        return _baseFor;
    }
    var _baseForOwn;
    var hasRequired_baseForOwn;
    function require_baseForOwn() {
        if (hasRequired_baseForOwn) return _baseForOwn;
        hasRequired_baseForOwn = 1;
        var baseFor = require_baseFor(), keys = requireKeys();
        function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        _baseForOwn = baseForOwn;
        return _baseForOwn;
    }
    var _createBaseEach;
    var hasRequired_createBaseEach;
    function require_createBaseEach() {
        if (hasRequired_createBaseEach) return _createBaseEach;
        hasRequired_createBaseEach = 1;
        var isArrayLike = requireIsArrayLike();
        function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
                if (collection == null) {
                    return collection;
                }
                if (!isArrayLike(collection)) {
                    return eachFunc(collection, iteratee);
                }
                var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
                while (fromRight ? index-- : ++index < length) {
                    if (iteratee(iterable[index], index, iterable) === false) {
                        break;
                    }
                }
                return collection;
            };
        }
        _createBaseEach = createBaseEach;
        return _createBaseEach;
    }
    var _baseEach;
    var hasRequired_baseEach;
    function require_baseEach() {
        if (hasRequired_baseEach) return _baseEach;
        hasRequired_baseEach = 1;
        var baseForOwn = require_baseForOwn(), createBaseEach = require_createBaseEach();
        var baseEach = createBaseEach(baseForOwn);
        _baseEach = baseEach;
        return _baseEach;
    }
    var identity_1;
    var hasRequiredIdentity;
    function requireIdentity() {
        if (hasRequiredIdentity) return identity_1;
        hasRequiredIdentity = 1;
        function identity(value) {
            return value;
        }
        identity_1 = identity;
        return identity_1;
    }
    var _castFunction;
    var hasRequired_castFunction;
    function require_castFunction() {
        if (hasRequired_castFunction) return _castFunction;
        hasRequired_castFunction = 1;
        var identity = requireIdentity();
        function castFunction(value) {
            return typeof value == "function" ? value : identity;
        }
        _castFunction = castFunction;
        return _castFunction;
    }
    var forEach_1;
    var hasRequiredForEach;
    function requireForEach() {
        if (hasRequiredForEach) return forEach_1;
        hasRequiredForEach = 1;
        var arrayEach = require_arrayEach(), baseEach = require_baseEach(), castFunction = require_castFunction(), isArray = requireIsArray();
        function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, castFunction(iteratee));
        }
        forEach_1 = forEach;
        return forEach_1;
    }
    var hasRequiredEach;
    function requireEach() {
        if (hasRequiredEach) return eachExports;
        hasRequiredEach = 1;
        (function(module) {
            module.exports = requireForEach();
        })(each);
        return eachExports;
    }
    var _baseFilter;
    var hasRequired_baseFilter;
    function require_baseFilter() {
        if (hasRequired_baseFilter) return _baseFilter;
        hasRequired_baseFilter = 1;
        var baseEach = require_baseEach();
        function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, (function(value, index, collection) {
                if (predicate(value, index, collection)) {
                    result.push(value);
                }
            }));
            return result;
        }
        _baseFilter = baseFilter;
        return _baseFilter;
    }
    var _setCacheAdd;
    var hasRequired_setCacheAdd;
    function require_setCacheAdd() {
        if (hasRequired_setCacheAdd) return _setCacheAdd;
        hasRequired_setCacheAdd = 1;
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }
        _setCacheAdd = setCacheAdd;
        return _setCacheAdd;
    }
    var _setCacheHas;
    var hasRequired_setCacheHas;
    function require_setCacheHas() {
        if (hasRequired_setCacheHas) return _setCacheHas;
        hasRequired_setCacheHas = 1;
        function setCacheHas(value) {
            return this.__data__.has(value);
        }
        _setCacheHas = setCacheHas;
        return _setCacheHas;
    }
    var _SetCache;
    var hasRequired_SetCache;
    function require_SetCache() {
        if (hasRequired_SetCache) return _SetCache;
        hasRequired_SetCache = 1;
        var MapCache = require_MapCache(), setCacheAdd = require_setCacheAdd(), setCacheHas = require_setCacheHas();
        function SetCache(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache;
            while (++index < length) {
                this.add(values[index]);
            }
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        _SetCache = SetCache;
        return _SetCache;
    }
    var _arraySome;
    var hasRequired_arraySome;
    function require_arraySome() {
        if (hasRequired_arraySome) return _arraySome;
        hasRequired_arraySome = 1;
        function arraySome(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
                if (predicate(array[index], index, array)) {
                    return true;
                }
            }
            return false;
        }
        _arraySome = arraySome;
        return _arraySome;
    }
    var _cacheHas;
    var hasRequired_cacheHas;
    function require_cacheHas() {
        if (hasRequired_cacheHas) return _cacheHas;
        hasRequired_cacheHas = 1;
        function cacheHas(cache, key) {
            return cache.has(key);
        }
        _cacheHas = cacheHas;
        return _cacheHas;
    }
    var _equalArrays;
    var hasRequired_equalArrays;
    function require_equalArrays() {
        if (hasRequired_equalArrays) return _equalArrays;
        hasRequired_equalArrays = 1;
        var SetCache = require_SetCache(), arraySome = require_arraySome(), cacheHas = require_cacheHas();
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
                return arrStacked == other && othStacked == array;
            }
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
                var arrValue = array[index], othValue = other[index];
                if (customizer) {
                    var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                }
                if (compared !== undefined) {
                    if (compared) {
                        continue;
                    }
                    result = false;
                    break;
                }
                if (seen) {
                    if (!arraySome(other, (function(othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                            return seen.push(othIndex);
                        }
                    }))) {
                        result = false;
                        break;
                    }
                } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    result = false;
                    break;
                }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result;
        }
        _equalArrays = equalArrays;
        return _equalArrays;
    }
    var _mapToArray;
    var hasRequired_mapToArray;
    function require_mapToArray() {
        if (hasRequired_mapToArray) return _mapToArray;
        hasRequired_mapToArray = 1;
        function mapToArray(map) {
            var index = -1, result = Array(map.size);
            map.forEach((function(value, key) {
                result[++index] = [ key, value ];
            }));
            return result;
        }
        _mapToArray = mapToArray;
        return _mapToArray;
    }
    var _setToArray;
    var hasRequired_setToArray;
    function require_setToArray() {
        if (hasRequired_setToArray) return _setToArray;
        hasRequired_setToArray = 1;
        function setToArray(set) {
            var index = -1, result = Array(set.size);
            set.forEach((function(value) {
                result[++index] = value;
            }));
            return result;
        }
        _setToArray = setToArray;
        return _setToArray;
    }
    var _equalByTag;
    var hasRequired_equalByTag;
    function require_equalByTag() {
        if (hasRequired_equalByTag) return _equalByTag;
        hasRequired_equalByTag = 1;
        var Symbol = require_Symbol(), Uint8Array = require_Uint8Array(), eq = requireEq(), equalArrays = require_equalArrays(), mapToArray = require_mapToArray(), setToArray = require_setToArray();
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
        var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                    return false;
                }
                object = object.buffer;
                other = other.buffer;

              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                    return false;
                }
                return true;

              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);

              case errorTag:
                return object.name == other.name && object.message == other.message;

              case regexpTag:
              case stringTag:
                return object == other + "";

              case mapTag:
                var convert = mapToArray;

              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                    return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                    return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result;

              case symbolTag:
                if (symbolValueOf) {
                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
        }
        _equalByTag = equalByTag;
        return _equalByTag;
    }
    var _equalObjects;
    var hasRequired_equalObjects;
    function require_equalObjects() {
        if (hasRequired_equalObjects) return _equalObjects;
        hasRequired_equalObjects = 1;
        var getAllKeys = require_getAllKeys();
        var COMPARE_PARTIAL_FLAG = 1;
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
                return false;
            }
            var index = objLength;
            while (index--) {
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                    return false;
                }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
                return objStacked == other && othStacked == object;
            }
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) {
                    var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                }
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == "constructor");
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                    result = false;
                }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result;
        }
        _equalObjects = equalObjects;
        return _equalObjects;
    }
    var _baseIsEqualDeep;
    var hasRequired_baseIsEqualDeep;
    function require_baseIsEqualDeep() {
        if (hasRequired_baseIsEqualDeep) return _baseIsEqualDeep;
        hasRequired_baseIsEqualDeep = 1;
        var Stack = require_Stack(), equalArrays = require_equalArrays(), equalByTag = require_equalByTag(), equalObjects = require_equalObjects(), getTag = require_getTag(), isArray = requireIsArray(), isBuffer = requireIsBuffer(), isTypedArray = requireIsTypedArray();
        var COMPARE_PARTIAL_FLAG = 1;
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                    return false;
                }
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack);
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack);
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) {
                return false;
            }
            stack || (stack = new Stack);
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        _baseIsEqualDeep = baseIsEqualDeep;
        return _baseIsEqualDeep;
    }
    var _baseIsEqual;
    var hasRequired_baseIsEqual;
    function require_baseIsEqual() {
        if (hasRequired_baseIsEqual) return _baseIsEqual;
        hasRequired_baseIsEqual = 1;
        var baseIsEqualDeep = require_baseIsEqualDeep(), isObjectLike = requireIsObjectLike();
        function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
                return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
                return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        _baseIsEqual = baseIsEqual;
        return _baseIsEqual;
    }
    var _baseIsMatch;
    var hasRequired_baseIsMatch;
    function require_baseIsMatch() {
        if (hasRequired_baseIsMatch) return _baseIsMatch;
        hasRequired_baseIsMatch = 1;
        var Stack = require_Stack(), baseIsEqual = require_baseIsEqual();
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (index--) {
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                    return false;
                }
            }
            while (++index < length) {
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) {
                        return false;
                    }
                } else {
                    var stack = new Stack;
                    if (customizer) {
                        var result = customizer(objValue, srcValue, key, object, source, stack);
                    }
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
                        return false;
                    }
                }
            }
            return true;
        }
        _baseIsMatch = baseIsMatch;
        return _baseIsMatch;
    }
    var _isStrictComparable;
    var hasRequired_isStrictComparable;
    function require_isStrictComparable() {
        if (hasRequired_isStrictComparable) return _isStrictComparable;
        hasRequired_isStrictComparable = 1;
        var isObject = requireIsObject();
        function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        _isStrictComparable = isStrictComparable;
        return _isStrictComparable;
    }
    var _getMatchData;
    var hasRequired_getMatchData;
    function require_getMatchData() {
        if (hasRequired_getMatchData) return _getMatchData;
        hasRequired_getMatchData = 1;
        var isStrictComparable = require_isStrictComparable(), keys = requireKeys();
        function getMatchData(object) {
            var result = keys(object), length = result.length;
            while (length--) {
                var key = result[length], value = object[key];
                result[length] = [ key, value, isStrictComparable(value) ];
            }
            return result;
        }
        _getMatchData = getMatchData;
        return _getMatchData;
    }
    var _matchesStrictComparable;
    var hasRequired_matchesStrictComparable;
    function require_matchesStrictComparable() {
        if (hasRequired_matchesStrictComparable) return _matchesStrictComparable;
        hasRequired_matchesStrictComparable = 1;
        function matchesStrictComparable(key, srcValue) {
            return function(object) {
                if (object == null) {
                    return false;
                }
                return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
            };
        }
        _matchesStrictComparable = matchesStrictComparable;
        return _matchesStrictComparable;
    }
    var _baseMatches;
    var hasRequired_baseMatches;
    function require_baseMatches() {
        if (hasRequired_baseMatches) return _baseMatches;
        hasRequired_baseMatches = 1;
        var baseIsMatch = require_baseIsMatch(), getMatchData = require_getMatchData(), matchesStrictComparable = require_matchesStrictComparable();
        function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        _baseMatches = baseMatches;
        return _baseMatches;
    }
    var isSymbol_1;
    var hasRequiredIsSymbol;
    function requireIsSymbol() {
        if (hasRequiredIsSymbol) return isSymbol_1;
        hasRequiredIsSymbol = 1;
        var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
        var symbolTag = "[object Symbol]";
        function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        isSymbol_1 = isSymbol;
        return isSymbol_1;
    }
    var _isKey;
    var hasRequired_isKey;
    function require_isKey() {
        if (hasRequired_isKey) return _isKey;
        hasRequired_isKey = 1;
        var isArray = requireIsArray(), isSymbol = requireIsSymbol();
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
        function isKey(value, object) {
            if (isArray(value)) {
                return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
                return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
        }
        _isKey = isKey;
        return _isKey;
    }
    var memoize_1;
    var hasRequiredMemoize;
    function requireMemoize() {
        if (hasRequiredMemoize) return memoize_1;
        hasRequiredMemoize = 1;
        var MapCache = require_MapCache();
        var FUNC_ERROR_TEXT = "Expected a function";
        function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) {
                    return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache);
            return memoized;
        }
        memoize.Cache = MapCache;
        memoize_1 = memoize;
        return memoize_1;
    }
    var _memoizeCapped;
    var hasRequired_memoizeCapped;
    function require_memoizeCapped() {
        if (hasRequired_memoizeCapped) return _memoizeCapped;
        hasRequired_memoizeCapped = 1;
        var memoize = requireMemoize();
        var MAX_MEMOIZE_SIZE = 500;
        function memoizeCapped(func) {
            var result = memoize(func, (function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                    cache.clear();
                }
                return key;
            }));
            var cache = result.cache;
            return result;
        }
        _memoizeCapped = memoizeCapped;
        return _memoizeCapped;
    }
    var _stringToPath;
    var hasRequired_stringToPath;
    function require_stringToPath() {
        if (hasRequired_stringToPath) return _stringToPath;
        hasRequired_stringToPath = 1;
        var memoizeCapped = require_memoizeCapped();
        var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reEscapeChar = /\\(\\)?/g;
        var stringToPath = memoizeCapped((function(string) {
            var result = [];
            if (string.charCodeAt(0) === 46) {
                result.push("");
            }
            string.replace(rePropName, (function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            }));
            return result;
        }));
        _stringToPath = stringToPath;
        return _stringToPath;
    }
    var _arrayMap;
    var hasRequired_arrayMap;
    function require_arrayMap() {
        if (hasRequired_arrayMap) return _arrayMap;
        hasRequired_arrayMap = 1;
        function arrayMap(array, iteratee) {
            var index = -1, length = array == null ? 0 : array.length, result = Array(length);
            while (++index < length) {
                result[index] = iteratee(array[index], index, array);
            }
            return result;
        }
        _arrayMap = arrayMap;
        return _arrayMap;
    }
    var _baseToString;
    var hasRequired_baseToString;
    function require_baseToString() {
        if (hasRequired_baseToString) return _baseToString;
        hasRequired_baseToString = 1;
        var Symbol = require_Symbol(), arrayMap = require_arrayMap(), isArray = requireIsArray(), isSymbol = requireIsSymbol();
        var INFINITY = 1 / 0;
        var symbolProto = Symbol ? Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        function baseToString(value) {
            if (typeof value == "string") {
                return value;
            }
            if (isArray(value)) {
                return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : "";
            }
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }
        _baseToString = baseToString;
        return _baseToString;
    }
    var toString_1;
    var hasRequiredToString;
    function requireToString() {
        if (hasRequiredToString) return toString_1;
        hasRequiredToString = 1;
        var baseToString = require_baseToString();
        function toString(value) {
            return value == null ? "" : baseToString(value);
        }
        toString_1 = toString;
        return toString_1;
    }
    var _castPath;
    var hasRequired_castPath;
    function require_castPath() {
        if (hasRequired_castPath) return _castPath;
        hasRequired_castPath = 1;
        var isArray = requireIsArray(), isKey = require_isKey(), stringToPath = require_stringToPath(), toString = requireToString();
        function castPath(value, object) {
            if (isArray(value)) {
                return value;
            }
            return isKey(value, object) ? [ value ] : stringToPath(toString(value));
        }
        _castPath = castPath;
        return _castPath;
    }
    var _toKey;
    var hasRequired_toKey;
    function require_toKey() {
        if (hasRequired_toKey) return _toKey;
        hasRequired_toKey = 1;
        var isSymbol = requireIsSymbol();
        var INFINITY = 1 / 0;
        function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
                return value;
            }
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }
        _toKey = toKey;
        return _toKey;
    }
    var _baseGet;
    var hasRequired_baseGet;
    function require_baseGet() {
        if (hasRequired_baseGet) return _baseGet;
        hasRequired_baseGet = 1;
        var castPath = require_castPath(), toKey = require_toKey();
        function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
                object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined;
        }
        _baseGet = baseGet;
        return _baseGet;
    }
    var get_1;
    var hasRequiredGet;
    function requireGet() {
        if (hasRequiredGet) return get_1;
        hasRequiredGet = 1;
        var baseGet = require_baseGet();
        function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        get_1 = get;
        return get_1;
    }
    var _baseHasIn;
    var hasRequired_baseHasIn;
    function require_baseHasIn() {
        if (hasRequired_baseHasIn) return _baseHasIn;
        hasRequired_baseHasIn = 1;
        function baseHasIn(object, key) {
            return object != null && key in Object(object);
        }
        _baseHasIn = baseHasIn;
        return _baseHasIn;
    }
    var _hasPath;
    var hasRequired_hasPath;
    function require_hasPath() {
        if (hasRequired_hasPath) return _hasPath;
        hasRequired_hasPath = 1;
        var castPath = require_castPath(), isArguments = requireIsArguments(), isArray = requireIsArray(), isIndex = require_isIndex(), isLength = requireIsLength(), toKey = require_toKey();
        function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result = false;
            while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                    break;
                }
                object = object[key];
            }
            if (result || ++index != length) {
                return result;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        _hasPath = hasPath;
        return _hasPath;
    }
    var hasIn_1;
    var hasRequiredHasIn;
    function requireHasIn() {
        if (hasRequiredHasIn) return hasIn_1;
        hasRequiredHasIn = 1;
        var baseHasIn = require_baseHasIn(), hasPath = require_hasPath();
        function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        hasIn_1 = hasIn;
        return hasIn_1;
    }
    var _baseMatchesProperty;
    var hasRequired_baseMatchesProperty;
    function require_baseMatchesProperty() {
        if (hasRequired_baseMatchesProperty) return _baseMatchesProperty;
        hasRequired_baseMatchesProperty = 1;
        var baseIsEqual = require_baseIsEqual(), get = requireGet(), hasIn = requireHasIn(), isKey = require_isKey(), isStrictComparable = require_isStrictComparable(), matchesStrictComparable = require_matchesStrictComparable(), toKey = require_toKey();
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }
        _baseMatchesProperty = baseMatchesProperty;
        return _baseMatchesProperty;
    }
    var _baseProperty;
    var hasRequired_baseProperty;
    function require_baseProperty() {
        if (hasRequired_baseProperty) return _baseProperty;
        hasRequired_baseProperty = 1;
        function baseProperty(key) {
            return function(object) {
                return object == null ? undefined : object[key];
            };
        }
        _baseProperty = baseProperty;
        return _baseProperty;
    }
    var _basePropertyDeep;
    var hasRequired_basePropertyDeep;
    function require_basePropertyDeep() {
        if (hasRequired_basePropertyDeep) return _basePropertyDeep;
        hasRequired_basePropertyDeep = 1;
        var baseGet = require_baseGet();
        function basePropertyDeep(path) {
            return function(object) {
                return baseGet(object, path);
            };
        }
        _basePropertyDeep = basePropertyDeep;
        return _basePropertyDeep;
    }
    var property_1;
    var hasRequiredProperty;
    function requireProperty() {
        if (hasRequiredProperty) return property_1;
        hasRequiredProperty = 1;
        var baseProperty = require_baseProperty(), basePropertyDeep = require_basePropertyDeep(), isKey = require_isKey(), toKey = require_toKey();
        function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        property_1 = property;
        return property_1;
    }
    var _baseIteratee;
    var hasRequired_baseIteratee;
    function require_baseIteratee() {
        if (hasRequired_baseIteratee) return _baseIteratee;
        hasRequired_baseIteratee = 1;
        var baseMatches = require_baseMatches(), baseMatchesProperty = require_baseMatchesProperty(), identity = requireIdentity(), isArray = requireIsArray(), property = requireProperty();
        function baseIteratee(value) {
            if (typeof value == "function") {
                return value;
            }
            if (value == null) {
                return identity;
            }
            if (typeof value == "object") {
                return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
        }
        _baseIteratee = baseIteratee;
        return _baseIteratee;
    }
    var filter_1;
    var hasRequiredFilter;
    function requireFilter() {
        if (hasRequiredFilter) return filter_1;
        hasRequiredFilter = 1;
        var arrayFilter = require_arrayFilter(), baseFilter = require_baseFilter(), baseIteratee = require_baseIteratee(), isArray = requireIsArray();
        function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, baseIteratee(predicate, 3));
        }
        filter_1 = filter;
        return filter_1;
    }
    var _baseHas;
    var hasRequired_baseHas;
    function require_baseHas() {
        if (hasRequired_baseHas) return _baseHas;
        hasRequired_baseHas = 1;
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
        }
        _baseHas = baseHas;
        return _baseHas;
    }
    var has_1;
    var hasRequiredHas;
    function requireHas() {
        if (hasRequiredHas) return has_1;
        hasRequiredHas = 1;
        var baseHas = require_baseHas(), hasPath = require_hasPath();
        function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
        }
        has_1 = has;
        return has_1;
    }
    var isEmpty_1;
    var hasRequiredIsEmpty;
    function requireIsEmpty() {
        if (hasRequiredIsEmpty) return isEmpty_1;
        hasRequiredIsEmpty = 1;
        var baseKeys = require_baseKeys(), getTag = require_getTag(), isArguments = requireIsArguments(), isArray = requireIsArray(), isArrayLike = requireIsArrayLike(), isBuffer = requireIsBuffer(), isPrototype = require_isPrototype(), isTypedArray = requireIsTypedArray();
        var mapTag = "[object Map]", setTag = "[object Set]";
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function isEmpty(value) {
            if (value == null) {
                return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
                return !value.size;
            }
            if (isPrototype(value)) {
                return !baseKeys(value).length;
            }
            for (var key in value) {
                if (hasOwnProperty.call(value, key)) {
                    return false;
                }
            }
            return true;
        }
        isEmpty_1 = isEmpty;
        return isEmpty_1;
    }
    var isUndefined_1;
    var hasRequiredIsUndefined;
    function requireIsUndefined() {
        if (hasRequiredIsUndefined) return isUndefined_1;
        hasRequiredIsUndefined = 1;
        function isUndefined(value) {
            return value === undefined;
        }
        isUndefined_1 = isUndefined;
        return isUndefined_1;
    }
    var _baseMap;
    var hasRequired_baseMap;
    function require_baseMap() {
        if (hasRequired_baseMap) return _baseMap;
        hasRequired_baseMap = 1;
        var baseEach = require_baseEach(), isArrayLike = requireIsArrayLike();
        function baseMap(collection, iteratee) {
            var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, (function(value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            }));
            return result;
        }
        _baseMap = baseMap;
        return _baseMap;
    }
    var map_1;
    var hasRequiredMap;
    function requireMap() {
        if (hasRequiredMap) return map_1;
        hasRequiredMap = 1;
        var arrayMap = require_arrayMap(), baseIteratee = require_baseIteratee(), baseMap = require_baseMap(), isArray = requireIsArray();
        function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, baseIteratee(iteratee, 3));
        }
        map_1 = map;
        return map_1;
    }
    var _arrayReduce;
    var hasRequired_arrayReduce;
    function require_arrayReduce() {
        if (hasRequired_arrayReduce) return _arrayReduce;
        hasRequired_arrayReduce = 1;
        function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1, length = array == null ? 0 : array.length;
            if (initAccum && length) {
                accumulator = array[++index];
            }
            while (++index < length) {
                accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
        }
        _arrayReduce = arrayReduce;
        return _arrayReduce;
    }
    var _baseReduce;
    var hasRequired_baseReduce;
    function require_baseReduce() {
        if (hasRequired_baseReduce) return _baseReduce;
        hasRequired_baseReduce = 1;
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
            eachFunc(collection, (function(value, index, collection) {
                accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
            }));
            return accumulator;
        }
        _baseReduce = baseReduce;
        return _baseReduce;
    }
    var reduce_1;
    var hasRequiredReduce;
    function requireReduce() {
        if (hasRequiredReduce) return reduce_1;
        hasRequiredReduce = 1;
        var arrayReduce = require_arrayReduce(), baseEach = require_baseEach(), baseIteratee = require_baseIteratee(), baseReduce = require_baseReduce(), isArray = requireIsArray();
        function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
        reduce_1 = reduce;
        return reduce_1;
    }
    var isString_1;
    var hasRequiredIsString;
    function requireIsString() {
        if (hasRequiredIsString) return isString_1;
        hasRequiredIsString = 1;
        var baseGetTag = require_baseGetTag(), isArray = requireIsArray(), isObjectLike = requireIsObjectLike();
        var stringTag = "[object String]";
        function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        isString_1 = isString;
        return isString_1;
    }
    var _asciiSize;
    var hasRequired_asciiSize;
    function require_asciiSize() {
        if (hasRequired_asciiSize) return _asciiSize;
        hasRequired_asciiSize = 1;
        var baseProperty = require_baseProperty();
        var asciiSize = baseProperty("length");
        _asciiSize = asciiSize;
        return _asciiSize;
    }
    var _hasUnicode;
    var hasRequired_hasUnicode;
    function require_hasUnicode() {
        if (hasRequired_hasUnicode) return _hasUnicode;
        hasRequired_hasUnicode = 1;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
        var rsZWJ = "\\u200d";
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        function hasUnicode(string) {
            return reHasUnicode.test(string);
        }
        _hasUnicode = hasUnicode;
        return _hasUnicode;
    }
    var _unicodeSize;
    var hasRequired_unicodeSize;
    function require_unicodeSize() {
        if (hasRequired_unicodeSize) return _unicodeSize;
        hasRequired_unicodeSize = 1;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
        var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
        var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [ rsNonAstral, rsRegional, rsSurrPair ].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [ rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral ].join("|") + ")";
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        function unicodeSize(string) {
            var result = reUnicode.lastIndex = 0;
            while (reUnicode.test(string)) {
                ++result;
            }
            return result;
        }
        _unicodeSize = unicodeSize;
        return _unicodeSize;
    }
    var _stringSize;
    var hasRequired_stringSize;
    function require_stringSize() {
        if (hasRequired_stringSize) return _stringSize;
        hasRequired_stringSize = 1;
        var asciiSize = require_asciiSize(), hasUnicode = require_hasUnicode(), unicodeSize = require_unicodeSize();
        function stringSize(string) {
            return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        _stringSize = stringSize;
        return _stringSize;
    }
    var size_1;
    var hasRequiredSize;
    function requireSize() {
        if (hasRequiredSize) return size_1;
        hasRequiredSize = 1;
        var baseKeys = require_baseKeys(), getTag = require_getTag(), isArrayLike = requireIsArrayLike(), isString = requireIsString(), stringSize = require_stringSize();
        var mapTag = "[object Map]", setTag = "[object Set]";
        function size(collection) {
            if (collection == null) {
                return 0;
            }
            if (isArrayLike(collection)) {
                return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
                return collection.size;
            }
            return baseKeys(collection).length;
        }
        size_1 = size;
        return size_1;
    }
    var transform_1;
    var hasRequiredTransform;
    function requireTransform() {
        if (hasRequiredTransform) return transform_1;
        hasRequiredTransform = 1;
        var arrayEach = require_arrayEach(), baseCreate = require_baseCreate(), baseForOwn = require_baseForOwn(), baseIteratee = require_baseIteratee(), getPrototype = require_getPrototype(), isArray = requireIsArray(), isBuffer = requireIsBuffer(), isFunction = requireIsFunction(), isObject = requireIsObject(), isTypedArray = requireIsTypedArray();
        function transform(object, iteratee, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee = baseIteratee(iteratee, 4);
            if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) {
                    accumulator = isArr ? new Ctor : [];
                } else if (isObject(object)) {
                    accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                } else {
                    accumulator = {};
                }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, (function(value, index, object) {
                return iteratee(accumulator, value, index, object);
            }));
            return accumulator;
        }
        transform_1 = transform;
        return transform_1;
    }
    var _isFlattenable;
    var hasRequired_isFlattenable;
    function require_isFlattenable() {
        if (hasRequired_isFlattenable) return _isFlattenable;
        hasRequired_isFlattenable = 1;
        var Symbol = require_Symbol(), isArguments = requireIsArguments(), isArray = requireIsArray();
        var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;
        function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        _isFlattenable = isFlattenable;
        return _isFlattenable;
    }
    var _baseFlatten;
    var hasRequired_baseFlatten;
    function require_baseFlatten() {
        if (hasRequired_baseFlatten) return _baseFlatten;
        hasRequired_baseFlatten = 1;
        var arrayPush = require_arrayPush(), isFlattenable = require_isFlattenable();
        function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) {
                        baseFlatten(value, depth - 1, predicate, isStrict, result);
                    } else {
                        arrayPush(result, value);
                    }
                } else if (!isStrict) {
                    result[result.length] = value;
                }
            }
            return result;
        }
        _baseFlatten = baseFlatten;
        return _baseFlatten;
    }
    var _apply;
    var hasRequired_apply;
    function require_apply() {
        if (hasRequired_apply) return _apply;
        hasRequired_apply = 1;
        function apply(func, thisArg, args) {
            switch (args.length) {
              case 0:
                return func.call(thisArg);

              case 1:
                return func.call(thisArg, args[0]);

              case 2:
                return func.call(thisArg, args[0], args[1]);

              case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
        }
        _apply = apply;
        return _apply;
    }
    var _overRest;
    var hasRequired_overRest;
    function require_overRest() {
        if (hasRequired_overRest) return _overRest;
        hasRequired_overRest = 1;
        var apply = require_apply();
        var nativeMax = Math.max;
        function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function() {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                while (++index < length) {
                    array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                    otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        _overRest = overRest;
        return _overRest;
    }
    var _baseSetToString;
    var hasRequired_baseSetToString;
    function require_baseSetToString() {
        if (hasRequired_baseSetToString) return _baseSetToString;
        hasRequired_baseSetToString = 1;
        var constant = requireConstant(), defineProperty = require_defineProperty(), identity = requireIdentity();
        var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
                configurable: true,
                enumerable: false,
                value: constant(string),
                writable: true
            });
        };
        _baseSetToString = baseSetToString;
        return _baseSetToString;
    }
    var _shortOut;
    var hasRequired_shortOut;
    function require_shortOut() {
        if (hasRequired_shortOut) return _shortOut;
        hasRequired_shortOut = 1;
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var nativeNow = Date.now;
        function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) {
                        return arguments[0];
                    }
                } else {
                    count = 0;
                }
                return func.apply(undefined, arguments);
            };
        }
        _shortOut = shortOut;
        return _shortOut;
    }
    var _setToString;
    var hasRequired_setToString;
    function require_setToString() {
        if (hasRequired_setToString) return _setToString;
        hasRequired_setToString = 1;
        var baseSetToString = require_baseSetToString(), shortOut = require_shortOut();
        var setToString = shortOut(baseSetToString);
        _setToString = setToString;
        return _setToString;
    }
    var _baseRest;
    var hasRequired_baseRest;
    function require_baseRest() {
        if (hasRequired_baseRest) return _baseRest;
        hasRequired_baseRest = 1;
        var identity = requireIdentity(), overRest = require_overRest(), setToString = require_setToString();
        function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
        }
        _baseRest = baseRest;
        return _baseRest;
    }
    var _baseFindIndex;
    var hasRequired_baseFindIndex;
    function require_baseFindIndex() {
        if (hasRequired_baseFindIndex) return _baseFindIndex;
        hasRequired_baseFindIndex = 1;
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
            while (fromRight ? index-- : ++index < length) {
                if (predicate(array[index], index, array)) {
                    return index;
                }
            }
            return -1;
        }
        _baseFindIndex = baseFindIndex;
        return _baseFindIndex;
    }
    var _baseIsNaN;
    var hasRequired_baseIsNaN;
    function require_baseIsNaN() {
        if (hasRequired_baseIsNaN) return _baseIsNaN;
        hasRequired_baseIsNaN = 1;
        function baseIsNaN(value) {
            return value !== value;
        }
        _baseIsNaN = baseIsNaN;
        return _baseIsNaN;
    }
    var _strictIndexOf;
    var hasRequired_strictIndexOf;
    function require_strictIndexOf() {
        if (hasRequired_strictIndexOf) return _strictIndexOf;
        hasRequired_strictIndexOf = 1;
        function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1, length = array.length;
            while (++index < length) {
                if (array[index] === value) {
                    return index;
                }
            }
            return -1;
        }
        _strictIndexOf = strictIndexOf;
        return _strictIndexOf;
    }
    var _baseIndexOf;
    var hasRequired_baseIndexOf;
    function require_baseIndexOf() {
        if (hasRequired_baseIndexOf) return _baseIndexOf;
        hasRequired_baseIndexOf = 1;
        var baseFindIndex = require_baseFindIndex(), baseIsNaN = require_baseIsNaN(), strictIndexOf = require_strictIndexOf();
        function baseIndexOf(array, value, fromIndex) {
            return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        _baseIndexOf = baseIndexOf;
        return _baseIndexOf;
    }
    var _arrayIncludes;
    var hasRequired_arrayIncludes;
    function require_arrayIncludes() {
        if (hasRequired_arrayIncludes) return _arrayIncludes;
        hasRequired_arrayIncludes = 1;
        var baseIndexOf = require_baseIndexOf();
        function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
        }
        _arrayIncludes = arrayIncludes;
        return _arrayIncludes;
    }
    var _arrayIncludesWith;
    var hasRequired_arrayIncludesWith;
    function require_arrayIncludesWith() {
        if (hasRequired_arrayIncludesWith) return _arrayIncludesWith;
        hasRequired_arrayIncludesWith = 1;
        function arrayIncludesWith(array, value, comparator) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
                if (comparator(value, array[index])) {
                    return true;
                }
            }
            return false;
        }
        _arrayIncludesWith = arrayIncludesWith;
        return _arrayIncludesWith;
    }
    var noop_1;
    var hasRequiredNoop;
    function requireNoop() {
        if (hasRequiredNoop) return noop_1;
        hasRequiredNoop = 1;
        function noop() {}
        noop_1 = noop;
        return noop_1;
    }
    var _createSet;
    var hasRequired_createSet;
    function require_createSet() {
        if (hasRequired_createSet) return _createSet;
        hasRequired_createSet = 1;
        var Set = require_Set(), noop = requireNoop(), setToArray = require_setToArray();
        var INFINITY = 1 / 0;
        var createSet = !(Set && 1 / setToArray(new Set([ , -0 ]))[1] == INFINITY) ? noop : function(values) {
            return new Set(values);
        };
        _createSet = createSet;
        return _createSet;
    }
    var _baseUniq;
    var hasRequired_baseUniq;
    function require_baseUniq() {
        if (hasRequired_baseUniq) return _baseUniq;
        hasRequired_baseUniq = 1;
        var SetCache = require_SetCache(), arrayIncludes = require_arrayIncludes(), arrayIncludesWith = require_arrayIncludesWith(), cacheHas = require_cacheHas(), createSet = require_createSet(), setToArray = require_setToArray();
        var LARGE_ARRAY_SIZE = 200;
        function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
            if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) {
                    return setToArray(set);
                }
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache;
            } else {
                seen = iteratee ? [] : result;
            }
            outer: while (++index < length) {
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var seenIndex = seen.length;
                    while (seenIndex--) {
                        if (seen[seenIndex] === computed) {
                            continue outer;
                        }
                    }
                    if (iteratee) {
                        seen.push(computed);
                    }
                    result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                    if (seen !== result) {
                        seen.push(computed);
                    }
                    result.push(value);
                }
            }
            return result;
        }
        _baseUniq = baseUniq;
        return _baseUniq;
    }
    var isArrayLikeObject_1;
    var hasRequiredIsArrayLikeObject;
    function requireIsArrayLikeObject() {
        if (hasRequiredIsArrayLikeObject) return isArrayLikeObject_1;
        hasRequiredIsArrayLikeObject = 1;
        var isArrayLike = requireIsArrayLike(), isObjectLike = requireIsObjectLike();
        function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        isArrayLikeObject_1 = isArrayLikeObject;
        return isArrayLikeObject_1;
    }
    var union_1;
    var hasRequiredUnion;
    function requireUnion() {
        if (hasRequiredUnion) return union_1;
        hasRequiredUnion = 1;
        var baseFlatten = require_baseFlatten(), baseRest = require_baseRest(), baseUniq = require_baseUniq(), isArrayLikeObject = requireIsArrayLikeObject();
        var union = baseRest((function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        }));
        union_1 = union;
        return union_1;
    }
    var _baseValues;
    var hasRequired_baseValues;
    function require_baseValues() {
        if (hasRequired_baseValues) return _baseValues;
        hasRequired_baseValues = 1;
        var arrayMap = require_arrayMap();
        function baseValues(object, props) {
            return arrayMap(props, (function(key) {
                return object[key];
            }));
        }
        _baseValues = baseValues;
        return _baseValues;
    }
    var values_1;
    var hasRequiredValues;
    function requireValues() {
        if (hasRequiredValues) return values_1;
        hasRequiredValues = 1;
        var baseValues = require_baseValues(), keys = requireKeys();
        function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
        }
        values_1 = values;
        return values_1;
    }
    var lodash_1$1;
    var hasRequiredLodash;
    function requireLodash() {
        if (hasRequiredLodash) return lodash_1$1;
        hasRequiredLodash = 1;
        var lodash;
        if (typeof commonjsRequire === "function") {
            try {
                lodash = {
                    clone: requireClone(),
                    constant: requireConstant(),
                    each: requireEach(),
                    filter: requireFilter(),
                    has: requireHas(),
                    isArray: requireIsArray(),
                    isEmpty: requireIsEmpty(),
                    isFunction: requireIsFunction(),
                    isUndefined: requireIsUndefined(),
                    keys: requireKeys(),
                    map: requireMap(),
                    reduce: requireReduce(),
                    size: requireSize(),
                    transform: requireTransform(),
                    union: requireUnion(),
                    values: requireValues()
                };
            } catch (e) {}
        }
        if (!lodash) {
            lodash = window._;
        }
        lodash_1$1 = lodash;
        return lodash_1$1;
    }
    var graph;
    var hasRequiredGraph;
    function requireGraph() {
        if (hasRequiredGraph) return graph;
        hasRequiredGraph = 1;
        var _ = requireLodash();
        graph = Graph;
        var DEFAULT_EDGE_NAME = "\0";
        var GRAPH_NODE = "\0";
        var EDGE_KEY_DELIM = "";
        function Graph(opts) {
            this._isDirected = _.has(opts, "directed") ? opts.directed : true;
            this._isMultigraph = _.has(opts, "multigraph") ? opts.multigraph : false;
            this._isCompound = _.has(opts, "compound") ? opts.compound : false;
            this._label = undefined;
            this._defaultNodeLabelFn = _.constant(undefined);
            this._defaultEdgeLabelFn = _.constant(undefined);
            this._nodes = {};
            if (this._isCompound) {
                this._parent = {};
                this._children = {};
                this._children[GRAPH_NODE] = {};
            }
            this._in = {};
            this._preds = {};
            this._out = {};
            this._sucs = {};
            this._edgeObjs = {};
            this._edgeLabels = {};
        }
        Graph.prototype._nodeCount = 0;
        Graph.prototype._edgeCount = 0;
        Graph.prototype.isDirected = function() {
            return this._isDirected;
        };
        Graph.prototype.isMultigraph = function() {
            return this._isMultigraph;
        };
        Graph.prototype.isCompound = function() {
            return this._isCompound;
        };
        Graph.prototype.setGraph = function(label) {
            this._label = label;
            return this;
        };
        Graph.prototype.graph = function() {
            return this._label;
        };
        Graph.prototype.setDefaultNodeLabel = function(newDefault) {
            if (!_.isFunction(newDefault)) {
                newDefault = _.constant(newDefault);
            }
            this._defaultNodeLabelFn = newDefault;
            return this;
        };
        Graph.prototype.nodeCount = function() {
            return this._nodeCount;
        };
        Graph.prototype.nodes = function() {
            return _.keys(this._nodes);
        };
        Graph.prototype.sources = function() {
            var self = this;
            return _.filter(this.nodes(), (function(v) {
                return _.isEmpty(self._in[v]);
            }));
        };
        Graph.prototype.sinks = function() {
            var self = this;
            return _.filter(this.nodes(), (function(v) {
                return _.isEmpty(self._out[v]);
            }));
        };
        Graph.prototype.setNodes = function(vs, value) {
            var args = arguments;
            var self = this;
            _.each(vs, (function(v) {
                if (args.length > 1) {
                    self.setNode(v, value);
                } else {
                    self.setNode(v);
                }
            }));
            return this;
        };
        Graph.prototype.setNode = function(v, value) {
            if (_.has(this._nodes, v)) {
                if (arguments.length > 1) {
                    this._nodes[v] = value;
                }
                return this;
            }
            this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);
            if (this._isCompound) {
                this._parent[v] = GRAPH_NODE;
                this._children[v] = {};
                this._children[GRAPH_NODE][v] = true;
            }
            this._in[v] = {};
            this._preds[v] = {};
            this._out[v] = {};
            this._sucs[v] = {};
            ++this._nodeCount;
            return this;
        };
        Graph.prototype.node = function(v) {
            return this._nodes[v];
        };
        Graph.prototype.hasNode = function(v) {
            return _.has(this._nodes, v);
        };
        Graph.prototype.removeNode = function(v) {
            var self = this;
            if (_.has(this._nodes, v)) {
                var removeEdge = function(e) {
                    self.removeEdge(self._edgeObjs[e]);
                };
                delete this._nodes[v];
                if (this._isCompound) {
                    this._removeFromParentsChildList(v);
                    delete this._parent[v];
                    _.each(this.children(v), (function(child) {
                        self.setParent(child);
                    }));
                    delete this._children[v];
                }
                _.each(_.keys(this._in[v]), removeEdge);
                delete this._in[v];
                delete this._preds[v];
                _.each(_.keys(this._out[v]), removeEdge);
                delete this._out[v];
                delete this._sucs[v];
                --this._nodeCount;
            }
            return this;
        };
        Graph.prototype.setParent = function(v, parent) {
            if (!this._isCompound) {
                throw new Error("Cannot set parent in a non-compound graph");
            }
            if (_.isUndefined(parent)) {
                parent = GRAPH_NODE;
            } else {
                parent += "";
                for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {
                    if (ancestor === v) {
                        throw new Error("Setting " + parent + " as parent of " + v + " would create a cycle");
                    }
                }
                this.setNode(parent);
            }
            this.setNode(v);
            this._removeFromParentsChildList(v);
            this._parent[v] = parent;
            this._children[parent][v] = true;
            return this;
        };
        Graph.prototype._removeFromParentsChildList = function(v) {
            delete this._children[this._parent[v]][v];
        };
        Graph.prototype.parent = function(v) {
            if (this._isCompound) {
                var parent = this._parent[v];
                if (parent !== GRAPH_NODE) {
                    return parent;
                }
            }
        };
        Graph.prototype.children = function(v) {
            if (_.isUndefined(v)) {
                v = GRAPH_NODE;
            }
            if (this._isCompound) {
                var children = this._children[v];
                if (children) {
                    return _.keys(children);
                }
            } else if (v === GRAPH_NODE) {
                return this.nodes();
            } else if (this.hasNode(v)) {
                return [];
            }
        };
        Graph.prototype.predecessors = function(v) {
            var predsV = this._preds[v];
            if (predsV) {
                return _.keys(predsV);
            }
        };
        Graph.prototype.successors = function(v) {
            var sucsV = this._sucs[v];
            if (sucsV) {
                return _.keys(sucsV);
            }
        };
        Graph.prototype.neighbors = function(v) {
            var preds = this.predecessors(v);
            if (preds) {
                return _.union(preds, this.successors(v));
            }
        };
        Graph.prototype.isLeaf = function(v) {
            var neighbors;
            if (this.isDirected()) {
                neighbors = this.successors(v);
            } else {
                neighbors = this.neighbors(v);
            }
            return neighbors.length === 0;
        };
        Graph.prototype.filterNodes = function(filter) {
            var copy = new this.constructor({
                directed: this._isDirected,
                multigraph: this._isMultigraph,
                compound: this._isCompound
            });
            copy.setGraph(this.graph());
            var self = this;
            _.each(this._nodes, (function(value, v) {
                if (filter(v)) {
                    copy.setNode(v, value);
                }
            }));
            _.each(this._edgeObjs, (function(e) {
                if (copy.hasNode(e.v) && copy.hasNode(e.w)) {
                    copy.setEdge(e, self.edge(e));
                }
            }));
            var parents = {};
            function findParent(v) {
                var parent = self.parent(v);
                if (parent === undefined || copy.hasNode(parent)) {
                    parents[v] = parent;
                    return parent;
                } else if (parent in parents) {
                    return parents[parent];
                } else {
                    return findParent(parent);
                }
            }
            if (this._isCompound) {
                _.each(copy.nodes(), (function(v) {
                    copy.setParent(v, findParent(v));
                }));
            }
            return copy;
        };
        Graph.prototype.setDefaultEdgeLabel = function(newDefault) {
            if (!_.isFunction(newDefault)) {
                newDefault = _.constant(newDefault);
            }
            this._defaultEdgeLabelFn = newDefault;
            return this;
        };
        Graph.prototype.edgeCount = function() {
            return this._edgeCount;
        };
        Graph.prototype.edges = function() {
            return _.values(this._edgeObjs);
        };
        Graph.prototype.setPath = function(vs, value) {
            var self = this;
            var args = arguments;
            _.reduce(vs, (function(v, w) {
                if (args.length > 1) {
                    self.setEdge(v, w, value);
                } else {
                    self.setEdge(v, w);
                }
                return w;
            }));
            return this;
        };
        Graph.prototype.setEdge = function() {
            var v, w, name, value;
            var valueSpecified = false;
            var arg0 = arguments[0];
            if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
                v = arg0.v;
                w = arg0.w;
                name = arg0.name;
                if (arguments.length === 2) {
                    value = arguments[1];
                    valueSpecified = true;
                }
            } else {
                v = arg0;
                w = arguments[1];
                name = arguments[3];
                if (arguments.length > 2) {
                    value = arguments[2];
                    valueSpecified = true;
                }
            }
            v = "" + v;
            w = "" + w;
            if (!_.isUndefined(name)) {
                name = "" + name;
            }
            var e = edgeArgsToId(this._isDirected, v, w, name);
            if (_.has(this._edgeLabels, e)) {
                if (valueSpecified) {
                    this._edgeLabels[e] = value;
                }
                return this;
            }
            if (!_.isUndefined(name) && !this._isMultigraph) {
                throw new Error("Cannot set a named edge when isMultigraph = false");
            }
            this.setNode(v);
            this.setNode(w);
            this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);
            var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);
            v = edgeObj.v;
            w = edgeObj.w;
            Object.freeze(edgeObj);
            this._edgeObjs[e] = edgeObj;
            incrementOrInitEntry(this._preds[w], v);
            incrementOrInitEntry(this._sucs[v], w);
            this._in[w][e] = edgeObj;
            this._out[v][e] = edgeObj;
            this._edgeCount++;
            return this;
        };
        Graph.prototype.edge = function(v, w, name) {
            var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);
            return this._edgeLabels[e];
        };
        Graph.prototype.hasEdge = function(v, w, name) {
            var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);
            return _.has(this._edgeLabels, e);
        };
        Graph.prototype.removeEdge = function(v, w, name) {
            var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);
            var edge = this._edgeObjs[e];
            if (edge) {
                v = edge.v;
                w = edge.w;
                delete this._edgeLabels[e];
                delete this._edgeObjs[e];
                decrementOrRemoveEntry(this._preds[w], v);
                decrementOrRemoveEntry(this._sucs[v], w);
                delete this._in[w][e];
                delete this._out[v][e];
                this._edgeCount--;
            }
            return this;
        };
        Graph.prototype.inEdges = function(v, u) {
            var inV = this._in[v];
            if (inV) {
                var edges = _.values(inV);
                if (!u) {
                    return edges;
                }
                return _.filter(edges, (function(edge) {
                    return edge.v === u;
                }));
            }
        };
        Graph.prototype.outEdges = function(v, w) {
            var outV = this._out[v];
            if (outV) {
                var edges = _.values(outV);
                if (!w) {
                    return edges;
                }
                return _.filter(edges, (function(edge) {
                    return edge.w === w;
                }));
            }
        };
        Graph.prototype.nodeEdges = function(v, w) {
            var inEdges = this.inEdges(v, w);
            if (inEdges) {
                return inEdges.concat(this.outEdges(v, w));
            }
        };
        function incrementOrInitEntry(map, k) {
            if (map[k]) {
                map[k]++;
            } else {
                map[k] = 1;
            }
        }
        function decrementOrRemoveEntry(map, k) {
            if (!--map[k]) {
                delete map[k];
            }
        }
        function edgeArgsToId(isDirected, v_, w_, name) {
            var v = "" + v_;
            var w = "" + w_;
            if (!isDirected && v > w) {
                var tmp = v;
                v = w;
                w = tmp;
            }
            return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);
        }
        function edgeArgsToObj(isDirected, v_, w_, name) {
            var v = "" + v_;
            var w = "" + w_;
            if (!isDirected && v > w) {
                var tmp = v;
                v = w;
                w = tmp;
            }
            var edgeObj = {
                v: v,
                w: w
            };
            if (name) {
                edgeObj.name = name;
            }
            return edgeObj;
        }
        function edgeObjToId(isDirected, edgeObj) {
            return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
        }
        return graph;
    }
    var version$1;
    var hasRequiredVersion;
    function requireVersion() {
        if (hasRequiredVersion) return version$1;
        hasRequiredVersion = 1;
        version$1 = "2.1.8";
        return version$1;
    }
    var lib;
    var hasRequiredLib;
    function requireLib() {
        if (hasRequiredLib) return lib;
        hasRequiredLib = 1;
        lib = {
            Graph: requireGraph(),
            version: requireVersion()
        };
        return lib;
    }
    var json;
    var hasRequiredJson;
    function requireJson() {
        if (hasRequiredJson) return json;
        hasRequiredJson = 1;
        var _ = requireLodash();
        var Graph = requireGraph();
        json = {
            write: write,
            read: read
        };
        function write(g) {
            var json = {
                options: {
                    directed: g.isDirected(),
                    multigraph: g.isMultigraph(),
                    compound: g.isCompound()
                },
                nodes: writeNodes(g),
                edges: writeEdges(g)
            };
            if (!_.isUndefined(g.graph())) {
                json.value = _.clone(g.graph());
            }
            return json;
        }
        function writeNodes(g) {
            return _.map(g.nodes(), (function(v) {
                var nodeValue = g.node(v);
                var parent = g.parent(v);
                var node = {
                    v: v
                };
                if (!_.isUndefined(nodeValue)) {
                    node.value = nodeValue;
                }
                if (!_.isUndefined(parent)) {
                    node.parent = parent;
                }
                return node;
            }));
        }
        function writeEdges(g) {
            return _.map(g.edges(), (function(e) {
                var edgeValue = g.edge(e);
                var edge = {
                    v: e.v,
                    w: e.w
                };
                if (!_.isUndefined(e.name)) {
                    edge.name = e.name;
                }
                if (!_.isUndefined(edgeValue)) {
                    edge.value = edgeValue;
                }
                return edge;
            }));
        }
        function read(json) {
            var g = new Graph(json.options).setGraph(json.value);
            _.each(json.nodes, (function(entry) {
                g.setNode(entry.v, entry.value);
                if (entry.parent) {
                    g.setParent(entry.v, entry.parent);
                }
            }));
            _.each(json.edges, (function(entry) {
                g.setEdge({
                    v: entry.v,
                    w: entry.w,
                    name: entry.name
                }, entry.value);
            }));
            return g;
        }
        return json;
    }
    var components_1;
    var hasRequiredComponents;
    function requireComponents() {
        if (hasRequiredComponents) return components_1;
        hasRequiredComponents = 1;
        var _ = requireLodash();
        components_1 = components;
        function components(g) {
            var visited = {};
            var cmpts = [];
            var cmpt;
            function dfs(v) {
                if (_.has(visited, v)) return;
                visited[v] = true;
                cmpt.push(v);
                _.each(g.successors(v), dfs);
                _.each(g.predecessors(v), dfs);
            }
            _.each(g.nodes(), (function(v) {
                cmpt = [];
                dfs(v);
                if (cmpt.length) {
                    cmpts.push(cmpt);
                }
            }));
            return cmpts;
        }
        return components_1;
    }
    var priorityQueue;
    var hasRequiredPriorityQueue;
    function requirePriorityQueue() {
        if (hasRequiredPriorityQueue) return priorityQueue;
        hasRequiredPriorityQueue = 1;
        var _ = requireLodash();
        priorityQueue = PriorityQueue;
        function PriorityQueue() {
            this._arr = [];
            this._keyIndices = {};
        }
        PriorityQueue.prototype.size = function() {
            return this._arr.length;
        };
        PriorityQueue.prototype.keys = function() {
            return this._arr.map((function(x) {
                return x.key;
            }));
        };
        PriorityQueue.prototype.has = function(key) {
            return _.has(this._keyIndices, key);
        };
        PriorityQueue.prototype.priority = function(key) {
            var index = this._keyIndices[key];
            if (index !== undefined) {
                return this._arr[index].priority;
            }
        };
        PriorityQueue.prototype.min = function() {
            if (this.size() === 0) {
                throw new Error("Queue underflow");
            }
            return this._arr[0].key;
        };
        PriorityQueue.prototype.add = function(key, priority) {
            var keyIndices = this._keyIndices;
            key = String(key);
            if (!_.has(keyIndices, key)) {
                var arr = this._arr;
                var index = arr.length;
                keyIndices[key] = index;
                arr.push({
                    key: key,
                    priority: priority
                });
                this._decrease(index);
                return true;
            }
            return false;
        };
        PriorityQueue.prototype.removeMin = function() {
            this._swap(0, this._arr.length - 1);
            var min = this._arr.pop();
            delete this._keyIndices[min.key];
            this._heapify(0);
            return min.key;
        };
        PriorityQueue.prototype.decrease = function(key, priority) {
            var index = this._keyIndices[key];
            if (priority > this._arr[index].priority) {
                throw new Error("New priority is greater than current priority. " + "Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority);
            }
            this._arr[index].priority = priority;
            this._decrease(index);
        };
        PriorityQueue.prototype._heapify = function(i) {
            var arr = this._arr;
            var l = 2 * i;
            var r = l + 1;
            var largest = i;
            if (l < arr.length) {
                largest = arr[l].priority < arr[largest].priority ? l : largest;
                if (r < arr.length) {
                    largest = arr[r].priority < arr[largest].priority ? r : largest;
                }
                if (largest !== i) {
                    this._swap(i, largest);
                    this._heapify(largest);
                }
            }
        };
        PriorityQueue.prototype._decrease = function(index) {
            var arr = this._arr;
            var priority = arr[index].priority;
            var parent;
            while (index !== 0) {
                parent = index >> 1;
                if (arr[parent].priority < priority) {
                    break;
                }
                this._swap(index, parent);
                index = parent;
            }
        };
        PriorityQueue.prototype._swap = function(i, j) {
            var arr = this._arr;
            var keyIndices = this._keyIndices;
            var origArrI = arr[i];
            var origArrJ = arr[j];
            arr[i] = origArrJ;
            arr[j] = origArrI;
            keyIndices[origArrJ.key] = i;
            keyIndices[origArrI.key] = j;
        };
        return priorityQueue;
    }
    var dijkstra_1;
    var hasRequiredDijkstra;
    function requireDijkstra() {
        if (hasRequiredDijkstra) return dijkstra_1;
        hasRequiredDijkstra = 1;
        var _ = requireLodash();
        var PriorityQueue = requirePriorityQueue();
        dijkstra_1 = dijkstra;
        var DEFAULT_WEIGHT_FUNC = _.constant(1);
        function dijkstra(g, source, weightFn, edgeFn) {
            return runDijkstra(g, String(source), weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function(v) {
                return g.outEdges(v);
            });
        }
        function runDijkstra(g, source, weightFn, edgeFn) {
            var results = {};
            var pq = new PriorityQueue;
            var v, vEntry;
            var updateNeighbors = function(edge) {
                var w = edge.v !== v ? edge.v : edge.w;
                var wEntry = results[w];
                var weight = weightFn(edge);
                var distance = vEntry.distance + weight;
                if (weight < 0) {
                    throw new Error("dijkstra does not allow negative edge weights. " + "Bad edge: " + edge + " Weight: " + weight);
                }
                if (distance < wEntry.distance) {
                    wEntry.distance = distance;
                    wEntry.predecessor = v;
                    pq.decrease(w, distance);
                }
            };
            g.nodes().forEach((function(v) {
                var distance = v === source ? 0 : Number.POSITIVE_INFINITY;
                results[v] = {
                    distance: distance
                };
                pq.add(v, distance);
            }));
            while (pq.size() > 0) {
                v = pq.removeMin();
                vEntry = results[v];
                if (vEntry.distance === Number.POSITIVE_INFINITY) {
                    break;
                }
                edgeFn(v).forEach(updateNeighbors);
            }
            return results;
        }
        return dijkstra_1;
    }
    var dijkstraAll_1;
    var hasRequiredDijkstraAll;
    function requireDijkstraAll() {
        if (hasRequiredDijkstraAll) return dijkstraAll_1;
        hasRequiredDijkstraAll = 1;
        var dijkstra = requireDijkstra();
        var _ = requireLodash();
        dijkstraAll_1 = dijkstraAll;
        function dijkstraAll(g, weightFunc, edgeFunc) {
            return _.transform(g.nodes(), (function(acc, v) {
                acc[v] = dijkstra(g, v, weightFunc, edgeFunc);
            }), {});
        }
        return dijkstraAll_1;
    }
    var tarjan_1;
    var hasRequiredTarjan;
    function requireTarjan() {
        if (hasRequiredTarjan) return tarjan_1;
        hasRequiredTarjan = 1;
        var _ = requireLodash();
        tarjan_1 = tarjan;
        function tarjan(g) {
            var index = 0;
            var stack = [];
            var visited = {};
            var results = [];
            function dfs(v) {
                var entry = visited[v] = {
                    onStack: true,
                    lowlink: index,
                    index: index++
                };
                stack.push(v);
                g.successors(v).forEach((function(w) {
                    if (!_.has(visited, w)) {
                        dfs(w);
                        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);
                    } else if (visited[w].onStack) {
                        entry.lowlink = Math.min(entry.lowlink, visited[w].index);
                    }
                }));
                if (entry.lowlink === entry.index) {
                    var cmpt = [];
                    var w;
                    do {
                        w = stack.pop();
                        visited[w].onStack = false;
                        cmpt.push(w);
                    } while (v !== w);
                    results.push(cmpt);
                }
            }
            g.nodes().forEach((function(v) {
                if (!_.has(visited, v)) {
                    dfs(v);
                }
            }));
            return results;
        }
        return tarjan_1;
    }
    var findCycles_1;
    var hasRequiredFindCycles;
    function requireFindCycles() {
        if (hasRequiredFindCycles) return findCycles_1;
        hasRequiredFindCycles = 1;
        var _ = requireLodash();
        var tarjan = requireTarjan();
        findCycles_1 = findCycles;
        function findCycles(g) {
            return _.filter(tarjan(g), (function(cmpt) {
                return cmpt.length > 1 || cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]);
            }));
        }
        return findCycles_1;
    }
    var floydWarshall_1;
    var hasRequiredFloydWarshall;
    function requireFloydWarshall() {
        if (hasRequiredFloydWarshall) return floydWarshall_1;
        hasRequiredFloydWarshall = 1;
        var _ = requireLodash();
        floydWarshall_1 = floydWarshall;
        var DEFAULT_WEIGHT_FUNC = _.constant(1);
        function floydWarshall(g, weightFn, edgeFn) {
            return runFloydWarshall(g, weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function(v) {
                return g.outEdges(v);
            });
        }
        function runFloydWarshall(g, weightFn, edgeFn) {
            var results = {};
            var nodes = g.nodes();
            nodes.forEach((function(v) {
                results[v] = {};
                results[v][v] = {
                    distance: 0
                };
                nodes.forEach((function(w) {
                    if (v !== w) {
                        results[v][w] = {
                            distance: Number.POSITIVE_INFINITY
                        };
                    }
                }));
                edgeFn(v).forEach((function(edge) {
                    var w = edge.v === v ? edge.w : edge.v;
                    var d = weightFn(edge);
                    results[v][w] = {
                        distance: d,
                        predecessor: v
                    };
                }));
            }));
            nodes.forEach((function(k) {
                var rowK = results[k];
                nodes.forEach((function(i) {
                    var rowI = results[i];
                    nodes.forEach((function(j) {
                        var ik = rowI[k];
                        var kj = rowK[j];
                        var ij = rowI[j];
                        var altDistance = ik.distance + kj.distance;
                        if (altDistance < ij.distance) {
                            ij.distance = altDistance;
                            ij.predecessor = kj.predecessor;
                        }
                    }));
                }));
            }));
            return results;
        }
        return floydWarshall_1;
    }
    var topsort_1;
    var hasRequiredTopsort;
    function requireTopsort() {
        if (hasRequiredTopsort) return topsort_1;
        hasRequiredTopsort = 1;
        var _ = requireLodash();
        topsort_1 = topsort;
        topsort.CycleException = CycleException;
        function topsort(g) {
            var visited = {};
            var stack = {};
            var results = [];
            function visit(node) {
                if (_.has(stack, node)) {
                    throw new CycleException;
                }
                if (!_.has(visited, node)) {
                    stack[node] = true;
                    visited[node] = true;
                    _.each(g.predecessors(node), visit);
                    delete stack[node];
                    results.push(node);
                }
            }
            _.each(g.sinks(), visit);
            if (_.size(visited) !== g.nodeCount()) {
                throw new CycleException;
            }
            return results;
        }
        function CycleException() {}
        CycleException.prototype = new Error;
        return topsort_1;
    }
    var isAcyclic_1;
    var hasRequiredIsAcyclic;
    function requireIsAcyclic() {
        if (hasRequiredIsAcyclic) return isAcyclic_1;
        hasRequiredIsAcyclic = 1;
        var topsort = requireTopsort();
        isAcyclic_1 = isAcyclic;
        function isAcyclic(g) {
            try {
                topsort(g);
            } catch (e) {
                if (e instanceof topsort.CycleException) {
                    return false;
                }
                throw e;
            }
            return true;
        }
        return isAcyclic_1;
    }
    var dfs_1;
    var hasRequiredDfs;
    function requireDfs() {
        if (hasRequiredDfs) return dfs_1;
        hasRequiredDfs = 1;
        var _ = requireLodash();
        dfs_1 = dfs;
        function dfs(g, vs, order) {
            if (!_.isArray(vs)) {
                vs = [ vs ];
            }
            var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);
            var acc = [];
            var visited = {};
            _.each(vs, (function(v) {
                if (!g.hasNode(v)) {
                    throw new Error("Graph does not have node: " + v);
                }
                doDfs(g, v, order === "post", visited, navigation, acc);
            }));
            return acc;
        }
        function doDfs(g, v, postorder, visited, navigation, acc) {
            if (!_.has(visited, v)) {
                visited[v] = true;
                if (!postorder) {
                    acc.push(v);
                }
                _.each(navigation(v), (function(w) {
                    doDfs(g, w, postorder, visited, navigation, acc);
                }));
                if (postorder) {
                    acc.push(v);
                }
            }
        }
        return dfs_1;
    }
    var postorder_1;
    var hasRequiredPostorder;
    function requirePostorder() {
        if (hasRequiredPostorder) return postorder_1;
        hasRequiredPostorder = 1;
        var dfs = requireDfs();
        postorder_1 = postorder;
        function postorder(g, vs) {
            return dfs(g, vs, "post");
        }
        return postorder_1;
    }
    var preorder_1;
    var hasRequiredPreorder;
    function requirePreorder() {
        if (hasRequiredPreorder) return preorder_1;
        hasRequiredPreorder = 1;
        var dfs = requireDfs();
        preorder_1 = preorder;
        function preorder(g, vs) {
            return dfs(g, vs, "pre");
        }
        return preorder_1;
    }
    var prim_1;
    var hasRequiredPrim;
    function requirePrim() {
        if (hasRequiredPrim) return prim_1;
        hasRequiredPrim = 1;
        var _ = requireLodash();
        var Graph = requireGraph();
        var PriorityQueue = requirePriorityQueue();
        prim_1 = prim;
        function prim(g, weightFunc) {
            var result = new Graph;
            var parents = {};
            var pq = new PriorityQueue;
            var v;
            function updateNeighbors(edge) {
                var w = edge.v === v ? edge.w : edge.v;
                var pri = pq.priority(w);
                if (pri !== undefined) {
                    var edgeWeight = weightFunc(edge);
                    if (edgeWeight < pri) {
                        parents[w] = v;
                        pq.decrease(w, edgeWeight);
                    }
                }
            }
            if (g.nodeCount() === 0) {
                return result;
            }
            _.each(g.nodes(), (function(v) {
                pq.add(v, Number.POSITIVE_INFINITY);
                result.setNode(v);
            }));
            pq.decrease(g.nodes()[0], 0);
            var init = false;
            while (pq.size() > 0) {
                v = pq.removeMin();
                if (_.has(parents, v)) {
                    result.setEdge(v, parents[v]);
                } else if (init) {
                    throw new Error("Input graph is not connected: " + g);
                } else {
                    init = true;
                }
                g.nodeEdges(v).forEach(updateNeighbors);
            }
            return result;
        }
        return prim_1;
    }
    var alg;
    var hasRequiredAlg;
    function requireAlg() {
        if (hasRequiredAlg) return alg;
        hasRequiredAlg = 1;
        alg = {
            components: requireComponents(),
            dijkstra: requireDijkstra(),
            dijkstraAll: requireDijkstraAll(),
            findCycles: requireFindCycles(),
            floydWarshall: requireFloydWarshall(),
            isAcyclic: requireIsAcyclic(),
            postorder: requirePostorder(),
            preorder: requirePreorder(),
            prim: requirePrim(),
            tarjan: requireTarjan(),
            topsort: requireTopsort()
        };
        return alg;
    }
    var graphlib$1;
    var hasRequiredGraphlib;
    function requireGraphlib() {
        if (hasRequiredGraphlib) return graphlib$1;
        hasRequiredGraphlib = 1;
        var lib = requireLib();
        graphlib$1 = {
            Graph: lib.Graph,
            json: requireJson(),
            alg: requireAlg(),
            version: lib.version
        };
        return graphlib$1;
    }
    var graphlib;
    if (typeof commonjsRequire === "function") {
        try {
            graphlib = requireGraphlib();
        } catch (e) {}
    }
    if (!graphlib) {
        graphlib = window.graphlib;
    }
    var graphlib_1 = graphlib;
    var cloneDeep_1;
    var hasRequiredCloneDeep;
    function requireCloneDeep() {
        if (hasRequiredCloneDeep) return cloneDeep_1;
        hasRequiredCloneDeep = 1;
        var baseClone = require_baseClone();
        var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
        function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        cloneDeep_1 = cloneDeep;
        return cloneDeep_1;
    }
    var _isIterateeCall;
    var hasRequired_isIterateeCall;
    function require_isIterateeCall() {
        if (hasRequired_isIterateeCall) return _isIterateeCall;
        hasRequired_isIterateeCall = 1;
        var eq = requireEq(), isArrayLike = requireIsArrayLike(), isIndex = require_isIndex(), isObject = requireIsObject();
        function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
                return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
                return eq(object[index], value);
            }
            return false;
        }
        _isIterateeCall = isIterateeCall;
        return _isIterateeCall;
    }
    var defaults_1;
    var hasRequiredDefaults;
    function requireDefaults() {
        if (hasRequiredDefaults) return defaults_1;
        hasRequiredDefaults = 1;
        var baseRest = require_baseRest(), eq = requireEq(), isIterateeCall = require_isIterateeCall(), keysIn = requireKeysIn();
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var defaults = baseRest((function(object, sources) {
            object = Object(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                length = 1;
            }
            while (++index < length) {
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;
                while (++propsIndex < propsLength) {
                    var key = props[propsIndex];
                    var value = object[key];
                    if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                        object[key] = source[key];
                    }
                }
            }
            return object;
        }));
        defaults_1 = defaults;
        return defaults_1;
    }
    var _createFind;
    var hasRequired_createFind;
    function require_createFind() {
        if (hasRequired_createFind) return _createFind;
        hasRequired_createFind = 1;
        var baseIteratee = require_baseIteratee(), isArrayLike = requireIsArrayLike(), keys = requireKeys();
        function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = baseIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function(key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }
        _createFind = createFind;
        return _createFind;
    }
    var _trimmedEndIndex;
    var hasRequired_trimmedEndIndex;
    function require_trimmedEndIndex() {
        if (hasRequired_trimmedEndIndex) return _trimmedEndIndex;
        hasRequired_trimmedEndIndex = 1;
        var reWhitespace = /\s/;
        function trimmedEndIndex(string) {
            var index = string.length;
            while (index-- && reWhitespace.test(string.charAt(index))) {}
            return index;
        }
        _trimmedEndIndex = trimmedEndIndex;
        return _trimmedEndIndex;
    }
    var _baseTrim;
    var hasRequired_baseTrim;
    function require_baseTrim() {
        if (hasRequired_baseTrim) return _baseTrim;
        hasRequired_baseTrim = 1;
        var trimmedEndIndex = require_trimmedEndIndex();
        var reTrimStart = /^\s+/;
        function baseTrim(string) {
            return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        _baseTrim = baseTrim;
        return _baseTrim;
    }
    var toNumber_1;
    var hasRequiredToNumber;
    function requireToNumber() {
        if (hasRequiredToNumber) return toNumber_1;
        hasRequiredToNumber = 1;
        var baseTrim = require_baseTrim(), isObject = requireIsObject(), isSymbol = requireIsSymbol();
        var NAN = 0 / 0;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsOctal = /^0o[0-7]+$/i;
        var freeParseInt = parseInt;
        function toNumber(value) {
            if (typeof value == "number") {
                return value;
            }
            if (isSymbol(value)) {
                return NAN;
            }
            if (isObject(value)) {
                var other = typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
                return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        toNumber_1 = toNumber;
        return toNumber_1;
    }
    var toFinite_1;
    var hasRequiredToFinite;
    function requireToFinite() {
        if (hasRequiredToFinite) return toFinite_1;
        hasRequiredToFinite = 1;
        var toNumber = requireToNumber();
        var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
        function toFinite(value) {
            if (!value) {
                return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }
        toFinite_1 = toFinite;
        return toFinite_1;
    }
    var toInteger_1;
    var hasRequiredToInteger;
    function requireToInteger() {
        if (hasRequiredToInteger) return toInteger_1;
        hasRequiredToInteger = 1;
        var toFinite = requireToFinite();
        function toInteger(value) {
            var result = toFinite(value), remainder = result % 1;
            return result === result ? remainder ? result - remainder : result : 0;
        }
        toInteger_1 = toInteger;
        return toInteger_1;
    }
    var findIndex_1;
    var hasRequiredFindIndex;
    function requireFindIndex() {
        if (hasRequiredFindIndex) return findIndex_1;
        hasRequiredFindIndex = 1;
        var baseFindIndex = require_baseFindIndex(), baseIteratee = require_baseIteratee(), toInteger = requireToInteger();
        var nativeMax = Math.max;
        function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
                index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, baseIteratee(predicate, 3), index);
        }
        findIndex_1 = findIndex;
        return findIndex_1;
    }
    var find_1;
    var hasRequiredFind;
    function requireFind() {
        if (hasRequiredFind) return find_1;
        hasRequiredFind = 1;
        var createFind = require_createFind(), findIndex = requireFindIndex();
        var find = createFind(findIndex);
        find_1 = find;
        return find_1;
    }
    var flatten_1;
    var hasRequiredFlatten;
    function requireFlatten() {
        if (hasRequiredFlatten) return flatten_1;
        hasRequiredFlatten = 1;
        var baseFlatten = require_baseFlatten();
        function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
        }
        flatten_1 = flatten;
        return flatten_1;
    }
    var forIn_1;
    var hasRequiredForIn;
    function requireForIn() {
        if (hasRequiredForIn) return forIn_1;
        hasRequiredForIn = 1;
        var baseFor = require_baseFor(), castFunction = require_castFunction(), keysIn = requireKeysIn();
        function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, castFunction(iteratee), keysIn);
        }
        forIn_1 = forIn;
        return forIn_1;
    }
    var last_1;
    var hasRequiredLast;
    function requireLast() {
        if (hasRequiredLast) return last_1;
        hasRequiredLast = 1;
        function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }
        last_1 = last;
        return last_1;
    }
    var mapValues_1;
    var hasRequiredMapValues;
    function requireMapValues() {
        if (hasRequiredMapValues) return mapValues_1;
        hasRequiredMapValues = 1;
        var baseAssignValue = require_baseAssignValue(), baseForOwn = require_baseForOwn(), baseIteratee = require_baseIteratee();
        function mapValues(object, iteratee) {
            var result = {};
            iteratee = baseIteratee(iteratee, 3);
            baseForOwn(object, (function(value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            }));
            return result;
        }
        mapValues_1 = mapValues;
        return mapValues_1;
    }
    var _baseExtremum;
    var hasRequired_baseExtremum;
    function require_baseExtremum() {
        if (hasRequired_baseExtremum) return _baseExtremum;
        hasRequired_baseExtremum = 1;
        var isSymbol = requireIsSymbol();
        function baseExtremum(array, iteratee, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
                var value = array[index], current = iteratee(value);
                if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
                    var computed = current, result = value;
                }
            }
            return result;
        }
        _baseExtremum = baseExtremum;
        return _baseExtremum;
    }
    var _baseGt;
    var hasRequired_baseGt;
    function require_baseGt() {
        if (hasRequired_baseGt) return _baseGt;
        hasRequired_baseGt = 1;
        function baseGt(value, other) {
            return value > other;
        }
        _baseGt = baseGt;
        return _baseGt;
    }
    var max_1;
    var hasRequiredMax;
    function requireMax() {
        if (hasRequiredMax) return max_1;
        hasRequiredMax = 1;
        var baseExtremum = require_baseExtremum(), baseGt = require_baseGt(), identity = requireIdentity();
        function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        }
        max_1 = max;
        return max_1;
    }
    var _assignMergeValue;
    var hasRequired_assignMergeValue;
    function require_assignMergeValue() {
        if (hasRequired_assignMergeValue) return _assignMergeValue;
        hasRequired_assignMergeValue = 1;
        var baseAssignValue = require_baseAssignValue(), eq = requireEq();
        function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
                baseAssignValue(object, key, value);
            }
        }
        _assignMergeValue = assignMergeValue;
        return _assignMergeValue;
    }
    var isPlainObject_1;
    var hasRequiredIsPlainObject;
    function requireIsPlainObject() {
        if (hasRequiredIsPlainObject) return isPlainObject_1;
        hasRequiredIsPlainObject = 1;
        var baseGetTag = require_baseGetTag(), getPrototype = require_getPrototype(), isObjectLike = requireIsObjectLike();
        var objectTag = "[object Object]";
        var funcProto = Function.prototype, objectProto = Object.prototype;
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var objectCtorString = funcToString.call(Object);
        function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
                return true;
            }
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        isPlainObject_1 = isPlainObject;
        return isPlainObject_1;
    }
    var _safeGet;
    var hasRequired_safeGet;
    function require_safeGet() {
        if (hasRequired_safeGet) return _safeGet;
        hasRequired_safeGet = 1;
        function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
                return;
            }
            if (key == "__proto__") {
                return;
            }
            return object[key];
        }
        _safeGet = safeGet;
        return _safeGet;
    }
    var toPlainObject_1;
    var hasRequiredToPlainObject;
    function requireToPlainObject() {
        if (hasRequiredToPlainObject) return toPlainObject_1;
        hasRequiredToPlainObject = 1;
        var copyObject = require_copyObject(), keysIn = requireKeysIn();
        function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        toPlainObject_1 = toPlainObject;
        return toPlainObject_1;
    }
    var _baseMergeDeep;
    var hasRequired_baseMergeDeep;
    function require_baseMergeDeep() {
        if (hasRequired_baseMergeDeep) return _baseMergeDeep;
        hasRequired_baseMergeDeep = 1;
        var assignMergeValue = require_assignMergeValue(), cloneBuffer = require_cloneBuffer(), cloneTypedArray = require_cloneTypedArray(), copyArray = require_copyArray(), initCloneObject = require_initCloneObject(), isArguments = requireIsArguments(), isArray = requireIsArray(), isArrayLikeObject = requireIsArrayLikeObject(), isBuffer = requireIsBuffer(), isFunction = requireIsFunction(), isObject = requireIsObject(), isPlainObject = requireIsPlainObject(), isTypedArray = requireIsTypedArray(), safeGet = require_safeGet(), toPlainObject = requireToPlainObject();
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) {
                        newValue = objValue;
                    } else if (isArrayLikeObject(objValue)) {
                        newValue = copyArray(objValue);
                    } else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                    } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                    } else {
                        newValue = [];
                    }
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) {
                        newValue = toPlainObject(objValue);
                    } else if (!isObject(objValue) || isFunction(objValue)) {
                        newValue = initCloneObject(srcValue);
                    }
                } else {
                    isCommon = false;
                }
            }
            if (isCommon) {
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
        }
        _baseMergeDeep = baseMergeDeep;
        return _baseMergeDeep;
    }
    var _baseMerge;
    var hasRequired_baseMerge;
    function require_baseMerge() {
        if (hasRequired_baseMerge) return _baseMerge;
        hasRequired_baseMerge = 1;
        var Stack = require_Stack(), assignMergeValue = require_assignMergeValue(), baseFor = require_baseFor(), baseMergeDeep = require_baseMergeDeep(), isObject = requireIsObject(), keysIn = requireKeysIn(), safeGet = require_safeGet();
        function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
                return;
            }
            baseFor(source, (function(srcValue, key) {
                stack || (stack = new Stack);
                if (isObject(srcValue)) {
                    baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                } else {
                    var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
                    if (newValue === undefined) {
                        newValue = srcValue;
                    }
                    assignMergeValue(object, key, newValue);
                }
            }), keysIn);
        }
        _baseMerge = baseMerge;
        return _baseMerge;
    }
    var _createAssigner;
    var hasRequired_createAssigner;
    function require_createAssigner() {
        if (hasRequired_createAssigner) return _createAssigner;
        hasRequired_createAssigner = 1;
        var baseRest = require_baseRest(), isIterateeCall = require_isIterateeCall();
        function createAssigner(assigner) {
            return baseRest((function(object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, 
                customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object(object);
                while (++index < length) {
                    var source = sources[index];
                    if (source) {
                        assigner(object, source, index, customizer);
                    }
                }
                return object;
            }));
        }
        _createAssigner = createAssigner;
        return _createAssigner;
    }
    var merge_1;
    var hasRequiredMerge;
    function requireMerge() {
        if (hasRequiredMerge) return merge_1;
        hasRequiredMerge = 1;
        var baseMerge = require_baseMerge(), createAssigner = require_createAssigner();
        var merge = createAssigner((function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        }));
        merge_1 = merge;
        return merge_1;
    }
    var _baseLt;
    var hasRequired_baseLt;
    function require_baseLt() {
        if (hasRequired_baseLt) return _baseLt;
        hasRequired_baseLt = 1;
        function baseLt(value, other) {
            return value < other;
        }
        _baseLt = baseLt;
        return _baseLt;
    }
    var min_1;
    var hasRequiredMin;
    function requireMin() {
        if (hasRequiredMin) return min_1;
        hasRequiredMin = 1;
        var baseExtremum = require_baseExtremum(), baseLt = require_baseLt(), identity = requireIdentity();
        function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        }
        min_1 = min;
        return min_1;
    }
    var minBy_1;
    var hasRequiredMinBy;
    function requireMinBy() {
        if (hasRequiredMinBy) return minBy_1;
        hasRequiredMinBy = 1;
        var baseExtremum = require_baseExtremum(), baseIteratee = require_baseIteratee(), baseLt = require_baseLt();
        function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt) : undefined;
        }
        minBy_1 = minBy;
        return minBy_1;
    }
    var now_1;
    var hasRequiredNow;
    function requireNow() {
        if (hasRequiredNow) return now_1;
        hasRequiredNow = 1;
        var root = require_root();
        var now = function() {
            return root.Date.now();
        };
        now_1 = now;
        return now_1;
    }
    var _baseSet;
    var hasRequired_baseSet;
    function require_baseSet() {
        if (hasRequired_baseSet) return _baseSet;
        hasRequired_baseSet = 1;
        var assignValue = require_assignValue(), castPath = require_castPath(), isIndex = require_isIndex(), isObject = requireIsObject(), toKey = require_toKey();
        function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
                return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
                var key = toKey(path[index]), newValue = value;
                if (key === "__proto__" || key === "constructor" || key === "prototype") {
                    return object;
                }
                if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) {
                        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                    }
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }
        _baseSet = baseSet;
        return _baseSet;
    }
    var _basePickBy;
    var hasRequired_basePickBy;
    function require_basePickBy() {
        if (hasRequired_basePickBy) return _basePickBy;
        hasRequired_basePickBy = 1;
        var baseGet = require_baseGet(), baseSet = require_baseSet(), castPath = require_castPath();
        function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result = {};
            while (++index < length) {
                var path = paths[index], value = baseGet(object, path);
                if (predicate(value, path)) {
                    baseSet(result, castPath(path, object), value);
                }
            }
            return result;
        }
        _basePickBy = basePickBy;
        return _basePickBy;
    }
    var _basePick;
    var hasRequired_basePick;
    function require_basePick() {
        if (hasRequired_basePick) return _basePick;
        hasRequired_basePick = 1;
        var basePickBy = require_basePickBy(), hasIn = requireHasIn();
        function basePick(object, paths) {
            return basePickBy(object, paths, (function(value, path) {
                return hasIn(object, path);
            }));
        }
        _basePick = basePick;
        return _basePick;
    }
    var _flatRest;
    var hasRequired_flatRest;
    function require_flatRest() {
        if (hasRequired_flatRest) return _flatRest;
        hasRequired_flatRest = 1;
        var flatten = requireFlatten(), overRest = require_overRest(), setToString = require_setToString();
        function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + "");
        }
        _flatRest = flatRest;
        return _flatRest;
    }
    var pick_1;
    var hasRequiredPick;
    function requirePick() {
        if (hasRequiredPick) return pick_1;
        hasRequiredPick = 1;
        var basePick = require_basePick(), flatRest = require_flatRest();
        var pick = flatRest((function(object, paths) {
            return object == null ? {} : basePick(object, paths);
        }));
        pick_1 = pick;
        return pick_1;
    }
    var _baseRange;
    var hasRequired_baseRange;
    function require_baseRange() {
        if (hasRequired_baseRange) return _baseRange;
        hasRequired_baseRange = 1;
        var nativeCeil = Math.ceil, nativeMax = Math.max;
        function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
            while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }
        _baseRange = baseRange;
        return _baseRange;
    }
    var _createRange;
    var hasRequired_createRange;
    function require_createRange() {
        if (hasRequired_createRange) return _createRange;
        hasRequired_createRange = 1;
        var baseRange = require_baseRange(), isIterateeCall = require_isIterateeCall(), toFinite = requireToFinite();
        function createRange(fromRight) {
            return function(start, end, step) {
                if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                    end = step = undefined;
                }
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else {
                    end = toFinite(end);
                }
                step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
                return baseRange(start, end, step, fromRight);
            };
        }
        _createRange = createRange;
        return _createRange;
    }
    var range_1;
    var hasRequiredRange;
    function requireRange() {
        if (hasRequiredRange) return range_1;
        hasRequiredRange = 1;
        var createRange = require_createRange();
        var range = createRange();
        range_1 = range;
        return range_1;
    }
    var _baseSortBy;
    var hasRequired_baseSortBy;
    function require_baseSortBy() {
        if (hasRequired_baseSortBy) return _baseSortBy;
        hasRequired_baseSortBy = 1;
        function baseSortBy(array, comparer) {
            var length = array.length;
            array.sort(comparer);
            while (length--) {
                array[length] = array[length].value;
            }
            return array;
        }
        _baseSortBy = baseSortBy;
        return _baseSortBy;
    }
    var _compareAscending;
    var hasRequired_compareAscending;
    function require_compareAscending() {
        if (hasRequired_compareAscending) return _compareAscending;
        hasRequired_compareAscending = 1;
        var isSymbol = requireIsSymbol();
        function compareAscending(value, other) {
            if (value !== other) {
                var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                    return 1;
                }
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                    return -1;
                }
            }
            return 0;
        }
        _compareAscending = compareAscending;
        return _compareAscending;
    }
    var _compareMultiple;
    var hasRequired_compareMultiple;
    function require_compareMultiple() {
        if (hasRequired_compareMultiple) return _compareMultiple;
        hasRequired_compareMultiple = 1;
        var compareAscending = require_compareAscending();
        function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
                var result = compareAscending(objCriteria[index], othCriteria[index]);
                if (result) {
                    if (index >= ordersLength) {
                        return result;
                    }
                    var order = orders[index];
                    return result * (order == "desc" ? -1 : 1);
                }
            }
            return object.index - other.index;
        }
        _compareMultiple = compareMultiple;
        return _compareMultiple;
    }
    var _baseOrderBy;
    var hasRequired_baseOrderBy;
    function require_baseOrderBy() {
        if (hasRequired_baseOrderBy) return _baseOrderBy;
        hasRequired_baseOrderBy = 1;
        var arrayMap = require_arrayMap(), baseGet = require_baseGet(), baseIteratee = require_baseIteratee(), baseMap = require_baseMap(), baseSortBy = require_baseSortBy(), baseUnary = require_baseUnary(), compareMultiple = require_compareMultiple(), identity = requireIdentity(), isArray = requireIsArray();
        function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
                iteratees = arrayMap(iteratees, (function(iteratee) {
                    if (isArray(iteratee)) {
                        return function(value) {
                            return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                        };
                    }
                    return iteratee;
                }));
            } else {
                iteratees = [ identity ];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
            var result = baseMap(collection, (function(value, key, collection) {
                var criteria = arrayMap(iteratees, (function(iteratee) {
                    return iteratee(value);
                }));
                return {
                    criteria: criteria,
                    index: ++index,
                    value: value
                };
            }));
            return baseSortBy(result, (function(object, other) {
                return compareMultiple(object, other, orders);
            }));
        }
        _baseOrderBy = baseOrderBy;
        return _baseOrderBy;
    }
    var sortBy_1;
    var hasRequiredSortBy;
    function requireSortBy() {
        if (hasRequiredSortBy) return sortBy_1;
        hasRequiredSortBy = 1;
        var baseFlatten = require_baseFlatten(), baseOrderBy = require_baseOrderBy(), baseRest = require_baseRest(), isIterateeCall = require_isIterateeCall();
        var sortBy = baseRest((function(collection, iteratees) {
            if (collection == null) {
                return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                iteratees = [ iteratees[0] ];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        }));
        sortBy_1 = sortBy;
        return sortBy_1;
    }
    var uniqueId_1;
    var hasRequiredUniqueId;
    function requireUniqueId() {
        if (hasRequiredUniqueId) return uniqueId_1;
        hasRequiredUniqueId = 1;
        var toString = requireToString();
        var idCounter = 0;
        function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        }
        uniqueId_1 = uniqueId;
        return uniqueId_1;
    }
    var _baseZipObject;
    var hasRequired_baseZipObject;
    function require_baseZipObject() {
        if (hasRequired_baseZipObject) return _baseZipObject;
        hasRequired_baseZipObject = 1;
        function baseZipObject(props, values, assignFunc) {
            var index = -1, length = props.length, valsLength = values.length, result = {};
            while (++index < length) {
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        _baseZipObject = baseZipObject;
        return _baseZipObject;
    }
    var zipObject_1;
    var hasRequiredZipObject;
    function requireZipObject() {
        if (hasRequiredZipObject) return zipObject_1;
        hasRequiredZipObject = 1;
        var assignValue = require_assignValue(), baseZipObject = require_baseZipObject();
        function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        }
        zipObject_1 = zipObject;
        return zipObject_1;
    }
    var lodash;
    if (typeof commonjsRequire === "function") {
        try {
            lodash = {
                cloneDeep: requireCloneDeep(),
                constant: requireConstant(),
                defaults: requireDefaults(),
                each: requireEach(),
                filter: requireFilter(),
                find: requireFind(),
                flatten: requireFlatten(),
                forEach: requireForEach(),
                forIn: requireForIn(),
                has: requireHas(),
                isUndefined: requireIsUndefined(),
                last: requireLast(),
                map: requireMap(),
                mapValues: requireMapValues(),
                max: requireMax(),
                merge: requireMerge(),
                min: requireMin(),
                minBy: requireMinBy(),
                now: requireNow(),
                pick: requirePick(),
                range: requireRange(),
                reduce: requireReduce(),
                sortBy: requireSortBy(),
                uniqueId: requireUniqueId(),
                values: requireValues(),
                zipObject: requireZipObject()
            };
        } catch (e) {}
    }
    if (!lodash) {
        lodash = window._;
    }
    var lodash_1 = lodash;
    var list = List$1;
    function List$1() {
        var sentinel = {};
        sentinel._next = sentinel._prev = sentinel;
        this._sentinel = sentinel;
    }
    List$1.prototype.dequeue = function() {
        var sentinel = this._sentinel;
        var entry = sentinel._prev;
        if (entry !== sentinel) {
            unlink(entry);
            return entry;
        }
    };
    List$1.prototype.enqueue = function(entry) {
        var sentinel = this._sentinel;
        if (entry._prev && entry._next) {
            unlink(entry);
        }
        entry._next = sentinel._next;
        sentinel._next._prev = entry;
        sentinel._next = entry;
        entry._prev = sentinel;
    };
    List$1.prototype.toString = function() {
        var strs = [];
        var sentinel = this._sentinel;
        var curr = sentinel._prev;
        while (curr !== sentinel) {
            strs.push(JSON.stringify(curr, filterOutLinks));
            curr = curr._prev;
        }
        return "[" + strs.join(", ") + "]";
    };
    function unlink(entry) {
        entry._prev._next = entry._next;
        entry._next._prev = entry._prev;
        delete entry._next;
        delete entry._prev;
    }
    function filterOutLinks(k, v) {
        if (k !== "_next" && k !== "_prev") {
            return v;
        }
    }
    var _$n = lodash_1;
    var Graph$8 = graphlib_1.Graph;
    var List = list;
    var greedyFas = greedyFAS$1;
    var DEFAULT_WEIGHT_FN = _$n.constant(1);
    function greedyFAS$1(g, weightFn) {
        if (g.nodeCount() <= 1) {
            return [];
        }
        var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);
        var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);
        return _$n.flatten(_$n.map(results, (function(e) {
            return g.outEdges(e.v, e.w);
        })), true);
    }
    function doGreedyFAS(g, buckets, zeroIdx) {
        var results = [];
        var sources = buckets[buckets.length - 1];
        var sinks = buckets[0];
        var entry;
        while (g.nodeCount()) {
            while (entry = sinks.dequeue()) {
                removeNode(g, buckets, zeroIdx, entry);
            }
            while (entry = sources.dequeue()) {
                removeNode(g, buckets, zeroIdx, entry);
            }
            if (g.nodeCount()) {
                for (var i = buckets.length - 2; i > 0; --i) {
                    entry = buckets[i].dequeue();
                    if (entry) {
                        results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));
                        break;
                    }
                }
            }
        }
        return results;
    }
    function removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {
        var results = collectPredecessors ? [] : undefined;
        _$n.forEach(g.inEdges(entry.v), (function(edge) {
            var weight = g.edge(edge);
            var uEntry = g.node(edge.v);
            if (collectPredecessors) {
                results.push({
                    v: edge.v,
                    w: edge.w
                });
            }
            uEntry.out -= weight;
            assignBucket(buckets, zeroIdx, uEntry);
        }));
        _$n.forEach(g.outEdges(entry.v), (function(edge) {
            var weight = g.edge(edge);
            var w = edge.w;
            var wEntry = g.node(w);
            wEntry["in"] -= weight;
            assignBucket(buckets, zeroIdx, wEntry);
        }));
        g.removeNode(entry.v);
        return results;
    }
    function buildState(g, weightFn) {
        var fasGraph = new Graph$8;
        var maxIn = 0;
        var maxOut = 0;
        _$n.forEach(g.nodes(), (function(v) {
            fasGraph.setNode(v, {
                v: v,
                in: 0,
                out: 0
            });
        }));
        _$n.forEach(g.edges(), (function(e) {
            var prevWeight = fasGraph.edge(e.v, e.w) || 0;
            var weight = weightFn(e);
            var edgeWeight = prevWeight + weight;
            fasGraph.setEdge(e.v, e.w, edgeWeight);
            maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);
            maxIn = Math.max(maxIn, fasGraph.node(e.w)["in"] += weight);
        }));
        var buckets = _$n.range(maxOut + maxIn + 3).map((function() {
            return new List;
        }));
        var zeroIdx = maxIn + 1;
        _$n.forEach(fasGraph.nodes(), (function(v) {
            assignBucket(buckets, zeroIdx, fasGraph.node(v));
        }));
        return {
            graph: fasGraph,
            buckets: buckets,
            zeroIdx: zeroIdx
        };
    }
    function assignBucket(buckets, zeroIdx, entry) {
        if (!entry.out) {
            buckets[0].enqueue(entry);
        } else if (!entry["in"]) {
            buckets[buckets.length - 1].enqueue(entry);
        } else {
            buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
        }
    }
    var _$m = lodash_1;
    var greedyFAS = greedyFas;
    var acyclic$1 = {
        run: run$2,
        undo: undo$2
    };
    function run$2(g) {
        var fas = g.graph().acyclicer === "greedy" ? greedyFAS(g, weightFn(g)) : dfsFAS(g);
        _$m.forEach(fas, (function(e) {
            var label = g.edge(e);
            g.removeEdge(e);
            label.forwardName = e.name;
            label.reversed = true;
            g.setEdge(e.w, e.v, label, _$m.uniqueId("rev"));
        }));
        function weightFn(g) {
            return function(e) {
                return g.edge(e).weight;
            };
        }
    }
    function dfsFAS(g) {
        var fas = [];
        var stack = {};
        var visited = {};
        function dfs(v) {
            if (_$m.has(visited, v)) {
                return;
            }
            visited[v] = true;
            stack[v] = true;
            _$m.forEach(g.outEdges(v), (function(e) {
                if (_$m.has(stack, e.w)) {
                    fas.push(e);
                } else {
                    dfs(e.w);
                }
            }));
            delete stack[v];
        }
        _$m.forEach(g.nodes(), dfs);
        return fas;
    }
    function undo$2(g) {
        _$m.forEach(g.edges(), (function(e) {
            var label = g.edge(e);
            if (label.reversed) {
                g.removeEdge(e);
                var forwardName = label.forwardName;
                delete label.reversed;
                delete label.forwardName;
                g.setEdge(e.w, e.v, label, forwardName);
            }
        }));
    }
    var _$l = lodash_1;
    var Graph$7 = graphlib_1.Graph;
    var util$a = {
        addDummyNode: addDummyNode,
        simplify: simplify$1,
        asNonCompoundGraph: asNonCompoundGraph,
        successorWeights: successorWeights,
        predecessorWeights: predecessorWeights,
        intersectRect: intersectRect,
        buildLayerMatrix: buildLayerMatrix,
        normalizeRanks: normalizeRanks$1,
        removeEmptyRanks: removeEmptyRanks$1,
        addBorderNode: addBorderNode$1,
        maxRank: maxRank,
        partition: partition,
        time: time,
        notime: notime
    };
    function addDummyNode(g, type, attrs, name) {
        var v;
        do {
            v = _$l.uniqueId(name);
        } while (g.hasNode(v));
        attrs.dummy = type;
        g.setNode(v, attrs);
        return v;
    }
    function simplify$1(g) {
        var simplified = (new Graph$7).setGraph(g.graph());
        _$l.forEach(g.nodes(), (function(v) {
            simplified.setNode(v, g.node(v));
        }));
        _$l.forEach(g.edges(), (function(e) {
            var simpleLabel = simplified.edge(e.v, e.w) || {
                weight: 0,
                minlen: 1
            };
            var label = g.edge(e);
            simplified.setEdge(e.v, e.w, {
                weight: simpleLabel.weight + label.weight,
                minlen: Math.max(simpleLabel.minlen, label.minlen)
            });
        }));
        return simplified;
    }
    function asNonCompoundGraph(g) {
        var simplified = new Graph$7({
            multigraph: g.isMultigraph()
        }).setGraph(g.graph());
        _$l.forEach(g.nodes(), (function(v) {
            if (!g.children(v).length) {
                simplified.setNode(v, g.node(v));
            }
        }));
        _$l.forEach(g.edges(), (function(e) {
            simplified.setEdge(e, g.edge(e));
        }));
        return simplified;
    }
    function successorWeights(g) {
        var weightMap = _$l.map(g.nodes(), (function(v) {
            var sucs = {};
            _$l.forEach(g.outEdges(v), (function(e) {
                sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;
            }));
            return sucs;
        }));
        return _$l.zipObject(g.nodes(), weightMap);
    }
    function predecessorWeights(g) {
        var weightMap = _$l.map(g.nodes(), (function(v) {
            var preds = {};
            _$l.forEach(g.inEdges(v), (function(e) {
                preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;
            }));
            return preds;
        }));
        return _$l.zipObject(g.nodes(), weightMap);
    }
    function intersectRect(rect, point) {
        var x = rect.x;
        var y = rect.y;
        var dx = point.x - x;
        var dy = point.y - y;
        var w = rect.width / 2;
        var h = rect.height / 2;
        if (!dx && !dy) {
            throw new Error("Not possible to find intersection inside of the rectangle");
        }
        var sx, sy;
        if (Math.abs(dy) * w > Math.abs(dx) * h) {
            if (dy < 0) {
                h = -h;
            }
            sx = h * dx / dy;
            sy = h;
        } else {
            if (dx < 0) {
                w = -w;
            }
            sx = w;
            sy = w * dy / dx;
        }
        return {
            x: x + sx,
            y: y + sy
        };
    }
    function buildLayerMatrix(g) {
        var layering = _$l.map(_$l.range(maxRank(g) + 1), (function() {
            return [];
        }));
        _$l.forEach(g.nodes(), (function(v) {
            var node = g.node(v);
            var rank = node.rank;
            if (!_$l.isUndefined(rank)) {
                layering[rank][node.order] = v;
            }
        }));
        return layering;
    }
    function normalizeRanks$1(g) {
        var min = _$l.min(_$l.map(g.nodes(), (function(v) {
            return g.node(v).rank;
        })));
        _$l.forEach(g.nodes(), (function(v) {
            var node = g.node(v);
            if (_$l.has(node, "rank")) {
                node.rank -= min;
            }
        }));
    }
    function removeEmptyRanks$1(g) {
        var offset = _$l.min(_$l.map(g.nodes(), (function(v) {
            return g.node(v).rank;
        })));
        var layers = [];
        _$l.forEach(g.nodes(), (function(v) {
            var rank = g.node(v).rank - offset;
            if (!layers[rank]) {
                layers[rank] = [];
            }
            layers[rank].push(v);
        }));
        var delta = 0;
        var nodeRankFactor = g.graph().nodeRankFactor;
        _$l.forEach(layers, (function(vs, i) {
            if (_$l.isUndefined(vs) && i % nodeRankFactor !== 0) {
                --delta;
            } else if (delta) {
                _$l.forEach(vs, (function(v) {
                    g.node(v).rank += delta;
                }));
            }
        }));
    }
    function addBorderNode$1(g, prefix, rank, order) {
        var node = {
            width: 0,
            height: 0
        };
        if (arguments.length >= 4) {
            node.rank = rank;
            node.order = order;
        }
        return addDummyNode(g, "border", node, prefix);
    }
    function maxRank(g) {
        return _$l.max(_$l.map(g.nodes(), (function(v) {
            var rank = g.node(v).rank;
            if (!_$l.isUndefined(rank)) {
                return rank;
            }
        })));
    }
    function partition(collection, fn) {
        var result = {
            lhs: [],
            rhs: []
        };
        _$l.forEach(collection, (function(value) {
            if (fn(value)) {
                result.lhs.push(value);
            } else {
                result.rhs.push(value);
            }
        }));
        return result;
    }
    function time(name, fn) {
        var start = _$l.now();
        try {
            return fn();
        } finally {
            console.log(name + " time: " + (_$l.now() - start) + "ms");
        }
    }
    function notime(name, fn) {
        return fn();
    }
    var _$k = lodash_1;
    var util$9 = util$a;
    var normalize$1 = {
        run: run$1,
        undo: undo$1
    };
    function run$1(g) {
        g.graph().dummyChains = [];
        _$k.forEach(g.edges(), (function(edge) {
            normalizeEdge(g, edge);
        }));
    }
    function normalizeEdge(g, e) {
        var v = e.v;
        var vRank = g.node(v).rank;
        var w = e.w;
        var wRank = g.node(w).rank;
        var name = e.name;
        var edgeLabel = g.edge(e);
        var labelRank = edgeLabel.labelRank;
        if (wRank === vRank + 1) return;
        g.removeEdge(e);
        var dummy, attrs, i;
        for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {
            edgeLabel.points = [];
            attrs = {
                width: 0,
                height: 0,
                edgeLabel: edgeLabel,
                edgeObj: e,
                rank: vRank
            };
            dummy = util$9.addDummyNode(g, "edge", attrs, "_d");
            if (vRank === labelRank) {
                attrs.width = edgeLabel.width;
                attrs.height = edgeLabel.height;
                attrs.dummy = "edge-label";
                attrs.labelpos = edgeLabel.labelpos;
            }
            g.setEdge(v, dummy, {
                weight: edgeLabel.weight
            }, name);
            if (i === 0) {
                g.graph().dummyChains.push(dummy);
            }
            v = dummy;
        }
        g.setEdge(v, w, {
            weight: edgeLabel.weight
        }, name);
    }
    function undo$1(g) {
        _$k.forEach(g.graph().dummyChains, (function(v) {
            var node = g.node(v);
            var origLabel = node.edgeLabel;
            var w;
            g.setEdge(node.edgeObj, origLabel);
            while (node.dummy) {
                w = g.successors(v)[0];
                g.removeNode(v);
                origLabel.points.push({
                    x: node.x,
                    y: node.y
                });
                if (node.dummy === "edge-label") {
                    origLabel.x = node.x;
                    origLabel.y = node.y;
                    origLabel.width = node.width;
                    origLabel.height = node.height;
                }
                v = w;
                node = g.node(v);
            }
        }));
    }
    var _$j = lodash_1;
    var util$8 = {
        longestPath: longestPath$1,
        slack: slack$2
    };
    function longestPath$1(g) {
        var visited = {};
        function dfs(v) {
            var label = g.node(v);
            if (_$j.has(visited, v)) {
                return label.rank;
            }
            visited[v] = true;
            var rank = _$j.min(_$j.map(g.outEdges(v), (function(e) {
                return dfs(e.w) - g.edge(e).minlen;
            })));
            if (rank === Number.POSITIVE_INFINITY || rank === undefined || rank === null) {
                rank = 0;
            }
            return label.rank = rank;
        }
        _$j.forEach(g.sources(), dfs);
    }
    function slack$2(g, e) {
        return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;
    }
    var _$i = lodash_1;
    var Graph$6 = graphlib_1.Graph;
    var slack$1 = util$8.slack;
    var feasibleTree_1 = feasibleTree$2;
    function feasibleTree$2(g) {
        var t = new Graph$6({
            directed: false
        });
        var start = g.nodes()[0];
        var size = g.nodeCount();
        t.setNode(start, {});
        var edge, delta;
        while (tightTree(t, g) < size) {
            edge = findMinSlackEdge(t, g);
            delta = t.hasNode(edge.v) ? slack$1(g, edge) : -slack$1(g, edge);
            shiftRanks(t, g, delta);
        }
        return t;
    }
    function tightTree(t, g) {
        function dfs(v) {
            _$i.forEach(g.nodeEdges(v), (function(e) {
                var edgeV = e.v, w = v === edgeV ? e.w : edgeV;
                if (!t.hasNode(w) && !slack$1(g, e)) {
                    t.setNode(w, {});
                    t.setEdge(v, w, {});
                    dfs(w);
                }
            }));
        }
        _$i.forEach(t.nodes(), dfs);
        return t.nodeCount();
    }
    function findMinSlackEdge(t, g) {
        return _$i.minBy(g.edges(), (function(e) {
            if (t.hasNode(e.v) !== t.hasNode(e.w)) {
                return slack$1(g, e);
            }
        }));
    }
    function shiftRanks(t, g, delta) {
        _$i.forEach(t.nodes(), (function(v) {
            g.node(v).rank += delta;
        }));
    }
    var _$h = lodash_1;
    var feasibleTree$1 = feasibleTree_1;
    var slack = util$8.slack;
    var initRank = util$8.longestPath;
    var preorder = graphlib_1.alg.preorder;
    var postorder$1 = graphlib_1.alg.postorder;
    var simplify = util$a.simplify;
    var networkSimplex_1 = networkSimplex$1;
    networkSimplex$1.initLowLimValues = initLowLimValues;
    networkSimplex$1.initCutValues = initCutValues;
    networkSimplex$1.calcCutValue = calcCutValue;
    networkSimplex$1.leaveEdge = leaveEdge;
    networkSimplex$1.enterEdge = enterEdge;
    networkSimplex$1.exchangeEdges = exchangeEdges;
    function networkSimplex$1(g) {
        g = simplify(g);
        initRank(g);
        var t = feasibleTree$1(g);
        initLowLimValues(t);
        initCutValues(t, g);
        var e, f;
        while (e = leaveEdge(t)) {
            f = enterEdge(t, g, e);
            exchangeEdges(t, g, e, f);
        }
    }
    function initCutValues(t, g) {
        var vs = postorder$1(t, t.nodes());
        vs = vs.slice(0, vs.length - 1);
        _$h.forEach(vs, (function(v) {
            assignCutValue(t, g, v);
        }));
    }
    function assignCutValue(t, g, child) {
        var childLab = t.node(child);
        var parent = childLab.parent;
        t.edge(child, parent).cutvalue = calcCutValue(t, g, child);
    }
    function calcCutValue(t, g, child) {
        var childLab = t.node(child);
        var parent = childLab.parent;
        var childIsTail = true;
        var graphEdge = g.edge(child, parent);
        var cutValue = 0;
        if (!graphEdge) {
            childIsTail = false;
            graphEdge = g.edge(parent, child);
        }
        cutValue = graphEdge.weight;
        _$h.forEach(g.nodeEdges(child), (function(e) {
            var isOutEdge = e.v === child, other = isOutEdge ? e.w : e.v;
            if (other !== parent) {
                var pointsToHead = isOutEdge === childIsTail, otherWeight = g.edge(e).weight;
                cutValue += pointsToHead ? otherWeight : -otherWeight;
                if (isTreeEdge(t, child, other)) {
                    var otherCutValue = t.edge(child, other).cutvalue;
                    cutValue += pointsToHead ? -otherCutValue : otherCutValue;
                }
            }
        }));
        return cutValue;
    }
    function initLowLimValues(tree, root) {
        if (arguments.length < 2) {
            root = tree.nodes()[0];
        }
        dfsAssignLowLim(tree, {}, 1, root);
    }
    function dfsAssignLowLim(tree, visited, nextLim, v, parent) {
        var low = nextLim;
        var label = tree.node(v);
        visited[v] = true;
        _$h.forEach(tree.neighbors(v), (function(w) {
            if (!_$h.has(visited, w)) {
                nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);
            }
        }));
        label.low = low;
        label.lim = nextLim++;
        if (parent) {
            label.parent = parent;
        } else {
            delete label.parent;
        }
        return nextLim;
    }
    function leaveEdge(tree) {
        return _$h.find(tree.edges(), (function(e) {
            return tree.edge(e).cutvalue < 0;
        }));
    }
    function enterEdge(t, g, edge) {
        var v = edge.v;
        var w = edge.w;
        if (!g.hasEdge(v, w)) {
            v = edge.w;
            w = edge.v;
        }
        var vLabel = t.node(v);
        var wLabel = t.node(w);
        var tailLabel = vLabel;
        var flip = false;
        if (vLabel.lim > wLabel.lim) {
            tailLabel = wLabel;
            flip = true;
        }
        var candidates = _$h.filter(g.edges(), (function(edge) {
            return flip === isDescendant(t, t.node(edge.v), tailLabel) && flip !== isDescendant(t, t.node(edge.w), tailLabel);
        }));
        return _$h.minBy(candidates, (function(edge) {
            return slack(g, edge);
        }));
    }
    function exchangeEdges(t, g, e, f) {
        var v = e.v;
        var w = e.w;
        t.removeEdge(v, w);
        t.setEdge(f.v, f.w, {});
        initLowLimValues(t);
        initCutValues(t, g);
        updateRanks(t, g);
    }
    function updateRanks(t, g) {
        var root = _$h.find(t.nodes(), (function(v) {
            return !g.node(v).parent;
        }));
        var vs = preorder(t, root);
        vs = vs.slice(1);
        _$h.forEach(vs, (function(v) {
            var parent = t.node(v).parent, edge = g.edge(v, parent), flipped = false;
            if (!edge) {
                edge = g.edge(parent, v);
                flipped = true;
            }
            g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);
        }));
    }
    function isTreeEdge(tree, u, v) {
        return tree.hasEdge(u, v);
    }
    function isDescendant(tree, vLabel, rootLabel) {
        return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
    }
    var rankUtil = util$8;
    var longestPath = rankUtil.longestPath;
    var feasibleTree = feasibleTree_1;
    var networkSimplex = networkSimplex_1;
    var rank_1 = rank$1;
    function rank$1(g) {
        switch (g.graph().ranker) {
          case "network-simplex":
            networkSimplexRanker(g);
            break;

          case "tight-tree":
            tightTreeRanker(g);
            break;

          case "longest-path":
            longestPathRanker(g);
            break;

          default:
            networkSimplexRanker(g);
        }
    }
    var longestPathRanker = longestPath;
    function tightTreeRanker(g) {
        longestPath(g);
        feasibleTree(g);
    }
    function networkSimplexRanker(g) {
        networkSimplex(g);
    }
    var _$g = lodash_1;
    var parentDummyChains_1 = parentDummyChains$1;
    function parentDummyChains$1(g) {
        var postorderNums = postorder(g);
        _$g.forEach(g.graph().dummyChains, (function(v) {
            var node = g.node(v);
            var edgeObj = node.edgeObj;
            var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);
            var path = pathData.path;
            var lca = pathData.lca;
            var pathIdx = 0;
            var pathV = path[pathIdx];
            var ascending = true;
            while (v !== edgeObj.w) {
                node = g.node(v);
                if (ascending) {
                    while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {
                        pathIdx++;
                    }
                    if (pathV === lca) {
                        ascending = false;
                    }
                }
                if (!ascending) {
                    while (pathIdx < path.length - 1 && g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {
                        pathIdx++;
                    }
                    pathV = path[pathIdx];
                }
                g.setParent(v, pathV);
                v = g.successors(v)[0];
            }
        }));
    }
    function findPath(g, postorderNums, v, w) {
        var vPath = [];
        var wPath = [];
        var low = Math.min(postorderNums[v].low, postorderNums[w].low);
        var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);
        var parent;
        var lca;
        parent = v;
        do {
            parent = g.parent(parent);
            vPath.push(parent);
        } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));
        lca = parent;
        parent = w;
        while ((parent = g.parent(parent)) !== lca) {
            wPath.push(parent);
        }
        return {
            path: vPath.concat(wPath.reverse()),
            lca: lca
        };
    }
    function postorder(g) {
        var result = {};
        var lim = 0;
        function dfs(v) {
            var low = lim;
            _$g.forEach(g.children(v), dfs);
            result[v] = {
                low: low,
                lim: lim++
            };
        }
        _$g.forEach(g.children(), dfs);
        return result;
    }
    var _$f = lodash_1;
    var util$7 = util$a;
    var nestingGraph$1 = {
        run: run,
        cleanup: cleanup
    };
    function run(g) {
        var root = util$7.addDummyNode(g, "root", {}, "_root");
        var depths = treeDepths(g);
        var height = _$f.max(_$f.values(depths)) - 1;
        var nodeSep = 2 * height + 1;
        g.graph().nestingRoot = root;
        _$f.forEach(g.edges(), (function(e) {
            g.edge(e).minlen *= nodeSep;
        }));
        var weight = sumWeights(g) + 1;
        _$f.forEach(g.children(), (function(child) {
            dfs(g, root, nodeSep, weight, height, depths, child);
        }));
        g.graph().nodeRankFactor = nodeSep;
    }
    function dfs(g, root, nodeSep, weight, height, depths, v) {
        var children = g.children(v);
        if (!children.length) {
            if (v !== root) {
                g.setEdge(root, v, {
                    weight: 0,
                    minlen: nodeSep
                });
            }
            return;
        }
        var top = util$7.addBorderNode(g, "_bt");
        var bottom = util$7.addBorderNode(g, "_bb");
        var label = g.node(v);
        g.setParent(top, v);
        label.borderTop = top;
        g.setParent(bottom, v);
        label.borderBottom = bottom;
        _$f.forEach(children, (function(child) {
            dfs(g, root, nodeSep, weight, height, depths, child);
            var childNode = g.node(child);
            var childTop = childNode.borderTop ? childNode.borderTop : child;
            var childBottom = childNode.borderBottom ? childNode.borderBottom : child;
            var thisWeight = childNode.borderTop ? weight : 2 * weight;
            var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;
            g.setEdge(top, childTop, {
                weight: thisWeight,
                minlen: minlen,
                nestingEdge: true
            });
            g.setEdge(childBottom, bottom, {
                weight: thisWeight,
                minlen: minlen,
                nestingEdge: true
            });
        }));
        if (!g.parent(v)) {
            g.setEdge(root, top, {
                weight: 0,
                minlen: height + depths[v]
            });
        }
    }
    function treeDepths(g) {
        var depths = {};
        function dfs(v, depth) {
            var children = g.children(v);
            if (children && children.length) {
                _$f.forEach(children, (function(child) {
                    dfs(child, depth + 1);
                }));
            }
            depths[v] = depth;
        }
        _$f.forEach(g.children(), (function(v) {
            dfs(v, 1);
        }));
        return depths;
    }
    function sumWeights(g) {
        return _$f.reduce(g.edges(), (function(acc, e) {
            return acc + g.edge(e).weight;
        }), 0);
    }
    function cleanup(g) {
        var graphLabel = g.graph();
        g.removeNode(graphLabel.nestingRoot);
        delete graphLabel.nestingRoot;
        _$f.forEach(g.edges(), (function(e) {
            var edge = g.edge(e);
            if (edge.nestingEdge) {
                g.removeEdge(e);
            }
        }));
    }
    var _$e = lodash_1;
    var util$6 = util$a;
    var addBorderSegments_1 = addBorderSegments$1;
    function addBorderSegments$1(g) {
        function dfs(v) {
            var children = g.children(v);
            var node = g.node(v);
            if (children.length) {
                _$e.forEach(children, dfs);
            }
            if (_$e.has(node, "minRank")) {
                node.borderLeft = [];
                node.borderRight = [];
                for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {
                    addBorderNode(g, "borderLeft", "_bl", v, node, rank);
                    addBorderNode(g, "borderRight", "_br", v, node, rank);
                }
            }
        }
        _$e.forEach(g.children(), dfs);
    }
    function addBorderNode(g, prop, prefix, sg, sgNode, rank) {
        var label = {
            width: 0,
            height: 0,
            rank: rank,
            borderType: prop
        };
        var prev = sgNode[prop][rank - 1];
        var curr = util$6.addDummyNode(g, "border", label, prefix);
        sgNode[prop][rank] = curr;
        g.setParent(curr, sg);
        if (prev) {
            g.setEdge(prev, curr, {
                weight: 1
            });
        }
    }
    var _$d = lodash_1;
    var coordinateSystem$1 = {
        adjust: adjust,
        undo: undo
    };
    function adjust(g) {
        var rankDir = g.graph().rankdir.toLowerCase();
        if (rankDir === "lr" || rankDir === "rl") {
            swapWidthHeight(g);
        }
    }
    function undo(g) {
        var rankDir = g.graph().rankdir.toLowerCase();
        if (rankDir === "bt" || rankDir === "rl") {
            reverseY(g);
        }
        if (rankDir === "lr" || rankDir === "rl") {
            swapXY(g);
            swapWidthHeight(g);
        }
    }
    function swapWidthHeight(g) {
        _$d.forEach(g.nodes(), (function(v) {
            swapWidthHeightOne(g.node(v));
        }));
        _$d.forEach(g.edges(), (function(e) {
            swapWidthHeightOne(g.edge(e));
        }));
    }
    function swapWidthHeightOne(attrs) {
        var w = attrs.width;
        attrs.width = attrs.height;
        attrs.height = w;
    }
    function reverseY(g) {
        _$d.forEach(g.nodes(), (function(v) {
            reverseYOne(g.node(v));
        }));
        _$d.forEach(g.edges(), (function(e) {
            var edge = g.edge(e);
            _$d.forEach(edge.points, reverseYOne);
            if (_$d.has(edge, "y")) {
                reverseYOne(edge);
            }
        }));
    }
    function reverseYOne(attrs) {
        attrs.y = -attrs.y;
    }
    function swapXY(g) {
        _$d.forEach(g.nodes(), (function(v) {
            swapXYOne(g.node(v));
        }));
        _$d.forEach(g.edges(), (function(e) {
            var edge = g.edge(e);
            _$d.forEach(edge.points, swapXYOne);
            if (_$d.has(edge, "x")) {
                swapXYOne(edge);
            }
        }));
    }
    function swapXYOne(attrs) {
        var x = attrs.x;
        attrs.x = attrs.y;
        attrs.y = x;
    }
    var _$c = lodash_1;
    var initOrder_1 = initOrder$1;
    function initOrder$1(g) {
        var visited = {};
        var simpleNodes = _$c.filter(g.nodes(), (function(v) {
            return !g.children(v).length;
        }));
        var maxRank = _$c.max(_$c.map(simpleNodes, (function(v) {
            return g.node(v).rank;
        })));
        var layers = _$c.map(_$c.range(maxRank + 1), (function() {
            return [];
        }));
        function dfs(v) {
            if (_$c.has(visited, v)) return;
            visited[v] = true;
            var node = g.node(v);
            layers[node.rank].push(v);
            _$c.forEach(g.successors(v), dfs);
        }
        var orderedVs = _$c.sortBy(simpleNodes, (function(v) {
            return g.node(v).rank;
        }));
        _$c.forEach(orderedVs, dfs);
        return layers;
    }
    var _$b = lodash_1;
    var crossCount_1 = crossCount$1;
    function crossCount$1(g, layering) {
        var cc = 0;
        for (var i = 1; i < layering.length; ++i) {
            cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);
        }
        return cc;
    }
    function twoLayerCrossCount(g, northLayer, southLayer) {
        var southPos = _$b.zipObject(southLayer, _$b.map(southLayer, (function(v, i) {
            return i;
        })));
        var southEntries = _$b.flatten(_$b.map(northLayer, (function(v) {
            return _$b.sortBy(_$b.map(g.outEdges(v), (function(e) {
                return {
                    pos: southPos[e.w],
                    weight: g.edge(e).weight
                };
            })), "pos");
        })), true);
        var firstIndex = 1;
        while (firstIndex < southLayer.length) firstIndex <<= 1;
        var treeSize = 2 * firstIndex - 1;
        firstIndex -= 1;
        var tree = _$b.map(new Array(treeSize), (function() {
            return 0;
        }));
        var cc = 0;
        _$b.forEach(southEntries.forEach((function(entry) {
            var index = entry.pos + firstIndex;
            tree[index] += entry.weight;
            var weightSum = 0;
            while (index > 0) {
                if (index % 2) {
                    weightSum += tree[index + 1];
                }
                index = index - 1 >> 1;
                tree[index] += entry.weight;
            }
            cc += entry.weight * weightSum;
        })));
        return cc;
    }
    var _$a = lodash_1;
    var barycenter_1 = barycenter$1;
    function barycenter$1(g, movable) {
        return _$a.map(movable, (function(v) {
            var inV = g.inEdges(v);
            if (!inV.length) {
                return {
                    v: v
                };
            } else {
                var result = _$a.reduce(inV, (function(acc, e) {
                    var edge = g.edge(e), nodeU = g.node(e.v);
                    return {
                        sum: acc.sum + edge.weight * nodeU.order,
                        weight: acc.weight + edge.weight
                    };
                }), {
                    sum: 0,
                    weight: 0
                });
                return {
                    v: v,
                    barycenter: result.sum / result.weight,
                    weight: result.weight
                };
            }
        }));
    }
    var _$9 = lodash_1;
    var resolveConflicts_1 = resolveConflicts$1;
    function resolveConflicts$1(entries, cg) {
        var mappedEntries = {};
        _$9.forEach(entries, (function(entry, i) {
            var tmp = mappedEntries[entry.v] = {
                indegree: 0,
                in: [],
                out: [],
                vs: [ entry.v ],
                i: i
            };
            if (!_$9.isUndefined(entry.barycenter)) {
                tmp.barycenter = entry.barycenter;
                tmp.weight = entry.weight;
            }
        }));
        _$9.forEach(cg.edges(), (function(e) {
            var entryV = mappedEntries[e.v];
            var entryW = mappedEntries[e.w];
            if (!_$9.isUndefined(entryV) && !_$9.isUndefined(entryW)) {
                entryW.indegree++;
                entryV.out.push(mappedEntries[e.w]);
            }
        }));
        var sourceSet = _$9.filter(mappedEntries, (function(entry) {
            return !entry.indegree;
        }));
        return doResolveConflicts(sourceSet);
    }
    function doResolveConflicts(sourceSet) {
        var entries = [];
        function handleIn(vEntry) {
            return function(uEntry) {
                if (uEntry.merged) {
                    return;
                }
                if (_$9.isUndefined(uEntry.barycenter) || _$9.isUndefined(vEntry.barycenter) || uEntry.barycenter >= vEntry.barycenter) {
                    mergeEntries(vEntry, uEntry);
                }
            };
        }
        function handleOut(vEntry) {
            return function(wEntry) {
                wEntry["in"].push(vEntry);
                if (--wEntry.indegree === 0) {
                    sourceSet.push(wEntry);
                }
            };
        }
        while (sourceSet.length) {
            var entry = sourceSet.pop();
            entries.push(entry);
            _$9.forEach(entry["in"].reverse(), handleIn(entry));
            _$9.forEach(entry.out, handleOut(entry));
        }
        return _$9.map(_$9.filter(entries, (function(entry) {
            return !entry.merged;
        })), (function(entry) {
            return _$9.pick(entry, [ "vs", "i", "barycenter", "weight" ]);
        }));
    }
    function mergeEntries(target, source) {
        var sum = 0;
        var weight = 0;
        if (target.weight) {
            sum += target.barycenter * target.weight;
            weight += target.weight;
        }
        if (source.weight) {
            sum += source.barycenter * source.weight;
            weight += source.weight;
        }
        target.vs = source.vs.concat(target.vs);
        target.barycenter = sum / weight;
        target.weight = weight;
        target.i = Math.min(source.i, target.i);
        source.merged = true;
    }
    var _$8 = lodash_1;
    var util$5 = util$a;
    var sort_1 = sort$1;
    function sort$1(entries, biasRight) {
        var parts = util$5.partition(entries, (function(entry) {
            return _$8.has(entry, "barycenter");
        }));
        var sortable = parts.lhs, unsortable = _$8.sortBy(parts.rhs, (function(entry) {
            return -entry.i;
        })), vs = [], sum = 0, weight = 0, vsIndex = 0;
        sortable.sort(compareWithBias(!!biasRight));
        vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
        _$8.forEach(sortable, (function(entry) {
            vsIndex += entry.vs.length;
            vs.push(entry.vs);
            sum += entry.barycenter * entry.weight;
            weight += entry.weight;
            vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
        }));
        var result = {
            vs: _$8.flatten(vs, true)
        };
        if (weight) {
            result.barycenter = sum / weight;
            result.weight = weight;
        }
        return result;
    }
    function consumeUnsortable(vs, unsortable, index) {
        var last;
        while (unsortable.length && (last = _$8.last(unsortable)).i <= index) {
            unsortable.pop();
            vs.push(last.vs);
            index++;
        }
        return index;
    }
    function compareWithBias(bias) {
        return function(entryV, entryW) {
            if (entryV.barycenter < entryW.barycenter) {
                return -1;
            } else if (entryV.barycenter > entryW.barycenter) {
                return 1;
            }
            return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
        };
    }
    var _$7 = lodash_1;
    var barycenter = barycenter_1;
    var resolveConflicts = resolveConflicts_1;
    var sort = sort_1;
    var sortSubgraph_1 = sortSubgraph$1;
    function sortSubgraph$1(g, v, cg, biasRight) {
        var movable = g.children(v);
        var node = g.node(v);
        var bl = node ? node.borderLeft : undefined;
        var br = node ? node.borderRight : undefined;
        var subgraphs = {};
        if (bl) {
            movable = _$7.filter(movable, (function(w) {
                return w !== bl && w !== br;
            }));
        }
        var barycenters = barycenter(g, movable);
        _$7.forEach(barycenters, (function(entry) {
            if (g.children(entry.v).length) {
                var subgraphResult = sortSubgraph$1(g, entry.v, cg, biasRight);
                subgraphs[entry.v] = subgraphResult;
                if (_$7.has(subgraphResult, "barycenter")) {
                    mergeBarycenters(entry, subgraphResult);
                }
            }
        }));
        var entries = resolveConflicts(barycenters, cg);
        expandSubgraphs(entries, subgraphs);
        var result = sort(entries, biasRight);
        if (bl) {
            result.vs = _$7.flatten([ bl, result.vs, br ], true);
            if (g.predecessors(bl).length) {
                var blPred = g.node(g.predecessors(bl)[0]), brPred = g.node(g.predecessors(br)[0]);
                if (!_$7.has(result, "barycenter")) {
                    result.barycenter = 0;
                    result.weight = 0;
                }
                result.barycenter = (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);
                result.weight += 2;
            }
        }
        return result;
    }
    function expandSubgraphs(entries, subgraphs) {
        _$7.forEach(entries, (function(entry) {
            entry.vs = _$7.flatten(entry.vs.map((function(v) {
                if (subgraphs[v]) {
                    return subgraphs[v].vs;
                }
                return v;
            })), true);
        }));
    }
    function mergeBarycenters(target, other) {
        if (!_$7.isUndefined(target.barycenter)) {
            target.barycenter = (target.barycenter * target.weight + other.barycenter * other.weight) / (target.weight + other.weight);
            target.weight += other.weight;
        } else {
            target.barycenter = other.barycenter;
            target.weight = other.weight;
        }
    }
    var _$6 = lodash_1;
    var Graph$5 = graphlib_1.Graph;
    var buildLayerGraph_1 = buildLayerGraph$1;
    function buildLayerGraph$1(g, rank, relationship) {
        var root = createRootNode(g), result = new Graph$5({
            compound: true
        }).setGraph({
            root: root
        }).setDefaultNodeLabel((function(v) {
            return g.node(v);
        }));
        _$6.forEach(g.nodes(), (function(v) {
            var node = g.node(v), parent = g.parent(v);
            if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {
                result.setNode(v);
                result.setParent(v, parent || root);
                _$6.forEach(g[relationship](v), (function(e) {
                    var u = e.v === v ? e.w : e.v, edge = result.edge(u, v), weight = !_$6.isUndefined(edge) ? edge.weight : 0;
                    result.setEdge(u, v, {
                        weight: g.edge(e).weight + weight
                    });
                }));
                if (_$6.has(node, "minRank")) {
                    result.setNode(v, {
                        borderLeft: node.borderLeft[rank],
                        borderRight: node.borderRight[rank]
                    });
                }
            }
        }));
        return result;
    }
    function createRootNode(g) {
        var v;
        while (g.hasNode(v = _$6.uniqueId("_root"))) ;
        return v;
    }
    var _$5 = lodash_1;
    var addSubgraphConstraints_1 = addSubgraphConstraints$1;
    function addSubgraphConstraints$1(g, cg, vs) {
        var prev = {}, rootPrev;
        _$5.forEach(vs, (function(v) {
            var child = g.parent(v), parent, prevChild;
            while (child) {
                parent = g.parent(child);
                if (parent) {
                    prevChild = prev[parent];
                    prev[parent] = child;
                } else {
                    prevChild = rootPrev;
                    rootPrev = child;
                }
                if (prevChild && prevChild !== child) {
                    cg.setEdge(prevChild, child);
                    return;
                }
                child = parent;
            }
        }));
    }
    var _$4 = lodash_1;
    var initOrder = initOrder_1;
    var crossCount = crossCount_1;
    var sortSubgraph = sortSubgraph_1;
    var buildLayerGraph = buildLayerGraph_1;
    var addSubgraphConstraints = addSubgraphConstraints_1;
    var Graph$4 = graphlib_1.Graph;
    var util$4 = util$a;
    var order_1 = order$1;
    function order$1(g) {
        var maxRank = util$4.maxRank(g), downLayerGraphs = buildLayerGraphs(g, _$4.range(1, maxRank + 1), "inEdges"), upLayerGraphs = buildLayerGraphs(g, _$4.range(maxRank - 1, -1, -1), "outEdges");
        var layering = initOrder(g);
        assignOrder(g, layering);
        var bestCC = Number.POSITIVE_INFINITY, best;
        for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {
            sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);
            layering = util$4.buildLayerMatrix(g);
            var cc = crossCount(g, layering);
            if (cc < bestCC) {
                lastBest = 0;
                best = _$4.cloneDeep(layering);
                bestCC = cc;
            }
        }
        assignOrder(g, best);
    }
    function buildLayerGraphs(g, ranks, relationship) {
        return _$4.map(ranks, (function(rank) {
            return buildLayerGraph(g, rank, relationship);
        }));
    }
    function sweepLayerGraphs(layerGraphs, biasRight) {
        var cg = new Graph$4;
        _$4.forEach(layerGraphs, (function(lg) {
            var root = lg.graph().root;
            var sorted = sortSubgraph(lg, root, cg, biasRight);
            _$4.forEach(sorted.vs, (function(v, i) {
                lg.node(v).order = i;
            }));
            addSubgraphConstraints(lg, cg, sorted.vs);
        }));
    }
    function assignOrder(g, layering) {
        _$4.forEach(layering, (function(layer) {
            _$4.forEach(layer, (function(v, i) {
                g.node(v).order = i;
            }));
        }));
    }
    var _$3 = lodash_1;
    var Graph$3 = graphlib_1.Graph;
    var util$3 = util$a;
    var bk = {
        positionX: positionX$1,
        findType1Conflicts: findType1Conflicts,
        findType2Conflicts: findType2Conflicts,
        addConflict: addConflict,
        hasConflict: hasConflict,
        verticalAlignment: verticalAlignment,
        horizontalCompaction: horizontalCompaction,
        alignCoordinates: alignCoordinates,
        findSmallestWidthAlignment: findSmallestWidthAlignment,
        balance: balance
    };
    function findType1Conflicts(g, layering) {
        var conflicts = {};
        function visitLayer(prevLayer, layer) {
            var k0 = 0, scanPos = 0, prevLayerLength = prevLayer.length, lastNode = _$3.last(layer);
            _$3.forEach(layer, (function(v, i) {
                var w = findOtherInnerSegmentNode(g, v), k1 = w ? g.node(w).order : prevLayerLength;
                if (w || v === lastNode) {
                    _$3.forEach(layer.slice(scanPos, i + 1), (function(scanNode) {
                        _$3.forEach(g.predecessors(scanNode), (function(u) {
                            var uLabel = g.node(u), uPos = uLabel.order;
                            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {
                                addConflict(conflicts, u, scanNode);
                            }
                        }));
                    }));
                    scanPos = i + 1;
                    k0 = k1;
                }
            }));
            return layer;
        }
        _$3.reduce(layering, visitLayer);
        return conflicts;
    }
    function findType2Conflicts(g, layering) {
        var conflicts = {};
        function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {
            var v;
            _$3.forEach(_$3.range(southPos, southEnd), (function(i) {
                v = south[i];
                if (g.node(v).dummy) {
                    _$3.forEach(g.predecessors(v), (function(u) {
                        var uNode = g.node(u);
                        if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {
                            addConflict(conflicts, u, v);
                        }
                    }));
                }
            }));
        }
        function visitLayer(north, south) {
            var prevNorthPos = -1, nextNorthPos, southPos = 0;
            _$3.forEach(south, (function(v, southLookahead) {
                if (g.node(v).dummy === "border") {
                    var predecessors = g.predecessors(v);
                    if (predecessors.length) {
                        nextNorthPos = g.node(predecessors[0]).order;
                        scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);
                        southPos = southLookahead;
                        prevNorthPos = nextNorthPos;
                    }
                }
                scan(south, southPos, south.length, nextNorthPos, north.length);
            }));
            return south;
        }
        _$3.reduce(layering, visitLayer);
        return conflicts;
    }
    function findOtherInnerSegmentNode(g, v) {
        if (g.node(v).dummy) {
            return _$3.find(g.predecessors(v), (function(u) {
                return g.node(u).dummy;
            }));
        }
    }
    function addConflict(conflicts, v, w) {
        if (v > w) {
            var tmp = v;
            v = w;
            w = tmp;
        }
        var conflictsV = conflicts[v];
        if (!conflictsV) {
            conflicts[v] = conflictsV = {};
        }
        conflictsV[w] = true;
    }
    function hasConflict(conflicts, v, w) {
        if (v > w) {
            var tmp = v;
            v = w;
            w = tmp;
        }
        return _$3.has(conflicts[v], w);
    }
    function verticalAlignment(g, layering, conflicts, neighborFn) {
        var root = {}, align = {}, pos = {};
        _$3.forEach(layering, (function(layer) {
            _$3.forEach(layer, (function(v, order) {
                root[v] = v;
                align[v] = v;
                pos[v] = order;
            }));
        }));
        _$3.forEach(layering, (function(layer) {
            var prevIdx = -1;
            _$3.forEach(layer, (function(v) {
                var ws = neighborFn(v);
                if (ws.length) {
                    ws = _$3.sortBy(ws, (function(w) {
                        return pos[w];
                    }));
                    var mp = (ws.length - 1) / 2;
                    for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {
                        var w = ws[i];
                        if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {
                            align[w] = v;
                            align[v] = root[v] = root[w];
                            prevIdx = pos[w];
                        }
                    }
                }
            }));
        }));
        return {
            root: root,
            align: align
        };
    }
    function horizontalCompaction(g, layering, root, align, reverseSep) {
        var xs = {}, blockG = buildBlockGraph(g, layering, root, reverseSep), borderType = reverseSep ? "borderLeft" : "borderRight";
        function iterate(setXsFunc, nextNodesFunc) {
            var stack = blockG.nodes();
            var elem = stack.pop();
            var visited = {};
            while (elem) {
                if (visited[elem]) {
                    setXsFunc(elem);
                } else {
                    visited[elem] = true;
                    stack.push(elem);
                    stack = stack.concat(nextNodesFunc(elem));
                }
                elem = stack.pop();
            }
        }
        function pass1(elem) {
            xs[elem] = blockG.inEdges(elem).reduce((function(acc, e) {
                return Math.max(acc, xs[e.v] + blockG.edge(e));
            }), 0);
        }
        function pass2(elem) {
            var min = blockG.outEdges(elem).reduce((function(acc, e) {
                return Math.min(acc, xs[e.w] - blockG.edge(e));
            }), Number.POSITIVE_INFINITY);
            var node = g.node(elem);
            if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {
                xs[elem] = Math.max(xs[elem], min);
            }
        }
        iterate(pass1, blockG.predecessors.bind(blockG));
        iterate(pass2, blockG.successors.bind(blockG));
        _$3.forEach(align, (function(v) {
            xs[v] = xs[root[v]];
        }));
        return xs;
    }
    function buildBlockGraph(g, layering, root, reverseSep) {
        var blockGraph = new Graph$3, graphLabel = g.graph(), sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);
        _$3.forEach(layering, (function(layer) {
            var u;
            _$3.forEach(layer, (function(v) {
                var vRoot = root[v];
                blockGraph.setNode(vRoot);
                if (u) {
                    var uRoot = root[u], prevMax = blockGraph.edge(uRoot, vRoot);
                    blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));
                }
                u = v;
            }));
        }));
        return blockGraph;
    }
    function findSmallestWidthAlignment(g, xss) {
        return _$3.minBy(_$3.values(xss), (function(xs) {
            var max = Number.NEGATIVE_INFINITY;
            var min = Number.POSITIVE_INFINITY;
            _$3.forIn(xs, (function(x, v) {
                var halfWidth = width(g, v) / 2;
                max = Math.max(x + halfWidth, max);
                min = Math.min(x - halfWidth, min);
            }));
            return max - min;
        }));
    }
    function alignCoordinates(xss, alignTo) {
        var alignToVals = _$3.values(alignTo), alignToMin = _$3.min(alignToVals), alignToMax = _$3.max(alignToVals);
        _$3.forEach([ "u", "d" ], (function(vert) {
            _$3.forEach([ "l", "r" ], (function(horiz) {
                var alignment = vert + horiz, xs = xss[alignment], delta;
                if (xs === alignTo) return;
                var xsVals = _$3.values(xs);
                delta = horiz === "l" ? alignToMin - _$3.min(xsVals) : alignToMax - _$3.max(xsVals);
                if (delta) {
                    xss[alignment] = _$3.mapValues(xs, (function(x) {
                        return x + delta;
                    }));
                }
            }));
        }));
    }
    function balance(xss, align) {
        return _$3.mapValues(xss.ul, (function(ignore, v) {
            if (align) {
                return xss[align.toLowerCase()][v];
            } else {
                var xs = _$3.sortBy(_$3.map(xss, v));
                return (xs[1] + xs[2]) / 2;
            }
        }));
    }
    function positionX$1(g) {
        var layering = util$3.buildLayerMatrix(g);
        var conflicts = _$3.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));
        var xss = {};
        var adjustedLayering;
        _$3.forEach([ "u", "d" ], (function(vert) {
            adjustedLayering = vert === "u" ? layering : _$3.values(layering).reverse();
            _$3.forEach([ "l", "r" ], (function(horiz) {
                if (horiz === "r") {
                    adjustedLayering = _$3.map(adjustedLayering, (function(inner) {
                        return _$3.values(inner).reverse();
                    }));
                }
                var neighborFn = (vert === "u" ? g.predecessors : g.successors).bind(g);
                var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);
                var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === "r");
                if (horiz === "r") {
                    xs = _$3.mapValues(xs, (function(x) {
                        return -x;
                    }));
                }
                xss[vert + horiz] = xs;
            }));
        }));
        var smallestWidth = findSmallestWidthAlignment(g, xss);
        alignCoordinates(xss, smallestWidth);
        return balance(xss, g.graph().align);
    }
    function sep(nodeSep, edgeSep, reverseSep) {
        return function(g, v, w) {
            var vLabel = g.node(v);
            var wLabel = g.node(w);
            var sum = 0;
            var delta;
            sum += vLabel.width / 2;
            if (_$3.has(vLabel, "labelpos")) {
                switch (vLabel.labelpos.toLowerCase()) {
                  case "l":
                    delta = -vLabel.width / 2;
                    break;

                  case "r":
                    delta = vLabel.width / 2;
                    break;
                }
            }
            if (delta) {
                sum += reverseSep ? delta : -delta;
            }
            delta = 0;
            sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;
            sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;
            sum += wLabel.width / 2;
            if (_$3.has(wLabel, "labelpos")) {
                switch (wLabel.labelpos.toLowerCase()) {
                  case "l":
                    delta = wLabel.width / 2;
                    break;

                  case "r":
                    delta = -wLabel.width / 2;
                    break;
                }
            }
            if (delta) {
                sum += reverseSep ? delta : -delta;
            }
            delta = 0;
            return sum;
        };
    }
    function width(g, v) {
        return g.node(v).width;
    }
    var _$2 = lodash_1;
    var util$2 = util$a;
    var positionX = bk.positionX;
    var position_1 = position$1;
    function position$1(g) {
        g = util$2.asNonCompoundGraph(g);
        positionY(g);
        _$2.forEach(positionX(g), (function(x, v) {
            g.node(v).x = x;
        }));
    }
    function positionY(g) {
        var layering = util$2.buildLayerMatrix(g);
        var rankSep = g.graph().ranksep;
        var prevY = 0;
        _$2.forEach(layering, (function(layer) {
            var maxHeight = _$2.max(_$2.map(layer, (function(v) {
                return g.node(v).height;
            })));
            _$2.forEach(layer, (function(v) {
                g.node(v).y = prevY + maxHeight / 2;
            }));
            prevY += maxHeight + rankSep;
        }));
    }
    var _$1 = lodash_1;
    var acyclic = acyclic$1;
    var normalize = normalize$1;
    var rank = rank_1;
    var normalizeRanks = util$a.normalizeRanks;
    var parentDummyChains = parentDummyChains_1;
    var removeEmptyRanks = util$a.removeEmptyRanks;
    var nestingGraph = nestingGraph$1;
    var addBorderSegments = addBorderSegments_1;
    var coordinateSystem = coordinateSystem$1;
    var order = order_1;
    var position = position_1;
    var util$1 = util$a;
    var Graph$2 = graphlib_1.Graph;
    var layout_1 = layout;
    function layout(g, opts) {
        var time = opts && opts.debugTiming ? util$1.time : util$1.notime;
        time("layout", (function() {
            var layoutGraph = time("  buildLayoutGraph", (function() {
                return buildLayoutGraph(g);
            }));
            time("  runLayout", (function() {
                runLayout(layoutGraph, time);
            }));
            time("  updateInputGraph", (function() {
                updateInputGraph(g, layoutGraph);
            }));
        }));
    }
    function runLayout(g, time) {
        time("    makeSpaceForEdgeLabels", (function() {
            makeSpaceForEdgeLabels(g);
        }));
        time("    removeSelfEdges", (function() {
            removeSelfEdges(g);
        }));
        time("    acyclic", (function() {
            acyclic.run(g);
        }));
        time("    nestingGraph.run", (function() {
            nestingGraph.run(g);
        }));
        time("    rank", (function() {
            rank(util$1.asNonCompoundGraph(g));
        }));
        time("    injectEdgeLabelProxies", (function() {
            injectEdgeLabelProxies(g);
        }));
        time("    removeEmptyRanks", (function() {
            removeEmptyRanks(g);
        }));
        time("    nestingGraph.cleanup", (function() {
            nestingGraph.cleanup(g);
        }));
        time("    normalizeRanks", (function() {
            normalizeRanks(g);
        }));
        time("    assignRankMinMax", (function() {
            assignRankMinMax(g);
        }));
        time("    removeEdgeLabelProxies", (function() {
            removeEdgeLabelProxies(g);
        }));
        time("    normalize.run", (function() {
            normalize.run(g);
        }));
        time("    parentDummyChains", (function() {
            parentDummyChains(g);
        }));
        time("    addBorderSegments", (function() {
            addBorderSegments(g);
        }));
        time("    order", (function() {
            order(g);
        }));
        time("    insertSelfEdges", (function() {
            insertSelfEdges(g);
        }));
        time("    adjustCoordinateSystem", (function() {
            coordinateSystem.adjust(g);
        }));
        time("    position", (function() {
            position(g);
        }));
        time("    positionSelfEdges", (function() {
            positionSelfEdges(g);
        }));
        time("    removeBorderNodes", (function() {
            removeBorderNodes(g);
        }));
        time("    normalize.undo", (function() {
            normalize.undo(g);
        }));
        time("    fixupEdgeLabelCoords", (function() {
            fixupEdgeLabelCoords(g);
        }));
        time("    undoCoordinateSystem", (function() {
            coordinateSystem.undo(g);
        }));
        time("    translateGraph", (function() {
            translateGraph(g);
        }));
        time("    assignNodeIntersects", (function() {
            assignNodeIntersects(g);
        }));
        time("    reversePoints", (function() {
            reversePointsForReversedEdges(g);
        }));
        time("    acyclic.undo", (function() {
            acyclic.undo(g);
        }));
    }
    function updateInputGraph(inputGraph, layoutGraph) {
        _$1.forEach(inputGraph.nodes(), (function(v) {
            var inputLabel = inputGraph.node(v);
            var layoutLabel = layoutGraph.node(v);
            if (inputLabel) {
                inputLabel.x = layoutLabel.x;
                inputLabel.y = layoutLabel.y;
                if (layoutGraph.children(v).length) {
                    inputLabel.width = layoutLabel.width;
                    inputLabel.height = layoutLabel.height;
                }
            }
        }));
        _$1.forEach(inputGraph.edges(), (function(e) {
            var inputLabel = inputGraph.edge(e);
            var layoutLabel = layoutGraph.edge(e);
            inputLabel.points = layoutLabel.points;
            if (_$1.has(layoutLabel, "x")) {
                inputLabel.x = layoutLabel.x;
                inputLabel.y = layoutLabel.y;
            }
        }));
        inputGraph.graph().width = layoutGraph.graph().width;
        inputGraph.graph().height = layoutGraph.graph().height;
    }
    var graphNumAttrs = [ "nodesep", "edgesep", "ranksep", "marginx", "marginy" ];
    var graphDefaults = {
        ranksep: 50,
        edgesep: 20,
        nodesep: 50,
        rankdir: "tb"
    };
    var graphAttrs = [ "acyclicer", "ranker", "rankdir", "align" ];
    var nodeNumAttrs = [ "width", "height" ];
    var nodeDefaults = {
        width: 0,
        height: 0
    };
    var edgeNumAttrs = [ "minlen", "weight", "width", "height", "labeloffset" ];
    var edgeDefaults = {
        minlen: 1,
        weight: 1,
        width: 0,
        height: 0,
        labeloffset: 10,
        labelpos: "r"
    };
    var edgeAttrs = [ "labelpos" ];
    function buildLayoutGraph(inputGraph) {
        var g = new Graph$2({
            multigraph: true,
            compound: true
        });
        var graph = canonicalize(inputGraph.graph());
        g.setGraph(_$1.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _$1.pick(graph, graphAttrs)));
        _$1.forEach(inputGraph.nodes(), (function(v) {
            var node = canonicalize(inputGraph.node(v));
            g.setNode(v, _$1.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));
            g.setParent(v, inputGraph.parent(v));
        }));
        _$1.forEach(inputGraph.edges(), (function(e) {
            var edge = canonicalize(inputGraph.edge(e));
            g.setEdge(e, _$1.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _$1.pick(edge, edgeAttrs)));
        }));
        return g;
    }
    function makeSpaceForEdgeLabels(g) {
        var graph = g.graph();
        graph.ranksep /= 2;
        _$1.forEach(g.edges(), (function(e) {
            var edge = g.edge(e);
            edge.minlen *= 2;
            if (edge.labelpos.toLowerCase() !== "c") {
                if (graph.rankdir === "TB" || graph.rankdir === "BT") {
                    edge.width += edge.labeloffset;
                } else {
                    edge.height += edge.labeloffset;
                }
            }
        }));
    }
    function injectEdgeLabelProxies(g) {
        _$1.forEach(g.edges(), (function(e) {
            var edge = g.edge(e);
            if (edge.width && edge.height) {
                var v = g.node(e.v);
                var w = g.node(e.w);
                var label = {
                    rank: (w.rank - v.rank) / 2 + v.rank,
                    e: e
                };
                util$1.addDummyNode(g, "edge-proxy", label, "_ep");
            }
        }));
    }
    function assignRankMinMax(g) {
        var maxRank = 0;
        _$1.forEach(g.nodes(), (function(v) {
            var node = g.node(v);
            if (node.borderTop) {
                node.minRank = g.node(node.borderTop).rank;
                node.maxRank = g.node(node.borderBottom).rank;
                maxRank = _$1.max(maxRank, node.maxRank);
            }
        }));
        g.graph().maxRank = maxRank;
    }
    function removeEdgeLabelProxies(g) {
        _$1.forEach(g.nodes(), (function(v) {
            var node = g.node(v);
            if (node.dummy === "edge-proxy") {
                g.edge(node.e).labelRank = node.rank;
                g.removeNode(v);
            }
        }));
    }
    function translateGraph(g) {
        var minX = Number.POSITIVE_INFINITY;
        var maxX = 0;
        var minY = Number.POSITIVE_INFINITY;
        var maxY = 0;
        var graphLabel = g.graph();
        var marginX = graphLabel.marginx || 0;
        var marginY = graphLabel.marginy || 0;
        function getExtremes(attrs) {
            var x = attrs.x;
            var y = attrs.y;
            var w = attrs.width;
            var h = attrs.height;
            minX = Math.min(minX, x - w / 2);
            maxX = Math.max(maxX, x + w / 2);
            minY = Math.min(minY, y - h / 2);
            maxY = Math.max(maxY, y + h / 2);
        }
        _$1.forEach(g.nodes(), (function(v) {
            getExtremes(g.node(v));
        }));
        _$1.forEach(g.edges(), (function(e) {
            var edge = g.edge(e);
            if (_$1.has(edge, "x")) {
                getExtremes(edge);
            }
        }));
        minX -= marginX;
        minY -= marginY;
        _$1.forEach(g.nodes(), (function(v) {
            var node = g.node(v);
            node.x -= minX;
            node.y -= minY;
        }));
        _$1.forEach(g.edges(), (function(e) {
            var edge = g.edge(e);
            _$1.forEach(edge.points, (function(p) {
                p.x -= minX;
                p.y -= minY;
            }));
            if (_$1.has(edge, "x")) {
                edge.x -= minX;
            }
            if (_$1.has(edge, "y")) {
                edge.y -= minY;
            }
        }));
        graphLabel.width = maxX - minX + marginX;
        graphLabel.height = maxY - minY + marginY;
    }
    function assignNodeIntersects(g) {
        _$1.forEach(g.edges(), (function(e) {
            var edge = g.edge(e);
            var nodeV = g.node(e.v);
            var nodeW = g.node(e.w);
            var p1, p2;
            if (!edge.points) {
                edge.points = [];
                p1 = nodeW;
                p2 = nodeV;
            } else {
                p1 = edge.points[0];
                p2 = edge.points[edge.points.length - 1];
            }
            edge.points.unshift(util$1.intersectRect(nodeV, p1));
            edge.points.push(util$1.intersectRect(nodeW, p2));
        }));
    }
    function fixupEdgeLabelCoords(g) {
        _$1.forEach(g.edges(), (function(e) {
            var edge = g.edge(e);
            if (_$1.has(edge, "x")) {
                if (edge.labelpos === "l" || edge.labelpos === "r") {
                    edge.width -= edge.labeloffset;
                }
                switch (edge.labelpos) {
                  case "l":
                    edge.x -= edge.width / 2 + edge.labeloffset;
                    break;

                  case "r":
                    edge.x += edge.width / 2 + edge.labeloffset;
                    break;
                }
            }
        }));
    }
    function reversePointsForReversedEdges(g) {
        _$1.forEach(g.edges(), (function(e) {
            var edge = g.edge(e);
            if (edge.reversed) {
                edge.points.reverse();
            }
        }));
    }
    function removeBorderNodes(g) {
        _$1.forEach(g.nodes(), (function(v) {
            if (g.children(v).length) {
                var node = g.node(v);
                var t = g.node(node.borderTop);
                var b = g.node(node.borderBottom);
                var l = g.node(_$1.last(node.borderLeft));
                var r = g.node(_$1.last(node.borderRight));
                node.width = Math.abs(r.x - l.x);
                node.height = Math.abs(b.y - t.y);
                node.x = l.x + node.width / 2;
                node.y = t.y + node.height / 2;
            }
        }));
        _$1.forEach(g.nodes(), (function(v) {
            if (g.node(v).dummy === "border") {
                g.removeNode(v);
            }
        }));
    }
    function removeSelfEdges(g) {
        _$1.forEach(g.edges(), (function(e) {
            if (e.v === e.w) {
                var node = g.node(e.v);
                if (!node.selfEdges) {
                    node.selfEdges = [];
                }
                node.selfEdges.push({
                    e: e,
                    label: g.edge(e)
                });
                g.removeEdge(e);
            }
        }));
    }
    function insertSelfEdges(g) {
        var layers = util$1.buildLayerMatrix(g);
        _$1.forEach(layers, (function(layer) {
            var orderShift = 0;
            _$1.forEach(layer, (function(v, i) {
                var node = g.node(v);
                node.order = i + orderShift;
                _$1.forEach(node.selfEdges, (function(selfEdge) {
                    util$1.addDummyNode(g, "selfedge", {
                        width: selfEdge.label.width,
                        height: selfEdge.label.height,
                        rank: node.rank,
                        order: i + ++orderShift,
                        e: selfEdge.e,
                        label: selfEdge.label
                    }, "_se");
                }));
                delete node.selfEdges;
            }));
        }));
    }
    function positionSelfEdges(g) {
        _$1.forEach(g.nodes(), (function(v) {
            var node = g.node(v);
            if (node.dummy === "selfedge") {
                var selfNode = g.node(node.e.v);
                var x = selfNode.x + selfNode.width / 2;
                var y = selfNode.y;
                var dx = node.x - x;
                var dy = selfNode.height / 2;
                g.setEdge(node.e, node.label);
                g.removeNode(v);
                node.label.points = [ {
                    x: x + 2 * dx / 3,
                    y: y - dy
                }, {
                    x: x + 5 * dx / 6,
                    y: y - dy
                }, {
                    x: x + dx,
                    y: y
                }, {
                    x: x + 5 * dx / 6,
                    y: y + dy
                }, {
                    x: x + 2 * dx / 3,
                    y: y + dy
                } ];
                node.label.x = node.x;
                node.label.y = node.y;
            }
        }));
    }
    function selectNumberAttrs(obj, attrs) {
        return _$1.mapValues(_$1.pick(obj, attrs), Number);
    }
    function canonicalize(attrs) {
        var newAttrs = {};
        _$1.forEach(attrs, (function(v, k) {
            newAttrs[k.toLowerCase()] = v;
        }));
        return newAttrs;
    }
    var _ = lodash_1;
    var util = util$a;
    var Graph$1 = graphlib_1.Graph;
    var debug = {
        debugOrdering: debugOrdering
    };
    function debugOrdering(g) {
        var layerMatrix = util.buildLayerMatrix(g);
        var h = new Graph$1({
            compound: true,
            multigraph: true
        }).setGraph({});
        _.forEach(g.nodes(), (function(v) {
            h.setNode(v, {
                label: v
            });
            h.setParent(v, "layer" + g.node(v).rank);
        }));
        _.forEach(g.edges(), (function(e) {
            h.setEdge(e.v, e.w, {}, e.name);
        }));
        _.forEach(layerMatrix, (function(layer, i) {
            var layerV = "layer" + i;
            h.setNode(layerV, {
                rank: "same"
            });
            _.reduce(layer, (function(u, v) {
                h.setEdge(u, v, {
                    style: "invis"
                });
                return v;
            }));
        }));
        return h;
    }
    var version = "0.8.5";
    var dagre = {
        graphlib: graphlib_1,
        layout: layout_1,
        debug: debug,
        util: {
            time: util$a.time,
            notime: util$a.notime
        },
        version: version
    };
    function styleInject(css, ref) {
        if (ref === void 0) ref = {};
        var insertAt = ref.insertAt;
        if (!css || typeof document === "undefined") {
            return;
        }
        var head = document.head || document.getElementsByTagName("head")[0];
        var style = document.createElement("style");
        style.type = "text/css";
        if (insertAt === "top") {
            if (head.firstChild) {
                head.insertBefore(style, head.firstChild);
            } else {
                head.appendChild(style);
            }
        } else {
            head.appendChild(style);
        }
        if (style.styleSheet) {
            style.styleSheet.cssText = css;
        } else {
            style.appendChild(document.createTextNode(css));
        }
    }
    var css_248z = "/* this gets exported as style.css and can be used for the default theming */\n/* these are the necessary styles for React Flow, they get used by base.css and style.css */\n.react-flow__container {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n}\n.react-flow__pane {\n  z-index: 1;\n  cursor: grab;\n}\n.react-flow__pane.selection {\n    cursor: pointer;\n  }\n.react-flow__pane.dragging {\n    cursor: grabbing;\n  }\n.react-flow__viewport {\n  transform-origin: 0 0;\n  z-index: 2;\n  pointer-events: none;\n}\n.react-flow__renderer {\n  z-index: 4;\n}\n.react-flow__selection {\n  z-index: 6;\n}\n.react-flow__nodesselection-rect:focus,\n.react-flow__nodesselection-rect:focus-visible {\n  outline: none;\n}\n.react-flow .react-flow__edges {\n  pointer-events: none;\n  overflow: visible;\n}\n.react-flow__edge-path,\n.react-flow__connection-path {\n  stroke: #b1b1b7;\n  stroke-width: 1;\n  fill: none;\n}\n.react-flow__edge {\n  pointer-events: visibleStroke;\n  cursor: pointer;\n}\n.react-flow__edge.animated path {\n    stroke-dasharray: 5;\n    animation: dashdraw 0.5s linear infinite;\n  }\n.react-flow__edge.animated path.react-flow__edge-interaction {\n    stroke-dasharray: none;\n    animation: none;\n  }\n.react-flow__edge.inactive {\n    pointer-events: none;\n  }\n.react-flow__edge.selected,\n  .react-flow__edge:focus,\n  .react-flow__edge:focus-visible {\n    outline: none;\n  }\n.react-flow__edge.selected .react-flow__edge-path,\n  .react-flow__edge:focus .react-flow__edge-path,\n  .react-flow__edge:focus-visible .react-flow__edge-path {\n    stroke: #555;\n  }\n.react-flow__edge-textwrapper {\n    pointer-events: all;\n  }\n.react-flow__edge-textbg {\n    fill: white;\n  }\n.react-flow__edge .react-flow__edge-text {\n    pointer-events: none;\n    -webkit-user-select: none;\n       -moz-user-select: none;\n            user-select: none;\n  }\n.react-flow__connection {\n  pointer-events: none;\n}\n.react-flow__connection.animated {\n    stroke-dasharray: 5;\n    animation: dashdraw 0.5s linear infinite;\n  }\n.react-flow__connectionline {\n  z-index: 1001;\n}\n.react-flow__nodes {\n  pointer-events: none;\n  transform-origin: 0 0;\n}\n.react-flow__node {\n  position: absolute;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  pointer-events: all;\n  transform-origin: 0 0;\n  box-sizing: border-box;\n  cursor: grab;\n}\n.react-flow__node.dragging {\n    cursor: grabbing;\n  }\n.react-flow__nodesselection {\n  z-index: 3;\n  transform-origin: left top;\n  pointer-events: none;\n}\n.react-flow__nodesselection-rect {\n    position: absolute;\n    pointer-events: all;\n    cursor: grab;\n  }\n.react-flow__handle {\n  position: absolute;\n  pointer-events: none;\n  min-width: 5px;\n  min-height: 5px;\n  width: 6px;\n  height: 6px;\n  background: #1a192b;\n  border: 1px solid white;\n  border-radius: 100%;\n}\n.react-flow__handle.connectable {\n    pointer-events: all;\n    cursor: crosshair;\n  }\n.react-flow__handle-bottom {\n    top: auto;\n    left: 50%;\n    bottom: -4px;\n    transform: translate(-50%, 0);\n  }\n.react-flow__handle-top {\n    left: 50%;\n    top: -4px;\n    transform: translate(-50%, 0);\n  }\n.react-flow__handle-left {\n    top: 50%;\n    left: -4px;\n    transform: translate(0, -50%);\n  }\n.react-flow__handle-right {\n    right: -4px;\n    top: 50%;\n    transform: translate(0, -50%);\n  }\n.react-flow__edgeupdater {\n  cursor: move;\n  pointer-events: all;\n}\n.react-flow__panel {\n  position: absolute;\n  z-index: 5;\n  margin: 15px;\n}\n.react-flow__panel.top {\n    top: 0;\n  }\n.react-flow__panel.bottom {\n    bottom: 0;\n  }\n.react-flow__panel.left {\n    left: 0;\n  }\n.react-flow__panel.right {\n    right: 0;\n  }\n.react-flow__panel.center {\n    left: 50%;\n    transform: translateX(-50%);\n  }\n.react-flow__attribution {\n  font-size: 10px;\n  background: rgba(255, 255, 255, 0.5);\n  padding: 2px 3px;\n  margin: 0;\n}\n.react-flow__attribution a {\n    text-decoration: none;\n    color: #999;\n  }\n@keyframes dashdraw {\n  from {\n    stroke-dashoffset: 10;\n  }\n}\n.react-flow__edgelabel-renderer {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n.react-flow__edge.updating .react-flow__edge-path {\n      stroke: #777;\n    }\n.react-flow__edge-text {\n    font-size: 10px;\n  }\n.react-flow__node.selectable:focus,\n  .react-flow__node.selectable:focus-visible {\n    outline: none;\n  }\n.react-flow__node-default,\n.react-flow__node-input,\n.react-flow__node-output,\n.react-flow__node-group {\n  padding: 10px;\n  border-radius: 3px;\n  width: 150px;\n  font-size: 12px;\n  color: #222;\n  text-align: center;\n  border-width: 1px;\n  border-style: solid;\n  border-color: #1a192b;\n  background-color: white;\n}\n.react-flow__node-default.selectable:hover, .react-flow__node-input.selectable:hover, .react-flow__node-output.selectable:hover, .react-flow__node-group.selectable:hover {\n      box-shadow: 0 1px 4px 1px rgba(0, 0, 0, 0.08);\n    }\n.react-flow__node-default.selectable.selected,\n    .react-flow__node-default.selectable:focus,\n    .react-flow__node-default.selectable:focus-visible,\n    .react-flow__node-input.selectable.selected,\n    .react-flow__node-input.selectable:focus,\n    .react-flow__node-input.selectable:focus-visible,\n    .react-flow__node-output.selectable.selected,\n    .react-flow__node-output.selectable:focus,\n    .react-flow__node-output.selectable:focus-visible,\n    .react-flow__node-group.selectable.selected,\n    .react-flow__node-group.selectable:focus,\n    .react-flow__node-group.selectable:focus-visible {\n      box-shadow: 0 0 0 0.5px #1a192b;\n    }\n.react-flow__node-group {\n  background-color: rgba(240, 240, 240, 0.25);\n}\n.react-flow__nodesselection-rect,\n.react-flow__selection {\n  background: rgba(0, 89, 220, 0.08);\n  border: 1px dotted rgba(0, 89, 220, 0.8);\n}\n.react-flow__nodesselection-rect:focus,\n  .react-flow__nodesselection-rect:focus-visible,\n  .react-flow__selection:focus,\n  .react-flow__selection:focus-visible {\n    outline: none;\n  }\n.react-flow__controls {\n  box-shadow: 0 0 2px 1px rgba(0, 0, 0, 0.08);\n}\n.react-flow__controls-button {\n    border: none;\n    background: #fefefe;\n    border-bottom: 1px solid #eee;\n    box-sizing: content-box;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 16px;\n    height: 16px;\n    cursor: pointer;\n    -webkit-user-select: none;\n       -moz-user-select: none;\n            user-select: none;\n    padding: 5px;\n  }\n.react-flow__controls-button:hover {\n      background: #f4f4f4;\n    }\n.react-flow__controls-button svg {\n      width: 100%;\n      max-width: 12px;\n      max-height: 12px;\n    }\n.react-flow__minimap {\n  background-color: #fff;\n}\n";
    styleInject(css_248z);
    const dagreGraph = new dagre.graphlib.Graph;
    dagreGraph.setDefaultEdgeLabel((() => ({})));
    const nodeWidth = 200;
    const nodeHeight = 200;
    function Graph({nodes: nodes, edges: edges, isShowCycleEdge: isShowCycleEdge = true, isSelectable: isSelectable = true, isDraggable: isDraggable = true, onNodeClick: onNodeClick, onNodeDragStart: onNodeDragStart, onNodeDragStop: onNodeDragStop}) {
        useReactFlow();
        const [layoutedNodes, setLayoutedNodes] = reactExports.useState([]);
        const [layoutedEdges, setLayoutedEdges] = reactExports.useState([]);
        const onNodesChange = reactExports.useCallback((changes => setLayoutedNodes((nds => applyNodeChanges(changes, nds)))), []);
        const onEdgesChange = reactExports.useCallback((changes => setLayoutedEdges((eds => applyEdgeChanges(changes, eds)))), []);
        const getLayoutedElements = (nodes, edges) => {
            let finalEdges = edges;
            dagreGraph.setGraph({
                rankdir: "LR",
                align: "UL"
            });
            nodes.forEach((node => {
                dagreGraph.setNode(node.id, {
                    width: nodeWidth,
                    height: nodeHeight
                });
            }));
            edges.forEach((edge => {
                dagreGraph.setEdge(edge.source, edge.target);
            }));
            if (!isShowCycleEdge) {
                const cycleList = dagre.graphlib.alg.findCycles(dagreGraph);
                for (let i = 0; i < cycleList.length; i++) {
                    const cycle = cycleList[i];
                    const begin = cycle[cycle.length - 1];
                    for (let j = 0; j < cycle.length - 1; j++) {
                        if (dagreGraph.hasEdge(cycle[j], begin)) {
                            dagreGraph.removeEdge(cycle[j], begin);
                            finalEdges = finalEdges.filter((edge => !(edge.source === cycle[j] && edge.target === begin)));
                        }
                    }
                }
            }
            dagre.layout(dagreGraph);
            nodes.forEach((node => {
                const nodeWithPosition = dagreGraph.node(node.id);
                node.targetPosition = Position.Left;
                node.sourcePosition = Position.Right;
                node.position = {
                    x: nodeWithPosition.x - nodeWidth / 2,
                    y: nodeWithPosition.y - nodeHeight / 2
                };
                return node;
            }));
            return {
                nodes: nodes,
                edges: finalEdges
            };
        };
        reactExports.useEffect((() => {
            const {nodes: ns, edges: es} = getLayoutedElements(nodes, edges);
            setLayoutedNodes(ns);
            setLayoutedEdges(es);
        }), [ nodes, edges ]);
        reactExports.useEffect((() => {
            if (!layoutedEdges.length) return;
        }), [ layoutedEdges ]);
        const style = {
            height: 350,
            width: "100%"
        };
        return jsxRuntimeExports.jsx("div", Object.assign({
            style: style
        }, {
            children: jsxRuntimeExports.jsx(ReactFlow, Object.assign({
                fitView: true,
                attributionPosition: "top-right",
                nodes: layoutedNodes,
                onNodesChange: onNodesChange,
                edges: layoutedEdges,
                onEdgesChange: onEdgesChange,
                defaultNodes: [],
                elementsSelectable: isSelectable,
                nodesDraggable: isDraggable,
                onNodeClick: isSelectable ? onNodeClick : undefined,
                onNodeDragStart: isDraggable ? onNodeDragStart : undefined,
                onNodeDragStop: isDraggable ? onNodeDragStop : undefined
            }, {
                children: jsxRuntimeExports.jsx(Controls$1, {})
            }))
        }));
    }
    const dateFormat = date => {
        const td = date.toISOString().split("T")[0];
        const t = date.toTimeString().split(" ")[0];
        return td + " " + t;
    };
    var reviewUserStatus;
    (function(reviewUserStatus) {
        reviewUserStatus["pass"] = "PASS";
        reviewUserStatus["fail"] = "FAIL";
        reviewUserStatus["yet"] = "YET";
    })(reviewUserStatus || (reviewUserStatus = {}));
    const reviewUserStatusMap = {
        [reviewUserStatus.yet]: "未審核",
        [reviewUserStatus.pass]: "審核通過",
        [reviewUserStatus.fail]: "審核不通過"
    };
    const Review = props => {
        var _a, _b;
        const isShowCycleEdge = props["showcycleedge"] ? JSON.parse(props["showcycleedge"]) : false;
        props["mappingstatus"] ? JSON.parse(props["mappingstatus"]) : [];
        props["mappingedge"] ? JSON.parse(props["mappingedge"]) : [];
        const isSelectable = props["isselectable"] ? JSON.parse(props["isselectable"]) : false;
        const isDraggable = props["isdraggable"] ? JSON.parse(props["isdraggable"]) : false;
        const onNodeClick = props["onnodeclick"] ? JSON.parse(props["onnodeclick"]) : null;
        const onNodeDragStart = props["onnodedragstart"] ? JSON.parse(props["onnodedragstart"]) : null;
        const onNodeDragStop = props["onnodedragstop"] ? JSON.parse(props["onnodedragstop"]) : null;
        const reviewId = props.reviewid;
        const secretKey = props.secretkey;
        const token = props.token;
        const [currentWorkflow, setCurrentWorkflow] = reactExports.useState();
        const [reviewData, setReviewData] = reactExports.useState();
        const [nodes, setNodes] = reactExports.useState([]);
        const [edges, setEdges] = reactExports.useState([]);
        const getGraph = () => __awaiter(void 0, void 0, void 0, (function*() {
            const {statuses: statuses = [], transitions: transitions = []} = currentWorkflow || {};
            const {nodes: nodes, edges: edges} = refineFlow(transitions, reviewData.status);
            setNodes(nodes);
            setEdges(edges);
        }));
        reactExports.useEffect((() => {
            const fetchReview = () => __awaiter(void 0, void 0, void 0, (function*() {
                const checkcode = getSign({}, secretKey);
                const res = yield fetch(`https://sit-smart-review.jkos.app/reviews/${reviewId}`, {
                    headers: {
                        token: token,
                        checkcode: checkcode
                    }
                }).then((x => x.json()));
                if (!res && res.ResultObject.workflowId) return;
                setReviewData(res.ResultObject);
                const workflowRes = yield fetch(`https://sit-smart-review.jkos.app/workflows/${res.ResultObject.workflowId}`, {
                    headers: {
                        token: token,
                        checkcode: checkcode
                    }
                }).then((x => x.json()));
                if (!workflowRes && workflowRes.ResultObject) return;
                setCurrentWorkflow(workflowRes.ResultObject);
            }));
            if (reviewId && secretKey && token) fetchReview();
        }), [ reviewId, secretKey, token, isShowCycleEdge ]);
        reactExports.useEffect((() => {
            if (!currentWorkflow || !reviewData) return;
            getGraph();
        }), [ currentWorkflow ]);
        return jsxRuntimeExports.jsxs("div", Object.assign({
            style: {
                width: "100%"
            }
        }, {
            children: [ jsxRuntimeExports.jsx("link", {
                rel: "stylesheet",
                href: "https://img.jkos.com.tw/reactflow/style/reactflow.css"
            }), jsxRuntimeExports.jsx("link", {
                href: "https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css",
                rel: "stylesheet"
            }), jsxRuntimeExports.jsx("div", Object.assign({
                className: "flex"
            }, {
                children: reviewData && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [ jsxRuntimeExports.jsxs("div", Object.assign({
                        className: "grow w-full border-r-2 pr-2 border-gray-200"
                    }, {
                        children: [ "現在審核狀態：", jsxRuntimeExports.jsx("span", Object.assign({
                            className: "font-bold"
                        }, {
                            children: reviewData === null || reviewData === void 0 ? void 0 : reviewData.status
                        })), nodes.length && edges.length && jsxRuntimeExports.jsx(ReactFlowProvider, {
                            children: jsxRuntimeExports.jsx(Graph, {
                                nodes: nodes,
                                edges: edges,
                                isShowCycleEdge: isShowCycleEdge,
                                isSelectable: isSelectable,
                                isDraggable: isDraggable,
                                onNodeClick: onNodeClick,
                                onNodeDragStart: onNodeDragStart,
                                onNodeDragStop: onNodeDragStop
                            })
                        }), !nodes.length || !edges.length && jsxRuntimeExports.jsx("div", {
                            children: "目前無 workflow"
                        }) ]
                    })), jsxRuntimeExports.jsx("div", Object.assign({
                        className: "flex-none w-1/4 flex flex-col divide-y divide-slate-700"
                    }, {
                        children: ((_a = reviewData === null || reviewData === void 0 ? void 0 : reviewData.timelines) === null || _a === void 0 ? void 0 : _a.length) && ((_b = reviewData === null || reviewData === void 0 ? void 0 : reviewData.timelines) === null || _b === void 0 ? void 0 : _b.map((({id: id, reviewUser: reviewUser, statusFrom: statusFrom, statusTo: statusTo, reviewUserStatus: reviewUserStatus, createdAt: createdAt}) => {
                            var _a;
                            return jsxRuntimeExports.jsxs("div", Object.assign({
                                className: "p-2 text-sm"
                            }, {
                                children: [ (_a = reviewUser.email.split("@")) === null || _a === void 0 ? void 0 : _a[0], " 在", " ", dateFormat(new Date(createdAt)), " ", statusFrom === null && "發起審核申請", statusFrom !== null && statusFrom === statusTo && `${reviewUserStatusMap[reviewUserStatus]}，並保持審核狀態 ${statusFrom}`, statusFrom !== null && statusFrom !== statusTo && `審核${reviewUserStatusMap[reviewUserStatus]}，並將審核狀態由 ${statusFrom} 改為 ${statusTo}` ]
                            }), id);
                        })))
                    })) ]
                })
            })) ]
        }));
    };
    Review.propTypes = {
        token: propTypesExports.string.isRequired,
        secretkey: propTypesExports.string.isRequired,
        reviewid: propTypesExports.string.isRequired,
        showcycleedge: propTypesExports.bool,
        mappingstatus: propTypesExports.array,
        mappingedge: propTypesExports.array,
        isselectable: propTypesExports.bool,
        isdraggable: propTypesExports.bool,
        onnodeclick: propTypesExports.func,
        onnodedragstart: propTypesExports.func,
        onnodedragstop: propTypesExports.func
    };
    const Workflow = props => {
        const transitions = props.transitions ? JSON.parse(props.transitions) : [];
        const isShowCycleEdge = props["showcycleedge"] ? JSON.parse(props["showcycleedge"]) : true;
        props["mappingstatus"] ? JSON.parse(props["mappingstatus"]) : [];
        props["mappingedge"] ? JSON.parse(props["mappingedge"]) : [];
        const isSelectable = props["isselectable"] ? JSON.parse(props["isselectable"]) : true;
        const isDraggable = props["isdraggable"] ? JSON.parse(props["isdraggable"]) : true;
        console.log(props);
        const onNodeClick = reactExports.useCallback((() => {
            var _a;
            return (_a = props["onnodeclick"]) !== null && _a !== void 0 ? _a : null;
        }), []);
        const onNodeDragStart = props["onnodedragstart"] ? JSON.parse(props["onnodedragstart"]) : null;
        const onNodeDragStop = props["onnodedragstop"] ? JSON.parse(props["onnodedragstop"]) : null;
        const [nodes, setNodes] = reactExports.useState([]);
        const [edges, setEdges] = reactExports.useState([]);
        const getGraph = () => __awaiter(void 0, void 0, void 0, (function*() {
            const {nodes: nodes, edges: edges} = refineFlow(transitions);
            setNodes(nodes);
            setEdges(edges);
        }));
        reactExports.useEffect((() => {
            if (transitions.length > 0) getGraph();
        }), [ transitions, isShowCycleEdge ]);
        return jsxRuntimeExports.jsxs("div", Object.assign({
            className: ""
        }, {
            children: [ jsxRuntimeExports.jsx("link", {
                rel: "stylesheet",
                href: "https://img.jkos.com.tw/reactflow/style/reactflow.css"
            }), jsxRuntimeExports.jsx(ReactFlowProvider, {
                children: jsxRuntimeExports.jsx(Graph, {
                    nodes: nodes,
                    edges: edges,
                    isShowCycleEdge: isShowCycleEdge,
                    isSelectable: isSelectable,
                    isDraggable: isDraggable,
                    onNodeClick: onNodeClick,
                    onNodeDragStart: onNodeDragStart,
                    onNodeDragStop: onNodeDragStop
                })
            }) ]
        }));
    };
    Workflow.propTypes = {
        transitions: propTypesExports.string.isRequired,
        showcycleedge: propTypesExports.string,
        mappingstatus: propTypesExports.array,
        mappingedge: propTypesExports.array,
        isselectable: propTypesExports.string,
        isdraggable: propTypesExports.string,
        onnodeclick: propTypesExports.func,
        onnodedragstart: propTypesExports.func,
        onnodedragstop: propTypesExports.func
    };
    const WebReview = w(Review, React, client, {
        shadow: "open"
    });
    const WebWorkflow = w(Workflow, React, client, {
        shadow: "open"
    });
    customElements.define("web-review", WebReview);
    customElements.define("web-workflow", WebWorkflow);
    class SmartReview {
        constructor() {}
        approveReview() {}
        init() {}
    }
    exports.WebReview = WebReview;
    exports.default = SmartReview;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
}));
//# sourceMappingURL=review-sdk.development.js.map
